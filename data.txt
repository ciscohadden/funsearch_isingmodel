{{"prompt":"","completion":"},
{"prompt":"can you generate me a deterministic algorithm for finding the minimum energy of the 2-dimensional Ising model on a grid of size N? 
The function should be called priority and should take inputs N (grid size), h (a N^2 matrix of magnetism at each site), and J (a 4 x N^2 matrix of the interaction between each site and its neighboring sites)","completion":"
def priority(N, h, J):
    priority = np.zeros((N**2,2))
    return(priority)
   
def priority(N, h, J):
    priority = []
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priority.append((h[i//N][i%N], 1))
        else:
            priority.append((h[N-1-i%N][i//N], -1))
    return priority

def priority(N, h, J):
    sum = (np.prod(J_new, 0) + h)
    priority = [sum, -sum]
    return(priority)

def priority(n, h, j):
    j_new = j.flatten()
    sum = (np.prod(j_new[0::2], 0) + h).flatten()
    priority = np.column_stack((sum, -sum))
    return(priority)

"}
}