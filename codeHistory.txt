0: def ising_ground_state(N, J):
    import numpy as np
    from scipy.optimize import minimize

    def energy(state):
        energy = 0
        for i in range(len(state)):
            for j in range(i+1, len(state)):
                energy -= J * state[i] * state[j]
        return energy

    def constraint(state):
        return sum(state)

    initial_state = np.random.choice([-1, 1], N)
    res = minimize(energy, initial_state, method="SLSQP", constraints={"type": "eq", "fun": constraint})
    ground_state = res.x
    min_energy = energy(ground_state)
    return ground_state, min_energy

1: def ising_ground_state(N, J):
    import numpy as np
    
    def energy(state, J):
        energy = 0
        for i in range(len(state)):
            for j in range(i+1, len(state)):
                energy += -J * state[i] * state[j]
        return energy
    
    # Initialize the ground state configuration
    ground_state = np.zeros(N)
    
    # Calculate the energy of the system with all spins up
    E_up = energy(np.ones(N), J)
    
    # Calculate the energy of the system with all spins down
    E_down = energy(np.zeros(N), J)
    
    # Choose the configuration with the lower energy as the ground state
    if E_up < E_down:
        ground_state = np.ones(N)
    else:
        ground_state = np.zeros(N)
    
    return ground_state, E_up if E_up < E_down else E_down

