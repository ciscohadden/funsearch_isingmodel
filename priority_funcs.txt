#score -7.731481481481539e-05
def priority(N,h,J):  # random generator
    priority = np.random.rand(N**2,2)
    return(priority)


#score -0.3420791666666656
def priority(N, h,J):
    priority = np.zeros((N**2,2))
    for i in range(N):
      for j in range(N):
        if h[i,j] > 0:
            priority[(i*N+j),0] = h[i,j]
        else:
            priority[(i*N+j),1] = -1*h[i,j]
    return(priority)


#score -0.001367438271604938
def priority(N, h,J):  # priorities are all 0 - sets all spins to -1
    priority = np.zeros((N**2,2))
    return(priority)


#score 0.34290787037036935
def priority(N,h,J):  #LLM written function - only one that actually works, no modification: 1.715
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities


#score 0.0005881172839506174
def priority(N, h, J):  # llm written function -  works with 3 characters of modification (score of -0.002)
    spin_config = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        for j in range(N):
            interaction = -2 * J[0][i][j] * spin_config[i][j]
            magnetism = h[i][j]
            priority = interaction + magnetism
            priorities.append([spin_config[i][j], -priority])
    
    return sorted(priorities, key=lambda x: x[1])


#score -0.02209552469135802
def priority(N,h,J): ## needs slight modification to work (J indexed wrong). Score -0.002
    spins = [[0 for _ in range(2)] for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            total_J = 0
            if i > 0:
                total_J += J[0][i-1][j]
            if i < N - 1:
                total_J += J[0][i+1][j]
            if j > 0:
                total_J += J[1][i][j-1]
            if j < N - 1:
                total_J += J[1][i][j+1]
            
            if h[i][j] > 0:
                spins[N*i+j][0] = np.exp(total_J) / (np.exp(total_J) + np.exp(-total_J))
                spins[N*i+j][1] = 1 - spins[N*i+j][0]
            else:
                spins[N*i+j][0] = 1 - np.exp(total_J) / (np.exp(total_J) + np.exp(-total_J))
                spins[N*i+j][1] = np.exp(total_J) / (np.exp(total_J) + np.exp(-total_J))
    
    return spins


#score -0.09313379629629634
def priority(N, h, J):  # with some modifications it gets to -0.461
    priorities = [[0.0, 0.0] for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            site_energy = -h[i][j]
            for dx in [-1, 0, 1]:
                for dy in [-1, 0, 1]:
                    if abs(dx) + abs(dy) == 1:
                        x, y = i + dx, j + dy
                        if 0 <= x < N and 0 <= y < N:
                            site_energy += J[int(h[i][j] * (h[x][y] - 2 * h[i][j])%2)][x][y]
            priorities[i*N+j][1] = site_energy
    return priorities


#score 0.22561188271604923
def priority(N, h, J):  # wrong dimensions for J, but other than that its 0.4209
    priorities = [[0 for _ in range(2)] for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            site_energy = -h[i][j]
            if i < N-1:
                site_energy += J[0][i+1][j] * h[i+1][j]
            if j < N-1:
                site_energy += J[1][i][j+1] * h[i][j+1]
            priorities[i*N+j][0] = site_energy
            priorities[i*N+j][1] = -site_energy
    
    return priorities


#score -0.0013427469135802472
def priority(N,h,J):  ## score -1.0365
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(2):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if sum(h[i]) > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities


#score -0.17881558641975334
def priority(N,h,J): ## score = 1.472
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = sum([state[k][j] for k in range(max(0,i-1),min(i+2,N))]) + sum([state[i][k] for k in range(max(0,j-1),min(j+2,N))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities

#-0.87823486328125
def priority(N,h,J):
    priorities = np.zeros((N**2, 2))

    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priorities[(i*N+j), 0] = np.sin(i*j)  # Unknown rule: sine product of site indices
            else:
                priorities[(i*N+j), 1] = -h[i][j]

    return priorities


#score -0.3420791666666656
def priority(N,h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities

#-1.717979248046875
def priority(N, h, J):
    priorities = np.zeros((N*N, 2))
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priorities[(i*N)+j, 0] = h[i][j]
            else:
                priorities[(i*N)+j, 1] = -1*h[i][j]
    
    return priorities


#score 0.043174845679012364
def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                total_spin = sum([J[1][(i+k)%N][(j+l)%N] if k % 2 == 1 and l % 2 == 1 else J[1][(i-k-1)%N][(j-l-1)%N] for k in range(-3,4) for l in range(-3,4)])
                priority[i*N+j] = [total_spin, 1]
            else:
                total_spin = sum([J[0][(i+k)%N][(j+l)%N] if k % 2 == 1 and l % 2 == 1 else J[0][(i-k-1)%N][(j-l-1)%N] for k in range(-3,4) for l in range(-3,4)])
                priority[i*N+j] = [-total_spin, -1]
    
    return priority


#score 0.014596450617283952
def priority(N, h, J):  # corrected algorithm
    priority = np.zeros((N**2,2)) 
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                total_spin = sum([h[(i+k)%N][j] if k % 2 == 1 else h[(i-k-1)%N][j] for k in range(-3,4)])
                priority[(i*N+j),0] = total_spin
            else:
                total_spin = sum([h[(i+k)%N][j] if k % 2 == 1 else -h[(i-k-1)%N][j] for k in range(-3,4)])
                priority[(i*N+j),1] = -total_spin

    return priority


#score -0.0010979938271604935
def priority(N,h,J):
    priority = np.zeros((N**2, 2))
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority[(i*3+j)%N,0] = h[i][j]
            else:
                priority[(i*3+j)%N,1] = -1*h[i][j]
    
    return priority


#score 1.0648148148148184e-05
def priority(N,h, J):
    priorities = []
    
    for i in range(N):
        total_spin = np.zeros((N,2), dtype=int)
        
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += spin
                
        for j in range(N):
            priority = np.sign(total_spin[j][0])
            
            if h[i][j] > 0:
                priorities.append((total_spin[j][0], priority))
            else:
                priorities.append((total_spin[j][0], -priority))
    
    return priorities


#score 0.32948287037036944
def priority(N,h,J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        total_spin = np.zeros((N,2), dtype=int)
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += spin
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]
        for j in range(N):
            priority[(i*N+j),0] = np.sign(priority_total[j][0])
            if h[i][j] > 0:
                priority[(i*N+j),1] = 1
            else:
                priority[(i*N+j),1] = -1
    return(priority)


#score 0.05238996913580249
def priority(N, h, J):
    priorities = []
    for i in range(N**2):
        total_spin = 0
        site1 = (i // N + ((i % N) - 1) // 2 - 1) % N
        site2 = (site1 + (i % N) % 2)
        total_spin += sum(h[site1][j] for j in range(N)) * 2
        if h[i//N, i%N] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return(priorities)


#score 0.14675354938271623
def priority(N, h,J):
    state = [[1 if h[i][j] > 0 else -1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((-1*total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities


#score -0.31878348765432046
def priority(N,h,J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority[(i*N+j), 0] = total_spin
            else:
                priority[(i*N+j), 1] = -total_spin
    return priority


#score 0.0622510802469136
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities


#score 0.34290787037036935
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, h[i][j]))
            else:
                priorities.append((total_spin, -h[i][j]))
    return priorities


#score 0.34290787037036935
def priority(N, h,J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):  # iterate over each site in the neighborhood
                site = ((i + (k-1)%2 - 1)) % N  # calculate the site using integer arithmetic operations
                total_spin += state[site][j]  # accumulate the spin values
            if h[i][j] > 0:
                priorities.append((total_spin, 1))  # add the priority to the list
            else:
                priorities.append((total_spin, -1))
    return priorities


#score 0.20482700617283975
def priority(N,h,J):
    priority = np.zeros((N**2,2))
    for i in range(N):
        for j in range(N):
            if h[i,j] > 0:
                priority[(i*N+j),1] = h[i,j]
            else:
                priority[(i*N+j),0] = -1*h[i,3-1-j]
    return(priority)


#score 0.34290787037036935
def priority(N, h, J):
    priority = []
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priority.append((h[i//N][i%N], 1))
        else:
            priority.append((h[N-1-i%N][i//N], -1))
    return priority


#score -0.001367438271604938
def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    return(priority)


#score -0.0005726851851851857
def priority(N, h, J):
    J_new = np.sum(J, axis=0)
    sum = (np.prod(J_new, 0) + h).T
    priority = [sum, -sum]
    return(np.array(priority).reshape(N**2, 2))


#score -0.3420791666666656
def priority(N, h, J):
    J_new = J.flatten()
    sum = (np.prod(J_new[0::2], 0) + h).flatten()
    priority = np.column_stack((sum, -sum))
    return(priority)


#score -0.0011794753086419752
def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    
    for i in range(N**2):
        sum_1 = np.sum(J[0][i:i+2])
        sum_2 = np.sum(J[1][i-N:i+1]) + np.sum(J[3][i-N:i+1])
        
        if h[i//N][i%N] > 0:
            priority[i] = [sum_1 - sum_2, sum_1 + sum_2]
        else:
            priority[i] = [-sum_1 + sum_2, -sum_1 - sum_2]
    
    return(priority)


#score -0.1729421296296299
def priority(N, h, J):
    priority_matrix = [[0, 1] for _ in range(N**2)]  
    for i in range(N**2):
        if i % N < N//2:
            if h[i//N][i%N] > 0:
                priority_matrix[i][0] += 1
            else:
                priority_matrix[i][1] += 1
        else:
            if h[N-1-i%N][i//N] > 0:
                priority_matrix[i][0] += 1
            else:
                priority_matrix[i][1] += 1
    return priority_matrix


