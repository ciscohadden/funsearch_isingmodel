#score: {'data2D.txt': -0.27106867283950575}
program:
def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]


#score: {'data2D.txt': -0.3431871913580236}
program:
def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]


#score: {'data2D.txt': -0.3431871913580236}
program:
def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]


#score: {'data2D.txt': -0.3431871913580236}
program:
def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]


#score: {'data2D.txt': -0.001367438271604938}
program:
def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = sum(state[i][j]*h[i][j] for i in range(N) for j in range(N))
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for k in range(N):
    site_nbr = (k + ((N-1)%2 - 1)) % N
    total_spin += sum(h[site_nbr][j] for j in range(N))
  if h[N//2][N//2] > 0:
    total_spin += 1
  else:
    total_spin -= 1
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]


#score: {'data2D.txt': -0.3431871913580236}
program:
def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = sum(state[i][j]*h[i][j] for i in range(N) for j in range(N))
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for k in range(4):
    if k == 0:
      site_nbr = lambda i,j: (i + ((j-1)%N - 1)) % N
    elif k == 1:
      site_nbr = lambda i,j: (i + ((j+1)%N - 1)) % N
    elif k == 2:
      site_nbr = lambda i,j: (i + ((i+1)%N - 1)) % N
    else:
      site_nbr = lambda i,j: (i + ((i-1)%N - 1)) % N
    for i in range(N):
      for j in range(N):
        total_spin += h[site_nbr(i,j)][j]
  if sum(sum(h[i][j] for j in range(N)) for i in range(N)) > 0:
    total_spin += 1
  else:
    total_spin -= 1
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin
    else:
      priority_total[i][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]


#score: {'data2D.txt': -0.00930077160493827}
program:
def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      total_spin[i*N+j][1] -= h[site_nbr][j]
  return [[x[0], x[1]] for x in total_spin]


#score: {'data2D.txt': 0.000797993827160493}
program:
def priority(N, h, J):
  priority_total = []
  for i in range(N**2):
    if (i//N)%2 == 0:
      total_spin = sum(h[i//N][j] for j in range(N))
    else:
      total_spin = -sum(h[(i-1)//N][j] for j in range(N))
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin, -total_spin])
    else:
      priority_total.append([-total_spin, total_spin])
  return priority_total


#score: {'data2D.txt': -0.3420791666666656}
program:
def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)


#score: {'data2D.txt': -0.3420791666666656}
program:
def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))


#score: {'data2D.txt': -0.3431871913580236}
program:
def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]


#score: {'data2D.txt': -0.3431871913580236}
program:
def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]


#score: {'data2D.txt': -0.001367438271604938}
program:
def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return [[x[0], x[1]] for x in priority_total]


#score: {'data2D.txt': -0.001367438271604938}
program:
def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for row in [row[:] for row in priority_total] for x in row]


#score: {'data2D.txt': -0.001367438271604938}
program:
def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]


#score: {'data2D.txt': -0.001367438271604938}
program:
def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]


#score: {'data2D.txt': -0.001367438271604938}
program:
def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = state[i][site_nbr]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]


#score: {'data2D.txt': -0.001367438271604938}
program:
def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin = 0
      
      if h[i][j] > 0:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          total_spin += h[site_nbr][j]
          
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
        
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          total_spin += h[site_nbr][j]
          
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  return [priority_total[i*N+j] for i in range(N) for j in range(N)]


#score: {'data2D.txt': -0.3431871913580236}
program:
def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return [[x[0], x[1]] for x in total_spin]


#score: {'data2D.txt': -0.001367438271604938}
program:
def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)


#score: {'data2D.txt': -0.0007541666666666669}
program:
def priority(N, h, J):
  priority = [[0, 0] for _ in range(N**2)]
  site_nbrs = [(i//N + ((i%N-1)%2 - 1)) % N for i in range(N**2)]
  magnetisms = [h[i//N][i%N] > 0 for i in range(N**2)]

  for i, (site_nbr, magnetism) in enumerate(zip(site_nbrs, magnetisms)):
    if magnetism:
      priority[i][1] += site_nbr
    else:
      priority[i][0] -= site_nbr

  return priority


#score: {'data2D.txt': -0.020511265432098764}
program:
def priority(N, h, J):
  priority_total = [[[0,0]]*N for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for sublist in priority_total for x in sublist]


#score: {'data2D.txt': -0.0019841049382716054}
program:
def priority(N, h, J):
  priority_total = np.zeros((N,N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(4)]
      magnetisms = [h[i//N][k%N] > 0 for k in range(4)]
      
      if sum(magnetisms) > 0:
        priority_total[i][j][0] += sum(site_nbrs)
        priority_total[i][j][1] -= sum(site_nbrs)
      else:
        priority_total[i][j][0] -= sum(site_nbrs)
        priority_total[i][j][1] += sum(site_nbrs)
  
  return priority_total.reshape(N**2, 2).tolist()


#score: {'data2D.txt': -0.3431871913580236}
program:
def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x, y] for x, y in total_spin]


#score: {'data2D.txt': 0.19623225308642003}
program:
def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    total_spin = [0, 0]
    for j in range(4):
      site_nbr = (i // N + ((j-1) % 2 - 1)) % N
      if h[site_nbr][i % N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
    priority_total = [float('-inf') for _ in range(2)]
    if h[i//N][i%N] > 0:
      priority_total[0] = total_spin[0]
      priority_total[1] = -1 * total_spin[1]
    else:
      priority_total[0] = -1 * total_spin[0]
      priority_total[1] = total_spin[1]
    priorities.append(priority_total)
  return priorities


#score: {'data2D.txt': -0.3420791666666656}
program:
def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2].reshape(-1, int(len(J_new)/2)), 1) + h).flatten()
  sum2 = (-np.prod(J_new[1::2].reshape(-1, int(len(J_new)/2)), 1)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)


#score: {'data2D.txt': -0.0012513888888888891}
program:
def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_spin = np.zeros((N,N))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin[i][j] = -1
      else:
        site_spin[i][j] = 1
  for k in range(N**2):
    site_nbr = (k//N + ((k%N-1)%N - N//2)) % N
    total_spin[k][0] += h[site_nbr][k%N]
    if h[k//N][k%N] > 0:
      total_spin[k][1] -= site_spin[k//N][k%N]
    else:
      total_spin[k][1] += site_spin[k//N][k%N]
  return [[x[0], x[1]] for x in total_spin]


#score: {'data2D.txt': -0.001367438271604938}
program:
def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%N - 1)) % N for j in range(3)]
    total_spin = [sum(h[site_nbr][i%N] for site_nbr in site_nbrs), 
           sum(-h[site_nbr][i%N] for site_nbr in site_nbrs)]
    if h[i//N][i%N] > 0:
      priority_total[i][1] -= total_spin[0]
      priority_total[i][0] += total_spin[1]
    else:
      priority_total[i][0] -= total_spin[0]
      priority_total[i][1] += total_spin[1]
  return [[x[0], x[1]] for x in priority_total]


#score: {'data2D.txt': -0.3420791666666656}
program:
def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)


#score: {'data2D.txt': -0.3431871913580236}
program:
def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= J[i*N+N*N:i*N+site_nbr*N, i%N].sum()
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += J[i*N+N*N:i*N+site_nbr*N, i%N].sum()
  return [[x[0], x[1]] for x in priority_total]


#score: {'data2D.txt': -0.001367438271604938}
program:
def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  site_nbrs = [(i//N + ((i%N-1)%2 - 1)) % N for i in range(N**2)]
  magnetisms = [h[i//N][i%N] > 0 for i in range(N**2)]

  for i, (site_nbr, magnetism) in enumerate(zip(site_nbrs, magnetisms)):
    if magnetism:
      priority_total[i][1] -= site_nbr
    else:
      priority_total[i][0] += site_nbr

  return [[x[0], x[1]] for x in priority_total]


#score: {'data2D.txt': 0.001705401234567901}
program:
def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr1 = (i//N + ((i%N-1)%N - 1)) % N
    site_nbr2 = (i//N + ((i%N+1)%N - 1)) % N
    if h[site_nbr1][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    if i >= N and site_nbr2 == (i-N)//N:
      continue
    elif h[site_nbr2][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x, -y] if x > y else [-x, y] for x, y in priority_total]


