#score: {'data2D.txt': -0.27106867283950575}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin = [x+1 for x in state[site]]
        priority_total[i*N+j] = [-np.sum(np.array(total_spin)), -np.sum(-np.array(total_spin))]
      else:
        total_spin = [x-1 for x in state[site]]
        priority_total[i*N+j] = [-np.sum(np.array(total_spin)), -np.sum(-np.array(total_spin))]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        state[site][j] += 1
        total_spin = [h[i][j], 1]
      else:
        state[site][j] -= 1
        total_spin = [h[i][j], -1]
      priority_total[i*N+j][total_spin[1]] += total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N))
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [0 for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N//2 - 1)%2 - 1)) % N
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[int(i//N)][i%N] > 0:
      site = (int(i//N) + ((i%N-1)%2 - 1)) % N
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      site = (int(i//N) + ((i%N-1)%2 - 1)) % N
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.16580756172839528}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') if i//N%2 == 0 else float('inf') for _ in range(2)] for i in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i][j] += 1
        priority_total[i*N+j] = [-total_spin[i][j], -sum([state[k][j] for k in range(N)])]
      else:
        total_spin[i][j] -= 1
        priority_total[i*N+j] = [sum([state[k][j] for k in range(N)]), -total_spin[i][j]]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N, N), dtype=int)
  for i in range(N):
    for k in range(3):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        total_spin[i][j] += h[site_nbr][j]
  priority_total = np.zeros((N**2, 2), dtype=float)
  for i in range(N**2):
    site = (i // N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_nbr = []
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.16580756172839528}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  
  priority_total = [[float('-inf') if i//N%2 == 0 else float('inf') for _ in range(2)] for i in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i][j] += 1
        priority_total[i*N+j] = [-total_spin[i][j], -sum([state[k][j] for k in range(N)])]
      else:
        total_spin[i][j] -= 1
        priority_total[i*N+j] = [sum([state[k][j] for k in range(N)]), -total_spin[i][j]]
  
  return priority_total




#score: {'data2D.txt': -0.0003408950617283957}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') if i//N%2 == 0 else float('inf') for _ in range(2)] for i in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
        total_spin[i][j] += sum([state[k][j] for k in range(N)])
        priority_total[i*N+j][0] = -total_spin[i][j]
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        total_spin[i][j] -= sum([state[k][j] for k in range(N)])
        priority_total[i*N+j][1] = -total_spin[i][j]
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -total_spin[i][0]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sums = [(np.prod(J_new[0::4], 0) + h).flatten(), (np.prod(J_new[1::4], 0) - h).flatten()]
  return np.column_stack((-sums[0], -sums[1]))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
  spin_config = np.zeros((N**2, 2), dtype=int)
  priority = np.array([[float('-inf') for _ in range(2)] for _ in range(N**2)])
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      spin_config[i*N+j] = [1 if h[site_nbr][j] > 0 else -1, 0]
      priority[i*N+j][0] = total_spin[i][j] if h[i][j] > 0 else -total_spin[i][j]
  for i in range(N**2):
    spin_config[i] = [np.argmax(spin_config[i])]
  return spin_config




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site = lambda i, j: (i + ((j-1)%2 - 1)) % N
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site(i, j)
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          priority_total[i*N+j][state[site_k][0]] += h[i][j]
      else:
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          if state[site_k][0] == 1:
            priority_total[i*N+j][1] -= h[i][j]
          elif state[site_k][0] == -1:
            priority_total[i*N+j][0] += h[i][j]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00036620370370370404}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        state[site].reverse()
        priority_total[i*N+j] = [sum(-np.array(state[site])), sum(np.array(state[site]))]
      else:
        state[site].reverse()
        priority_total[i*N+j] = [-sum(np.array(state[site])), -sum(-np.array(state[site]))]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin = [x+1 for x in state[site]]
        priority_total[i*N+j] = [-np.sum(np.array(total_spin)), -np.sum(-np.array(total_spin))]
        if site == (i + ((j-1)%N - N//2)) % N:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      else:
        total_spin = [x-1 for x in state[site]]
        priority_total[i*N+j] = [-np.sum(np.array(total_spin)), -np.sum(-np.array(total_spin))]
        if site == (i + ((j-1)%N - N//2)) % N:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.2689158950617281}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site = (i // N + ((i % N) - 1) % 2 - 1) % N
    if h[i//N][i%N] > 0:
      priorities.append([state[site][i%N] + 1, -state[site][i%N] - 1])
    else:
      priorities.append([-state[site][i%N] - 1, state[site][i%N] + 1])
  return(np.array(priorities))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for k in range(N):
    site_nbr = (k + ((N-1)%2 - 1)) % N
    for i in range(N):
      j = (i + (k%N - k//N)) % N
      total_spin = state[i][j]
      if h[i][j] > 0:
        priority_total[k*N+j][0] += 1
        priority_total[k*N+j][1] -= 1
      else:
        priority_total[k*N+j][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          priority_total[i*N+j][state[site_k][0]] += h[i][j]
      else:
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          if state[site_k][0] == 1:
            priority_total[i*N+j][1] -= h[i][j]
          elif state[site_k][0] == -1:
            priority_total[i*N+j][0] += h[i][j]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  sum_1 = (np.prod(J_flat[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_flat[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.flatten()
  sum_1 = (np.prod(J[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.010204166666666667}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.26315632716049353}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') if i//N%2 == 0 else float('inf') for _ in range(2)] for i in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i][j] += 1
        priority_total[i*N+j] = [-total_spin[i][j], sum([state[k][site] for k in range(N)])]
      else:
        total_spin[i][j] -= 1
        priority_total[i*N+j] = [sum([state[k][site] for k in range(N)]), -total_spin[i][j]]
  return priority_total




#score: {'data2D.txt': 0.20644984567901242}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') if i//N%2 == 0 else float('inf') for _ in range(2)] for i in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i][j] += sum([state[k][j] for k in range(N)]) * 2
        priority_total[i*N+j] = [-total_spin[i][j], -sum([state[k][j] for k in range(N)]*2)]
      else:
        total_spin[i][j] -= sum([state[k][j] for k in range(N)])
        priority_total[i*N+j] = [sum([state[k][j] for k in range(N)]), -total_spin[i][j]]
  return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
  
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i][j]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i][j]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -total_spin[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = ((np.prod(J_new[0::2], 0) + h)).flatten()
  sum2 = ((-np.prod(J_new[1::2], 0)) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.17042546296296324}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i + ((i//N)%2 - 1)) % N
    total_spin = [0, 0]
    if h[i//N][site_nbr] > 0:
      total_spin[1] -= 1
      total_spin[0] += 1
    else:
      total_spin[1] += 1
      total_spin[0] -= 1
    priority_total[i] = total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.26315632716049353}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  priority_total = np.zeros((N**2, 2), dtype=float)

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i][j] += 1
        priority_total[i*N+j] = [-total_spin[i][j], sum([state[k][site] for k in range(N)])]
      else:
        total_spin[i][j] -= 1
        priority_total[i*N+j] = [sum([state[k][site] for k in range(N)]), -total_spin[i][j]]

  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
  return [[x[0], x[1]] for x in np.reshape(total_spin, (-1, 2))]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::2], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  priority_total = np.zeros((N, N, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin[site][0]
      else:
        priority_total[i][j][1] = -total_spin[site][0]
        
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        
  return total_spin




#score: {'data2D.txt': -0.2689158950617281}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  total_spin = np.zeros((N, N))
  
  for i in range(N**2):
    site = (i // N + ((i % N) - 1) % 2 - 1) % N
    if h[i//N][i%N] > 0:
      priorities.append([state[site][i%N] + 1, -state[site][i%N] - 1])
      total_spin[i//N][i%N] += state[site][i%N]
    else:
      priorities.append([-state[site][i%N] - 1, state[site][i%N] + 1])
      total_spin[i//N][i%N] -= state[site][i%N]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][j] += 1
      else:
        total_spin[i][j] -= 1
  
  return np.array(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::2], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::2], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0019427469135802468}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          priority_total[i*N+j][state[site_k][0]] += h[i][j]
      else:
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          if state[site_k][0] == 1:
            priority_total[i*N+j][1] -= h[i][j]
          elif state[site_k][0] == -1:
            priority_total[i*N+j][0] += h[i][j]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0007155864197530866}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [0.0] * (N * N)
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          total_spin[site_k*N+site] += h[i][j]
      else:
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          if state[site_k][0] == 1:
            total_spin[site_k*N+site] -= h[i][j]
          elif state[site_k][0] == -1:
            total_spin[site_k*N+site] += h[i][j]

  return [[x, 1] if x > 0 else [-1, 0] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  sum1 = (np.prod(J_flat[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_flat[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return priority




#score: {'data2D.txt': 0.26315632716049353}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  priority_total = np.full((N**2, 2), -np.inf)
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i][j] += 1
        priority_total[i*N+j, 0] = -total_spin[i][j]
        priority_total[i*N+j, 1] = sum([state[k][site] for k in range(N)])
      else:
        total_spin[i][j] -= 1
        priority_total[i*N+j, 0] = sum([state[k][site] for k in range(N)])
        priority_total[i*N+j, 1] = -total_spin[i][j]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') if i//N%2 == 0 else float('inf') for _ in range(2)] for i in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][j] += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin[i][j] -= 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sums = [(np.prod(J_new[0::4], 0) + h).flatten(), (np.prod(J_new[1::4], 0) - h).flatten()]
  return np.column_stack((-sums[0], -sums[1]))




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [0 for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N//2 - 1)%2 - 1)) % N
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[int(i//N)][i%N] > 0:
      site = (int(i//N) + ((i%N-1)%2 - 1)) % N
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      site = (int(i//N) + ((i%N-1)%2 - 1)) % N
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.010363734567901236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]

  for k in range(3):
    site_nbr = (N//2 + ((k-1)%2 - 1)) % N
    for i in range(N):
      for j in range(N):
        if abs(i-site_nbr) <= 1 and abs(j-(N//2)) <= 1:
          priority_total[i*N+j] = [max(x[0], x[1]) for x in zip(priority_total[i*N+j], [-1*total_spin[i*N+j][0]] + [x[0] for x in J[k]])]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001656327160493827}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sums = [(np.prod(J_new[0::4], 0) + h).flatten(), (np.prod(J_new[1::4], 0) - h).flatten()]
  priorities = []
  for i in range(N**2):
    if np.prod([s for s in itertools.product([-1, 1], repeat=4)]) > 0:
      priorities.append(np.column_stack((-sums[0][i//N], -sums[1][i//N])))
    else:
      priorities.append(np.column_stack((sums[0][i//N], sums[1][i//N])))
  return np.concatenate(priorities)




#score: {'data2D.txt': -0.007382561728395061}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_nbr = []
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.22356990740740754}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N**2, 2))
  site_interactions = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        state[site][j] += 1
        total_spin[i*N+j, :] += [h[i][j], 1]
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          if state[site_k][0] == 1:
            site_interactions[i*N+j, 1] -= h[i][site_k]
          elif state[site_k][0] == -1:
            site_interactions[i*N+j, 0] += h[i][site_k]
      else:
        state[site][j] -= 1
        total_spin[i*N+j, :] += [h[i][j], -1]
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          if state[site_k][0] == 1:
            site_interactions[i*N+j, 1] -= h[i][site_k]
          elif state[site_k][0] == -1:
            site_interactions[i*N+j, 0] += h[i][site_k]
  
  return [[x[0], x[1]] for x in total_spin + site_interactions]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
  spin_config = np.zeros((N**2, 2), dtype=int)
  priority = np.array([[float('-inf') for _ in range(2)] for _ in range(N**2)])
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      spin_config[i*N+j] = [1 if h[site_nbr][j] > 0 else -1, 0]
      priority[i*N+j][0] = total_spin[i][j] if h[i][j] > 0 else -total_spin[i][j]
  for i in range(N**2):
    spin_config[i] = [np.argmax(spin_config[i])]
  return spin_config




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
  spin_config = np.zeros((N**2, 2), dtype=int)
  priority = np.array([[float('-inf') for _ in range(2)] for _ in range(N**2)])
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      spin_config[i*N+j] = [1 if h[site_nbr][j] > 0 else -1, 0]
      priority[i*N+j][0] = total_spin[i][j] if h[i][j] > 0 else -total_spin[i][j]
  for i in range(N**2):
    spin_config[i] = np.array([np.sign(np.sum(J[spin_config[i-1]]))])
  return spin_config




#score: {'data2D.txt': 0.22673009259259272}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        state[site][j] += 1
        total_spin[i*N+j, :] += [h[i][j], 1]
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          if state[site_k][0] == 1:
            total_spin[i*N+j, 1] -= h[i][site_k]
          elif state[site_k][0] == -1:
            total_spin[i*N+j, 0] += h[i][site_k]
      else:
        state[site][j] -= 1
        total_spin[i*N+j, :] += [h[i][j], -1]
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          if state[site_k][0] == 1:
            total_spin[i*N+j, 1] -= h[i][site_k]
          elif state[site_k][0] == -1:
            total_spin[i*N+j, 0] += h[i][site_k]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site = (i // N + ((i % N - 1) % N - N//2)) % N
    if h[i // N][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  for i in range(N**2):
    if total_spin[i][0] < total_spin[i][1]:
      total_spin[i][0], total_spin[i][1] = total_spin[i][1], -total_spin[i][0]
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site = (i // N + ((i % N) - 1)) % N
    if h[i//N][i%N] > 0:
      priorities.append([1, -1])
    else:
      priorities.append([-1, 1])
  return np.array(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N**2):
    site_nbr = (i + ((i//N)%2 - 1)) % N
    total_spin = [0, 0]
    if h[i//N][site_nbr] > 0:
      total_spin[1] -= 1
      total_spin[0] += 1
    else:
      total_spin[1] += 1
      total_spin[0] -= 1
    for k in range(2):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i//N][site] > 0:
        total_spin[k] += 1
      else:
        total_spin[k] -= 1
    state[i//N][i%N] += np.sign(total_spin).sum()
  
  return [[x[0], x[1]] for x in [(state[i][j], -1) for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2), dtype=float)
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.010204166666666667}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site = (i // N + ((i % N - 1) % N - N//2)) % N
    spin = -1 if h[i // N][i % N] > 0 else 1
    total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
            -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
            -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] * s for site, s in zip(site_nbrs, itertools.cycle([-1, 1])))
    total_spin[i][0] += spin_sum
    total_spin[i][1] -= spin_sum

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][1] = -total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0013362654320987657}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    if h[int(i/N)][i%N] > 0:
      total_spin[i][0] += 1
    else:
      total_spin[i][0] -= 1

    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = total_spin[i][1]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.34295972222222115}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0] * 2 for _ in range(N**2)]
  priority_total = [[float('-inf')] * 2 for _ in range(N**2)]

  def site_energy(site, spin):
    return sum(J[site][i//N][i%N]*spin[int(i/N)]*(1-2*sp[i%2]) for i in range(4) if abs(i-int(site/N)) <= 1 and (i-site) == 0)

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    total_spin[i][0] += sum(J[site][i//N][i%N]*(1-2*h[i//N][i%N]) for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][i//N][i%N]*(1+2*h[i//N][i%N]) for site in site_nbrs)

    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][1] = -total_spin[i][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0013362654320987657}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    if h[int(i/N)][i%N] > 0:
      total_spin[i][0] += 1
    else:
      total_spin[i][0] -= 1

    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = total_spin[i][1]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.047505092592592627}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin[i*N+j][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      if h[int(i/N)][i%N] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1

      if h[i][j] > 0:
        priority_total[i*N+j][0] = -total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -total_spin[i*N+j][1]
      else:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = total_spin[i*N+j][1]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    if h[int(i/N)][i%N] > 0:
      total_spin[i][0] += 1
    else:
      total_spin[i][0] -= 1

    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = total_spin[i][1]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0011189814814814812}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin[i*N+j][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      if h[int(i/N)][i%N] > 0:
        total_spin[i*N+j][1] -= len([site for site in site_nbrs if J[site][int(i/N)][i%N] > 0])
      else:
        total_spin[i*N+j][1] += len([site for site in site_nbrs if J[site][int(i/N)][i%N] < 0])
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  spin_config = [[-1 if np.random.rand() < 0.5 else 1 for _ in range(N)] for _ in range(N)]
  priorities = []
  total_spin = [0]*N
  for i in range(N*N):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i//N] += sum(J[site][i//N][i%N] * spin_config[site][int((site-i)%N)] for site in site_nbrs)
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[i//N], float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin[i//N]])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  state = {}
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin = [0, 0]
      priority_state = state.setdefault((i, j), [0, 0])
      for site in site_nbrs:
        if h[site][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          total_spin[0] += 1
          total_spin[1] -= 1
      if sum(1 for site in site_nbrs if h[site][j] > 0) > N//2:
        state.setdefault((i, j), [0, 0])[1] = 1
      else:
        state.setdefault((i, j), [0, 0])[1] = -1
  return priority_total




#score: {'data2D.txt': -0.0011189814814814812}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin[i*N+j][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      if h[int(i/N)][i%N] > 0:
        total_spin[i*N+j][1] -= len([site for site in site_nbrs if J[site][int(i/N)][i%N] > 0])
      else:
        total_spin[i*N+j][1] += len([site for site in site_nbrs if J[site][int(i/N)][i%N] < 0])
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0022486111111111114}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] * s for site, s in zip(site_nbrs, itertools.cycle([-1, 1])))
    total_spin[i][0] += spin_sum
    total_spin[i][1] -= spin_sum
  
  priority_total = np.array([[float('-inf'), float('-inf')] for _ in range(N**2)])
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] * s for site, s in zip(site_nbrs, itertools.cycle([-1, 1])))
    priority_total[i][0] += spin_sum
    if spin_sum > 0:
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0003637345679012345}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin[i*N+j][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      if h[int(i/N)][i%N] > 0:
        total_spin[i*N+j][1] -= len([site for site in site_nbrs if J[site][int(i/N)][i%N] > 0])
      else:
        total_spin[i*N+j][1] += len([site for site in site_nbrs if J[site][int(i/N)][i%N] < 0])
      if h[int(i/N)][i%N] * (total_spin[i*N+j][0] - N**2//4) > 0:
        total_spin[i*N+j][1] -= abs(total_spin[i*N+j][0]) // abs(h[int(i/N)][i%N])
      else:
        total_spin[i*N+j][1] += abs(total_spin[i*N+j][0]) // abs(h[int(i/N)][i%N])
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0011189814814814812}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin[i*N+j][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      if h[int(i/N)][i%N] > 0:
        total_spin[i*N+j][1] -= len([site for site in site_nbrs if J[site][int(i/N)][i%N] > 0])
      else:
        total_spin[i*N+j][1] += len([site for site in site_nbrs if J[site][int(i/N)][i%N] < 0])
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0011189814814814812}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin[i*N+j][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      if h[int(i/N)][i%N] > 0:
        total_spin[i*N+j][1] -= len([site for site in site_nbrs if J[site][int(i/N)][i%N] > 0])
      else:
        total_spin[i*N+j][1] += len([site for site in site_nbrs if J[site][int(i/N)][i%N] < 0])
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.33942330246913477}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  def update_spin(site):
    if site[1][0] > 0:
      return [site[1][0], 1]
    elif site[1][0] < 0:
      return [-site[1][0], -1]
    else:
      return site
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      elif h[i][j] < 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin[i*N+j][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      if h[int(i/N)][i%N] > 0:
        total_spin[i*N+j][1] -= len([site for site in site_nbrs if J[site][int(i/N)][i%N] > 0])
      else:
        total_spin[i*N+j][1] += len([site for site in site_nbrs if J[site][int(i/N)][i%N] < 0])
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.34295972222222115}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0] * 2 for _ in range(N**2)]
  priority_total = [[float('-inf')] * 2 for _ in range(N**2)]

  def site_energy(site, spin):
    return sum(J[site][i//N][i%N]*spin[int(i/N)]*(1-2*sp[i%2]) for i in range(4) if abs(i-int(site/N)) <= 1 and (i-site) == 0)

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    total_spin[i][0] += sum(J[site][i//N][i%N]*(1-2*h[i//N][i%N]) for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][i//N][i%N]*(1+2*h[i//N][i%N]) for site in site_nbrs)

    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][1] = -total_spin[i][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0011189814814814812}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin[i*N+j][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      if h[int(i/N)][i%N] > 0:
        total_spin[i*N+j][1] -= len([site for site in site_nbrs if J[site][int(i/N)][i%N] > 0])
      else:
        total_spin[i*N+j][1] += len([site for site in site_nbrs if J[site][int(i/N)][i%N] < 0])
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)

    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][1] = -total_spin[i][0]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)

    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][1] = -total_spin[i][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0007973765432098763}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)

    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][1] = -total_spin[i][0]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    spin_assignment = np.argmax(priority_total[i])
    total_spin[i][spin_assignment] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1-spin_assignment] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0003646604938271601}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  
  # Initialize priority queue with all possible spin assignments
  state = {}
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)

  # Iterate through priority queue and update spin assignments
  while state:
    min_priority = float('inf')
    min_site = None
    
    for i, (spin_assignment, priority) in enumerate(state.items()):
      if priority[0] < min_priority:
        min_priority = priority[0]
        min_site = i
      
      if priority[1] < -min_priority:
        min_priority = -priority[1]
        min_site = i
    
    site_nbrs = [(min_site + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(min_site/N)) <= 1 and (k-min_site) == 0]
    
    total_spin[min_site][spin_assignment] += sum(J[site][int(min_site/N)][min_site%N] for site in site_nbrs)
    total_spin[min_site][1-spin_assignment] -= sum(J[site][int(min_site/N)][min_site%N] for site in site_nbrs)

    # Remove updated spin assignment from priority queue
    del state[min_site]
    
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.2942942901234562}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] * s for site, s in zip(site_nbrs, itertools.cycle([-1, 1])))
    total_spin[i][0] += spin_sum
    if h[int(i/N)][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][1] += 1

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0003646604938271601}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  def update_priority(i):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] * s for site, s in zip(site_nbrs, itertools.cycle([-1, 1])))
    total_spin[i][0] += spin_sum
    total_spin[i][1] -= spin_sum

  def update_priority_total(i):
    if total_spin[i][0] > 0:
      priority_total[i][0] = -float('inf')
      priority_total[i][1] = float('inf')
    elif total_spin[i][0] < 0:
      priority_total[i][0] = float('inf')
      priority_total[i][1] = -float('inf')
    else:
      if total_spin[i][1] > 0:
        priority_total[i][0] = -float('inf')
        priority_total[i][1] = float('inf')
      elif total_spin[i][1] < 0:
        priority_total[i][0] = float('inf')
        priority_total[i][1] = -float('inf')

  for i in range(N**2):
    update_priority(i)
    update_priority_total(i)

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0007973765432098763}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)

    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][1] = -total_spin[i][0]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    spin_assignment = np.argmax(priority_total[i])
    total_spin[i][spin_assignment] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1-spin_assignment] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0007973765432098763}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)

    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][1] = -total_spin[i][0]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    spin_assignment = np.argmax(priority_total[i])
    total_spin[i][spin_assignment] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1-spin_assignment] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0003646604938271601}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  def calculate_priority(site, site_nbrs):
    spin_sum = sum(J[site][int(site/N)][site%N] for site in site_nbrs)
    if h[int(site/N)][site%N] > 0:
      return [spin_sum, -1]
    else:
      return [-spin_sum, 1]
  
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    
    priority = calculate_priority(i, site_nbrs)
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][1] = -total_spin[i][0]
    
  return np.array([[x[0], x[1]] for x in priority_total])




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  priority_total = np.array([[float('-inf'), float('-inf')] for _ in range(N**2)])
  
  def site_energy(site, spin):
    energy = 0
    for k in range(3):
      neighbor = (site + ((k-1)%2 - (k//2)*N - 1)) % N
      if h[neighbor][int(site/N)][site%N] > 0:
        energy += J[neighbor][int(site/N)][site%N] * spin
      else:
        energy -= J[neighbor][int(site/N)][site%N] * spin
    return energy
  
  def update_sites(spin):
    for i in range(N**2):
      site_energy_value = site_energy(i, spin[i])
      priority_total[i][0] += site_energy_value
      if site_energy_value > 0:
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  
  def update_spin():
    for i in range(N**2):
      if h[int(i/N)][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  
  def check_convergence():
    for i in range(N**2):
      if abs(total_spin[i][0]) > 0.5 or abs(total_spin[i][1]) > 0.5:
        return False
    return True
  
  spin = np.random.randint(2, size=(N**2))
  while not check_convergence():
    update_sites(spin)
    update_spin()
    for i in range(N**2):
      if total_spin[i][0] >= 0 and total_spin[i][1] > 0:
        spin[i] = -spin[i]
      elif total_spin[i][0] < 0 and total_spin[i][1] < 0:
        spin[i] = -spin[i]
  
  return np.array([[x[0], x[1]] for x in total_spin])




#score: {'data2D.txt': -0.3430569444444434}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  state = {}
  for i in range(N**2):
    if total_spin[i][0] > 0:
      state.setdefault((i//N, (i%N+((i//N-1)%2 - 1)) % N), [0, 0])[1] -= 1
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0013362654320987657}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    if h[int(i/N)][i%N] > 0:
      total_spin[i][0] += 1
    else:
      total_spin[i][0] -= 1

    priority_total[i][0], priority_total[i][1] = min((-total_spin[i][0], -total_spin[i][1]), (total_spin[i][0], total_spin[i][1]))

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  def compute_priority(i, j):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    priority = 2 * h[int(i/N)][i%N] - spin_sum
    return priority

  for i, j in itertools.product(range(N), range(N)):
    priority_total[i*N+j][0] = compute_priority(i, j)

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0013362654320987657}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  priority_total = np.full((N**2, 2), -np.inf)

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += np.sum([J[site][int(i/N)][i%N] for site in site_nbrs])
    if h[int(i/N)][i%N] > 0:
      total_spin[i][0] += 1
    else:
      total_spin[i][0] -= 1

    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = total_spin[i][1]

  return np.array([[x[0], x[1]] for x in priority_total])




#score: {'data2D.txt': -0.1709063271604933}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  def calculate_priority(site):
    if site % 2 == 0:
      return [-1*total_spin[site][0], float('-inf')] if h[int(site/N)][site%N] > 0 else [float('-inf'), total_spin[site][0]]
    else:
      return [float('-inf'), total_spin[site][0]] if h[int((site-1)//N)][(site-1)%N] > 0 else [-total_spin[site][0], float('-inf')]
  
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
  
  return [calculate_priority(i) for i in range(N**2)]




#score: {'data2D.txt': -0.0005152777777777776}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    total_spin[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)

    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][1] = -total_spin[i][0]

    for site in site_nbrs:
      if h[site][int(i/N)] > 0 and h[int(i/N)][i%N] > 0:
        total_spin[i][0] += J[site][int(i/N)][i%N]
        total_spin[i][1] -= J[site][int(i/N)][i%N]
      elif h[site][int(i/N)] < 0 and h[int(i/N)][i%N] > 0:
        total_spin[i][0] -= J[site][int(i/N)][i%N]
        total_spin[i][1] += J[site][int(i/N)][i%N]

    for site in site_nbrs:
      if h[site][int(i/N)] > 0 and h[int(i/N)][i%N] < 0:
        total_spin[i][0] -= J[site][int(i/N)][i%N]
        total_spin[i][1] += J[site][int(i/N)][i%N]
      elif h[site][int(i/N)] < 0 and h[int(i/N)][i%N] < 0:
        total_spin[i][0] += J[site][int(i/N)][i%N]
        total_spin[i][1] -= J[site][int(i/N)][i%N]

    if priority_total[i][0] > priority_total[i][1]:
      for site in site_nbrs:
        h[site][int(i/N)] += 2*J[site][int(i/N)][i%N]
        J[site][int(i/N)][i%N] = -h[site][int(i/N)]
    else:
      for site in site_nbrs:
        h[site][int(i/N)] -= 2*J[site][int(i/N)][i%N]
        J[site][int(i/N)][i%N] = -h[site][int(i/N)]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.00023564814814814827}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] * s for site, s in zip(site_nbrs, itertools.cycle([-1, 1])))
    total_spin[i][0] += spin_sum
    if spin_sum > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priority_total = np.array([[float('-inf'), float('-inf')] for _ in range(N**2)])
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] * s for site, s in zip(site_nbrs, itertools.cycle([-1, 1])))
    priority_total[i][0] += spin_sum
    if spin_sum > 0:
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return total_spin




#score: {'data2D.txt': -0.1709063271604933}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  state = {}
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  def calculate_priority(site):
    if site % 2 == 0:
      return [-1*total_spin[site][0], float('-inf')] if h[int(site/N)][site%N] > 0 else [float('-inf'), total_spin[site][0]]
    else:
      return [float('-inf'), total_spin[site][0]] if h[int((site-1)//N)][(site-1)%N] > 0 else [-total_spin[site][0], float('-inf')]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    priority_total[i] = calculate_priority(i)

  state = {}
  for i in range(N**2):
    if h[int(i/N)][i%N] > 0:
      total_spin[i][1] -= 1
      priority_total[i][0] += 1
    else:
      total_spin[i][1] += 1
      priority_total[i][0] -= 1

  for i in range(N**2):
    site_nbr = (i + ((i%N-1)%2 - 1)) % N
    if h[int(i/N)][i%N] > 0:
      total_spin[i][1] += 1
      priority_total[i][0] -= 1
    else:
      total_spin[i][1] -= 1
      priority_total[i][0] += 1

  for i in range(N**2):
    site_nbr = (i + ((i%N-1)%2 - 1)) % N
    if h[int(i/N)][i%N] > 0:
      total_spin[i][1] -= 1
      priority_total[i][0] += 1
    else:
      total_spin[i][1] += 1
      priority_total[i][0] -= 1

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)

  return priority_total




#score: {'data2D.txt': -0.004872067901234569}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin[i*N+j][0] += sum(J[site][int(i/N)][j] for site in site_nbrs)
      total_spin[i*N+j][1] -= sum(J[site][int(i/N)][j] for site in site_nbrs)
      if h[int(i/N)][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.02362206790123457}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      for site in site_nbrs:
        J[site][int(i/N)][j] = np.tanh(J[site][int(i/N)][j] + h[site][int(i/N)]*h[int(i/N)][j])
      total_spin[i*N+j][0] += sum(J[site][i][j] for site in site_nbrs)
      total_spin[i*N+j][1] -= sum(J[site][i][j] for site in site_nbrs)

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0013362654320987657}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    if h[int(i/N)][i%N] > 0:
      total_spin[i][0] += 1
    else:
      total_spin[i][0] -= 1

    priority_total[i][0], priority_total[i][1] = min((-total_spin[i][0], -total_spin[i][1]), (total_spin[i][0], total_spin[i][1]))

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = {}
  
  priorities = []
  
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[i][0], float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin[i][0]])
  
  return(priorities)




#score: {'data2D.txt': -0.0013362654320987657}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    if h[int(i/N)][i%N] > 0:
      total_spin[i][0] += 1
    else:
      total_spin[i][0] -= 1

    priority_total[i][0], priority_total[i][1] = min((-total_spin[i][0], -total_spin[i][1]), (total_spin[i][0], total_spin[i][1]))

  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    if h[int(i/N)][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

    priority_total[i][0], priority_total[i][1] = min((-total_spin[i][0], -total_spin[i][1]), (total_spin[i][0], total_spin[i][1]))

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0027020061728395073}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  def compute_priority(i, j):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    priority = 2 * h[int(i/N)][i%N] - spin_sum
    return [priority, priority]

  for i, j in itertools.product(range(N), range(N)):
    priority_total[i*N+j] = compute_priority(i, j)

  # Sort sites by priority and select spins based on magnetism
  sorted_sites = [x[1][0] if h[x[0]//N][x[0]%N] > 0 else -x[1][0] for x in sorted((x[0], x[1]) for x in enumerate(priority_total))]
  total_spin = [[int(2*s-1), int(s)] for s in sorted_sites]

  return total_spin




#score: {'data2D.txt': -0.0019384259259259266}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  def compute_priority(i, j):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    priority = 2 * h[int(i/N)][i%N] - spin_sum
    return priority

  def assign_spins(i, j):
    if priority_total[i*N+j][0] > 0:
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][1] += 1

  for i, j in itertools.product(range(N), range(N)):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    priority = compute_priority(i, j)
    priority_total[i*N+j][0] = priority
    if priority > 0:
      total_spin[i*N+j][0] += 1
    else:
      total_spin[i*N+j][0] -= 1
    assign_spins(i, j)

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0019384259259259266}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  def compute_priority(i, j):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    priority = 2 * h[int(i/N)][i%N] - spin_sum
    return [priority, priority]

  for i, j in itertools.product(range(N), range(N)):
    priority_total[i*N+j] = compute_priority(i, j)

  # Sort sites by priority and select spins based on magnetism
  sorted_sites = [(x[0], x[1][0] if h[x[0]//N][x[0]%N] > 0 else -x[1][0]) for x in sorted((x[0], x[1]) for x in enumerate(priority_total))]
  total_spin = [[int(2*s-1), int(s)] for s in [y[1] if h[y[0]//N][y[0]%N] > 0 else -y[1] for y in sorted_sites]]

  return total_spin




#score: {'data2D.txt': -0.00023564814814814827}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] * s for site, s in zip(site_nbrs, itertools.cycle([-1, 1])))
    total_spin[i][0] += spin_sum
    if spin_sum > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1

  priority_total = np.array([[float('-inf'), float('-inf')] for _ in range(N**2)])
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] * s for site, s in zip(site_nbrs, itertools.cycle([-1, 1])))
    priority_total[i][0] += spin_sum
    if spin_sum > 0:
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.00943935185185185}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  priority_total = np.array([[float('-inf'), float('-inf')] for _ in range(N**2)])
  
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    spin_sum = sum(J[site][int(i/N)][i%N] * s for site, s in zip(site_nbrs, itertools.cycle([-1, 1])))
    total_spin[i][0] += spin_sum
    total_spin[i][1] -= spin_sum
  
  for i in range(N**2):
    site_nbr = (i + ((int(i/N))%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3430569444444434}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    if i % (N*2) < N:
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    else:
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int((i-N*2)/N)) <= 1 and (k-(i-N*2)) == 0]
    
    total_spin[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    
    if h[int(i/N)][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  
  return [tuple(total_spin[i]) for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin[i*N+j] += np.sum([J[site][int(i/N)][j] for site in site_nbrs], axis=0)
      if h[int(i/N)][j] > 0:
        total_spin[i*N+j] += [1, -1]
      else:
        total_spin[i*N+j] -= [1, 1]
  return np.around(total_spin).astype(int)




#score: {'data2D.txt': -0.0015754629629629625}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = {}
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  priority_total = [[1, -1] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      for site in site_nbrs:
        total_spin[i*N+j][0] += J[site][int(i/N)][j]
        priority_total[i*N+j][0] -= 1
      if h[int(i/N)][j] > 0:
        for site in site_nbrs:
          state.setdefault(site, [0, 0])[1] -= 1
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
          priority_total[i*N+j][0] -= 2
      else:
        for site in site_nbrs:
          state.setdefault(site, [0, 0])[1] -= 1
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
          priority_total[i*N+j][0] -= 2
      return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = {}
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.17299305555555503}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if np.sum(total_spin[site]) > 0:
        total_spin[site][1] -= 1
      else:
        total_spin[site][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if np.sum(total_spin[site_nbr]) > 0:
        total_spin[site_nbr][1] -= 1
      else:
        total_spin[site_nbr][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      priorities.append([-total_spin[i][0], float('-inf')])
    else:
      priorities.append([float('-inf'), -total_spin[i][0]])
  return(priorities)




#score: {'data2D.txt': -0.01407145061728395}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priorities[i*N+j][0] += -J[0,i,j]*h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= J[1,i,j]
      else:
        priorities[i*N+j][0] -= J[2,i,j]
      for k in range(4):
        priorities[i*N+j][1] += -J[k,i,j]*interacting_spins[k,i,j]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N*N):
    if h[i//N][i%N] > 0:
      priorities.append([-h[i//N][i%N], float('-inf')])
    else:
      priorities.append([float('-inf'), -h[i//N][i%N]])
  return priorities




#score: {'data2D.txt': 0.018236882716049566}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  m = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        m[i*N+j][0] -= J[1,i,j]
        m[i*N+j][1] += 1
      else:
        m[i*N+j][0] += J[1,i,j]
        m[i*N+j][1] -= 1
      for k in range(4):
        if h[i,k] > 0:
          m[i*N+j][1] += -J[k,i,k]
        else:
          m[i*N+j][1] += J[k,i,k]
  return(m)




#score: {'data2D.txt': -0.29554521604938205}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[0,i,j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= J[0,i,j]
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[1,i,j]
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= J[1,i,j]
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[site_nbr][0] -= J[1,i,j]
        total_spin[site_nbr][1] += 1
      else:
        total_spin[site_nbr][0] += J[1,i,j]
        total_spin[site_nbr][1] -= 1
  return(total_spin)




#score: {'data2D.txt': -0.18654274691357972}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if np.sum(total_spin[site]) > 0:
        total_spin[site][1] -= 1
      else:
        total_spin[site][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0 or h[j][N-i-1] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  m = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      m[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        m[i*N+j][1] -= 1
      else:
        m[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      m[i*N+j][0] += J[1,i,j]
      if h[i][j] > 0:
        m[i*N+j][1] -= 1
      else:
        m[i*N+j][1] += 1
  return(m)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  priority_total = [[0, 0] for _ in range(N*N)]

  def initialize_state(site_nbr, i, j):
    total_spin[i*N+j][0] += h[site_nbr][j]
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][1] += 1

  def update_priority(i, j):
    site_nbr = (i + ((j-1)%2 - 1)) % N
    priority_total[i*N+j][0] += 1
    priority_total[i*N+j][1] -= 1
    if h[i][j] < 0:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
      priority_total[i*N+j][0] -= 1

  for i in range(N):
    for j in range(N):
      initialize_state((i + ((j-1)%2 - 1)) % N, i, j)
      if h[i][j] > 0:
        update_priority(i, j)

  return total_spin




#score: {'data2D.txt': 0.0011751543209876545}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  
  # Initialize all spins to zero
  for i in range(N):
    for j in range(N):
      if np.random.rand() < 0.5:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  # Update spin using priority algorithm
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if np.sum(total_spin[site]) > 0:
        total_spin[site][1] -= 1
      else:
        total_spin[site][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      priority_total = [0, 0]
      state = {}
      if np.sum(total_spin[site]) > 0:
        priority_total[0] += 1
        state.setdefault(site, [0, 0])[1] -= 1
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        priority_total[0] -= 1
      else:
        priority_total[0] += 1
        state.setdefault(site, [0, 0])[1] -= 1
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        priority_total[0] -= 1
      if np.sum(total_spin[site]) < 0:
        state.setdefault(site, [0, 0])[1] -= 1
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
        priority_total[0] += 1
      else:
        state.setdefault(site, [0, 0])[1] -= 1
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
        priority_total[0] += 1
  
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      energy = -h[site_nbr][j] * total_spin[site_nbr][0]
      if np.random.rand() < np.exp(-energy):
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.04126990740740722}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin = [h[site_nbr][j], 1]
        priority_total = [-1, -1]
      else:
        total_spin = [h[site_nbr][j], -1]
        priority_total = [1, 1]
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += J[k][site_nbr][j]
        if J[k][i][j] > 0:
          priority_total[0] += 1
          priority_total[1] -= 1
        else:
          priority_total[0] -= 1
      priorities[i*N+j, :] = [priority_total[0], -priority_total[1]]
  return priorities




#score: {'data2D.txt': -0.04126990740740722}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = [h[site_nbr][i%N], 1]
      priority_total = [-1, -1]
    else:
      total_spin = [h[site_nbr][i%N], -1]
      priority_total = [1, 1]
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      total_spin[0] += J[k][site_nbr][i%N]
      if J[k][i//N][i%N] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
    priorities = np.zeros((N*N, 2))
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        if h[i][j] > 0:
          total_spin = [h[site_nbr][j], 1]
          priority_total = [-1, -1]
        else:
          total_spin = [h[site_nbr][j], -1]
          priority_total = [1, 1]
        for k in range(4):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          total_spin[0] += J[k][site_nbr][j]
          if J[k][i][j] > 0:
            priority_total[0] += 1
            priority_total[1] -= 1
          else:
            priority_total[0] -= 1
        priorities[i*N+j, :] = [priority_total[0], -priority_total[1]]
    return priorities




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.0010418209876543211}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(N)] for _ in range(N)]
  priorities = []
  for i in range(N*N):
    if h[i//N][i%N] > 0:
      priorities.append([-1*total_spin[i//N][i%N], float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin[i//N][i%N]])
  return sorted(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if i == 0:
        site_nbr = (i + N - 1) % N
      elif i == N-1:
        site_nbr = (i - 1) % N
      else:
        site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      interaction_energy = 0
      for k in range(3):
        if h[(i + ((k-1)%2 - 1)) % N][j] > 0:
          interaction_energy += 1
        else:
          interaction_energy -= 1
      total_spin[i*N+j][0] += interaction_energy
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  priority_total = [[0 for _ in range(2)] for _ in range(N**2)]

  def assign_spins(i, j, k):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    total_spin[i*N+j][0] += h[site_nbr][j]
    if h[i][j] > 0:
      total_spin[i*N+j][0] += 1
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      priority_total[i*N+j][0] -= 1
      priority_total[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return total_spin




#score: {'data2D.txt': -0.19697546296296325}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  priority_total = [[0 for _ in range(2)] for _ in range(N**2)]

  def assign_spins(i, j, k):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] += 1
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      priority_total[i*N+j][0] -= 1
      priority_total[i*N+j][1] += 1

  for k in range(N):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1

  return total_spin




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  priority_total = [[0 for _ in range(2)] for _ in range(N**2)]

  def assign_spins(i, j):
    site_nbr = (i + ((j-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] += 1
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      priority_total[i*N+j][0] -= 1
      priority_total[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site][j]
      assign_spins(i, j)

  return total_spin




#score: {'data2D.txt': -0.0014504629629629626}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priorities[i*N+j][0] += -J[0,i,j]*(h[i,N-1-j]-h[i,site_nbr])
      priorities[i*N+j][0] += -J[1,i,j]*(h[N-1-i,site_nbr]-h[N-1-i,j])
  return(priorities)




#score: {'data2D.txt': -0.0013396604938271603}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = ((i + (j-1)%2 - 1) % N for i in range(N) for j in range(N))
  priorities = np.zeros((N*N, 2))

  for i in range(N):
    for j in range(N):
      total = np.array([0,0])
      for k in site_neighbors:
        if h[i,k] > 0:
          total[1] -= 1
        else:
          total[0] += 1
      priorities[i*N+j][0] = -total[0]
      priorities[i*N+j][1] = -total[1]

  return(priorities)




#score: {'data2D.txt': -0.19697546296296325}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for k in range(N):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
        else:
          total_spin[i*N+j][0] -= 1
  for k in range(N):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][0] > 0:
        total_spin[i*N+0][0] += 1
      else:
        total_spin[i*N+0][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.19697546296296325}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  priority_total = [[0 for _ in range(2)] for _ in range(N**2)]

  def assign_spins(i, j, k):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] += 1
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      priority_total[i*N+j][0] -= 1
      priority_total[i*N+j][1] += 1

  for k in range(N):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1

  return total_spin




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  priority_total = [[0 for _ in range(2)] for _ in range(N**2)]

  def assign_spins(i, j):
    site_nbr = (i + ((j-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] += 1
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      priority_total[i*N+j][0] -= 1
      priority_total[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site][j]
      assign_spins(i, j)

  # Start with a random spin configuration and iteratively update spins
  state = {k: [0, 0] for k in range(N**2)}
  priority = [[float('inf') for _ in range(2)] for _ in range(N**2)]

  def update_spins():
    for i, j in itertools.product(range(N), range(N)):
      site = (i + ((j-1)%2 - 1)) % N
      if h[site][j] > 0:
        priority[i*N+j][0] += 1
        priority[i*N+j][1] -= 1
      else:
        priority[i*N+j][0] -= 1
        priority[i*N+j][1] += 1

  update_spins()

  return total_spin




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  priority_total = [[0 for _ in range(2)] for _ in range(N**2)]

  def assign_spins(i, j):
    site_nbr = (i + ((j-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] += 1
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      priority_total[i*N+j][0] -= 1
      priority_total[i*N+j][1] += 1

  def improved_assign_spins(i, j):
    site_nbr = (i + ((j-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] += 1
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
      if priority_total[i*N+j][1] < -N**2/2:
        total_spin[i*N+j][1] = N**2/2
    else:
      total_spin[i*N+j][0] -= 1
      priority_total[i*N+j][0] -= 1
      priority_total[i*N+j][1] += 1
      if priority_total[i*N+j][1] > N**2/2:
        total_spin[i*N+j][1] = -N**2/2

    return min(total_spin[i*N+j])

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site][j]
      if improved_assign_spins(i, j) < min(total_spin[i*N+j]):
        assign_spins(i, j)

  return total_spin




#score: {'data2D.txt': -0.0014504629629629626}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += -J[0,i,j]*(h[i,N-1-j]-h[i,site_nbr])
        priorities[i*N+j][0] += -J[1,i,j]*(h[N-1-i,site_nbr]-h[N-1-i,j])
      else:
        priorities[i*N+j][0] -= J[0,i,j]*(h[i,N-1-j]-h[i,site_nbr])
        priorities[i*N+j][0] -= J[1,i,j]*(h[N-1-i,site_nbr]-h[N-1-i,j])
  return(priorities)




#score: {'data2D.txt': -0.06399336419753089}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if np.random.rand() < np.exp(h[site_nbr][j]):
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  priority_total = [[0 for _ in range(2)] for _ in range(N**2)]

  def assign_spins(i, j):
    site_nbr = (i + ((j-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] += 1
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      priority_total[i*N+j][0] -= 1
      priority_total[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site][j]
      assign_spins(i, j)

  return total_spin




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= 2*total_spin
  return priority_total.tolist()




#score: {'data2D.txt': 0.1393949074074076}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          if k % 2 == 0:
            total_spin += 1
          else:
            total_spin -= 1
        else:
          if k % 2 == 0:
            total_spin -= 1
          else:
            total_spin += 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.06360540123456794}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = np.sum(h[site_nbr])
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        if J[k][i][j] > 0:
          total_spin -= 2*(k % 2 - 0.5)
        else:
          total_spin += 2*(k % 2 - 0.5)
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.1393949074074076}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          if k % 2 == 0:
            total_spin += 1
          else:
            total_spin -= 1
        else:
          if k % 2 == 0:
            total_spin -= 1
          else:
            total_spin += 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.07062608024691366}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          if k == 0 or k == 3:
            total_spin += 1
          else:
            total_spin -= 1
        else:
          if k == 0 or k == 3:
            total_spin -= 1
          else:
            total_spin += 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.1393949074074076}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          if k % 2 == 0:
            total_spin += 1
          else:
            total_spin -= 1
        else:
          if k % 2 == 0:
            total_spin -= 1
          else:
            total_spin += 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  site_nbr = lambda i, j: (i + ((j-1)%2 - 1)) % N
  for i in range(N):
    for j in range(N):
      total_spin[i][j][0] += h[site_nbr(i, j)][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[h[i][j], -h[i][j]] for i in range(N) for j in range(N)]
  for k in range(4):
    for i in range(N):
      for j in range(N):
        if (k == 0 and j > 0) or (k == 1 and i < N-1) or (k == 2 and j < N-1) or (k == 3 and i > 0):
          priorities[i*N+j][0] += -J[k][i][j]*h[(i+((k-1)%2-1))%N][j]
          priorities[i*N+j][1] -= J[k][i][j]*h[(i+((k-1)%2-1))%N][j]
  return(priorities)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j], 0]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i,j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i,j][1] -= 1
      else:
        total_spin[i,j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N**2,2))
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      
  return priority_total




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return(total_spin)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return(total_spin)




#score: {'data2D.txt': 0.11076589506172853}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i//N][i%N][0] += 1
      total_spin[i//N][i%N][1] -= 1
    else:
      total_spin[i//N][i%N][0] -= 1
  for i in range(N):
    for j in range(N):
      if total_spin[i][j][0] > 0:
        priority_total[i*N+j][0] = total_spin[i][j][0]
        priority_total[i*N+j][1] = -total_spin[i][j][1]
      elif total_spin[i][j][0] < 0:
        priority_total[i*N+j][0] = -total_spin[i][j][0]
        priority_total[i*N+j][1] = total_spin[i][j][1]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    for k in range(3):
      site = (i // N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    if total_spin[0] > 0:
      priority_total[i//N*N+i%N][0] = total_spin[0]
      priority_total[i//N*N+i%N][1] = -total_spin[1]
    elif total_spin[0] < 0:
      priority_total[i//N*N+i%N][0] = -total_spin[0]
      priority_total[i//N*N+i%N][1] = total_spin[1]
  return priority_total




#score: {'data2D.txt': 0.11076589506172853}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i//N][i%N][0] += 1
      total_spin[i//N][i%N][1] -= 1
    else:
      total_spin[i//N][i%N][0] -= 1
  for i in range(N):
    for j in range(N):
      if total_spin[i][j][0] > 0:
        priority_total[i*N+j][0] = total_spin[i][j][0]
        priority_total[i*N+j][1] = -total_spin[i][j][1]
      elif total_spin[i][j][0] < 0:
        priority_total[i*N+j][0] = -total_spin[i][j][0]
        priority_total[i*N+j][1] = total_spin[i][j][1]
  return priority_total




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i//N*N+i%N][0] += 1
      priority_total[i//N*N+i%N][1] -= 1
    else:
      priority_total[i//N*N+i%N][0] -= 1
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.049481018518518556}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i,j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i,j][1] -= 1
      else:
        total_spin[i,j][1] += 1
      
  priority_total = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += total_spin[i//N][i%N][0]
      priority_total[i][1] -= total_spin[i//N][i%N][1]
    else:
      priority_total[i][0] -= total_spin[i//N][i%N][0]
      priority_total[i][1] += total_spin[i//N][i%N][1]
      
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = np.array([0,-1])
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][i%N] > 0:
          total_spin += [1,-1]
        else:
          total_spin -= [1,1]
      priority_total[i] = total_spin
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N,N,2)) 
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total=np.zeros((N*N,2)) 
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.23212947530864195}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return total_spin.tolist()




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2)) 
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total = np.zeros((N*N,2))
        for k in range(N):
          site = (i + ((k-1)%2 - 1)) % N
          if h[site][j] > 0:
            priority_total += 1
          else:
            priority_total -= 1
        return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2)) 
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total=np.zeros((N*N,2)) 
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.19698256172839457}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i,j in itertools.product(range(N),range(N)):
    site_nbr = (i + ((j-1)%2 - 1)) % N
    total_spin[i*N+j][0] += h[site_nbr][j]
    if h[i][j] > 0:
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1

  return(total_spin)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2)) 
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return(total_spin)




#score: {'data2D.txt': -0.10307947530864209}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    site_nbr = (i + ((i-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(2):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return total_spin




#score: {'data2D.txt': -0.0010810185185185187}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2)) 
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N, 2))
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if J[k][site_nbr][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
      return(priority_total)
  return(total_spin)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    for k in range(4):
      site = (i // N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    priority_total[i//N*N+i%N][0] = total_spin[0]
    priority_total[i//N*N+i%N][1] = -total_spin[1]
  return priority_total




#score: {'data2D.txt': 0.1393949074074076}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          if k % 2 == 0:
            total_spin += 1
          else:
            total_spin -= 1
        else:
          if k % 2 == 0:
            total_spin -= 1
          else:
            total_spin += 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.14762422839506173}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return np.array([[sum([J[k][i][j]*(-1)**k for k in range(4)]), sum([J[k][i][j] for k in range(4)])] for i in range(N) for j in range(N)])




#score: {'data2D.txt': 0.07062608024691366}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          if k == 0 or k == 3:
            total_spin += 1
          else:
            total_spin -= 1
        else:
          if k == 0 or k == 3:
            total_spin -= 1
          else:
            total_spin += 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.14017762345679027}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        if J[k][i][j] > 0:
          if k == 0 or k == 3:
            total_spin += 1
          else:
            total_spin -= 1
        else:
          if k == 0 or k == 3:
            total_spin -= 1
          else:
            total_spin += 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.1739313271604933}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          if k == 0 or k == 3:
            total_spin += 1
          else:
            total_spin -= 1
        else:
          if k == 0 or k == 3:
            total_spin -= 1
          else:
            total_spin += 1
      for l in range(4):
        site = (i + ((l-1)%2 - 1)) % N
        if J[l][site_nbr][j] > 0:
          if l == 0 or l == 3:
            total_spin -= 1
          else:
            total_spin += 1
        else:
          if l == 0 or l == 3:
            total_spin += 1
          else:
            total_spin -= 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.array([0,-1])
    for k in range(4):
      if k == 0:
        j = (i % N)
      elif k == 1:
        j = ((i%N)+1)%N
      elif k == 2:
        j = (i//N) % N
      else:
        j = (i//N + ((i%N)-1)//N - 1) % N
      if h[site_nbr][j] > 0:
        total_spin += [1,-1]
      else:
        total_spin -= [1,1]
    priority_total[i] = total_spin
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  # Iterate over all sites in the grid
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    # Calculate the total spin at this site
    total_spin = np.array([0, 0])
    
    # Iterate over all neighboring sites
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      
      # Add or subtract from the total spin based on the magnetism and interaction at this site
      if h[site_nbr][i%N] > 0:
        total_spin += [1, -1]
      else:
        total_spin -= [1, 1]
    
    priority_total[i] = total_spin
  
  return priority_total




#score: {'data2D.txt': -0.0014319444444444449}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.array([0 if j==i else h[site_nbr][j] for j in range(N)])
    for k in range(4):
      site = (i + ((k%2)*((i//N)+k)//N - 1)) % N
      total_spin += J[(((site-N)**2) if i%N==0 else 0)+((site-N)%N)][i] if abs(site-i)<1 else 0
    priority_total[i][0] = np.sum(np.where(total_spin>0,1,-1))
    priority_total[i][1] = -np.sum(np.where(total_spin<0,1,-1))
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[h[i][j],0] for i in range(N) for j in range(N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(4):
      site = (i + ((k%2)*((i//N)+k)//N - 1)) % N
      total_spin[i][0] += J[(((site-N)**2) if i%N==0 else 0)+(site-N)%N][i] if abs(site-i)<1 else 0
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.array([0, 0])
    
    for k in range(4):
      if k == 3:
        j = (i // N + ((i%N-1)%2 - 1)) % N
      else:
        j = (i % N + ((k-1)%2 - 1)) % N
        
      if h[site_nbr][j] > 0:
        total_spin += [1, -1]
      else:
        total_spin -= [1, 1]
    
    priority_total[i] = total_spin
  
  return priority_total




#score: {'data2D.txt': 0.12318966049382729}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        for k in range(4):
          if J[k][i][j] > 0:
            priorities[i*N+j][1] -= 1
          else:
            priorities[i*N+j][1] += 1
      elif h[site_nbr][j] < 0:
        for k in range(4):
          if J[k][i][j] > 0:
            priorities[i*N+j][1] += 1
          else:
            priorities[i*N+j][1] -= 1
  return(priorities)




#score: {'data2D.txt': -0.05988441358024687}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in [(i, j-1), (i, j+1), (i-1, j), (i+1, j)]:
        if k[0] >= 0 and k[0] < N and k[1] >= 0 and k[1] < N:
          if J[0][k[0]][k[1]] > 0:
            total_spin += 1
          else:
            total_spin -= 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.0007069444444444445}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(4):
      site = (i + ((k%2)*((i//N)+k)//N - 1)) % N
      total_spin[i][0] += h[site_nbr][site]
      if h[site_nbr][site] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
  return total_spin.reshape(N*N, 2)




#score: {'data2D.txt': -0.0014319444444444449}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.array([0 if j==i else h[site_nbr][j] for j in range(N)])
    for k in range(4):
      site = (i + ((k%2)*((i//N)+k)//N - 1)) % N
      total_spin += J[(((site-N)**2) if i%N==0 else 0)+((site-N)%N)][i] if abs(site-i)<1 else 0
    priority_total[i][0] = np.sum(np.where(total_spin>0,1,-1))
    priority_total[i][1] = -np.sum(np.where(total_spin<0,1,-1))
  return priority_total




#score: {'data2D.txt': -0.0014319444444444449}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.array([0 if j==i else h[site_nbr][j] for j in range(N)])
    for k in range(4):
      site = (i + ((k%2)*((i//N)+k)//N - 1)) % N
      total_spin += J[(((site-N)**2) if i%N==0 else 0)+((site-N)%N)][i] if abs(site-i)<1 else 0
    priority_total[i][0] = np.sum(np.where(total_spin>0,1,-1))
    priority_total[i][1] = -np.sum(np.where(total_spin<0,1,-1))
  return priority_total




#score: {'data2D.txt': -0.0006427469135802469}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2), dtype=int)
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(4):
      site = (i + ((k%2)*((i//N)+k)//N - 1)) % N
      total_spin[i][0] += h[site_nbr][site]
      if h[site_nbr][site] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': 0.005143672839506173}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  priorities = [[0,-1] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(4):
      if k == 0:
        j = (i % N)
      elif k == 1:
        j = ((i%N)+1)%N
      elif k == 2:
        j = (i//N) % N
      else:
        j = (i//N + ((i%N)-1)//N - 1) % N
      if h[site_nbr][j] > 0:
        priorities[i][0] -= 1
        priorities[i][1] += 1
      else:
        priorities[i][0] += 1
        priorities[i][1] -= 1
  return priorities




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': 0.11076589506172853}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i//N][i%N][0] += 1
      total_spin[i//N][i%N][1] -= 1
    else:
      total_spin[i//N][i%N][0] -= 1

  for i in range(N):
    for j in range(N):
      if total_spin[i][j][0] > 0:
        priority_total[i*N+j][0] = total_spin[i][j][0]
        priority_total[i*N+j][1] = -total_spin[i][j][1]
      elif total_spin[i][j][0] < 0:
        priority_total[i*N+j][0] = -total_spin[i][j][0]
        priority_total[i*N+j][1] = total_spin[i][j][1]

  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2)) 
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total=np.zeros((N*N,2)) 
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2)) 
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i//N][i%N][0] += 1
      total_spin[i//N][i%N][1] -= 1
    else:
      total_spin[i//N][i%N][0] -= 1
  priority_total=np.zeros((N*N,2)) 
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      site = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i//N*N+i%N][0] += 1
      priority_total[i//N*N+i%N][1] -= 1
    else:
      priority_total[i//N*N+i%N][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  return total_spin.reshape(N*N,2)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.13615293209876542}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return total_spin.reshape(N*N, 2)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.001870833333333333}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  for k in range(4):
    for i in range(N**2):
      site = (i % N + ((i//N-1)%2 - 1)) % N
      if J[k][site][i%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.006581327160493827}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      if i < N: # left neighbor
        site = (i+N-1)%N2
        total_spin[i][0] -= J[0][i%N][i%N]
      if i >= N and i < N2-N: # right neighbor
        site = (i+N-1)%N2
        total_spin[i][0] += J[1][i%N][i%N]
      if i % N == 0: # top neighbor
        site = (i+1)
        total_spin[i][0] -= J[2][i//N][i%N]
      if i % N == N-1: # bottom neighbor
        site = (i+N-1)
        total_spin[i][0] += J[3][i//N][i%N]
    else:
      if i < N: # left neighbor
        site = (i+N-1)%N2
        total_spin[i][0] + J[0][i%N][i%N]
      if i >= N and i < N2-N: # right neighbor
        site = (i+N-1)%N2
        total_spin[i][0] - J[1][i%N][i%N]
      if i % N == 0: # top neighbor
        site = (i+1)
        total_spin[i][0] + J[2][i//N][i%N]
      if i % N == N-1: # bottom neighbor
        site = (i+N-1)
        total_spin[i][0] - J[3][i//N][i%N]

  return(total_spin)




#score: {'data2D.txt': -0.010405401234567903}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_sum = sum(total_spin[site_nbr//N][site_nbr%N])
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.00048225308641975317}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbr = lambda i: (i % N + ((i//N-1)%2 - 1)) % N
  site_interaction = lambda i, j: J[(j+N2)//N][(site_nbr(j)+j%N)]
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr_val = site_nbr(i)
    total_spin[i][0] += h[site_nbr_val][i%N]
    if h[i//N][i%N] > 0:
      if J[(i//N)%4][(site_nbr(i))][i%N] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
    else:
      if J[(i//N)%4][(site_nbr(i))][i%N] < 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total.reshape(N*N, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.reshape(N*N, 2)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        
  return priority_total.reshape(N*N, 2)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total.reshape(N*N, 2)




#score: {'data2D.txt': -0.0007069444444444445}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(4):
      site = (i + ((k%2)*((i//N)+k)//N - 1)) % N
      priority_total[i][0] += h[site_nbr][site]
      if h[site_nbr][site] > 0:
        priority_total[i][1] -= 1
      else:
        priority_total[i][1] += 1
  return priority_total.reshape(N*N, 2)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.13871712962962982}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(4):
        if J[k][i][j] > 0:
          if k == 0 or k == 3:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
        else:
          if k == 0 or k == 3:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
          else:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = sum(h[(i+(k-1)%2-1)%N][j] for k in [0, 3]) - sum(J[k][i][j] for k in [0, 3])
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 2
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 2
  return(priorities)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.00026003086419753077}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site_idx = int((i*N*2 + j*2 + k) % (N**2))
        if J[k//2, i, j] > 0:
          if k%2 == 0 or k%2 == 3:
            total_spin += 1
          else:
            total_spin -= 1
        else:
          if k%2 == 0 or k%2 == 3:
            total_spin -= 1
          else:
            total_spin += 1
      priorities[site_idx][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = [[-x[0], -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': 0.1399606481481482}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          if (k == 0 or k == 3) and i % 2 == 0:
            total_spin -= 1
          elif (k == 0 or k == 3) and i % 2 != 0:
            total_spin += 1
          else:
            if k < 2:
              total_spin -= 1
            else:
              total_spin += 1
        else:
          if (k == 0 or k == 3) and i % 2 == 0:
            total_spin += 1
          elif (k == 0 or k == 3) and i % 2 != 0:
            total_spin -= 1
          else:
            if k < 2:
              total_spin += 1
            else:
              total_spin -= 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.004717129629629629}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    for k in range(4):
      if J[k][i//N][i%N] > 0:
        if k == 0 or k == 3:
          priorities[i][0] += 1
          priorities[i][1] -= 1
        else:
          priorities[i][0] -= 1
          priorities[i][1] += 1
      else:
        if k == 0 or k == 3:
          priorities[i][0] -= 1
          priorities[i][1] += 1
        else:
          priorities[i][0] += 1
          priorities[i][1] -= 1
  return(priorities)




#score: {'data2D.txt': 0.07062608024691366}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          if k == 0 or k == 3:
            total_spin += 1
          else:
            total_spin -= 1
        else:
          if k == 0 or k == 3:
            total_spin -= 1
          else:
            total_spin += 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      for site_nbr in site_nbrs:
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priorities = [[-x[0], -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0, 0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin = [0]
      for k in range(3):
        site_nbr = site_nbrs[k]
        total_spin[0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[0] += 1
        else:
          total_spin[0] -= 1
      priorities[i*N+j][0] += total_spin[0]
      priorities[i*N+j][1] -= (total_spin[0]%2 - 1)
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.001828240740740741}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0][site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return total_spin.reshape(N*N, 2)




#score: {'data2D.txt': -0.012696450617283951}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i // N) - 1)) % N
    if J[0][site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total.reshape(N2, 2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
  return priority_total.reshape(N*N, 2)




#score: {'data2D.txt': -0.012696450617283951}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i // N) - 1)) % N
    if J[0][site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total.reshape(N2, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] = total_spin
  return priority_total.reshape(N2, 2)




#score: {'data2D.txt': -0.0017479938271604935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N) - 1)) % N
    if J[0][site_nbr][i % N] > 0:
      total_spin = h[site_nbr][i % N]
      if h[i//N][i%N] > 0:
        priority_total[i][0] += 2 * (total_spin - 1)
        priority_total[i][1] -= 2
      else:
        priority_total[i][0] -= 2 * (total_spin + 1)
        priority_total[i][1] += 2
    return priority_total.reshape(N2, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      total_spin[0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
        else:
          total_spin[0] -= 1
          
  return priority_total.reshape(N2, 2)




#score: {'data2D.txt': -0.0007069444444444445}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(4):
      site = (i + ((k%2)*((i//N)+k)//N - 1)) % N
      priorities[i][0] += h[site_nbr][site]
      if h[site_nbr][site] > 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1
  return priorities.reshape(N2, 2)




#score: {'data2D.txt': -0.03707299382716053}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N) - 1)) % N
    total_spin = 0
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priority_total[i][0] = 2 * (total_spin - 1)
      priority_total[i][1] = -2
    else:
      priority_total[i][0] = -2 * (total_spin + 1)
      priority_total[i][1] = 2
    
  return priority_total.reshape(N2, 2)




#score: {'data2D.txt': -0.12143287037037051}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    total_spin = 0
    site_nbr = (i % N + ((i // N) - 1)) % N
    for k in range(4):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][i % N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priority_total[i][0] = 2 * (total_spin - 1)
      priority_total[i][1] = -2
    else:
      priority_total[i][0] = -2 * (total_spin + 1)
      priority_total[i][1] = 2
  return priority_total.reshape(N2, 2)




#score: {'data2D.txt': -0.08024799382716051}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))

  for i in range(N2):
    site_nbr = (i % N + ((i // N) - 1)) % N
    if J[0][site_nbr][i % N] > 0:
      total_spin = h[site_nbr][i % N]
      if h[i//N][i%N] > 0:
        priority_total[i][0] += 2 * (total_spin - 1)
        priority_total[i][1] -= 2
      else:
        priority_total[i][0] -= 2 * (total_spin + 1)
        priority_total[i][1] += 2

  return priority_total.reshape(N2, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return total_spin.reshape(N2, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.reshape(N*N, 2)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.reshape(N*N, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.reshape(N**2, 2)




#score: {'data2D.txt': -0.09688256172839521}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      for k in [(i+1)%N, (i+(j-1)%2)%N]:
        if h[k][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return total_spin.reshape(N*N, 2)




#score: {'data2D.txt': -0.06843040123456791}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      for k in [(0, 1), (1, 3), (2, 0), (3, 2)]:
        if J[k[0]][i][j] > 0:
          total_spin += 1 if k[1] == 0 or k[1] == 3 else -1
        else:
          total_spin -= 1 if k[1] == 0 or k[1] == 3 else 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  prios = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = sum([J[k][site_nbr][j] for k in [0,3]]) - sum([J[k][i][j] for k in [1,2]])
      if h[site_nbr][j] > 0:
        prios[i*N+j][0] += 1
        prios[i*N+j][1] -= 1
      else:
        prios[i*N+j][0] -= 1
        prios[i*N+j][1] += 1
  return(prios)




#score: {'data2D.txt': 0.07062608024691366}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          if k == 0 or k == 3:
            total_spin += 1
          else:
            total_spin -= 1
        else:
          if k == 0 or k == 3:
            total_spin -= 1
          else:
            total_spin += 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.10124212962962968}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0,0]
      if h[site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(4):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        if J[k][site_nbr][j] > 0:
          if k == 0 or k == 3:
            total_spin[0] -= 1
            total_spin[1] += 1
          else:
            total_spin[0] += 1
            total_spin[1] -= 1
        else:
          if k == 0 or k == 3:
            total_spin[0] += 1
            total_spin[1] -= 1
          else:
            total_spin[0] -= 1
            total_spin[1] += 1
      priorities[i*N+j][0] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': -0.011847067901234569}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site_nbr][i%N] > 0:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
      else:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
  return [[total_spin[i][0], total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.004943055555555556}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site_nbr][i%N] > 0:
        total_spin += h[site][i%N]
      else:
        total_spin -= h[site][i%N]
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total




#score: {'data2D.txt': 0.009474537037037038}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
      else:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
  return [total_spin[i][:] for i in range(N*N)]




#score: {'data2D.txt': -0.0064050925925925924}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0][site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[1][site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [list(map(lambda x: (-x, 1)[x < 0], row)) for row in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priorities = [[-x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  priorities = [[-x[0], -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  priorities = [[-x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  for k in range(3):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  priorities = [[-x[0], -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in [0,1]:
      if h[site_nbr][i%N] > 0:
        total_spin[i][j] += 1
      else:
        total_spin[i][j] -= 1
  return total_spin




#score: {'data2D.txt': -0.16110416666666658}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.004767746913580247}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[k][site_nbr][(i%N)%N] for k in range(4)) + h[site_nbr][i%N]
    
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
      
  return priority_total.tolist()




#score: {'data2D.txt': -0.04862391975308643}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          total_spin += 1 if k%2==0 else -1
        else:
          total_spin -= 1 if k%2==0 else 1
      priorities[i*N+j][0] = -total_spin
  return priorities




#score: {'data2D.txt': 0.009349845679012382}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i][j] > 0:
          if k % 2 == 0:
            total_spin += 1
          else:
            total_spin -= 1
        else:
          if k % 2 == 0:
            total_spin -= 1
          else:
            total_spin += 1
      for m in range(4):
        if i + ((m-1)%2 - 1) >= N or j + ((m-1)%2 - 1) >= N:
          break
        if J[m][i+((m-1)%2 - 1)][j+((m-1)%2 - 1)] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priorities[i*N+j][0] = -total_spin
  return(priorities)




#score: {'data2D.txt': 0.036044290123456786}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i,j] > 0:
          total_spin += J[k][i,j]
        else:
          total_spin -= J[k][i,j]
      priorities[i*N+j][0] = -total_spin
      priorities[i*N+j][1] = total_spin
  return priorities




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N*N):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.00103287037037037}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(4):
        if J[j][i//N][i%N]:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][1] += 1
  return priorities




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  priorities=np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin=h[site_nbr][j]
      if h[i][j]>0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N]>0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.0064050925925925924}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0][site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[1][site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [list(map(lambda x: (-x, 1)[x < 0], row)) for row in total_spin]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [list(map(lambda x: (-x,1)[x<0], row)) for row in priority_total]




#score: {'data2D.txt': -0.0064050925925925924}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0][site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[1][site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [list(map(lambda x: (-x, 1)[x < 0], row)) for row in total_spin]




#score: {'data2D.txt': -0.0020020061728395068}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for k in range(2):
    for i in range(N**2):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k][site_nbr][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return [list(map(lambda x: (-x, 1)[x < 0], row)) for row in priority_total]




#score: {'data2D.txt': -0.0017850308641975308}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin = 0
    for j in range(N):
      total_spin += h[site_nbr][j]
      if J[0][site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priority_total[i][0] = total_spin
    priority_total[i][1] = -total_spin
  return [list(map(lambda x: (-x, 1)[x < 0], row)) for row in priority_total]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
  return [list(map(lambda x: (-x, 1)[x < 0], row)) for row in priority_total]




#score: {'data2D.txt': -0.33316280864197534}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priorities[i*N+j][0] += J[0,i,j]*total_spin
  return(priorities)




#score: {'data2D.txt': -0.07452638888888893}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N**2):
    priority_total = np.zeros((1,2))
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priority_total[0][0] += 1
        priority_total[0][1] -= 1
      else:
        priority_total[0][0] -= 1
    total_spin[i] += priority_total[0]
  return(total_spin)




#score: {'data2D.txt': -0.23316527777777776}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += J[k,i,j]
        else:
          total_spin -= J[k,i,j]
      priorities[i*N+j][0] += total_spin
  return(priorities)




#score: {'data2D.txt': -0.2663347222222219}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0, 0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += J[k, i, j]
        else:
          total_spin -= J[k, i, j]
        priorities[i*N+j][0] += J[k, i, j]*total_spin
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(4):
        if J[k,i,j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] += 1
      total_spin[i*N+j][0] += h[site_nbr][j]
  priority_total = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.005916203703703703}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        if J[k][i,j] > 0:
          total_spin -= J[k][i,j]
        else:
          total_spin += J[k][i,j]
      priorities[i*N+j][0] = -total_spin
      priorities[i*N+j][1] = total_spin
  return priorities




#score: {'data2D.txt': 0.036044290123456786}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        if J[k][i,j] > 0:
          total_spin += J[k][i,j]
        else:
          total_spin -= J[k][i,j]
      priorities[i*N+j][0] = -total_spin
      priorities[i*N+j][1] = total_spin
  return priorities




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    else:
      priorities[i][0] += 1
      priorities[i][1] -= 1
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N2)]
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  priorities = [[-x[0], -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[0, 0] for _ in range(N2)]
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priorities = [[-x[0], -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  priority_total = [[0, 0] for _ in range(N*N)]

  for k in range(2):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return priority_total




#score: {'data2D.txt': -0.34275447530864095}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
    else:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1

  return total_spin




#score: {'data2D.txt': -0.1614754629629632}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        total_spin[i][0] -= sum(J[j, i%N, i//N] for j in range(4))
      else:
        total_spin[i][0] += sum(J[j, i%N, i//N] for j in range(4))
  return(total_spin)




#score: {'data2D.txt': 0.0801961419753087}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        if h[site_nbr][i%N] > 0:
          total_spin[i][0] -= 1
        else:
          total_spin[i][0] += 1
        if h[i//N][i%N] > 0:
          total_spin[i][1] -= 2
        else:
          total_spin[i][1] += 2
      else:
        if h[site_nbr][i%N] > 0:
          total_spin[i][0] += 1
        else:
          total_spin[i][0] -= 1
        if h[i//N][i%N] > 0:
          total_spin[i][1] += 2
        else:
          total_spin[i][1] -= 2
  return(total_spin)




#score: {'data2D.txt': -0.07452638888888893}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  for i in range(N**2):
    priority_total = np.zeros((1, 2))
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        priority_total[0][0] += 1
        priority_total[0][1] -= 1
      else:
        priority_total[0][0] -= 1
    total_spin[i] += priority_total[0]

  return(total_spin)




#score: {'data2D.txt': -0.005430092592592593}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + k%N + ((k//N-1)%2 - 1)) % N
        if J[k][site, j] > 0:
          total_spin -= J[k][site, j]
        else:
          total_spin += J[k][site, j]
      priorities[i*N+j][0] = -total_spin
      priorities[i*N+j][1] = total_spin
  return priorities




#score: {'data2D.txt': -0.005916203703703703}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        if J[k][i,j] > 0:
          total_spin -= J[k][i,j]
        else:
          total_spin += J[k][i,j]
      priorities[i*N+j][0] = -total_spin
      priorities[i*N+j][1] = total_spin
  return priorities




#score: {'data2D.txt': -0.032320524691358016}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        if J[k][i,j] > 0:
          total_spin -= J[k][i,j]
        else:
          total_spin += J[k][i,j]
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if h[i][site_nbr] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      priorities[i*N+j][0] = -total_spin
      priorities[i*N+j][1] = total_spin
  return priorities




#score: {'data2D.txt': 0.3336995370370361}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [(np.sum([J[k][i*(N**2)+j:(k+1)*N*N].flatten() for k in range(4)]) - (h[i][j] > 0) * 2, h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[a-1,b] for a,b in total_spin]




#score: {'data2D.txt': 0.3336995370370361}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  return [(np.sum([J[k][i*(N**2)+j:(k+1)*N*N].flatten() for k in range(4)]) - (h[i][j] > 0) * 2, h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.09752453703703716}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[total_spin[i*N+j][0], int(total_spin[i*N+j][1] < 0)] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.3336995370370361}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [(np.sum([J[k][i*N+j:(k+1)*N].flatten() for k in range(4)]).item() - (h[i][j] > 0) * 2, h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return priorities




#score: {'data2D.txt': -0.005850462962962963}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_priority[i][0] += 1
      total_priority[i][1] -= 1
    else:
      total_priority[i][0] -= 1
  for k in range(4):
    for i in range(N**2):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k][site_nbr][i%N] > 0:
        total_priority[i][0] += 1
        total_priority[i][1] -= 1
      else:
        total_priority[i][0] -= 1
  return [list(map(lambda x: (-x, 1)[x < 0], row)) for row in total_priority]




#score: {'data2D.txt': -0.0020020061728395068}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    for k in range(2):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return [list(map(lambda x: (-x, 1)[x < 0], row)) for row in priority_total]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin = sum(J[k][site_nbr][(i // N) % N] if J[k][site_nbr][(i // N) % N] > 0 else -J[k][site_nbr][(i // N) % N] for k in range(4))
    if h[site_nbr][(i % N)] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total




#score: {'data2D.txt': 0.3336995370370361}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [(np.sum([J[k][i*(N**2)+j:(k+1)*N*N].flatten() for k in range(4)]) - (h[i][j] > 0) * 2, h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.3336995370370361}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [(np.sum([J[k][i*(N**2)+j:(k+1)*N*N].flatten() for k in range(4)]) - (h[i][j] > 0) * 2, h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.3336995370370361}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  return [(np.sum([J[k][i*(N**2)+j:(k+1)*N*N].flatten() for k in range(4)]) - (h[i][j] > 0) * 2, h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.3431510802469125}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      if h[site_nbr][i%N] > 0: 
        priority_total[i][0] -= 1
      else: 
        priority_total[i][0] += 1
    elif J[0,i%N,i//N] < 0:
      if h[site_nbr][i%N] > 0: 
        priority_total[i][0] += 1
      else: 
        priority_total[i][0] -= 1
    if h[i//N][i%N] > 0:
      priority_total[i][1] -= 2
    else:
      priority_total[i][1] += 2
  for k in range(1,4):
   site_nbr = (i % N + ((k-1)%2 - 1)) % N
   if J[k,i%N,i//N] > 0:
    if h[site_nbr][i%N] > 0: 
      priority_total[i][0] -= 1
    else: 
      priority_total[i][0] += 1
    if h[i//N][i%N] > 0:
     priority_total[i][1] -= 2
    else:
     priority_total[i][1] += 2
   elif J[k,i%N,i//N] < 0:
    if h[site_nbr][i%N] > 0: 
      priority_total[i][0] += 1
    else: 
      priority_total[i][0] -= 1
    if h[i//N][i%N] > 0:
     priority_total[i][1] += 2
    else:
     priority_total[i][1] -= 2
  return(priority_total)




#score: {'data2D.txt': 0.17815478395061746}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    for k in range(4):
      site = (i % N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][0] -= 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] += 1
        total_spin[i][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.08361589506172845}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    for k in range(4):
      site = (i % N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][0] -= J[k,i//N,i%N]
        total_spin[i][1] -= 2
      else:
        total_spin[i][0] += J[k,i//N,i%N]
        total_spin[i][1] += 2
  return(total_spin)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]
  
  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
    
  priority_total = [[0,0] for _ in range(N2)]
  
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
  
  priorities = [[-x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]
  
  priorities = []
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin_val = total_spin[i*N+j]
      if h[i][j] > 0:
        priorities.append([-total_spin_val[0], float('-inf')])
      else:
        priorities.append([float('-inf'), total_spin_val[0]])
        
  return priorities




#score: {'data2D.txt': 0.013547376543209878}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = np.sum(J[:,i,j])
      if h[i][j] > 0:
        priorities[i*N+j][0] -= total_spin
        priorities[i*N+j][1] += total_spin
      else:
        priorities[i*N+j][0] += total_spin
        priorities[i*N+j][1] -= total_spin
  return priorities




#score: {'data2D.txt': 0.0028066358024691363}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
    for k in range(4):
      site = (i % N + ((k-1)%2 - 1)) % N
      if J[k][i%N][i//N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': 0.3336995370370361}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [(np.sum([J[k][i*(N**2)+j:(k+1)*N*N].flatten() for k in range(4)]) - (h[i][j] > 0) * 2, h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.3336995370370361}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  return [(np.sum([J[k][i*(N**2)+j:(k+1)*N*N].flatten() for k in range(4)]) - (h[i][j] > 0) * 2, h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.3336995370370361}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][0] -= 1
  return [(np.sum([J[k][i*(N**2)+j:(k+1)*N*N].flatten() for k in range(4)]) - (h[i][j] > 0) * 2, h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.0801961419753087}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k,i%N,i//N] > 0:
        if h[site_nbr][i%N] > 0:
          total_spin[i][0] -= 1
        else:
          total_spin[i][0] += 1
        if h[i//N][i%N] > 0:
          total_spin[i][1] -= 2
        else:
          total_spin[i][1] += 2
      else:
        if h[site_nbr][i%N] > 0:
          total_spin[i][0] += 1
        else:
          total_spin[i][0] -= 1
        if h[i//N][i%N] > 0:
          total_spin[i][1] += 2
        else:
          total_spin[i][1] -= 2
  return(total_spin)




#score: {'data2D.txt': -0.19946435185185207}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0,i%N,i//N] > 0:
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] -= 1
      else:
        total_spin[i][0] += 1
      if h[i//N][i%N] > 0:
        total_spin[i][1] -= 2
      else:
        total_spin[i][1] += 2
    elif J[1,i%N,i//N] > 0:
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
      else:
        total_spin[i][0] -= 1
      if h[i//N][i%N] > 0:
        total_spin[i][1] += 2
      else:
        total_spin[i][1] -= 2
    elif J[2,i%N,i//N] > 0:
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
      else:
        total_spin[i][0] -= 1
      if h[i//N][i%N] > 0:
        total_spin[i][1] += 2
      else:
        total_spin[i][1] -= 2
    elif J[3,i%N,i//N] > 0:
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] -= 1
      else:
        total_spin[i][0] += 1
      if h[i//N][i%N] > 0:
        total_spin[i][1] -= 2
      else:
        total_spin[i][1] += 2
  return(total_spin)




#score: {'data2D.txt': 0.0801961419753087}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    for k in range(4):
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k, i%N, i//N] > 0:
        if h[site_nbr][i%N] > 0:
          total_spin[i][0] -= 1
        else:
          total_spin[i][0] += 1
        if h[i//N][i%N] > 0:
          total_spin[i][1] -= 2
        else:
          total_spin[i][1] += 2
      else:
        if h[site_nbr][i%N] > 0:
          total_spin[i][0] += 1
        else:
          total_spin[i][0] -= 1
        if h[i//N][i%N] > 0:
          total_spin[i][1] += 2
        else:
          total_spin[i][1] -= 2
  return(total_spin)




#score: {'data2D.txt': 0.2094155864197533}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    for k in range(4):
      site = (i % N + ((k-1)%2 - 1)) % N
      if J[k, i%N, i//N] > 0:
        total_spin[i][0] -= h[site_nbr][i%N]
        total_spin[i][1] -= 2 if h[i//N][i%N] > 0 else 2
      else:
        total_spin[i][0] += h[site_nbr][i%N]
        total_spin[i][1] += 2 if h[i//N][i%N] > 0 else -2
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2=N*N
  site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = [[-x[0], -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = [[-x[0], -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      site_magnetism = sum([h[site_nbr][j] for site_nbr in site_nbrs]) / 3
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  
  priorities = [[-x[0], -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = [[-x[0], -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for k in range(4):
    site_nbr = (k % 2) % N
    total_spin = 0
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return priorities.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  site_nbr = np.zeros((N*N,2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr[i*N+j][0] = (i + ((j-1)%2 - 1)) % N
      site_nbr[i*N+j][1] = j
  for i in range(N**2):
    total_spin[site_nbr[i][0], site_nbr[i][1]] += h[site_nbr[i][0]][site_nbr[i][1]]
    if h[site_nbr[i][0]][site_nbr[i][1]] > 0:
      total_spin[site_nbr[i][0], site_nbr[i][1]][1] -= 1
    else:
      total_spin[site_nbr[i][0], site_nbr[i][1]][0] -= 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  total_spin = [0, 0]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  for k in range(2):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[0] += 1
        else:
          total_spin[0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.5,0.5] for _ in range(N*N)]
  priority_total = [[0.5,0.5] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = total_spin[i][1]
  
  return(priority_total)




#score: {'data2D.txt': 0.33350941358024594}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [(np.sum([J[k][i*N+j:(k+1)*N+j].flatten() for k in range(4)]), (h[i][j] > 0)) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.32480077160493737}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [(np.sum([J[k][i*N*j:(k+1)*N*(j+1)].flatten() for k in range(4)]) - (h[i][j] > 0) * 2, h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = np.zeros((N**2, 2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_priority[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_priority[i*N+j][1] -= 1
      else:
        total_priority[i*N+j][1] += 1
        
  return total_priority.tolist()




#score: {'data2D.txt': 0.011173919753086419}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[0] += 1
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if J[0][site_nbr][i%N] > 0:
        total_spin[1] -= 1
      elif J[0][site_nbr][i%N] < 0:
        total_spin[0] += 1
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[0] += 1
    priorities[i][0] = total_spin[0]
    priorities[i][1] = -total_spin[1]
  return(priorities)




#score: {'data2D.txt': -0.1308168209876545}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0][site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    elif J[1][site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] += 1
    elif J[2][site_nbr][i%N] < 0:
      priority_total[i][0] -= 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -(total_spin+1)
  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j], 0]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i,j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i,j][1] -= 1
      else:
        total_spin[i,j][0] -= 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        priority_total[i*N+j][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  site_nbr = np.zeros((N*N,2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr[i*N+j][0] = (i + ((j-1)%2 - 1)) % N
      site_nbr[i*N+j][1] = j
  for i in range(N**2):
    total_spin[site_nbr[i][0], site_nbr[i][1]] += h[site_nbr[i][0]][site_nbr[i][1]]
    if h[site_nbr[i][0]][site_nbr[i][1]] > 0:
      total_spin[site_nbr[i][0], site_nbr[i][1]][1] -= 1
    else:
      total_spin[site_nbr[i][0], site_nbr[i][1]][0] -= 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.1476121913580249}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0,0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
      for k in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return priority_total




#score: {'data2D.txt': -0.1476121913580249}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      if h[site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
      for k in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return priority_total.tolist()




#score: {'data2D.txt': -0.19697546296296325}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0,0]
      for k in range(3):
        if k == 0:
          neighbor_i = i
          neighbor_j = (j+1)%N
        elif k == 1:
          neighbor_i = (i+1)%N
          neighbor_j = j
        else:
          neighbor_i = i
          neighbor_j = (j-1)%N
        if h[neighbor_i][neighbor_j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
      for k in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.5, 0.5] for _ in range(N**2)]
  priority_total = [[0.5, 0.5] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -total_spin[i*N+j][1]
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        priority_total[i*N+j][0] = -total_spin[i*N+j][0]
        priority_total[i*N+j][1] = total_spin[i*N+j][1]

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
        else:
          total_spin[i*N+j][0] -= 1

  return(priority_total)




#score: {'data2D.txt': 0.32480077160493737}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [(np.sum([J[k][i*N*j:(k+1)*N*(j+1)].flatten() for k in range(4)]) - (h[i][j] > 0) * 2, h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.33350941358024594}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [(np.sum([J[k][i*N+j:(k+1)*N].flatten() for k in range(4)]).sum(), h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.3336995370370361}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [(np.sum([J[k][i*N+j:(k+1)*N].flatten() for k in range(4)]) - (h[i][j] > 0) * 2, h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0,0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
        else:
          total_spin[0] -= 1
      priority_total[i*N+j][0] += total_spin[0]
      priority_total[i*N+j][1] -= total_spin[0]
  return(priority_total)




#score: {'data2D.txt': 0.00010972222222223072}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N_half):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N_half, N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
  return(priority_total)




#score: {'data2D.txt': -0.10113657407407417}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if h[i][site_nbr] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i*N + j) % N + ((i+N-1)//N - 1) % N
      total_spin_sum = sum(total_spin[site_nbr//N][site_nbr%N])
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.010405401234567903}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin_sum = sum(total_spin[site_nbr//N][site_nbr%N])
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = []
  for i in range(N2):
    site_nbrs = [(i % N + ((i // N - 1) % 2 - 1)) % N]
    total_spin = [0, 0]
    for j in site_nbrs:
      if h[j][i % N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    priorities.append([-x for x in total_spin])
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  
  priorities = [[-x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]

  total_spin = [[0,0] for _ in range(N2)]
  for k in range(3):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1

  priorities = [[-x[0], -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return [[-x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]

  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  priorities = [[-x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]

  total_spin = [[0,0] for _ in range(N2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  priorities = [[-x[0], -x[1]] for x in total_spin]

  return priorities




#score: {'data2D.txt': -0.2689158950617281}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  h_flat = [h[i][j] for i in range(N) for j in range(N)]

  priority_total = [[0,0] for _ in range(N2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin = [h[i][j], -1]
      else:
        total_spin = [-h[i][j], 1]

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1

      priority_total[i*N+j] = [x for x in total_spin]

  return priority_total




#score: {'data2D.txt': 0.10124212962962968}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0,0]
      if h[site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(4):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        if J[k][site_nbr][j] > 0:
          if k == 0 or k == 3:
            total_spin[0] -= 1
            total_spin[1] += 1
          else:
            total_spin[0] += 1
            total_spin[1] -= 1
        else:
          if k == 0 or k == 3:
            total_spin[0] += 1
            total_spin[1] -= 1
          else:
            total_spin[0] -= 1
            total_spin[1] += 1
      priorities[i*N+j][0] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': 0.10124212962962968}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0,0]
      if h[site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(4):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        if J[k][site_nbr][j] > 0:
          if k == 0 or k == 3:
            total_spin[0] -= 1
            total_spin[1] += 1
          else:
            total_spin[0] += 1
            total_spin[1] -= 1
        else:
          if k == 0 or k == 3:
            total_spin[0] += 1
            total_spin[1] -= 1
          else:
            total_spin[0] -= 1
            total_spin[1] += 1
      priorities[i*N+j][0] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': 0.09183287037037047}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0,0]
      if h[site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(4):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        if J[k][site_nbr][j] > 0:
          if k == 0 or k == 3:
            total_spin[0] -= 1
            total_spin[1] += 1
          else:
            total_spin[0] += 1
            total_spin[1] -= 1
        else:
          if k == 0 or k == 3:
            total_spin[0] += 1
            total_spin[1] -= 1
          else:
            total_spin[0] -= 1
            total_spin[1] += 1
      priorities[i*N+j][0] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': -0.04226682098765427}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0,0]
      if h[site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        if J[k][site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priorities[i*N+j][0] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] += total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.01013070987654321}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[site_nbr][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][site_nbr][i%N]:
        total_spin += h[site_nbr_j][i%N]
        if h[site_nbr_j][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
    priority_total[i][0] += total_spin
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i,j:(i + ((j-1)%2 - 1)) % N
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr_i_j = site_nbr(i,j)
      total_spin[i][j][0] += h[site_nbr_i_j][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr_i = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr_i][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total.reshape(N*N,2)




#score: {'data2D.txt': -0.01013070987654321}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[site_nbr][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][site_nbr][i%N]:
        total_spin += h[site_nbr_j][i%N]
        if h[site_nbr_j][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
    priority_total[i][0] += total_spin
  return priority_total




#score: {'data2D.txt': -0.001011265432098765}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  total_spin = np.zeros(2)
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      site_nbr_j = (j + ((i//N-1)%2 - 1)) % N
      if J[0][(site_nbr+1)%N][j] or J[1][i%N][j]:
        total_spin[1] -= h[site_nbr][j]
      elif J[2][(site_nbr+N-1)%N][j] or J[3][site_nbr][j]:
        total_spin[1] += h[site_nbr][j]
    for k in range(2):
      if total_spin[k] > 0:
        priority_total[i][k] -= 1
      elif total_spin[k] < 0:
        priority_total[i][k] += 1
  
  return priority_total




#score: {'data2D.txt': -0.00012361111111111112}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0][(site_nbr+1)%N][i%N] or J[1][site_nbr][i%N]:
      total_spin -= h[site_nbr][i%N]
    elif J[2][(site_nbr+N-1)%N][i%N] or J[3][site_nbr][i%N]:
      total_spin += h[site_nbr][i%N]
    if total_spin > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': 0.003194598765432099}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      site_nbr_j = (j + ((i//N-1)%2 - 1)) % N
      if J[0][(site_nbr+1)%N][j] or J[1][i%N][j]:
        total_spin[1] -= h[site_nbr][j]
      elif J[2][(site_nbr+N-1)%N][j] or J[3][site_nbr][j]:
        total_spin[1] += h[site_nbr][j]
    for k in range(2):
      if total_spin[k] > 0:
        priority_total[i][k] -= 1
      elif total_spin[k] < 0:
        priority_total[i][k] += 1
  return priority_total




#score: {'data2D.txt': 0.001472067901234568}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[site_nbr], axis=0)
    
    if total_spin > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    elif total_spin < 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  
  return priority_total




#score: {'data2D.txt': 0.003194598765432099}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      
      site_nbr_j = (j + ((i//N-1)%2 - 1)) % N
      
      if J[0][(site_nbr+1)%N][j] or J[1][i%N][j]:
        total_spin[1] -= h[site_nbr][j]
      elif J[2][(site_nbr+N-1)%N][j] or J[3][site_nbr][j]:
        total_spin[1] += h[site_nbr][j]
      
    if total_spin[0] > 0:
      priority_total[i][0] -= 1
    elif total_spin[0] < 0:
      priority_total[i][0] += 1
    
    if total_spin[1] > 0:
      priority_total[i][1] -= 1
    elif total_spin[1] < 0:
      priority_total[i][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.012272993827160494}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += h[site][i%N]
      if h[site][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.008500154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
    
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][site_nbr][i%N]:
        total_spin[i][0] += h[site_nbr_j][i%N]
        if h[site_nbr_j][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.01013070987654321}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[site_nbr][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][site_nbr][i%N]:
        total_spin += h[site_nbr_j][i%N]
        if h[site_nbr_j][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
    priority_total[i][0] += total_spin
  return priority_total




#score: {'data2D.txt': -0.0008050925925925925}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[j][site_nbr][(i%N)]*h[(j+1)%2][i%N] for j in range(4)])
    if sum(h[i%N]) > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    priority_total[i][0] += total_spin
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin_site = total_spin[i][j]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin_site = total_spin[i][j]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbr = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  for i in range(N**2):
    if h[site_nbr[i]][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return(total_spin)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': 0.33350941358024594}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2), dtype=int)
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [(np.sum([J[k][i*N+j:(k+1)*N+j].flatten() for k in range(4)]), (h[i][j] > 0)) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.33350941358024594}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [(np.sum([J[k][i*N+j:(k+1)*N+j].flatten() for k in range(4)]), (h[i][j] > 0)) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.33350941358024594}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [(np.sum([J[k][(i*N+j):(k+1)*N+(j+((k-1)%2-1))%N].flatten() for k in range(4)]), (h[i][j] > 0)) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.003194598765432099}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
        
      site_nbr_j = (j + ((i//N-1)%2 - 1)) % N
      
      if J[0][(site_nbr+1)%N][j] or J[1][i%N][j]:
        total_spin[1] -= h[site_nbr][j]
      elif J[2][(site_nbr+N-1)%N][j] or J[3][site_nbr][j]:
        total_spin[1] += h[site_nbr][j]
        
    if total_spin[0] > 0:
      priority_total[i][0] -= 1
    elif total_spin[0] < 0:
      priority_total[i][0] += 1
    
    if total_spin[1] > 0:
      priority_total[i][1] -= 1
    elif total_spin[1] < 0:
      priority_total[i][1] += 1
  
  return priority_total




#score: {'data2D.txt': 0.0003347222222222213}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      if J[0][(site_nbr+1)%N][j]:
        total_spin[1] -= h[site_nbr][j]
      elif J[2][(site_nbr+N-1)%N][j]:
        total_spin[1] += h[site_nbr][j]
    priority_total[i][0] = -total_spin[1]
    priority_total[i][1] = -total_spin[0]
  return priority_total




#score: {'data2D.txt': 0.003194598765432099}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      
      site_nbr_j = (j + ((i//N-1)%2 - 1)) % N
      
      if J[0][(site_nbr+1)%N][j] or J[1][i%N][j]:
        total_spin[1] -= h[site_nbr][j]
      elif J[2][(site_nbr+N-1)%N][j] or J[3][site_nbr][j]:
        total_spin[1] += h[site_nbr][j]
      
    if total_spin[0] > 0:
      priority_total[i][0] -= 1
    elif total_spin[0] < 0:
      priority_total[i][0] += 1
    
    if total_spin[1] > 0:
      priority_total[i][1] -= 1
    elif total_spin[1] < 0:
      priority_total[i][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.032753549382716046}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[site_nbr][:(i//N+1)].flatten())
    
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][site_nbr][i//N]:
        total_spin += h[site_nbr_j][i%N]
        if h[site_nbr_j][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
    
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][site_nbr][i%N]:
        total_spin += h[site_nbr_j][:(i//N+1)].flatten().sum()
    
    priority_total[i][0] += np.sum(h[(i+1)%N:(i+N-1)].flatten())
    priority_total[i][1] -= np.sum(h[(i+1)%N:(i+N-1)].flatten())
    
  return priority_total




#score: {'data2D.txt': -0.008881944444444444}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site][i%N]:
        if h[site][i%N] > 0:
          total_spin += 1
        else:
          total_spin -= 1
    
    priority_total[i][0] = total_spin
    priority_total[i][1] = -total_spin
    
  return priority_total




#score: {'data2D.txt': -0.0048125}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      total_spin += J[j][site_nbr][i%N]*h[site_nbr_j][i%N]
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  priorities = []
  
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[i][0], float('-inf')])
    else:
      priorities.append([float('-inf'), -total_spin[i][0]])
      
  return(priorities)




#score: {'data2D.txt': -0.005430092592592593}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + k%N + ((k//N-1)%2 - 1)) % N
        if J[k][site, j] > 0:
          total_spin -= J[k][site, j]
        else:
          total_spin += J[k][site, j]
      priorities[i*N+j][0] = -total_spin
      priorities[i*N+j][1] = total_spin
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(4):
        site = (i + k%N + ((k//N-1)%2 - 1)) % N
        if J[k][site, j] > 0:
          total_spin -= J[k][site, j]
        else:
          total_spin += J[k][site, j]
      priorities[i*N+j][0] = -total_spin
      priorities[i*N+j][1] = total_spin
  return priorities




#score: {'data2D.txt': 0.3397788580246904}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        for k in range(4):
          if J[k][site_nbr, j] > 0:
            priorities[i*N+j][0] -= J[k][site_nbr, j]
          else:
            priorities[i*N+j][0] += J[k][site_nbr, j]
      elif h[i][j] < 0:
        for k in range(4):
          if J[k][i, (j+1)%N] > 0:
            priorities[i*N+j][1] -= J[k][i, (j+1)%N]
          else:
            priorities[i*N+j][1] += J[k][i, (j+1)%N]
      else:
        for k in range(4):
          if J[k][site_nbr, j] > 0:
            priorities[i*N+j][0] -= J[k][site_nbr, j]
          else:
            priorities[i*N+j][0] += J[k][site_nbr, j]
  return priorities




#score: {'data2D.txt': 0.00043040123456790185}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      for k in range(4):
        site = (i + k%N + ((k//N-1)%2 - 1)) % N
        if J[k][site, j] > 0:
          total_spin -= J[k][site, j]
        else:
          total_spin += J[k][site, j]
      priorities[i*N+j][0] = -total_spin
      priorities[i*N+j][1] = total_spin
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(N):
    site_nbr = (k - 1) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      priority_total[k*N+j][0] += 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.012101388888888887}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N**2):
    J_site = [J[k][i*N:(k+1)*N].flatten() for k in range(4)]
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
    for j, site_n in enumerate(site_nbrs):
      if h[site_n][i%N] > 0:
        total_spin[i][0] += J_site[j].sum()
        total_spin[i][1] -= len(J_site)
      else:
        total_spin[i][0] -= J_site[j].sum()
  return total_spin




#score: {'data2D.txt': 0.33361157407407316}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [(np.sum([J[k][:,i*N+j:(k+1)*N].flatten() for k in range(4)]).sum(), h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.33350941358024594}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [(np.sum([J[k][i*N+j:(k+1)*N].flatten() for k in range(4)]).sum(), h[i][j] > 0) for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.0032393518518518526}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      total_spin[0] += h[site_nbr][j]
      if J[0][(site_nbr+1)%N][j]:
        total_spin[1] -= h[site_nbr][j]
      elif J[2][(site_nbr+N-1)%N][j]:
        total_spin[1] += h[site_nbr][j]
    priority_total[i][0] = -total_spin[0]
    priority_total[i][1] = -total_spin[1]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.07981620370370376}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[h[i][j] for j in range(N)] for i in range(N)]
  for k in range(4):
    for i in range(N):
      for j in range(N):
        if k % 2 == 0:
          site_nbr = (i + ((k-1)%2 - 1)) % N
          priorities[i][j] += J[k][site_nbr][j]
        else:
          site_nbr = (j + ((k-1)%2 - 1)) % N
          priorities[i][j] -= J[k][i][site_nbr]
  return [[priorities[i][j],0] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.008881944444444444}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[site_nbr][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site][i%N]:
        if h[site][i%N] > 0:
          total_spin += 1
        else:
          total_spin -= 1
    priority_total[i][0] = total_spin
    priority_total[i][1] = -total_spin
  return priority_total




#score: {'data2D.txt': -0.009546759259259257}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    else:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        if J[k][site][i%N]:
          if h[site][i%N] > 0:
            total_spin[i][0] += 1
            total_spin[i][1] -= 1
          else:
            total_spin[i][0] -= 1
            total_spin[i][1] += 1
      return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    for j in range(N//2+1):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin = 1
      else:
        total_spin = -1
      priority_total[i*N+j][0] += total_spin
      if h[i][j%N] > 0:
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  priority_total = np.zeros((N*N, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N*N):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return(priority_total)




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      priorities[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][1] += 1
  return priorities




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[-total_spin[i][1], -total_spin[i][0]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.009056327160493828}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  total_spin = [0,0]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
      total_spin[0] += 1
      total_spin[1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
      total_spin[0] -= 1
      total_spin[1] += 1
  for i in range(N**2):
    if total_spin[1] > total_spin[0]:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    elif total_spin[0] > total_spin[1]:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.01013070987654321}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[site_nbr][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][site_nbr][i%N]:
        total_spin += h[site_nbr_j][i%N]
        if h[site_nbr_j][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
    priority_total[i][0] += total_spin
  return priority_total




#score: {'data2D.txt': 0.041405401234567873}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_sqrt = int(N**0.5)
  J_reshape = np.reshape(J, (4, N, N))
  h_reshape = np.reshape(h, (N, N))

  priority_total = np.zeros((N*N, 2), dtype=int)

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h_reshape[site_nbr][j]
      if J_reshape[0][i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      if J_reshape[1][i][j] > 0:
        total_spin += h_reshape[i][(j+1)%N]
        if h_reshape[i][(j+1)%N] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      if J_reshape[2][i][j] > 0:
        total_spin += h_reshape[(i+1)%N][j]
        if h_reshape[(i+1)%N][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      if J_reshape[3][i][j] > 0:
        total_spin += h_reshape[(i+1)%N][(j+1)%N]
        if h_reshape[(i+1)%N][(j+1)%N] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1

      priority_total[i*N+j][0] += total_spin
  return priority_total




#score: {'data2D.txt': -0.0017822530864197532}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(h[site_nbr][j] for j in range(N) if J[0][site_nbr][j])
    if h[site_nbr].sum() > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 2
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 2
  return priority_total




#score: {'data2D.txt': -0.013179475308641976}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[site_nbr][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][site_nbr][i%N]:
        total_spin += h[site_nbr_j][i%N]
        if h[site_nbr_j][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
    for k in range(2):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priority_total[i][0] += total_spin
  return priority_total




#score: {'data2D.txt': 0.34257731481481374}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
    else:
      total_spin[i*N+j][0] -= 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin_site = total_spin[i][j]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin_site = total_spin[i][j]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin_site = [h[site_nbr][j], 0]
      if h[i][j] > 0:
        priority_total = [[1, -1]]
      else:
        priority_total = [[-1, 1]]
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2,2))
  for k in range(3):
    for i in range(N2):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.009899845679012344}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for j in range(4):
      if J[j][site_nbr][i%N]:
        total_spin += h[(j-1)%2 - 1][i%N]
        if h[(j-1)%2 - 1][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.004620216049382716}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = [1, -1]
    else:
      total_spin = [-1, 1]
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][site_nbr][i%N]:
        if h[site_nbr_j][i%N] > 0:
          total_spin[0] += 1
          priority_total[i][0] -= 1
          priority_total[i][1] += 1
        else:
          total_spin[0] -= 1
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
    for k in range(2):
      if total_spin[k] > 0:
        priority_total[i][k] += 1
      elif total_spin[k] < 0:
        priority_total[i][k] -= 1
  return priority_total




#score: {'data2D.txt': -0.012163425925925926}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      site_nbr_j = ((k-1)%2 - 1) % N
      if J[k][site_nbr][i%N]:
        total_spin += h[site_nbr_j][i%N]
    priority_total[i][0] += sum(h[i//N][j] for j in range(N) if i//N == site_nbr)
    priority_total[i][1] -= 2*total_spin
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.1467279320987649}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.19699490740740688}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
        else:
          total_spin[i*N+j][0] -= 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34257731481481374}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
    else:
      total_spin[i*N+j][0] -= 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.1467279320987649}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        
  for k in range(N):
    site_nbr = (k - 1) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      priority_total[k*N+j][0] += 1
      
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin_site = total_spin[i][j]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.20185354938271552}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i,j in itertools.product(range(N),range(N)):
    site_nbr = (i + ((j-1)%2 - 1)) % N
    total_spin[i*N+j][0] += h[site_nbr][j]
    if h[i][j] > 0:
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [list(t) for t in total_spin]




#score: {'data2D.txt': 0.023007253086419772}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      if total_spin[i//N][i%N][0] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
    else:
      if total_spin[i//N][i%N][0] < 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin_site = total_spin[i][j]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.2242328703703704}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  total_spin = [0, 0]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0][site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j] = [total_spin[0], -total_spin[1]]
  return priority_total




#score: {'data2D.txt': 0.34257731481481374}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
    else:
      total_spin[i*N+j][0] -= 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.1467279320987649}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.008903858024691357}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  for i in range(N**2):
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
      else:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin_sum = total_spin[i//N][i%N][0]
      priority_total[i][0] = 2*total_spin_sum
      priority_total[i][1] = -2*(N-1-total_spin_sum)
    else:
      total_spin_sum = total_spin[i//N][i%N][0]
      priority_total[i][0] = -2*total_spin_sum
      priority_total[i][1] = 2*(N-1+total_spin_sum)
  return priority_total




#score: {'data2D.txt': 0.023007253086419772}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      if total_spin[i//N][i%N][0] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
    else:
      if total_spin[i//N][i%N][0] < 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.023007253086419772}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  total_spin = np.zeros((N, N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      if total_spin[i//N][i%N][0] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
    else:
      if total_spin[i//N][i%N][0] < 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.12431990740740756}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for k in range(N):
    site_nbr = (k - 1) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[k*N+j][0] += 1
        total_spin[k*N+j][1] -= 1
      else:
        total_spin[k*N+j][0] -= 1

  return total_spin




#score: {'data2D.txt': 0.0074875}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site][i%N]:
        if h[site][i%N] > 0:
          total_spin[i][0] -= 1
          total_spin[i][1] += 1
        else:
          total_spin[i][0] += 1
          total_spin[i][1] -= 1
  
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr=(i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N**2):
    site_nbr=(i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N**2):
    site_nbr=(i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    
    if h[i%N][i//N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
      
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
      
  return total_spin




#score: {'data2D.txt': 0.00559212962962963}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site][i%N]:
        if h[site_nbr][i%N] > 0:
          total_spin[i][0] -= 1
          total_spin[i][1] += 1
        else:
          total_spin[i][0] += 1
          total_spin[i][1] -= 1
  
  return total_spin




#score: {'data2D.txt': -0.12313688271604951}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
        priorities[i*N+j][0] += J[k][i][site_nbr]
        if J[k][i][site_nbr] > 0:
          priorities[i*N+j][1] -= 1
        else:
          priorities[i*N+j][1] += 1
      priorities[i*N+j][0] += total_spin
  return priorities




#score: {'data2D.txt': -0.15134459876543233}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  site_nbr = np.zeros((N**2), dtype=int)

  for i in range(N):
    for j in range(N):
      site_nbr[i*N+j] = (i + ((j-1)%2 - 1)) % N

  for k in range(4):
    for i in range(N):
      for j in range(N):
        if k % 2 == 0:
          total_spin[i*N+j][0] += J[k][site_nbr[i*N+j]][j]
        else:
          site_nbr_idx = (j + ((k-1)%2 - 1)) % N
          total_spin[i*N+j][0] -= J[k][i][site_nbr_idx]

  if np.any(h > 0):
    for i in range(N**2):
      if h[(i//N), (i%N)] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1

  return total_spin




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  # Calculate the magnetism contribution from each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  # Calculate the interaction contribution from each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  # Calculate the priority for each site
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009001697530864198}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[site_nbr1][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    
    site_nbr3 = (i % N + ((i//N-2)%2 - 1)) % N
    if i % N != 0 and h[site_nbr3][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    
    site_nbr4 = (i % N + ((i//N+2)%2 - 1)) % N
    if i % N != N-1 and h[site_nbr4][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(h[site_nbr][k] for k in range(N))
    if any(J[0][site_nbr][j]>0 for j in range(N)):
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      total_spin = sum(J[k][site_nbr][j] for k in range(4))
      priority_total[i*N+j][0] += sum(h[site_nbr][k] > 0 for k in range(N))
      if h[i][j] > 0:
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][1] += 1
      
  return priority_total.tolist()




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[site_nbr1][i%N] > 0:
      priority_total[i][0] += 2
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 2
      priority_total[i][1] += 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[site_nbr1][i%N] > 0:
      priority_total[i][0] += 3
      priority_total[i][1] -= 2
    else:
      priority_total[i][0] -= 3
      priority_total[i][1] += 2
    
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        if k == 0 or k == 1:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        elif k == 2:
          priority_total[i][0] += 2
          priority_total[i][1] -= 2
        else:
          priority_total[i][0] += 3
          priority_total[i][1] -= 3
      else:
        if k == 0 or k == 1:
          priority_total[i][0] -= 1
          priority_total[i][1] += 1
        elif k == 2:
          priority_total[i][0] -= 2
          priority_total[i][1] += 2
        else:
          priority_total[i][0] -= 3
          priority_total[i][1] += 3
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.014884413580246912}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(4):
      site_nbr_j = ((k-1)%2 - 1) % N
      total_spin[i][0] += J[k][site_nbr][i%N]*h[site_nbr_j][i%N]
    
    if sum(J[k][site_nbr][j] for k in range(4) for j in range(N) if i//N == site_nbr and i % N == j)>0:
      total_spin[i][1] -= 2
    else:
      total_spin[i][1] += 2
  
  return total_spin




#score: {'data2D.txt': -0.0046804012345679005}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(4):
      site_nbr_j = ((k-1)%2 - 1) % N
      total_spin[i][0] += J[k][site_nbr][i%N]
      if J[k][site_nbr][i%N]:
        total_spin[i][0] += h[site_nbr_j][i%N]
    total_spin[i][0] += sum(h[j//N][j] for j in range(N) if j//N == site_nbr)
    total_spin[i][1] -= 2*total_spin[i][0]
  return total_spin




#score: {'data2D.txt': -0.11043287037037049}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site][i%N]:
        if h[site][i%N] > 0:
          total_spin[i][0] -= 1
          total_spin[i][1] += 1
        else:
          total_spin[i][0] += 1
          total_spin[i][1] -= 1
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site][i%N]:
        if h[site][i%N] > 0:
          if i//N == site//N and abs(i-N*N) == abs(site-N*N):
            total_spin[i][0] -= 1
            total_spin[i][1] += 1
          elif (i+N*N)//2 == (site+N*N)//2:
            total_spin[i][0] -= 1
            total_spin[i][1] += 1
          else:
            if h[site][i%N] > 0:
              total_spin[i][0] += 1
              total_spin[i][1] -= 1
            else:
              total_spin[i][0] -= 1
              total_spin[i][1] += 1
        else:
          total_spin[i][0] -= 1
          total_spin[i][1] += 1
    return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site_nbr][i%N]:
        if h[site_nbr][i%N] > 0:
          total_spin[i][0] -= 1
          total_spin[i][1] += 1
        else:
          total_spin[i][0] += 1
          total_spin[i][1] -= 1
    
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site_nbr][i%N]:
        if h[site_nbr][i%N] > 0:
          total_spin[i][0] += 1
          total_spin[i][1] -= 1
        else:
          total_spin[i][0] -= 1
          total_spin[i][1] += 1
  
  return total_spin.tolist()




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  return total_spin




#score: {'data2D.txt': 0.18973935185185203}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.19698256172839457}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return(total_spin)




#score: {'data2D.txt': -0.009445216049382716}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if h[site_nbr1][i%N] > 0:
      priority_total[i][0] += 2
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 2
      priority_total[i][1] += 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
    
    site_nbr3 = (i % N + ((i//N-2)%2 - 1)) % N
    site_nbr4 = (i % N + ((i//N+2)%2 - 1)) % N
    
    if h[site_nbr3][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    
    if h[site_nbr4][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      if h[site_nbr1][j] > 0:
        priority_total[i*N+j][0] += 2
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 2
        priority_total[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.009028549382716048}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += sum(J[k][site_nbr][(i%N)] for k in range(4))
      priority_total[i][1] -= sum(1 for _ in range(4))
    else:
      priority_total[i][0] -= sum(J[k][site_nbr][(i%N)] for k in range(4))
      priority_total[i][1] += sum(1 for _ in range(4))
  return priority_total




#score: {'data2D.txt': -0.008900771604938271}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[j][site_nbr][(i%N)]*h[(j+1)%2][i%N] for j in range(4)])
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    priority_total[i][0] += total_spin
  return priority_total




#score: {'data2D.txt': -0.008900771604938271}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[j][site_nbr][(i%N)]*h[(j+1)%2][i%N] for j in range(4)])
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    priority_total[i][0] += total_spin
  return priority_total




#score: {'data2D.txt': 0.0033097222222222217}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(4):
      if J[j][site_nbr][(i%N)] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
    total_spin = sum([J[j][site_nbr][(i%N)]*h[(j+1)%2][i%N] for j in range(4)])
    if sum(h[site_nbr]) > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    priority_total[i][0] += total_spin
  return priority_total




#score: {'data2D.txt': -0.2330686728395061}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += J[k][site_nbr][(i%N)]
        else:
          total_spin -= J[k][site_nbr][(i%N)]
      priority_total[i*N+j][0] += total_spin
  return priority_total




#score: {'data2D.txt': -0.0012081790123456785}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[j][site_nbr][(i%N)]*h[(j+1)%2][i%N] for j in range(4)])
    if sum(h[i%N]) > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin
    else:
      priority_total[i][0] -= total_spin
  return priority_total




#score: {'data2D.txt': -0.008900771604938271}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[j][site_nbr][(i%N)]*h[(j+1)%2][i%N] for j in range(4)])
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    priority_total[i][0] += total_spin
  return priority_total




#score: {'data2D.txt': -0.009445216049382716}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][site_nbr][i%N]:
        total_spin += h[site_nbr_j][i%N]
        
      if h[i%N][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        
  return priority_total




#score: {'data2D.txt': -0.010345833333333334}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][site_nbr][i%N]:
        total_spin += h[site_nbr_j][i%N]
        if h[site_nbr_j][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.010738425925925924}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][i%N][site_nbr]:
        total_spin += h[site_nbr_j][i%N]
        if h[site_nbr_j][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.04049490740740744}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin = sum(J[k][site_nbr][j] for k in range(4) if J[k][site_nbr][j])
        priority_total[i*N+j][0] += (total_spin > 0)
        priority_total[i*N+j][1] -= (total_spin > 0)
      else:
        total_spin = sum(J[k][site_nbr][j] for k in range(4) if J[k][site_nbr][j])
        priority_total[i*N+j][0] -= (total_spin < 0)
        priority_total[i*N+j][1] += (total_spin < 0)
  return priority_total




#score: {'data2D.txt': -0.01236435185185185}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(4):
      site_nbr_j = ((j-1)%2 - 1) % N
      if J[j][site_nbr][i%N]:
        total_spin[i][0] += h[site_nbr_j][i%N]
        if h[site_nbr_j][i%N] > 0:
          total_spin[i][1] -= 1
        else:
          total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': 0.12192824074074067}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
    else:
      total_spin[i*N+j][0] += 1
  priorities = []
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      priorities.append(total_spin[i*N+j])
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
  return(total_spin)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      total_spin = [0,0]
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j],0]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin = [h[site_nbr][j], 0]
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(3):
        site = (i + ((k - 1) % 2 - 1)) % N
        total_spin[0] += h[site][j]
        if h[i][j] > 0:
          total_spin[0] -= 1
          total_spin[1] += 1
        else:
          total_spin[0] += 1
          total_spin[1] -= 1
      priority_total[i * N + j] = [total_spin[0], total_spin[1]]
  return priority_total




#score: {'data2D.txt': -0.0012566358024691357}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[k][site_nbr][(i%N)]*h[(k+1)%2][i%N] for k in range(4)])
    if sum(h[i//N]): 
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += total_spin
    else:
      priority_total[i][0] -= total_spin
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[j][site_nbr][(i%N)]*h[(j+1)%2][i%N] for j in range(4)])
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum([J[j][site_nbr][(i%N)]*h[(j+1)%2][i%N] for j in range(4)])
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1 + total_spin
      priority_total[i][1] -= 1 - total_spin
    else:
      priority_total[i][0] -= 1 - total_spin
      priority_total[i][1] += 1 + total_spin
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.010358796296296297}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[site_nbr1][i%N] > 0:
      total_spin[i][0] += 2
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 2
      total_spin[i][1] += 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
    
    site_nbr = (i + ((k-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
  return total_spin.tolist()




#score: {'data2D.txt': -0.009445216049382716}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    if h[site_nbr1][i%N] > 0:
      priority_total[i][0] += 2
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 2
      priority_total[i][1] += 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
    
    site_nbr3 = (i % N + ((i//N-2)%2 - 1)) % N
    if h[site_nbr3][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    
    site_nbr4 = (i % N + ((i//N+2)%2 - 1)) % N
    if h[site_nbr4][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.010258487654320986}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr1 = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbr2 = (i % N + ((i//N+1)%2 - 1)) % N
    
    if h[site_nbr1][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    
    for k in range(3):
     site = (i + ((k-1)%2 - 1)) % N
     if h[site][i%N] > 0:
       priority_total[i][0] += 1
       priority_total[i][1] -= 1
     else:
       priority_total[i][0] -= 1
       priority_total[i][1] += 1
    
    site_nbr3 = (i % N + ((i//N-2)%2 - 1)) % N
    site_nbr4 = (i % N + ((i//N+2)%2 - 1)) % N
    
    if h[site_nbr3][i%N] > 0:
     priority_total[i][0] += 1
     priority_total[i][1] -= 1
    else:
     priority_total[i][0] -= 1
     priority_total[i][1] += 1
    
    if h[site_nbr4][i%N] > 0:
     priority_total[i][0] += 1
     priority_total[i][1] -= 1
    else:
     priority_total[i][0] -= 1
     priority_total[i][1] += 1
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.19904614197530882}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  return total_spin




#score: {'data2D.txt': 0.04603070987654325}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin
      priority_total[i][1] -= total_spin
    else:
      priority_total[i][0] -= total_spin
  return priority_total




#score: {'data2D.txt': -0.17306003086419702}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if total_spin > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(2):
    site = (i + ((k-1)%2 - 1)) % N
    total_spin += h[site][j]
    if h[i][j] > 0:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = [total_spin[i][0],-total_spin[i][1]]
    else:
      priority_total = [-total_spin[i][0],total_spin[i][1]]
    priorities.append(priority_total)
  return priorities




#score: {'data2D.txt': 0.18973935185185203}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  
  return priority_total




#score: {'data2D.txt': 0.18151527777777798}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  return total_spin




#score: {'data2D.txt': 0.18973935185185203}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.19698256172839457}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
      priority_total[i*N+j] = total_spin[i][j]
  return priority_total




#score: {'data2D.txt': 0.17889645061728418}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return [list(row) for row in total_spin]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.0010464506172839507}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      total_spin[0] += h[site_nbr][j]
      if J[0][(site_nbr+1)%N][j]:
        total_spin[1] -= h[site_nbr][j]
      elif J[2][(site_nbr+N-1)%N][j]:
        total_spin[1] += h[site_nbr][j]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
    priority_total[i][0] = -total_spin[0]
    priority_total[i][1] = -total_spin[1]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return(total_spin)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
      for k in range(4):
        site_nbr = (i + ((k%2 - 1) + (j//2-1)%2) % N)
        if J[k][i*N+j][0] > 0:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1
        else:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
      for k in range(N**2):
        site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
        if h[site_nbr][k%N] > 0:
          priority_total[k][0] += 1
          priority_total[k][1] -= 1
        else:
          priority_total[k][0] -= 1
      return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[t[0], -t[1]] for t in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
  return [[t[0], -t[1]] for t in total_spin]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  J_flatten = J.reshape((4*N2))
  J_neighbors = J_flatten[:N2]
  J_non_neighbors = J_flatten[N2:3*N2]

  total_spin = np.zeros((N2, 2))

  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N

      total_spin[i*N+j][0] += h[site_nbr1][j]
      if h[site_nbr1][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1

      total_spin[i*N+j][0] += J_neighbors[i*N+j]
      if h[site_nbr1][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1

      if i < N-1 and h[site_nbr2][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      elif i < N-1 and h[site_nbr2][j] < 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1

  return total_spin




#score: {'data2D.txt': 0.0005016975308641974}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = sum(J[0][j][site_nbr] for j in range(4)) + h[site_nbr][i%N]
    if total_spin > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      total_spin = 0
      for k in [(i-1)%N, (i+1)%N, (j-1)%N, (j+1)%N]:
        if k in [i,j]: continue
        site_nbrs.append((k, j))
      
      for site_n in site_nbrs:
        total_spin += h[site_n[0]][site_n[1]]
        if h[i][j] > 0: 
          priorities[i*N+j][0] += 1
          priorities[i*N+j][1] -= 1
        else:
          priorities[i*N+j][0] -= 1
      
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  
  for k in range(4):
    site_nbr = (k % 2) 
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][1] += 1
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i * N + j] = [1, -3]
      else:
        priority_total[i * N + j] = [-1, 1]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i * N + j] = [1, -1]
      else:
        priority_total[i * N + j] = [-1, 1]
  return priority_total




#score: {'data2D.txt': -0.19697546296296325}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[0, 0] for _ in range(N**2)]
  for k in range(2):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return(total_spin)




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return(total_spin)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  return [row for row in total_spin]




#score: {'data2D.txt': -0.19551157407407418}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += total_spin[0][i%N][0]
      priority_total[i][1] -= total_spin[0][i%N][1]
    else:
      priority_total[i][0] = -total_spin[0][i%N][0]
  
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[0][j][0]
    else:
      priority_total[j][1] = -total_spin[0][j][1]
      
  return priority_total




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities

  total_spin = np.zeros((N, N))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
      if J[0][i*N+j][0] > 0:
        total_spin[i][j][0] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N, N))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i][j][0] -= 1
        priority_total[i][j][1] += 1
      else:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1

  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return(total_spin)




#score: {'data2D.txt': 0.07396342592592609}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priorities = []
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities.append([-total_spin[i][0], float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin[i][0]])
  
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.19697546296296325}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[0, 0] for _ in range(N**2)]
  for k in range(2):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[t[0], -t[1]] for t in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
          
      priorities[i*N+j][0] += total_spin
      priorities[i*N+j][1] -= total_spin
      
  return [[t[0],-t[1]] for t in priorities]




#score: {'data2D.txt': 0.16996157407407353}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      
  for k in range(2):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.17296774691357972}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for k in range(N):
    site = (k + ((i-1)%2 - 1)) % N
    if h[site][j] > 0:
      priority_total[i*N+j][0] += 1
    else:
      priority_total[i*N+j][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N2, 2))
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N//2, N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[t[0], -t[1]] for t in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[t[0], -t[1]] for t in total_spin]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
          
      priorities[i*N+j][0] += total_spin
      priorities[i*N+j][1] = -total_spin
      
  return [[t[0],-t[1]] for t in priorities]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      priority_total[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      priority_total[i][1] += 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priority_total[i][0] += 1
        total_spin[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        total_spin[i][1] += 1
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      priority_total[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      priority_total[i][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return(priority_total)




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return(total_spin)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] = -total_spin
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  priority_total = np.zeros((N * N, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1

      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  for i in range(N):
    if h[0][i] > 0:
      total_spin[0][i][0] = total_spin[0][i][1]
    else:
      total_spin[0][i][0] = -total_spin[0][i][1]

  return priority_total




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      document_spin = np.array([1 if h[site_nbr][j] > 0 else -1, -1 if h[i][j] > 0 else 1])
      total_spin[i][j] += document_spin
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    document_spin = np.array([1 if h[site_nbr][i%N] > 0 else -1, -1 if h[i//N][i%N] > 0 else 1])
    priority_total[i] += document_spin
  return priority_total




#score: {'data2D.txt': 0.342687499999999}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  for k in range(2):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
  return total_spin




#score: {'data2D.txt': 0.157429475308642}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  spin_priorities = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+1)%N, (i-1+N)%N, (j+1)%N, (j-1+N)%N]
      total_spin = sum([h[si][jj] for si,jj in zip(site_nbrs, [i]*4)])
      
      if h[i][j] > 0:
        spin_priorities[i*N+j][0] -= 1
        spin_priorities[i*N+j][1] += 1
      else:
        spin_priorities[i*N+j][0] += 1
        spin_priorities[i*N+j][1] -= 1
      
      total_spin += h[i][j]
      
      if total_spin > 0:
        spin_priorities[i*N+j][0] -= 2
        spin_priorities[i*N+j][1] += 1
      elif total_spin < 0:
        spin_priorities[i*N+j][0] += 2
        spin_priorities[i*N+j][1] -= 1
  
  return spin_priorities




#score: {'data2D.txt': 0.011325771604938271}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = np.zeros((N,2))
      for j in range(N):
        site_nbr = (i // N + ((j-1)%2 - 1)) % N
        total_spin[j][0] += h[site_nbr][j]
        if h[i//N][j] > 0:
          total_spin[j][1] -= 1
        else:
          total_spin[j][1] += 1
      for j in range(N):
        priority_total[i][0] += total_spin[j][0]
        priority_total[i][1] -= total_spin[j][1]
  return(priority_total)




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  total_spin = [0,0]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        total_spin[1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        total_spin[1] += 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': 0.26954706790123417}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(N):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][k%N] > 0:
        total_spin[i*N+k][0] -= 1
        total_spin[i*N+k][1] += 1
      else:
        total_spin[i*N+k][0] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  priorities = [spin[:] for spin in total_spin]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  interacting_spins = np.zeros((4, N, N))  
  for i in range(4):
    if i % 2 == 0:
      interacting_spins[i] = np.roll(h, -1, axis=i//2)
    else:
      interacting_spins[i] = np.roll(h, 1, axis=i//2)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.001364043209876543}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i,j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i,j][1] -= 1
      else:
        total_spin[i,j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i,j][0] += 1
        total_spin[i,j][1] -= 1
      else:
        total_spin[i,j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities = np.zeros((N**2,2))
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities = np.zeros((N**2,2))
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return(priority_total)




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  return(priority_total)




#score: {'data2D.txt': -0.07314027777777787}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(N):
    site = (k + ((i-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] -= 1
    else:
      total_spin[i*N+j][0] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return(total_spin)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return [[t[0], -t[1]] for t in total_spin]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N * N)]
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[t[0], -t[1]] for t in priority_total]




#score: {'data2D.txt': -0.07609583333333302}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return [[t[0],-t[1]] for t in total_spin]




#score: {'data2D.txt': 0.00020324074074074133}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    else:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': 0.00020324074074074133}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
    else:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
    return(priority_total.reshape(-1,2))




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      document_total_spin = np.zeros((N,N,2))
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    document_priority_total = np.zeros((N,N,2))
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for j in range(N):
    site_nbr = (0 + ((j-1)%2 - 1)) % N
    total_spin = h[site_nbr][j]
    if h[0][j] > 0:
      priority_total[j][0] += 1
      priority_total[j][1] -= 1
    else:
      priority_total[j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)
  
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.001364043209876543}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i,j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i,j][1] -= 1
      else:
        total_spin[i,j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities = np.zeros((N**2,2))
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities = np.zeros((N**2,2))
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.001364043209876543}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i,j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i,j][1] -= 1
      else:
        total_spin[i,j][1] += 1
      
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities = np.zeros((N**2,2))
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities = np.zeros((N**2,2))
      priorities[i][0] -= 1
      
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          total_spin[i*N+j][0] += h[site][j]
          if h[i][j] > 0:
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][1] += 1
      return [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total=np.zeros((N*N,2))
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][i%N]
      if h[i//N][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
    return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return([total_spin[i] for i in range(N**2)])




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
      else:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  return(priority_total)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority = [[float('-inf'), float('inf')] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority[i*N+j] = [priority[i*N+j][0]-1, priority[i*N+j][1]+1]
      else:
        priority[i*N+j] = [priority[i*N+j][0]+1, priority[i*N+j][1]-1]

  return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  return [[-x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return([total_spin[i] for i in range(N**2)])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return([total_spin[i] for i in range(N**2)])




#score: {'data2D.txt': 0.20000601851851868}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = [[0, 0] for _ in range(N2)]
  total_spin = [0, 0]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[0] += 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      total_spin[0] -= 1
      priority_total[i][0] -= 1
      
  return [[-x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': -0.14147299382716066}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[-x[0], -x[1]] for x in total_spin]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i * N + j][0] += 1
        priority_total[i * N + j][1] -= 1
      else:
        priority_total[i * N + j][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          total_spin[i*N+j][0] += h[site][j]
          if h[i][j] > 0:
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][1] += 1
  return [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          total_spin[i*N+j][0] += h[site][j]
          if h[i][j] > 0:
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][1] += 1
  return [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          priority_total[i*N+j][0] += h[site][j]
          if h[i][j] > 0:
            priority_total[i*N+j][1] -= 1
          else:
            priority_total[i*N+j][1] += 1
  return [[total_spin[j][0], -total_spin[j][1]] for j in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.tolist()




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  priority_total=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.0014890432098765432}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
    return(priority_total)

  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]

  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.0014890432098765432}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          total_spin[i*N+j][0] += h[site][j]
          if h[i][j] > 0:
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][1] += 1
  return [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        for k in range(3):
          site = (i + ((k - 1) % 2 - 1)) % N
          total_spin[i * N + j][0] += h[site][j]
          if h[i][j] > 0:
            total_spin[i * N + j][1] -= 1
          else:
            total_spin[i * N + j][1] += 1
  return [[total_spin[j][0], -total_spin[j][1]] for j in range(N * N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  site_nbr_map = [(i + ((j - 1) % 2) - 1) % N for i in range(N) for j in range(N)]

  for i in range(N * N):
    for k in range(3):
      site = (site_nbr_map[i] + ((k - 1) % 2) - 1) % N
      total_spin[i][0] += h[site][i % N]
      if h[i // N][i % N] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1

  return [[total_spin[j][0], -total_spin[j][1]] for j in range(N * N)]




#score: {'data2D.txt': -0.19699490740740688}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N ** 2)]
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      for k in range(3):
        site = (i + ((k - 1) % 2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
        else:
          total_spin[0] -= 1
      priority_total[i * N + j][0] = total_spin[0]
      priority_total[i * N + j][1] = -total_spin[1]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  return [[-x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  spin_priorities = [[0, 0] for _ in range(N2)]
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      spin_priorities[i][0] += 1
      spin_priorities[i][1] -= 1
    else:
      spin_priorities[i][0] -= 1
  return [[-x[0], -x[1]] for x in spin_priorities]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  return [[total_spin[j][0], -total_spin[j][1]] for j in range(N * N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j+1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j+1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          total_spin[i*N+j][0] += h[site][j]
          if h[i][j] > 0:
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][1] += 1
      
      return [[total_spin[j][0], -total_spin[j][1]] for j in range(N * N)]




#score: {'data2D.txt': 0.1484121913580244}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return([total_spin[i] for i in range(N**2)])




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities.append([-1*total_spin[i][0], float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin[i][0]])
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return([total_spin[i] for i in range(N**2)])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      priority_total[i*N+j] = [total_spin[i*N+j][0], total_spin[i*N+j][1]]
  return([priority_total[i] for i in range(N**2)])




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      document_spin = np.array([1 if h[site_nbr][j] > 0 else -1, -1 if h[i][j] > 0 else 1])
      total_spin[i][j] += document_spin
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    document_spin = np.array([1 if h[site_nbr][i%N] > 0 else -1, -1 if h[i//N][i%N] > 0 else 1])
    priority_total[i] += document_spin
  return priority_total




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      document_spin = np.array([1 if h[site_nbr][j] > 0 else -1, -1 if h[i][j] > 0 else 1])
      total_spin[i][j] += document_spin
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    document_spin = np.array([1 if h[site_nbr][i%N] > 0 else -1, -1 if h[i//N][i%N] > 0 else 1])
    priority_total[i] += document_spin
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N//2, N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[t[0], -t[1]] for t in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N//2, N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[t[0], -t[1]] for t in total_spin]




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total = np.zeros((N*N,2))
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          if h[site][j] > 0:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][0] -= 1
        return(priority_total)
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return(total_spin)




#score: {'data2D.txt': 0.33635046296296195}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for j in range(N):
    if h[i][j] > 0:
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] -= 1
  
  return [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][1] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1

  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0,0.0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      total_spin = [0.0, 0.0]
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  site_nbr = np.zeros((N,N), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr[i,j] = (i + ((j-1)%2 - 1)) % N
      total_spin[i,j][0] += h[site_nbr[i,j]][j]
      if h[i][j] > 0:
        total_spin[i,j][1] -= 1
      else:
        total_spin[i,j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if h[site_nbr[i,j]][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': 0.0014041666666666668}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  for k in range(3):
    sites = [site_nbrs[i] for i in range(k,N*k,3)]
    for i,j in zip(sites,range(N)):
      total_spin[j][0] += h[i][j]
      if h[i][j] > 0:
        total_spin[j][1] -= 1
      else:
        total_spin[j][1] += 1
  return [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return [[priority_total[j][0], -priority_total[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]
  return priority_total




#score: {'data2D.txt': -0.0015557098765432097}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2,2))
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][1] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1

  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1
        else:
          total_spin[i][j][0] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1
        else:
          total_spin[i][j][0] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1

  return priority_total




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0,0.0] for _ in range(N**2)]
  priority_total = [[0.0,0.0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N**2):
    if total_spin[i//N][i%N][0] > 0:
      priority_total[i][0] = total_spin[i//N][i%N][0]
      priority_total[i][1] = -total_spin[i//N][i%N][0]
    else:
      priority_total[i][0] = -total_spin[i//N][i%N][0]
      priority_total[i][1] = total_spin[i//N][i%N][0]

  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1
        else:
          total_spin[i][j][0] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1
        else:
          total_spin[i][j][0] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1

  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = 0
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      total_spin = 0
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  total_spin = np.zeros((N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
      priority_total[i*N+j][0] = total_spin[i][j][0]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.19561126543209903}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      if k == 0:
        j = i%N
      else:
        j = ((i+((k-1)%2-1))%N)
      total_spin += h[site_nbr][j]
      if h[i//N][j] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.34310848765431995}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(h[site_nbr] * [1 if j == i%N else 0 for j in range(N)])
    if h[i//N][i%N] > 0:
      priority_total[i][0] += np.count_nonzero(J[0][:,site_nbr])
      priority_total[i][1] -= np.count_nonzero(J[0][:,site_nbr]) + (np.count_nonzero(J[1][:,site_nbr]) if J[2][i%N,site_nbr] > 0 else -np.count_nonzero(J[1][:,site_nbr]))
    else:
      priority_total[i][0] -= np.count_nonzero(J[0][:,site_nbr])
      priority_total[i][1] += np.count_nonzero(J[0][:,site_nbr]) + (np.count_nonzero(J[1][:,site_nbr]) if J[2][i%N,site_nbr] > 0 else -np.count_nonzero(J[1][:,site_nbr]))
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for k in range(2):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
    else:
      total_spin[i*N+j][0] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] += 1

  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
        else:
          total_spin[i*N+j][0] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] += 1

  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('inf'),float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
    else:
      total_spin[i*N+j][0] += 1

  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    total_spin[i*N+j][0] += h[site][j]
    if h[i][j] > 0:
      priority_total[i*N+j][0] -= 1
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] += 1

  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0,0.0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return([[a,b] for a,b in total_spin])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      priority_total[i*N+j][1] = -total_spin[i*N+j][1]

  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priority_total = [[-x[0], -x[1]] for x in total_spin]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[-x[0], -x[1]] for x in total_spin]
  return priority_total




#score: {'data2D.txt': -0.007382561728395061}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total = np.zeros((N*N,2))
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          if h[site][j] > 0:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
        return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = np.zeros((1,2))
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0][0] += 1
          total_spin[0][1] -= 1
        else:
          total_spin[0][0] -= 1
          total_spin[0][1] += 1
      priority_total[i*N+j] = total_spin.reshape(-1)
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  for i in range(N**2):
    for k in range(3):
      site = (i % N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][0] += 1
      else:
        total_spin[i][0] -= 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          if h[site][j] > 0:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
        
  return(total_spin)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      if h[i//N][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      for site_nbr in site_nbrs:
        if h[site_nbr][j] > 0:
          total_priority[i*N+j][0] += 1
          total_priority[i*N+j][1] -= 1
        else:
          total_priority[i*N+j][0] -= 1
          total_priority[i*N+j][1] += 1
  return(total_priority)




#score: {'data2D.txt': -0.035340277777777776}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    total_spin = 0
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priority_total[i][0] += total_spin
    priority_total[i][1] = -total_spin
  return priority_total




#score: {'data2D.txt': -0.03238657407407406}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][0] += h[site_nbr][j]
      if h[i//N][j] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  
  return(priority_total)




#score: {'data2D.txt': -0.14787854938271625}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
          
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1

  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('inf'),float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j]>0:
        total_spin[i*N+j][0]+=1
        total_spin[i*N+j][1]-=1
      else:
        total_spin[i*N+j][0]-=1
        total_spin[i*N+j][1]+=1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      priority_total[i*N+j][1] = -total_spin[i*N+j][1]
  
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N**2):
    if sum(total_spin[i]) > 0:
      priority_total[i][0] = -float('inf')
    elif sum(total_spin[i]) < 0:
      priority_total[i][1] = float('inf')
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  
  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0.0,0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0,0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    if h[site_nbr][i%N] > 0:
      total_spin[0] += 1
      total_spin[1] -= 1
    else:
      total_spin[0] -= 1
      total_spin[1] += 1
    priority_total[i][0] = -total_spin[0]
    priority_total[i][1] = -total_spin[1]
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1
        else:
          total_spin[i][j][0] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1
        else:
          total_spin[i][j][0] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1

  return priority_total




#score: {'data2D.txt': 0.010939660493827158}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  
  for i in range(N**2):
    total_spin = [0, 0]
    site_nbr = (i // N + ((i % N - 1) % N)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[0] += 1
      total_spin[1] -= 1
    else:
      total_spin[0] -= 1
      total_spin[1] += 1
    
    for k in range(4):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][i % N] > 0:
        total_spin[0] -= 1
        total_spin[1] += 1
      else:
        total_spin[0] += 1
    
    priorities.append([-total_spin[0], float('-inf')]) if total_spin[0] >= 0 else priorities.append([float('-inf'), -total_spin[0]])
  
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1
        else:
          total_spin[i][j][0] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1
        else:
          total_spin[i][j][0] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1

  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        if k == 0:
          for l in range(max(0, i-1), min(N, i+2)):
            site = (l + ((j-1)%2 - 1)) % N
            total_spin[0] += h[site][j]
            if h[i][j] > 0:
              total_spin[1] -= 1
            else:
              total_spin[1] += 1
        elif k == 1:
          for l in range(max(0, j-1), min(N, j+2)):
            site = (i + ((l-1)%2 - 1)) % N
            total_spin[0] += h[i][site]
            if h[i][j] > 0:
              total_spin[1] -= 1
            else:
              total_spin[1] += 1
        elif k == 2:
          site = (i + ((j-1)%2 - 1)) % N
          total_spin[0] += h[site][j]
          if h[i][j] > 0:
            total_spin[1] -= 1
          else:
            total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= total_spin
  return priority_total




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  total_spin = np.zeros((N,N))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j] += 1
      else:
        total_spin[i][j] -= 1
        
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_list = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
        if h[i][j] > 0:
          priority_list[i*N+j][0] += 1
          priority_list[i*N+j][1] -= 1
        else:
          priority_list[i*N+j][0] -= 1
          priority_list[i*N+j][1] += 1
      
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      priority_list[i*N+j][0] += total_spin
      priority_list[i*N+j][1] -= total_spin
  
  return priority_list




#score: {'data2D.txt': -0.00019984567901234573}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin -= 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          total_spin += 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin -= 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          total_spin += 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          total_spin -= 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
      
  return priority_total




#score: {'data2D.txt': -0.0015754629629629625}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0,0]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[1] += 1
      else:
        total_spin[1] -= 1
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2), dtype=int)
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      
  return priority_total.tolist()




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        if h[site_nbr][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= total_spin
  return priority_total




#score: {'data2D.txt': -0.006377932098765433}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0][site_nbr][i%N] > 0:
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
    elif J[1][site_nbr][i%N] > 0:
      if h[site_nbr][i%N] < 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
    elif J[2][site_nbr][i%N] > 0:
      if h[site_nbr][i%N] < 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
    elif J[3][site_nbr][i%N] > 0:
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.0015754629629629625}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [h[site_nbr][i%N], 0]
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[1] += 1
      else:
        total_spin[1] -= 1
    if total_spin[0] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    return [list(row) for row in priority_total]




#score: {'data2D.txt': -0.0015754629629629625}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      for k in range(4): # or 3 if only considering horizontal and vertical neighbors
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return priority_total




#score: {'data2D.txt': -0.005836265432098765}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0][site_nbr][i%N] > 0 and h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    elif J[0][site_nbr][i%N] > 0 and h[site_nbr][i%N] < 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    elif J[1][site_nbr][i%N] > 0 and h[site_nbr][i%N] < 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    elif J[2][site_nbr][i%N] > 0 and h[site_nbr][i%N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    elif J[3][site_nbr][i%N] > 0 and h[site_nbr][i%N] < 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  return total_spin




#score: {'data2D.txt': -0.0015557098765432097}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = [[0,-1] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_priority[i*N+j][0] += J[0][site_nbr][j]
        total_priority[i*N+j][1] -= 1
      else:
        total_priority[i*N+j][0] -= J[0][site_nbr][j]
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_priority[i*N+j][0] += 1
      total_priority[i*N+j][1] -= 1
    else:
      total_priority[i*N+j][0] -= 1
  return total_priority




#score: {'data2D.txt': -0.00800354938271605}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    for k in range(4):
      if J[k][site_nbr][i%N] > 0:
        if h[site_nbr][i%N] == J[k][site_nbr][i%N]:
          priority_total[i][0] += 1
          priority_total[i][1] -= 2
        else:
          priority_total[i][0] -= 1
      elif J[k][site_nbr][i%N] < 0:
        if h[site_nbr][i%N] == J[k][site_nbr][i%N]:
          priority_total[i][0] -= 1
          priority_total[i][1] += 2
        else:
          priority_total[i][0] += 1
  return priority_total




#score: {'data2D.txt': -0.01178472222222222}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, float('-inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N)) % N
    total_spin = [0, 0]
    
    if h[site_nbr][i % N] > 0:
      total_spin[0] += 1
      total_spin[1] -= 1
    else:
      total_spin[0] -= 1
      total_spin[1] += 1
    
    for k in range(4):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][i % N] > 0:
        total_spin[0] -= 1
        total_spin[1] += 1
      else:
        total_spin[0] += 1
    
    priorities[i][0] = -total_spin[0]
    priorities[i][1] = -total_spin[1] if total_spin[0] >= 0 else float('-inf')
    
  return priorities




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.00019984567901234573}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
      for k in range(4):
        site = (i + ((k%2) - 1)) % N
        if h[site][j] > 0:
          total_spin -= 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          total_spin += 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.00019984567901234573}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin -= 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          total_spin += 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin -= 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          total_spin += 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          total_spin -= 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
      for k in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          total_spin -= 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
      
      for k in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin -= 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          total_spin += 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
        else:
          total_spin[i*N+j][0] -= 1
  return total_spin




#score: {'data2D.txt': 0.008015586419753086}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += total_spin[0][i%N][0]
      priority_total[i][1] -= total_spin[0][i%N][1]
    else:
      priority_total[i][0] = -total_spin[0][i%N][0]

  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[0][j][0]
    else:
      priority_total[j][1] = -total_spin[0][j][1]

  return priority_total




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  return(priority_total)




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(4):  # changed to 4
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  
  return(priority_total)




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return(-total_spin)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': 0.1102726851851853}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(4):
        if k==0:
          site = i
        elif k==1:
          site = (i+1)%N
        elif k==2:
          site = (i-1)%N
        else:
          site = j
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return(priority_total)




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin = [0, 0]
      if h[site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      priority_total[i * N + j][0] = -total_spin[0]
      priority_total[i * N + j][1] = -total_spin[1]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = sum(h[site_nbr][jj] for jj in range(N))
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': 0.008015586419753086}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += total_spin[0][i%N][0]
      priority_total[i][1] -= total_spin[0][i%N][1]
    else:
      priority_total[i][0] = -total_spin[0][i%N][0]
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[0][j][0]
    else:
      priority_total[j][1] = -total_spin[0][j][1]
  return priority_total




#score: {'data2D.txt': 0.008015586419753086}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += total_spin[0][i%N][0]
      priority_total[i][1] -= total_spin[0][i%N][1]
    else:
      priority_total[i][0] = -total_spin[0][i%N][0]

  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[0][j][0]
    else:
      priority_total[j][1] = -total_spin[0][j][1]

  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return [[s[0], -s[1]] for s in total_spin]




#score: {'data2D.txt': -0.17440910493827189}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N**2):
    if h[i%N][i//N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return [total_spin[i] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  return [total_spin[i] for i in range(N**2)]




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
        
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
      
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.010252314814814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N,2))
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0, 0.0] for _ in range(N**2)]
  for i in range(N**2):
    total_spin = [0.0, 0.0]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin[0]
      priorities[i][1] = float('-inf')
    else:
      priorities[i][0] = float('-inf')
      priorities[i][1] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][1] += 1
        
  return priorities




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.5 for _ in range(2)] for _ in range(N**2)]
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.00020324074074074133}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
    else:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': 0.00020324074074074133}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
    else:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[spin[0],-spin[1]] for spin in total_spin]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.5, 0.5] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      for site_nbr in site_nbrs:
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      site_sum = sum(h[site_nbr][j] for site_nbr in site_nbrs)
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = np.zeros((N*N,2), dtype=int)
  for i in range(N**2):
    site_nbr[i][1] += h[(i % N + ((i//N-1)%2 - 1)) % N][i%N]
    if h[(i % N + ((i//N-1)%2 - 1)) % N][i%N] > 0:
      site_nbr[i][0] += 1
      site_nbr[i][1] -= 1
    else:
      site_nbr[i][0] -= 1
      site_nbr[i][1] += 1
  for k in range(3):
    site = (i % N + ((k-1)%2 - 1)) % N
    site_nbr[i][0] += h[site][i%N]
  if h[(i % N + ((i//N-1)%2 - 1)) % N][i%N] > 0:
    site_nbr[i][0] += 1
    site_nbr[i][1] -= 1
  else:
    site_nbr[i][0] -= 1
    site_nbr[i][1] += 1
  return(site_nbr)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        
  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  priority_total = np.zeros((N*N,2))
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      priority_total += 1
    else:
      priority_total -= 1
    
  return(total_spin)




#score: {'data2D.txt': -0.17306003086419702}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if total_spin > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    total_spin += h[site_nbr][j]
  if h[i][j] > 0:
    priority_total[i*N+j][0] += 1
    priority_total[i*N+j][1] -= 1
  else:
    priority_total[i*N+j][0] -= 1
    priority_total[i*N+j][1] += 1
  return(priority_total)




#score: {'data2D.txt': 0.2939334876543204}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return [[-spin[0], -spin[1]] for spin in total_spin]




#score: {'data2D.txt': 0.16338842592592612}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      for m in range(3):
        site = (i + ((m-1)%2 - 1)) % N
        if h[i][site] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i, j: (i + ((j-1)%2 - 1)) % N
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr_i_j = site_nbr(i, j)
      total_spin[i*N+j][0] += h[site_nbr_i_j][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[spin[0], -spin[1]] for spin in total_spin]




#score: {'data2D.txt': -0.005959413580246913}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin_sum = total_spin[site_nbr][i%N][0]
      priority_total[i][0] = total_spin_sum + J[0][i%N][site_nbr]
      priority_total[i][1] = -total_spin_sum
    else:
      total_spin_sum = -total_spin[site_nbr][i%N][0]
      priority_total[i][0] = -total_spin_sum
      priority_total[i][1] = J[0][i%N][site_nbr]

  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[0][j][0]
    else:
      priority_total[j][1] = -total_spin[0][j][1]

  return priority_total




#score: {'data2D.txt': 0.008015586419753086}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += total_spin[0][i%N][0]
      priority_total[i][1] -= total_spin[0][i%N][1]
    else:
      priority_total[i][0] = -total_spin[0][i%N][0]

  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[0][j][0]
    else:
      priority_total[j][1] = -total_spin[0][j][1]

  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[0, 0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[-spin[0], -spin[1]] for spin in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for k in range(N):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return [[-spin[0], -spin[1]] for spin in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for k in range(3):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1

  return [[-spin[0], -spin[1]] for spin in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return [[-spin[0], -spin[1]] for spin in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0, 0.0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0.0, 0.0]
    total_spin[0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin[0]
      priorities[i][1] = float('-inf')
    else:
      priorities[i][0] = float('-inf')
      priorities[i][1] = -total_spin[0]
  return(priorities)




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1.0
      total_spin[i][1] -= 1.0
    else:
      total_spin[i][0] -= 1.0
      total_spin[i][1] += 1.0
  priorities = [[-x[0], -x[1]] if x[0] > 0 else [-float('-inf'), -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return(priority_total.reshape(-1,2))




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return(priority_total)




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    
    if h[site_nbr][i%N] > 0:
      total_spin[0] += 1
      total_spin[1] -= 1
    else:
      total_spin[0] -= 1
      total_spin[1] += 1
    
    priority_total[i][0] = -total_spin[0]
    priority_total[i][1] = -total_spin[1]
  
  return(priority_total)




#score: {'data2D.txt': 0.24530015432098726}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': 0.0009970679012345682}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.zeros(2)
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      total_spin[0] += h[site_nbr][j]
    priority_total[i][0] = total_spin[0]
    priority_total[i][1] = -total_spin[1]
  return(priority_total)




#score: {'data2D.txt': 0.011325771604938271}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = np.zeros((N,2))
      for j in range(N):
        site_nbr = (i // N + ((j-1)%2 - 1)) % N
        total_spin[j][0] += h[site_nbr][j]
        if h[i//N][j] > 0:
          total_spin[j][1] -= 1
        else:
          total_spin[j][1] += 1
      for j in range(N):
        priority_total[i][0] += total_spin[j][0]
        priority_total[i][1] -= total_spin[j][1]
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(4):
        if k == 0:
          site = (i + ((k-1)%2 - 1)) % N
        elif k == 1:
          site = (i + ((j+1)%2 - 1)) % N
        elif k == 2:
          site = (i + ((k-1)%2 - 1)) % N
        else:
          site = (i + ((j-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+1)%N,i-1 if i>0 else N-1,(j+1)%N,j-1 if j>0 else N-1]
      for k,site_nbr in enumerate(site_nbrs):
        total_spin[i][j][0] += h[site_nbr][k%N]
        if h[i][j] > 0:
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  priority_total=np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1.0
        total_spin[i*N+j][1] -= 1.0
      else:
        total_spin[i*N+j][0] -= 1.0
        total_spin[i*N+j][1] += 1.0
  priorities = [[-x[0], -x[1]] if x[0] > 0 else [-float('-inf'), -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0.0, 0.0] for _ in range(N**2)]
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for k in range(3):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
        else:
          total_spin[i*N+j][0] -= 1
  priorities = [[-x[0], -x[1]] if x[0] > 0 else [-float('-inf'), -x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': 0.005701388888888889}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(4):
        if k == 0:
          site = (i + ((k-1)%2 - 1)) % N
        elif k == 1:
          site = (j + ((i-1)%2 - 1)) % N
        else:
          site = (i + ((k-3)%2 - 1)) % N
        if h[site][k%N] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  return [[-p[0], -p[1]] for p in priority_total]




#score: {'data2D.txt': 0.2939334876543204}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return [[-spin[0], -spin[1]] for spin in total_spin]




#score: {'data2D.txt': 0.2939334876543204}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[-spin[0], -spin[1]] for spin in total_spin]




#score: {'data2D.txt': 0.2939334876543204}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return [[-spin[0], -spin[1]] for spin in total_spin]




#score: {'data2D.txt': -0.005959413580246913}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin_sum = total_spin[site_nbr][i%N][0]
      priority_total[i][0] = total_spin_sum + J[0][i%N][site_nbr]
      priority_total[i][1] = -total_spin_sum
    else:
      total_spin_sum = -total_spin[site_nbr][i%N][0]
      priority_total[i][0] = -total_spin_sum
      priority_total[i][1] = J[0][i%N][site_nbr]

  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[0][j][0]
    else:
      priority_total[j][1] = -total_spin[0][j][1]

  return priority_total




#score: {'data2D.txt': -0.16149212962962967}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin_sum = sum([h[k][j] for k in range(N) for j in range(N) if (k==i//N and j==i%N)])
      priority_total[i][0] = total_spin_sum + sum([J[0][k][site_nbr] for k in range(N) if k==i%N])
      priority_total[i][1] = -total_spin_sum
    else:
      total_spin_sum = -sum([h[k][j] for k in range(N) for j in range(N) if (k==i//N and j==i%N)])
      priority_total[i][0] = -total_spin_sum
      priority_total[i][1] = sum([J[0][k][site_nbr] for k in range(N) if k==i%N])

  return priority_total




#score: {'data2D.txt': -0.009009104938271605}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += J[0][i%N][site_nbr]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += J[0][i%N][site_nbr]

  for i in range(N):
    if h[i][0] > 0:
      total_spin[i*N][0] += J[1][0][i]
    else:
      total_spin[i*N][1] += J[1][0][i]

  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(4): 
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N2):
    total_spin[i][0] += h[i//N][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return priority_total




#score: {'data2D.txt': -0.19698256172839457}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return([list(x) for x in total_spin])




#score: {'data2D.txt': -0.11162114197530865}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  for k in range(4):
    site_nbr = (k % 2) % N
    for i in range(N):
      for j in range(N):
        total_spin[i*N+j][0] += J[k][i][j]
        if J[k][i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.29440324074074026}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += J[0][i][j]
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= J[0][i][j]
        total_spin[i*N+j][0] -= 1
  return [total_spin[i*N+j] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return([list(x) for x in priority_total])




#score: {'data2D.txt': 0.342753549382715}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  for k in range(2):
    site = (i + ((k - 1) % 2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i * N + j][0] += 1
      total_spin[i * N + j][1] -= 1
    else:
      total_spin[i * N + j][0] -= 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.006255092592592593}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i, j: (i + ((j-1)%2 - 1)) % N
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      total_spin[i*N+j][0] += sum(h[site_nbr(i,j)][(k+1)%N if k==j-1 else (k+N) % N] 
                       + h[site_nbr(i,j)][k] for k in range(4))
      
      if all(h[site_nbr(i,j)][(k+1)%N if k==j-1 else (k+N) % N] > 0 for k in range(4)):
        total_spin[i*N+j][1] -= 2
      elif any(h[site_nbr(i,j)][(k+1)%N if k==j-1 else (k+N) % N] < 0 for k in range(4)):
        total_spin[i*N+j][1] += 2
      else:
        total_spin[i*N+j][1] = sum(h[site_nbr(i,j)][(k+1)%N if k==j-1 else (k+N) % N] 
                       for k in range(4))
      
  return [[x[0], -x[1]] if x[1]>0 else [x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
  for i in range(N*N):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i,j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i,j][1] -= 1
      else:
        total_spin[i,j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin.tolist()




#score: {'data2D.txt': -0.09910540123456804}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (site_nbr + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return [[x, -y] for x, y in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(N):
    site = (i + ((k-1)%2 - 1)) % N
    total_spin = h[site][j]
    if h[i][j] > 0:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][0] -= 1
  return priority_total.tolist()




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i//N][i%N][0] += 1
      total_spin[i//N][i%N][1] -= 1
    else:
      total_spin[i//N][i%N][0] -= 1
  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i//N][i%N][0] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.15514984567901258}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    if total_spin[i][0] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1

  return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j], 0]
      if h[i][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      priorities[i*N+j] = [(total_spin[0] + k) for k in [-1, 1]]
  return(priorities)




#score: {'data2D.txt': -0.00019984567901234573}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j], 0]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 2
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 2
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  return([list(x) for x in priority_total])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return([list(x) for x in priority_total])




#score: {'data2D.txt': -0.008877932098765433}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      
      for i in range(N**2):
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
        if h[site_nbr][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
      return([list(x) for x in priority_total])




#score: {'data2D.txt': 0.24355478395061686}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(4):
        if k == 0:
          site = (i + ((k-1)%2 - 1)) % N
        elif k == 1:
          site = (i + ((j+1)%2 - 1)) % N
        elif k == 2:
          site = (i + ((k-1)%2 - 1)) % N
        else:
          site = (i + ((j-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(4):
        if k == 0:
          site = (i + ((k-1)%2 - 1)) % N
        elif k == 1:
          site = (i + ((j+1)%2 - 1)) % N
        elif k == 2:
          site = (i + ((k-1)%2 - 1)) % N
        else:
          site = (i + ((j-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  priority_total = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[int(x) for x in row] for row in priority_total]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1

  return([list(x) for x in priority_total])




#score: {'data2D.txt': 0.1724137345679015}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

      for k in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1

      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][i] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return([list(x) for x in priority_total])




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return([[x[0],-x[1]] for x in priority_total])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(-total_spin)




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(2):
      if j == 0:
        sign = 1
      else:
        sign = -1
      total_spin[i][j] += h[site_nbr][i%N]*sign
  return(-total_spin)




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return(-total_spin)




#score: {'data2D.txt': -0.007382561728395061}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.reshape(-1, 2)




#score: {'data2D.txt': -0.007827006172839506}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    if h[i][0] > 0:
      priority_total[i*N+0][0] = 1
      priority_total[i*N+0][1] = -N**2 + N + 1
    else:
      priority_total[i*N+0][0] = -1
      priority_total[i*N+0][1] = N**2 - N - 1
  for i in range(N):
    if h[0][i] > 0:
      priority_total[i*N+0][0] = 1
      priority_total[i*N+0][1] = -N + 1
    else:
      priority_total[i*N+0][0] = -1
      priority_total[i*N+0][1] = N - 1
  return priority_total.reshape(-1, 2)




#score: {'data2D.txt': -0.007099537037037036}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    if h[i][0] > 0:
      priority_total[i*N][0] = 1
    else:
      priority_total[i*N][1] = -1
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = 1
    else:
      priority_total[j][1] = -1
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.006931018518518518}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    if h[i][0] > 0:
      priority_total[i*N+0][0] = 1
    else:
      priority_total[i*N+0][1] = -1
  for j in range(1, N-1):
    site_nbr = (i + ((j-1)%N - 1)) % N
    if h[site_nbr][j] > 0:
      priority_total[j+N-1][0] += 1
      priority_total[j+N-1][1] -= 1
    else:
      priority_total[j+N-1][0] -= 1
      priority_total[j+N-1][1] += 1
  for i in range(N):
    if h[i][N-1] > 0:
      priority_total[i*N+N-1][0] = 1
    else:
      priority_total[i*N+N-1][1] = -1
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.19698256172839457}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        
  return total_spin.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1

  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += h[site_nbr][j]
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= h[site_nbr][j]

  return priority_total




#score: {'data2D.txt': 0.008015586419753086}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += total_spin[0][i%N][0]
      priority_total[i][1] -= total_spin[0][i%N][1]
    else:
      priority_total[i][0] = -total_spin[0][i%N][0]

  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[0][j][0]
    else:
      priority_total[j][1] = -total_spin[0][j][1]

  return priority_total




#score: {'data2D.txt': -0.006255092592592593}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i, j: (i + ((j-1)%2 - 1)) % N
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      total_spin[i*N+j][0] += sum(h[site_nbr(i,j)][(k+1)%N if k==j-1 else (k+N) % N] 
                    + h[site_nbr(i,j)][k] for k in range(4))
      
      if all(h[site_nbr(i,j)][(k+1)%N if k==j-1 else (k+N) % N] > 0 for k in range(4)):
        total_spin[i*N+j][1] -= 2
      elif any(h[site_nbr(i,j)][(k+1)%N if k==j-1 else (k+N) % N] < 0 for k in range(4)):
        total_spin[i*N+j][1] += 2
      else:
        total_spin[i*N+j][1] = sum(h[site_nbr(i,j)][(k+1)%N if k==j-1 else (k+N) % N] 
                    for k in range(4))
        
  return [[x[0], -x[1]] if x[1]>0 else [x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.342753549382715}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N * N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  for k in range(2):
    site = (i + ((k - 1) % 2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i * N + j][0] += 1
      total_spin[i * N + j][1] -= 1
    else:
      total_spin[i * N + j][0] -= 1
  return np.array([[x[0], -x[1]] for x in total_spin])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0, 0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
        if h[i][j] > 0:
          priorities[i*N+j][0] += 1
          priorities[i*N+j][1] -= 1
        else:
          priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': 0.09688163580246928}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1
  for i in range(N):
    for k in range(2):
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][i] > 0:
        total_spin[i * N + i][0] += 1
        total_spin[i * N + i][1] -= 1
      else:
        total_spin[i * N + i][0] -= 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
      for k in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
      for k in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[-total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[-total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.07151373456790133}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [x for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return np.array([[x[0], -x[1]] for x in priority_total])




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    
    if h[site_nbr][i%N] > 0:
      total_spin[0] += 1
      total_spin[1] -= 1
    else:
      total_spin[0] -= 1
      total_spin[1] += 1
    
    priority_total[i][0] = -total_spin[0]
    priority_total[i][1] = -total_spin[1]
  
  return(priority_total)




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    if h[site_nbr][i%N] > 0:
      total_spin[0] += 1
      total_spin[1] -= 1
    else:
      total_spin[0] -= 1
      total_spin[1] += 1
    
    priority_total[i][0] = -total_spin[0]
    priority_total[i][1] = -total_spin[1]
  
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(4):
        if k == 0:
          site = (i + ((k-1)%2 - 1)) % N
        elif k == 1:
          site = (i + ((j+1)%2 - 1)) % N
        elif k == 2:
          site = (i + ((k-1)%2 - 1)) % N
        else:
          site = (i + ((j-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1

  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      site = (i + ((2)%2 - 1)) % N
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][0] -= 1
      priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0,0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      priorities[i*N+j][0] = total_spin[0]
      priorities[i*N+j][1] = total_spin[1]
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priorities = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1

  return(priorities)




#score: {'data2D.txt': -0.0018554012345679016}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = total_spin[i//N][i%N].copy()
      priority_total[0] += 1
      priority_total[1] -= 1
    else:
      priority_total = total_spin[i//N][i%N].copy()
      priority_total[0] -= 1
      priority_total[1] += 1

  return([priority_total.tolist() for _ in range(N**2)])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(-total_spin)




#score: {'data2D.txt': 0.32381003086419663}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  return(-total_spin)




#score: {'data2D.txt': -0.001318055555555556}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      site_nbr = (i + ((j-1)%N - 1)) % N
      priority_total[i][0] += total_spin
      priority_total[i][1] -= 2*total_spin
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.011170833333333333}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.0005804012345679012}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  for i in range(N**2):
    total_spin = np.zeros((1,2))
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[0][0] += 1
        total_spin[0][1] -= 1
      else:
        total_spin[0][0] -= 1
        total_spin[0][1] += 1
    priority_total[i][0] = (total_spin[0][0]**2 + total_spin[0][1]**2)**.5
    if h[site_nbr][i%N] > 0:
      priority_total[i][1] = -total_spin[0][0]/(total_spin[0][0]**2 + total_spin[0][1]**2)**.5
    else:
      priority_total[i][1] = total_spin[0][1]/(total_spin[0][0]**2 + total_spin[0][1]**2)**.5
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.030777932098765438}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(3):
      site = (i + ((j-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total.reshape(-1, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.reshape(-1, 2)




#score: {'data2D.txt': -0.2242328703703704}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0][site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i * N + j][0] += 1
        priority_total[i * N + j][1] -= 1
      else:
        priority_total[i * N + j][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return [x for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.19698256172839457}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1
  return [x for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  return np.array([[x[0], -x[1]] for x in priority_total])




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
  return(priorities)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2)) 
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2)) 
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)




#score: {'data2D.txt': -0.005180401234567901}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(N):
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return(priority_total)
  for j in range(N):
    if h[0][j] > 0:
      total_spin[0][j][0] = total_spin[0][j][1]
    else:
      total_spin[0][j][0] = -total_spin[0][j][1]
  
  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.001406327160493827}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = np.sum(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() + h[site_nbr][j])
      if np.sum(h[i], axis=0) > 0:
        priority_total[i*N+j] += [np.count_nonzero(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() > 0), -np.count_nonzero(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() < 0)]
      else:
        priority_total[i*N+j] -= [np.count_nonzero(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() > 0), -np.count_nonzero(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() < 0)]
  return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0.0,0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for k in range(2):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0,0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 3
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 3
      if i < N-1:
        site_nbr = (i + ((j+1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 3
        else:
          total_spin[i*N+j][0] += 3
          total_spin[i*N+j][1] -= 1
      if j < N-1:
        site_nbr = (i + ((j+1)%2 - 1)) % N
        if h[i][site_nbr] > 0:
          total_spin[i*N+j][0] += 3
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 3
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.09752453703703716}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,-1] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = [[0,0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j], 0]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.19985077160493825}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      if h[site_nbr][i % N] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.342753549382715}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(2):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009001388888888889}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for j in range(N):
    if h[0][j] > 0:
      total_spin[:N][0] = total_spin[:N][1]
    else:
      total_spin[:N][0] = -total_spin[:N][1]

  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.01854182098765432}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += h[site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= h[site_nbr][i%N]
      total_spin[i][1] += 1

  for i in range(N):
    if h[i][0] > 0:
      total_spin[i*N][0] = total_spin[i*N][1]
    else:
      total_spin[i*N][0] = -total_spin[i*N][1]

  for j in range(1,N):
    site_nbr = (i + ((j-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1

  return(total_spin.reshape(-1,2))




#score: {'data2D.txt': -0.01083966049382716}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priority_total[i][0] += J[k][i%N][site]
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += J[k][i%N][site]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  return priority_total




#score: {'data2D.txt': -0.06150817901234575}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  for i in range(N):
    for j in range(N//2+1):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.011780092592592592}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0][site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
      site_nbr = (i + ((N-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
  for i in range(N):
    site = (i + ((N-1)%2 - 1)) % N
    total_spin = h[site][i]
    if h[i][j] > 0:
      priorities[i*N+j][0] += 1
      priorities[i*N+j][1] -= 1
    else:
      priorities[i*N+j][0] -= 1
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    total_spin += h[site_nbr][i]
    if h[i][j] > 0:
      priorities[i*N+j][0] -= 1
      priorities[i*N+j][1] += 1
    else:
      priorities[i*N+j][0] += 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': 0.342753549382715}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(2):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.09752453703703716}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0]for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0],-x[1]]for x in total_spin]




#score: {'data2D.txt': 0.342753549382715}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(2):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((N-1)%2 - 1)) % N
      
      total_spin1 = h[site_nbr1][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      
      total_spin2 = h[site_nbr2][i]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
        
  return(priorities)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      total_spin = [h[i][j], 0]
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      for site_nbr in site_nbrs:
        if h[site_nbr][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priorities[i*N+j] = [total_spin[0], -total_spin[1]]
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      site_nbr = (i + ((N-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
      site_nbr = (i + ((N-1)%2 - 1)) % N
      total_spin = h[site_nbr][i]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
  for i in range(N):
    site = (i + ((N-1)%2 - 1)) % N
    total_spin = h[site][i]
    if h[i][j] > 0:
      priorities[i*N+j][0] -= 1
      priorities[i*N+j][1] += 1
    else:
      priorities[i*N+j][0] += 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((N-1)%2 - 1)) % N
      total_spin = h[site_nbr1][j] + h[site_nbr2][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 2
        priorities[i*N+j][1] -= 2
      else:
        priorities[i*N+j][0] -= 2
        priorities[i*N+j][1] += 2
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr1][i] + h[site_nbr2][i]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 2
        priorities[i*N+j][1] += 2
      else:
        priorities[i*N+j][0] += 2
  return(priorities)




#score: {'data2D.txt': -0.24527608024691339}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
   for j in range(N):
     site_nbr = (i + ((j-1)%2 - 1)) % N
     priority_total[i*N+j][0] += h[site_nbr][j]
     if h[i][j] > 0:
       priority_total[i*N+j][0] += 1
       priority_total[i*N+j][1] -= 1
     else:
       priority_total[i*N+j][0] -= 1
       priority_total[i*N+j][1] += 1
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': 0.342753549382715}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(2):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.07194274691358035}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.1909066358024694}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%N - 1)) % N
      for k in range(3):
        site = (site_nbr + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] = total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = -1 * total_spin
      else:
        priority_total[i*N+j][1] = total_spin
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.010756018518518517}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    
    if h[site_nbr][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priority_total[i][0] += total_spin
    priority_total[i][1] = -total_spin
  
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.0015754629629629625}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = np.sum(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() + h[site_nbr][j])
      if h[i][j] > 0:
        priority_total[i*N+j][0] += np.count_nonzero(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() > 0)
        priority_total[i*N+j][1] -= np.count_nonzero(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() < 0)
      else:
        priority_total[i*N+j][0] -= np.count_nonzero(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() > 0)
        priority_total[i*N+j][1] += np.count_nonzero(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() < 0)
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for k in range(2):
    for i in range(N**2):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return priority_total.tolist()




#score: {'data2D.txt': -0.001406327160493827}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      total_spin = np.sum(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() + h[(i+(j-1)%2-1)%N][j])
      if np.sum(h[i], axis=0) > 0:
        priority_total[i*N+j] = [np.count_nonzero(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() > 0), -np.count_nonzero(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() < 0)]
      else:
        priority_total[i*N+j] = [-np.count_nonzero(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() > 0), np.count_nonzero(J[i*N:(i+1)*N,j*N:(j+1)*N].flatten() < 0)]
  return priority_total




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': 0.1909066358024694}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N//2
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      priority_total[i*N+j][0] = total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = -1 * total_spin
      else:
        priority_total[i*N+j][1] = total_spin
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  priority_total = [[0, 0] for _ in range(N*N)]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1

  return [[int(x) for x in row] for row in priority_total]




#score: {'data2D.txt': 0.07517145061728406}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][i] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
        else:
          total_spin[i*N+j][0] -= 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return([list(x) for x in priority_total])




#score: {'data2D.txt': 0.25813503086419726}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  priority_total = [[0, 0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

      for k in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1

      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][i] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  return([list(x) for x in priority_total])




#score: {'data2D.txt': 0.1724137345679015}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

      for k in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1

      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][i] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return([list(x) for x in priority_total])




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N//2+1):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][site_nbr][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][site_nbr][1] -= 1
      else:
        total_spin[i][site_nbr][1] += 1

  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return priority_total.reshape(N**2, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      priorities[i*N+j][0] += total_spin
      priorities[i*N+j][1] -= total_spin
  return priorities




#score: {'data2D.txt': -0.09038533950617299}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N//2+1):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.0050242283950617285}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for k in range(N**2):
    i = k % N
    j = (k // N) % N
    site_nbr = (i + ((j-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      priority_total[k][0] += 1
      priority_total[k][1] -= 1
    else:
      priority_total[k][0] -= 1
      priority_total[k][1] += 1

  return([list(x) for x in priority_total])




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
        
  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = total_spin[i][j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][1] += 1
        
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if J[j][site_nbr][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.00726033950617284}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if J[j][site_nbr][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priority_total[i][0] = total_spin + h[site_nbr][i%N]
    priority_total[i][1] = -total_spin + h[site_nbr][i%N]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if J[k][site_nbr][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if J[j][site_nbr][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3085180555555557}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      for k in range(2):
        site = (i + ((k)%2 - 1)) % N
        if J[k][site_nbr][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= total_spin
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((N-1)%2 - 1)) % N
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
        
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin = sum(h[site][j] for site in site_nbrs)
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
        
  return priorities




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1

  return([[total_spin[i][0], total_spin[i][1]] for i in range(N*N)])




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
        else:
          total_spin[i*N+j][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.00726033950617284}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if J[j][site_nbr][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priority_total[i][0] = total_spin + h[site_nbr][i%N]
    priority_total[i][1] = -total_spin + h[site_nbr][i%N]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((N-1)%2 - 1)) % N
      total_spin = h[site_nbr1][j] + h[i][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i]
    if h[i][j] > 0:
      priorities[i*N+j][0] -= 1
      priorities[i*N+j][1] += 1
    else:
      priorities[i*N+j][0] += 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.0015754629629629625}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      total_spin = [0,0]
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[1] += 1
      else:
        total_spin[0] -= 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site][j]
        if h[i][j] > 0:
          priorities[i*N+j][0] += 1
          priorities[i*N+j][1] -= 1
        else:
          priorities[i*N+j][0] -= 1
          priorities[i*N+j][1] += 1
      return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      site_nbr = (i + ((j+1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
      site_nbr = (i + ((N-2)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
  for i in range(N):
    site = (i + ((N-2)%2 - 1)) % N
    total_spin = h[site][j]
    if h[i][j] > 0:
      priorities[i*N+j][0] -= 1
      priorities[i*N+j][1] += 1
    else:
      priorities[i*N+j][0] += 1
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  priority_total = np.zeros((N*N, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
        else:
          total_spin[i*N+j][0] -= 1

  return priority_total.tolist()




#score: {'data2D.txt': -0.2689158950617281}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
        else:
          total_spin[i*N+j][0] -= 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1

  return priority_total




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1

  return [[total_spin[i * N + j][0], -total_spin[i * N + j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      site_nbr = (i + ((N-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[0] -= 1
        total_spin[1] += 1
      else:
        total_spin[0] += 1
      site_nbr = (i + ((N-1)%2 - 1)) % N
      total_spin[1] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      site_nbr = (i + ((N-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
      site_nbr = (i + ((N-1)%2 - 1)) % N
      total_spin = h[site_nbr][i]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
  for i in range(N):
    site = (i + ((N-1)%2 - 1)) % N
    total_spin = h[site][i]
    if h[i][j] > 0:
      priorities[i*N+j][0] -= 1
      priorities[i*N+j][1] += 1
    else:
      priorities[i*N+j][0] += 1
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      site_nbr = (i + ((N-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += total_spin[0]
        priorities[i*N+j][1] -= total_spin[1]
      else:
        priorities[i*N+j][0] -= total_spin[0]
        priorities[i*N+j][1] += total_spin[1]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': -0.015547376543209876}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if J[j][site_nbr][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priority_total[i][0] = total_spin + h[site_nbr][i%N]
    priority_total[i][1] = -total_spin + h[site_nbr][i%N]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
  priority_total = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i * N + j][0] += 1
        priority_total[i * N + j][1] -= 1
      else:
        priority_total[i * N + j][0] -= 1
        
  return [[-np.abs(total_spin[i * N + j][0]), -np.abs(total_spin[i * N + j][1])] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  priority_total = [[0, 0] for _ in range(N * N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i * N + j][0] += 1
        priority_total[i * N + j][1] -= 1
      else:
        priority_total[i * N + j][0] -= 1

  return [[total_spin[i * N + j][0], -total_spin[i * N + j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1

  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return [[total_spin[i * N + j][0], -total_spin[i * N + j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  site_nbr = [0] * N
  for i in range(N):
    for j in range(N):
      site_nbr[i] = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr[i]][j]
      if h[site_nbr[i]][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for k in range(N):
    site = (k + ((N-1)%2 - 1)) % N
    for i in range(N):
      if h[site][i] > 0:
        total_spin[i*N+k][0] -= 1
        total_spin[i*N+k][1] += 1
      else:
        total_spin[i*N+k][0] += 1
        total_spin[i*N+k][1] -= 1

  return [[total_spin[i*N+j][0], -total_spin[i*N+j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N* N)]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1

  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return [[total_spin[i * N + j][0], -total_spin[i * N + j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1

  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return [[total_spin[i * N + j][0], -total_spin[i * N + j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1

  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j - 1) % 2 - 1)) % N
      if h[site_nbr1][j] > 0:
        priority_total[i * N + j][0] += 1
        priority_total[i * N + j][1] -= 1
      else:
        priority_total[i * N + j][0] -= 1

  return [[total_spin[i * N + j][0], -total_spin[i * N + j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return [[total_spin[i*N+j][0],-total_spin[i*N+j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.07016496913580256}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1

  return [[total_spin[i*N+j][0],-total_spin[i*N+j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1

  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return [[total_spin[i * N + j][0], -total_spin[i * N + j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((N-1)%2 - 1)) % N
      total_spin = h[site_nbr1][j] + h[site_nbr2][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.32414182098765343}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      site_nbr = (i + ((N-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
  for i in range(N):
    site = (i + ((N-1)%2 - 1)) % N
    total_spin = h[site][i]
    if h[i][j] > 0:
      priorities[i*N+j][0] -= 1
      priorities[i*N+j][1] += 1
    else:
      priorities[i*N+j][0] += 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((N-1)%2 - 1)) % N
      total_spin = h[site_nbr1][j] + h[i][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.07016496913580256}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1

  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1

  return [[total_spin[i * N + j][0], -total_spin[i * N + j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.07016496913580256}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1

  return [[total_spin[i*N+j][0],-total_spin[i*N+j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.07016496913580256}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1

  return [[total_spin[i*N+j][0], -total_spin[i*N+j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((N-1)%2 - 1)) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += 2
        priorities[i*N+j][1] -= 2
      else:
        priorities[i*N+j][0] -= 2
        priorities[i*N+j][1] += 2
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      site_nbr = (i + ((N-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
      site_nbr = (i + ((N-1)%2 - 1)) % N
      total_spin = h[site_nbr][i]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1
  for i in range(N):
    site = (i + ((N-1)%2 - 1)) % N
    total_spin = h[site][i]
    if h[i][j] > 0:
      priorities[i*N+j][0] -= 1
      priorities[i*N+j][1] += 1
    else:
      priorities[i*N+j][0] += 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      for site_nbr in site_nbrs:
        total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((N-1)%2 - 1)) % N
      total_spin = h[site_nbr1][j] + h[site_nbr2][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  for i in range(N):
    site = (i + ((N-1)%2 - 1)) % N
    total_spin = h[site_nbr2][i]
    if h[i][j] > 0:
      priorities[i*N+j][0] -= 1
      priorities[i*N+j][1] += 1
    else:
      priorities[i*N+j][0] += 1
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
        if h[i][j] > 0:
          priorities[i*N+j][0] -= 1
          priorities[i*N+j][1] += 1
        else:
          priorities[i*N+j][0] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site][j]
        if h[i][j] > 0:
          priorities[i*N+j][0] -= 1
          priorities[i*N+j][1] += 1
        else:
          priorities[i*N+j][0] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site][j]
        if h[i][j] > 0:
          priorities[i*N+j][0] -= 1
          priorities[i*N+j][1] += 1
        else:
          priorities[i*N+j][0] += 1
  return(priorities)




#score: {'data2D.txt': -0.26915972222222184}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  
  for k in range(2):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site][j] > 0:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][0] -= 1
  
  return total_spin.reshape((N**2, 2))




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return([[(j+1)*priority_total[i][0] + (N+1-priority_total[i][1]) for j in range(2)] for i in range(N*N)])




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  return(total_spin)




#score: {'data2D.txt': -0.11807669753086407}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    else:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
  return([[total_spin[i][1], -total_spin[i][0]] for i in range(N**2)])




#score: {'data2D.txt': -0.015547376543209876}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if J[j][site_nbr][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priority_total[i][0] = total_spin + h[site_nbr][i%N]
    priority_total[i][1] = -total_spin + h[site_nbr][i%N]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total




#score: {'data2D.txt': -0.00726033950617284}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(4):
      if J[j][site_nbr][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    priority_total[i][0] = total_spin + h[site_nbr][i%N]
    priority_total[i][1] = -total_spin + h[site_nbr][i%N]
  return priority_total




#score: {'data2D.txt': -0.02542083333333336}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if J[0][site_nbr][j] > 0:
        total_spin += 1
      elif J[0][site_nbr][j] < 0:
        total_spin -= 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if J[k+1][site][j] > 0:
          total_spin += 1
        elif J[k+1][site][j] < 0:
          total_spin -= 1
      priority_total[i*N+j][0] = total_spin + h[site_nbr][j]
      priority_total[i*N+j][1] = -total_spin + h[site_nbr][j]
  return priority_total




#score: {'data2D.txt': -0.09774984567901239}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  total_spin = np.zeros((N, N, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if J[k-1][site][j] > 0:
          total_spin[i][j][0] += 1
        elif J[k-1][site][j] < 0:
          total_spin[i][j][0] -= 1
  for i in range(N**2):
    priority_total[i][0] += total_spin[i//N][i%N][0]
    priority_total[i][1] = -total_spin[i//N][i%N][0] + h[(i//N + ((i%N-1)%2 - 1)) % N][i%N]
  return priority_total




#score: {'data2D.txt': -0.18192021604938294}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(3):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if J[k][site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N**2,2))
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [priority_total[i] for i in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.060098611111111186}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for k in range(N):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i] > 0:
        priorities[i*N+k][0] += 1
        priorities[i*N+k][1] -= 1
      else:
        priorities[i*N+k][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return priorities




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] += 1

  return total_spin




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return [[priority_total[i][0], -priority_total[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.04188780864197534}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.0006813271604938277}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
    
  return [[total_spin[i][0], -priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  priority_total = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.0024878086419753086}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  priority_total = np.zeros((N2, 2))
  
  for k in range(3):
    for i in range(N2):
      site = (i + ((k-1)%2 - 1)) % N
      if J[k][site][i%N] > 0:
        total_spin = sum(1 if J[k][s][t] > 0 else -1 for s, t in [(site, j) for j in range(N)])
        priority_total[i][0] += 1 if h[site][i%N] > 0 else -1
        priority_total[i][1] -= 2 * (total_spin > 0)
      else:
        total_spin = sum(-1 if J[k][s][t] > 0 else 1 for s, t in [(site, j) for j in range(N)])
        priority_total[i][0] -= 1 if h[site][i%N] > 0 else -1
        priority_total[i][1] += 2 * (total_spin > 0)
  
  return priority_total




#score: {'data2D.txt': 0.009181635802469137}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  priority_total = np.zeros((N2, 2))
  
  for k in range(3):
    for i in range(N2):
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      if J[k][site_nbr][i % N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': 0.22474120370370376}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin = h[site_nbr][i % N]
    
    if h[i // N][i % N] > 0:
      total_spin -= 1
    else:
      total_spin += 1
    
    for k in range(4):
      site = (i % N + ((k - 1) % 2 - 1)) % N
      if J[k][site_nbr][i % N] > 0:
        total_spin -= 1
      else:
        total_spin += 1
    
    priority_total[i][0] = -total_spin
    if h[i // N][i % N] > 0:
      priority_total[i][1] = total_spin + 1
    else:
      priority_total[i][1] = -total_spin - 1
  
  return priority_total




#score: {'data2D.txt': -0.0039307098765432105}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin = 0
      for k in range(3):
        site = (i % N + ((k-1)%2 - 1)) % N
        if J[k][site][i % N] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i][0] += total_spin
      priority_total[i][1] -= 2 * total_spin
    else:
      total_spin = 0
      for k in range(3):
        site = (i % N + ((k-1)%2 - 1)) % N
        if J[k][site][i % N] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priority_total[i][0] -= total_spin
      priority_total[i][1] += 2 * total_spin
  
  return priority_total




#score: {'data2D.txt': 0.006238425925925926}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0][site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    elif J[1][site_nbr][i % N] > 0:
      priority_total[i][0] += 1
    elif J[2][site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      if h[site_nbr][i % N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.15721527777777766}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for k in range(3):
    site = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site][k%N] > 0:
      for i in range(N2):
        total_spin[i][0] += J[k][site][i%N]
        if J[k][site][i%N] > 0:
          total_spin[i][1] -= 1
        else:
          total_spin[i][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  priority_total = [[0, 0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][1] += 1
  return priorities




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0, 0.0] for _ in range(N**2)]
  interacting_spins = [0]*4
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(4):
    interacting_spins = np.roll(h, -i%2 if i<2 else i-1, axis=0) + np.roll(h, 1 if i<2 else (i+1)%2, axis=1)
    for j in range(N):
      for k in range(N):
        if h[j,k] > 0:
          total_spin[j,k][0] += 1
          total_spin[j,k][1] -= 1
        else:
          total_spin[j,k][0] -= 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': 0.25721651234567877}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return [priority_total[i] for i in range(N**2)]




