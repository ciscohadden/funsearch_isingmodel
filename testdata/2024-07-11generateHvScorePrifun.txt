#score: {'data2D.txt': -0.27106867283950575}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin = [x+1 for x in state[site]]
        priority_total[i*N+j] = [-np.sum(np.array(total_spin)), -np.sum(-np.array(total_spin))]
      else:
        total_spin = [x-1 for x in state[site]]
        priority_total[i*N+j] = [-np.sum(np.array(total_spin)), -np.sum(-np.array(total_spin))]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        state[site][j] += 1
        total_spin = [h[i][j], 1]
      else:
        state[site][j] -= 1
        total_spin = [h[i][j], -1]
      priority_total[i*N+j][total_spin[1]] += total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N))
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [0 for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N//2 - 1)%2 - 1)) % N
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[int(i//N)][i%N] > 0:
      site = (int(i//N) + ((i%N-1)%2 - 1)) % N
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      site = (int(i//N) + ((i%N-1)%2 - 1)) % N
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.16580756172839528}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') if i//N%2 == 0 else float('inf') for _ in range(2)] for i in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i][j] += 1
        priority_total[i*N+j] = [-total_spin[i][j], -sum([state[k][j] for k in range(N)])]
      else:
        total_spin[i][j] -= 1
        priority_total[i*N+j] = [sum([state[k][j] for k in range(N)]), -total_spin[i][j]]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N, N), dtype=int)
  for i in range(N):
    for k in range(3):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        total_spin[i][j] += h[site_nbr][j]
  priority_total = np.zeros((N**2, 2), dtype=float)
  for i in range(N**2):
    site = (i // N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_nbr = []
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.16580756172839528}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  
  priority_total = [[float('-inf') if i//N%2 == 0 else float('inf') for _ in range(2)] for i in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i][j] += 1
        priority_total[i*N+j] = [-total_spin[i][j], -sum([state[k][j] for k in range(N)])]
      else:
        total_spin[i][j] -= 1
        priority_total[i*N+j] = [sum([state[k][j] for k in range(N)]), -total_spin[i][j]]
  
  return priority_total




#score: {'data2D.txt': -0.0003408950617283957}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') if i//N%2 == 0 else float('inf') for _ in range(2)] for i in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
        total_spin[i][j] += sum([state[k][j] for k in range(N)])
        priority_total[i*N+j][0] = -total_spin[i][j]
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        total_spin[i][j] -= sum([state[k][j] for k in range(N)])
        priority_total[i*N+j][1] = -total_spin[i][j]
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -total_spin[i][0]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sums = [(np.prod(J_new[0::4], 0) + h).flatten(), (np.prod(J_new[1::4], 0) - h).flatten()]
  return np.column_stack((-sums[0], -sums[1]))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
  spin_config = np.zeros((N**2, 2), dtype=int)
  priority = np.array([[float('-inf') for _ in range(2)] for _ in range(N**2)])
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      spin_config[i*N+j] = [1 if h[site_nbr][j] > 0 else -1, 0]
      priority[i*N+j][0] = total_spin[i][j] if h[i][j] > 0 else -total_spin[i][j]
  for i in range(N**2):
    spin_config[i] = [np.argmax(spin_config[i])]
  return spin_config




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site = lambda i, j: (i + ((j-1)%2 - 1)) % N
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site(i, j)
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          priority_total[i*N+j][state[site_k][0]] += h[i][j]
      else:
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          if state[site_k][0] == 1:
            priority_total[i*N+j][1] -= h[i][j]
          elif state[site_k][0] == -1:
            priority_total[i*N+j][0] += h[i][j]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00036620370370370404}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        state[site].reverse()
        priority_total[i*N+j] = [sum(-np.array(state[site])), sum(np.array(state[site]))]
      else:
        state[site].reverse()
        priority_total[i*N+j] = [-sum(np.array(state[site])), -sum(-np.array(state[site]))]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin = [x+1 for x in state[site]]
        priority_total[i*N+j] = [-np.sum(np.array(total_spin)), -np.sum(-np.array(total_spin))]
        if site == (i + ((j-1)%N - N//2)) % N:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      else:
        total_spin = [x-1 for x in state[site]]
        priority_total[i*N+j] = [-np.sum(np.array(total_spin)), -np.sum(-np.array(total_spin))]
        if site == (i + ((j-1)%N - N//2)) % N:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.2689158950617281}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site = (i // N + ((i % N) - 1) % 2 - 1) % N
    if h[i//N][i%N] > 0:
      priorities.append([state[site][i%N] + 1, -state[site][i%N] - 1])
    else:
      priorities.append([-state[site][i%N] - 1, state[site][i%N] + 1])
  return(np.array(priorities))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for k in range(N):
    site_nbr = (k + ((N-1)%2 - 1)) % N
    for i in range(N):
      j = (i + (k%N - k//N)) % N
      total_spin = state[i][j]
      if h[i][j] > 0:
        priority_total[k*N+j][0] += 1
        priority_total[k*N+j][1] -= 1
      else:
        priority_total[k*N+j][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          priority_total[i*N+j][state[site_k][0]] += h[i][j]
      else:
        for k in range(3):
          site_k = (site + ((k-1)%2 - 1)) % N
          if state[site_k][0] == 1:
            priority_total[i*N+j][1] -= h[i][j]
          elif state[site_k][0] == -1:
            priority_total[i*N+j][0] += h[i][j]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  sum_1 = (np.prod(J_flat[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_flat[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.flatten()
  sum_1 = (np.prod(J[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.010204166666666667}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.26315632716049353}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') if i//N%2 == 0 else float('inf') for _ in range(2)] for i in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i][j] += 1
        priority_total[i*N+j] = [-total_spin[i][j], sum([state[k][site] for k in range(N)])]
      else:
        total_spin[i][j] -= 1
        priority_total[i*N+j] = [sum([state[k][site] for k in range(N)]), -total_spin[i][j]]
  return priority_total




#score: {'data2D.txt': 0.20644984567901242}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+(j-1)%N)//2][k] for k in range(N)]) for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') if i//N%2 == 0 else float('inf') for _ in range(2)] for i in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i][j] += sum([state[k][j] for k in range(N)]) * 2
        priority_total[i*N+j] = [-total_spin[i][j], -sum([state[k][j] for k in range(N)]*2)]
      else:
        total_spin[i][j] -= sum([state[k][j] for k in range(N)])
        priority_total[i*N+j] = [sum([state[k][j] for k in range(N)]), -total_spin[i][j]]
  return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
  
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i][j]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i][j]
  
  return [[x[0], x[1]] for x in priority_total]




