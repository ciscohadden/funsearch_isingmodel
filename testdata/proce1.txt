first:
def priority(N,h,J):
    N2 = N*N
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]

    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1

    for k in range(3):
        for i in range(N2):
            site_nbr = (i + ((k-1)%2 - 1)) % N
            priority_total[i][0] += h[site_nbr][i//N]
            priority_total[i][1] -= h[site_nbr][i//N]

    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin = h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for i in range(N**2) for j in priority_total[i//N][i%N]]

first:
def priority(N, h, J):
    N2 = N*N
    total_spin = [[0, 0] for _ in range(N2)]
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
            for s in product([-1, 1], repeat=len(site_nbrs)):
                total_spin[i*N+j][0] += sum(s) * J[site_nbrs.index(i), j]
                total_spin[i*N+j][1] -= sum(s)
    priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
    for i in range(N2):
        if h[int(i//N)][i%N] > 0:
            priority_total[i][0] += total_spin[i][0]
            priority_total[i][1] -= total_spin[i][1]
        else:
            priority_total[i][0] -= total_spin[i][0]
            priority_total[i][1] += total_spin[i][1]
    return [[x[0], x[1]] for x in priority_total]
first:
def priority(N, h, J):
    total_spin = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
            for site_nbr in site_nbrs:
                total_spin[i*N+j][0] += J[site_nbr][j]
                if h[site_nbr][j] > 0:
                    total_spin[i*N+j][1] -= 1
                else:
                    total_spin[i*N+j][1] += 1
    return [[x, -x] for x in total_spin.flatten()]

first:
def priority(N, h, J):
    N_squared = N * N
    site_interactions = []
    
    for i in range(N_squared):
        total_spin = [0, 0]
        for j in [(i + ((k-1)%2 - 1)) % N for k in range(3)]:
            if h[j][i%N] > 0:
                total_spin[0] += J[k][i]
                total_spin[1] -= J[k][i]
            else:
                total_spin[0] -= J[k][i]
                total_spin[1] += J[k][i]
        site_interactions.append(total_spin)
    
    return site_interactions

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    def energy(state):
        e = 0
        for i in range(N):
            for j in range(N):
                site_nbr = ((i + (j-1)%N - N//2) % N, j)
                if state[i*N+j] == 1:
                    e += h[site_nbr[0]][site_nbr[1]]
                else:
                    e -= h[site_nbr[0]][site_nbr[1]]
                for k in [(i+1,j),(i-1,j),(i,j+1),(i,j-1)]:
                    if 0 <= k[0] < N and 0 <= k[1] < N:
                        spin = state[k[0]*N+k[1]]
                        e += J[k[0]][k[1]][state[i*N+j],spin]
        return -e

    init_state = np.random.randint(0,2,(N,N))
    result = minimize(energy, init_state.flatten(), method="SLSQP")
    return [list(result.x).index(x) for x in [-1,1]].reshape((N,N,2))
first:
def priority(N, h, J):
    priority_total = [[[0, 0] for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            site_nbr = (i//N + ((i%N-1)%N - N//2)) % N
            priority_total[i][0] += J[site_nbr][i]
            priority_total[i][1] -= J[site_nbr][i]
        else:
            site_nbr = (i//N + ((i%N-1)%N - N//2)) % N
            priority_total[i][0] -= J[site_nbr][i]
            priority_total[i][1] += J[site_nbr][i]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    for i, j in product(range(N), range(N)):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        for k in range(3):
            total_spin = 0
            if h[site_nbr][j] > 0:
                total_spin += 1
            else:
                total_spin -= 1
            priority_total[i*N+j][0] += J[k][i*N+j]
            priority_total[i*N+j][1] -= total_spin
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr1 = (i + ((j-1)%N - N//2)) % N
            site_nbr2 = (i + ((j+1)%N - N//2)) % N
            site_nbr3 = (i + ((j-1)%N - N//2)) % N if j%2 == 0 else (i + ((j+1)%N - N//2)) % N
            site_nbr4 = (i + ((j+1)%N - N//2)) % N if j%2 != 0 else (i + ((j-1)%N - N//2)) % N
            
            total_spin = h[i][j] + J[0][i*N+j][site_nbr1] + J[1][i*N+j][site_nbr2] + J[2][i*N+j][site_nbr3] + J[3][i*N+j][site_nbr4]
            
            if total_spin > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[site_nbr][j][0] += 1
                priority_total[site_nbr][j][1] -= 1
            else:
                priority_total[site_nbr][j][0] -= 1
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            site = (i//N + ((i%N-1)%N - N//2)) % N
            total_spin = [0, 0]
            for k in range(3):
                site_nbr = (site + ((k-1)%2 - 1)) % N
                total_spin[0] += h[site_nbr][i%N]
            priority_total[i][0] += total_spin[0]
            priority_total[i][1] -= total_spin[0]
        else:
            site = (i//N + ((i%N-1)%N - N//2)) % N
            total_spin = [0, 0]
            for k in range(3):
                site_nbr = (site + ((k-1)%2 - 1)) % N
                total_spin[0] += h[site_nbr][i%N]
            priority_total[i][0] -= total_spin[0]
    return [[x[0], x[1]] for x in priority_total.flatten()]
first:
def priority(N, h, J):
    priority_total = [[[float('-inf'), float('inf')] for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0][0] += J[site_nbr][i*N+j][0]
                priority_total[i*N+j][1][1] -= J[site_nbr][i*N+j][1]
            else:
                priority_total[i*N+j][0][1] -= J[site_nbr][i*N+j][0]
                priority_total[i*N+j][1][0] += J[site_nbr][i*N+j][1]
    return [[x[0][0], x[0][1]] for x in priority_total]

first:
def priority(N, h, J):
    total_spin = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][0] -= 1
    return [x.tolist() for x in total_spin]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
Here is the Python code that defines a function called `priority(N,h,J)`:


final:
Here is the Python code that defines a function called `priority(N,h,J)`:



first:
def priority(N, h, J):
    J_new = J.flatten()
    sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum_2 = (-np.prod(J_new[1::2], 0)).flatten()
    priority = np.column_stack((sum_1, -sum_1))
    return(priority)

first:
def priority(N,h,J):
    priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N**2)]
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin = [h[site_nbr][j], -h[site_nbr][j]]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    return [[x[0], x[1]] for x in [priority_total[i*N+j] for i in range(N) for j in range(N)]]

first:
def priority(N, h, J):
    priority_total = np.zeros((N*N, 2), dtype=float)
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return priority_total.tolist()
first:
def priority(N,h,J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
            total_spin = sum(h[site_nbr][j] for site_nbr in site_nbrs)
            
            if h[i][j] > 0:
                priority_total[i*N+j][0] += total_spin
                priority_total[i*N+j][1] -= total_spin
            else:
                priority_total[i*N+j][0] -= total_spin
                priority_total[i*N+j][1] += total_spin
                
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            total_spin[i*N+j][1] -= 1 if h[i][j] > 0 else 1
    return [[x[0], x[1]] for x in total_spin]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin = h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += J[0][i*N+j]
                priority_total[i*N+j][1] -= J[1][i*N+j]
            else:
                priority_total[i*N+j][0] -= J[0][i*N+j]
                priority_total[i*N+j][1] += J[1][i*N+j]
    return [[x, 0 if x > 0 else 1] for x in [max([y for y in sublist]) if any(sublist) > 0 else min([y for y in sublist]) for sublist in priority_total]]

first:
def priority(N, h, J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + (k-1)%N, j) for k in range(3) if abs(k-i) + abs(j-k) == 1]
            for site_nbr in site_nbrs:
                total_spin = sum([J[site_nbr[0]][site_nbr[1]][state[i][j]] * state[site_nbr[0]][site_nbr[1]] for i, j in product(range(N), range(N))])
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += total_spin
                    priority_total[i*N+j][1] -= total_spin
                else:
                    priority_total[i*N+j][0] -= total_spin
                    priority_total[i*N+j][1] += total_spin
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in total_spin]

first:
def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if J[0][i*N+j]:  # up
                total_spin[i*N+j][0] -= 1
            if J[1][i*N+j]:  # right
                total_spin[i*N+j][1] += 1
            if J[2][i*N+j]:  # down
                total_spin[i*N+j][0] += 1
            if J[3][i*N+j]:  # left
                total_spin[i*N+j][1] -= 1
    return [[x[0], x[1]] for x in total_spin]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    
    for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - N//2)) % N
        if h[site_nbr][i%N] > 0:
            priority_total[i][0] += 1
            priority_total[i][1] -= 1
        else:
            priority_total[i][0] -= 1
    
    return [[x[0], x[1]] for sublist in priority_total for x in sublist]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N) - N//2) % N
        if h[i // N][i % N] > 0:
            priority_total[i][0] += J[0][i] + J[3][i]
            priority_total[i][1] -= J[1][i] + J[2][i]
        else:
            priority_total[i][0] -= J[1][i] + J[2][i]
            priority_total[i][1] += J[0][i] + J[3][i]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1,j+1]]
            total_spin = sum([h[s][j] if J[i*N+j+N*s][0,1] == 1 else -h[s][j] for s in site_nbrs])
            if h[i][j] > 0:
                priority_total[i*N+j] = [total_spin, 0]
            else:
                priority_total[i*N+j] = [-total_spin, 1]
    return [[x[0], x[1]] for x in priority_total]

first:
Here is the Python code that defines the `priority` function:


final:
Here is the Python code that defines the `priority` function:



first:
def priority(N,h,J):
    J_new = J.flatten()
    sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum2 = np.prod(J_new[1::4], 0).flatten() - np.prod(J_new[3::4], 0).flatten()
    priority = np.column_stack((sum1, -sum2))
    return(priority)

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[site_nbr][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i][j] for j in range(N)]]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] -= 1
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i*N+j][0] += h[site_nbr][j]
                priority_total[i*N+j][1] -= h[site_nbr][j]
            else:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i*N+j][0] -= h[site_nbr][j]
    return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i][j] for j in range(2)]]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i*N+j][0] += J[0, i*N+j]
                priority_total[i*N+j][1] -= J[1, i*N+j]
            else:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i*N+j][0] -= J[0, i*N+j]
                priority_total[i*N+j][1] += J[1, i*N+j]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[0, 0] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                total_spin = [0, 0]
                total_spin[0] += J[i*N+j][site_nbr*N:site_nbr*N+2].sum()
                total_spin[1] -= total_spin[0]
                priority_total[i*N+j] = [(total_spin[0], -1), (total_spin[1], 1)]
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin = [0, 0]
                total_spin[0] -= J[i*N+j][site_nbr*N:site_nbr*N+2].sum()
                total_spin[1] += total_spin[0]
                priority_total[i*N+j] = [(total_spin[0], -1), (total_spin[1], 1)]
    return [x for sublist in priority_total for x in sublist]
first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr1 = (i + ((j-1)%N - N//2)) % N
            site_nbr2 = (i + ((j+1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += J[0][i*N+j]
                priority_total[i*N+j][1] -= J[1][i*N+j]
                if i != N-1: 
                    site_nbr3 = (i+1 + ((j-1)%N - N//2)) % N
                    priority_total[i*N+j][0] += J[0][i*N+j+1]
                    priority_total[i*N+j][1] -= J[1][i*N+j+1]
                if i != 0: 
                    site_nbr4 = (i-1 + ((j-1)%N - N//2)) % N
                    priority_total[i*N+j][0] += J[0][i*N+j-1]
                    priority_total[i*N+j][1] -= J[1][i*N+j-1]
                if j != 0: 
                    site_nbr5 = (i + ((j-1)%N - N//2)) % N
                    priority_total[i*N+j][0] += J[0][i*N+j-1]
                    priority_total[i*N+j][1] -= J[1][i*N+j-1]
                if j != N-1: 
                    site_nbr6 = (i + ((j+1)%N - N//2)) % N
                    priority_total[i*N+j][0] += J[0][i*N+j+1]
                    priority_total[i*N+j][1] -= J[1][i*N+j+1]
            else:
                site_nbr7 = (i + ((j-1)%N - N//2)) % N
                site_nbr8 = (i + ((j+1)%N - N//2)) % N
                if i != N-1: 
                    site_nbr9 = (i+1 + ((j-1)%N - N//2)) % N
                    priority_total[i*N+j][0] -= J[0][i*N+j+1]
                    priority_total[i*N+j][1] += J[1][i*N+j+1]
                if i != 0: 
                    site_nbr10 = (i-1 + ((j-1)%N - N//2)) % N
                    priority_total[i*N+j][0] -= J[0][i*N+j-1]
                    priority_total[i*N+j][1] += J[1][i*N+j-1]
                if j != 0: 
                    site_nbr11 = (i + ((j-1)%N - N//2)) % N
                    priority_total[i*N+j][0] -= J[0][i*N+j-1]
                    priority_total[i*N+j][1] += J[1][i*N+j-1]
                if j != N-1: 
                    site_nbr12 = (i + ((j+1)%N - N//2)) % N
                    priority_total[i*N+j][0] -= J[0][i*N+j+1]
                    priority_total[i*N+j][1] += J[1][i*N+j+1]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf'),float('-inf')] for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0][0] += 1
                priority_total[i*N+j][0][1] -= 1
            else:
                priority_total[i*N+j][1][0] += 1
                priority_total[i*N+j][1][1] -= 1
    return [[x[0], x[1]] for x in [max(row) for row in priority_total]]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0][0] += J[0][i*N+j]
                priority_total[i*N+j][0][1] -= J[1][i*N+j]
                site_nbr = (site_nbr + ((j-1)%N - N//2)) % N
                if h[site_nbr][j] > 0:
                    priority_total[i*N+j][0][0] += J[0][i*N+j]
                    priority_total[i*N+j][0][1] -= J[1][i*N+j]
                else:
                    priority_total[i*N+j][0][0] -= J[0][i*N+j]
                    priority_total[i*N+j][0][1] += J[1][i*N+j]
            else:
                priority_total[i*N+j][1][0] -= J[0][i*N+j]
                priority_total[i*N+j][1][1] += J[1][i*N+j]
                site_nbr = (site_nbr + ((j-1)%N - N//2)) % N
                if h[site_nbr][j] > 0:
                    priority_total[i*N+j][1][0] -= J[0][i*N+j]
                    priority_total[i*N+j][1][1] += J[1][i*N+j]
                else:
                    priority_total[i*N+j][1][0] += J[0][i*N+j]
                    priority_total[i*N+j][1][1] -= J[1][i*N+j]
    
    return [[x[0], x[1]] for x in [y for y in priority_total]]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] += J[site_nbr][i*N+j][0]
                priority_total[i*N+j][1] -= J[site_nbr][i*N+j][1]
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] -= J[site_nbr][i*N+j][0]
                priority_total[i*N+j][1] += J[site_nbr][i*N+j][1]
    return [[x[0], x[1]] for i in range(N**2) for x in [max([(priority_total[i*N+j][0]+J[k][i*N+j][0]/2,  priority_total[i*N+j][1]-J[k][i*N+j][1]/2) for k in range(3)], key=lambda y: (y[0], y[1])) for j in range(N)] for i in range(N)]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf'), float('inf')] for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
            total_spin = [0, 0]
            for k in range(4):
                total_spin[0] += J[site_nbrs[k][0]][site_nbrs[k][1]][0]*h[site_nbrs[k][0]][site_nbrs[k][1]]
                total_spin[1] -= J[site_nbrs[k][0]][site_nbrs[k][1]][1]*h[site_nbrs[k][0]][site_nbrs[k][1]]
            priority_total[i*N+j][0] = min(total_spin)
            priority_total[i*N+j][1] = max(total_spin)
    return [[x[0], x[1]] for x in itertools.chain(*priority_total)]

first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
        total_spin[i][0] += h[site_nbr][i%N]
        total_spin[i][1] -= h[site_nbr][i%N]
    for i in range(N**2):
        if sum(total_spin[i]) > 0:
            priority_total[i][0] = sum(total_spin[i])
            priority_total[i][1] = -sum(total_spin[i])
        else:
            priority_total[i][0] = -sum(total_spin[i])
            priority_total[i][1] = sum(total_spin[i])
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    N2 = N * N
    priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [[sum(h[i][j]*state[(i+(k-1)%2 - 1)) % N][j] for j in range(N)] for k in range(3)]
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            total_spin[i*N+j][1] -= h[site_nbr][j]
    return [[x, y] for x in range(N**2) for y in (-1, 1)]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[site_nbr][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for i in range(N**2) for j in range(2) for x in (priority_total[i][j],)]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i][j][0] += J[site_nbr][i*N+j][0]
                priority_total[i][j][1] -= J[site_nbr][i*N+j][1]
            else:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i][j][0] -= J[site_nbr][i*N+j][0]
                priority_total[i][j][1] += J[site_nbr][i*N+j][1]
    return [[x[0], x[1]] for i in range(N) for j in range(N)]

first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
                for k in range(N):
                    site_nbr = (i + ((k-1)%N - N//2)) % N
                    total_spin[i*N+j][1] += J[site_nbr][i*N+j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                    priority_total[i*N+j][1] = -total_spin[i*N+j][1]
                else:
                    priority_total[i*N+j][0] = -total_spin[i*N+j][0]
                    priority_total[i*N+j][1] = total_spin[i*N+j][1]
            return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[site_nbr][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    for i in range(N**2):
        priority_total[i][0] = -priority_total[i][0]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin = h[site_nbr][j]
            if J[i*N+j][i*N+site_nbr] > 0:
                total_spin += 1
            else:
                total_spin -= 1
            if total_spin > priority_total[i*N+j][1]:
                priority_total[i*N+j] = [total_spin, 1]
            elif total_spin < priority_total[i*N+j][0]:
                priority_total[i*N+j] = [total_spin, -1]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin = [0, 0]
            if h[i][j] > 0:
                total_spin[0] += 1
                total_spin[1] -= 1
            else:
                total_spin[0] -= 1
                total_spin[1] += 1
            for k in range(3):
                site_nbr = (i + ((k-1)%2 - 1)) % N
                total_spin[0] += h[site_nbr][j]
                total_spin[1] -= J[i*N+j][k*4:(k+1)*4].dot([1, -1, 1, 1])
            priority_total[i*N+j] = total_spin
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin = 0
            for k in range(3):
                site_nbr2 = (site_nbr + ((k-1)%2 - 1)) % N
                total_spin += h[site_nbr2][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    N2 = N*N
    total_spin = np.zeros((N2, 2))
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j] += h[site_nbr][j]
            if J[(i+1)%N, i*N+j,0] > 0:
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
            elif J[(i+1)%N, i*N+j,0] < 0:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            if J[i, (j-1)%N,1] > 0:
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
            elif J[i, (j-1)%N,1] < 0:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
    return [[x[0], x[1]] for x in total_spin]

first:
def priority(N, h, J):
    N_squared = N * N
    priority_total = [[float('-inf'), float('inf')] for _ in range(N_squared)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            
            site_nbr1 = (i + ((j-1)%2 - 1)) % N
            site_nbr2 = (i + ((j+1)%2 - 1)) % N
            site_nbr3 = (i + ((j-1)%N - N//2)) % N
            site_nbr4 = (i + ((j+1)%N - N//2)) % N
            
            total_spin += h[site_nbr1][j]
            total_spin += h[site_nbr2][j]
            total_spin += J[0, i*N+j, 0] * h[site_nbr3][j]
            total_spin += J[1, i*N+j, 1] * h[site_nbr4][j]
            
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
                priority_total[i*N+j][1] = -total_spin
            else:
                priority_total[i*N+j][0] = -total_spin
                priority_total[i*N+j][1] = total_spin
    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
    return [[x[0], x[1]] for x in total_spin]

first:
def priority(N,h,J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

    for i, j in product(range(N), range(N)):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
        else:
            priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(2)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            for k in range(3):
                total_spin = h[site_nbr][j] if k == 0 else J[i*N+j][k-1]
                priority_total[i*N+j][0] += total_spin
                priority_total[i*N+j][1] -= total_spin
    return [[x, 1-x] for x in [p[0]-p[1] for p in priority_total]]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf'), float('inf')] for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
            for k, neighbor_i in enumerate(site_nbrs):
                if J[k][i*N+j][0] > 0:
                    priority_total[i*N+j][0] += 1
                    priority_total[i*N+j][1] -= 1
                else:
                    priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]
first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += J[0][i*N+j]
                priority_total[i][j][1] -= J[1][i*N+j]
            else:
                priority_total[i][j][0] -= J[0][i*N+j]
                priority_total[i][j][1] += J[1][i*N+j]
    return [[x[0], x[1]] for i in range(N) for j in range(N)]

first:
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

    for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        total_spin = h[site_nbr][i%N]
        if state[i//N][i%N] == 1:
            priority_total[i][0] += 1
            priority_total[i][1] -= 1
        else:
            priority_total[i][0] -= 1
            priority_total[i][1] += 1

    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        if h[i // N][i % N] > 0:
            priority_total[i][0] += J[site_nbr][i // N][i % N]
            priority_total[i][1] -= J[site_nbr][i // N][i % N]
        else:
            priority_total[i][0] -= J[site_nbr][i // N][i % N]
            priority_total[i][1] += J[site_nbr][i // N][i % N]

    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][0] -= 1
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in total_spin]

first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % 2 - 1)) % N
        if h[i//N][i%N] > 0:
            total_spin[i][0] += J[site_nbr][i]
            total_spin[i][1] -= J[site_nbr][i]
        else:
            total_spin[i][0] -= J[site_nbr][i]
            total_spin[i][1] += J[site_nbr][i]
    return [[x[0], x[1]] for x in total_spin]

first:
def priority(N,h,J):
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                total_spin = i*N+j
                priority_total[total_spin][0] += J[site_nbr*N+min(j,N-1)][min(i,1)] + J[site_nbr*N+max(j,N-2)][min(i,1)]
                priority_total[total_spin][1] -= 2*J[site_nbr*N+min(j,N-1)][min(i,1)] + 2*J[site_nbr*N+max(j,N-2)][min(i,1)]
            else:
                total_spin = i*N+j
                priority_total[total_spin][0] += -2*J[site_nbr*N+min(j,N-1)][min(i,1)] - 2*J[site_nbr*N+max(j,N-2)][min(i,1)]
                priority_total[total_spin][1] -= J[site_nbr*N+min(j,N-1)][min(i,1)] + J[site_nbr*N+max(j,N-2)][min(i,1)]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += J[site_nbr][j]
                priority_total[i*N+j][1] -= J[site_nbr][j]
            else:
                priority_total[i*N+j][0] -= J[site_nbr][j]
                priority_total[i*N+j][1] += J[site_nbr][j]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    N2 = N*N
    total_spin = [[0,0] for _ in range(N2)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            for k in range(3):
                if J[i*N+j][k] == J[site_nbr][j]:
                    priority_total[i*N+j][0] += h[site_nbr][j]
                    priority_total[i*N+j][1] -= h[site_nbr][j]
                else:
                    priority_total[i*N+j][0] -= h[site_nbr][j]
                    priority_total[i*N+j][1] += h[site_nbr][j]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[site_nbr][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for sublist in priority_total for x in sublist]

first:
def priority(N,h,J):
    total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][0] -= 1
    return [[x, y] for x,y in sorted(total_spin)]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf'), float('inf')] for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]

    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1

    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][site_nbr] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1

    return [x for sublist in priority_total for x in sublist]

first:
def priority(N, h, J):
    priority_total = [[[0,0] for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N) - 1) % N) % N
        if h[i//N][site_nbr] > 0:
            priority_total[i][0] += J[i][0]
            priority_total[i][1] -= J[i][1]
        else:
            priority_total[i][0] -= J[i][0]
            priority_total[i][1] += J[i][1]
    return [[x[0], x[1]] for x in priority_total]
first:
def sum_interaction(i, j):
    return J[(i + ((j-1)%2 - 1)) % N][j] if h[i][j] > 0 else J[(i + ((j+1)%2 - 1)) % N][j]

def priority(N, h, J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            priority_total[i*N+j][0] += sum_interaction(i, j)
            priority_total[i*N+j][1] -= sum_interaction(i, j)
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[0, 0] for _ in range(N**2)]
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if J[i*N+j][0] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in total_spin]

first:
def priority(N, h, J):
    N_half = N//2
    total_spin = [[0. for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N_half)) % N
            
            if h[i][j] > 0:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
            
            for k in range(3):
                site_nbr = (i + ((k-1)%2 - 1)) % N
                total_spin[i*N+j][0] += h[site_nbr][j]
            
    return [[x[0], x[1]] for x in total_spin]

first:
def priority(N, h, J):
    n = N**2
    total_spin = np.zeros((n, 2))
    for i in range(n):
        site_nbr = (i // N + ((i % N) - 1)) % N
        for j in range(2):
            total_spin[i][j] += h[site_nbr][i % N] * J[0][i//N][i%N][j]
    priority_total = np.zeros((n, 2))
    for i in product(range(N), range(N)):
        site_nbr = (i[0] + ((i[1]-1)%N - 1)) % N
        if h[i[0]][i[1]] > 0:
            priority_total[i[0]*N+i[1]][0] += 1
            priority_total[i[0]*N+i[1]][1] -= 1
        else:
            priority_total[i[0]*N+i[1]][0] -= 1
    return priority_total.tolist()
first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j]>0:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += h[site_nbr][j]
                total_spin[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] -= h[site_nbr][j]
                total_spin[i*N+j][1] += 1
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j]>0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in total_spin]+priority_total
first:
def priority(N,h,J):
    priority_total = [[[float('-inf'),float('-inf')] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin = [0,0]
            if h[i][j] > 0:
                total_spin[0] += 1; total_spin[1] -= 1
            else:
                total_spin[0] -= 1; total_spin[1] += 1
            
            for k in range(3):
                site_nbr = (i + ((k-1)%2 - 1)) % N
                total_spin[0] += h[site_nbr][j]; total_spin[1] -= J[k][i*N+j]
            
            priority_total[i*N+j] = [x for x in sorted([-y for y in total_spin])]
    return [[x[0],x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += J[0][site_nbr*N+j]
                priority_total[i][j][1] -= J[1][site_nbr*N+j]
            else:
                priority_total[i][j][0] -= J[0][site_nbr*N+j]
                priority_total[i][j][1] += J[1][site_nbr*N+j]
    return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i//N][i%N]]]
first:
def priority(N, h, J):
    N2 = N * N
    total_spin = np.zeros((N2, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j] += h[site_nbr][j]
    priority_total = np.full((N2, 2), -np.inf)
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j] -= 1
    return [(x[0], x[1]) for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
            total_spin = [0, 0]
            if h[i][j] > 0:
                for k in range(3):
                    total_spin[1] += J[site_nbrs[k]][i*N+j]
            else:
                for k in range(3):
                    total_spin[0] += J[site_nbrs[k]][i*N+j]
            
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[0]
                priority_total[i*N+j][1] = -total_spin[1]
            else:
                priority_total[i*N+j][0] = -total_spin[0]
                priority_total[i*N+j][1] = total_spin[1]
    
    return [[x[0], x[1]] for x in [max(x) if y == 0 else min(x) for x, y in zip(priority_total, itertools.cycle([0, 1]))]]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf'), float('-inf')], [float('inf'), float('inf')]] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[site_nbr][j] > 0:
                priority_total[i*N+j][0][0] += 1
                priority_total[i*N+j][0][1] -= 1
            else:
                priority_total[i*N+j][1][0] += 1
                priority_total[i*N+j][1][1] -= 1
    return [[x[0], x[1]] for sublist in priority_total for x in sublist]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf'), float('inf')] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1]]
            for k in range(len(site_nbrs)):
                total_spin = h[site_nbrs[k]][j] * J[k][i*N+j]
                if total_spin > 0:
                    priority_total[i*N+j][0] += total_spin
                    priority_total[i*N+j][1] -= total_spin
                else:
                    priority_total[i*N+j][0] -= total_spin
                    priority_total[i*N+j][1] += total_spin
    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][1] += 1
    return [[-x[1], -x[0]] for x in total_spin]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N**2):
        site_nbrs = [(i + ((j-1)%N - N//2)) % N for j in range(N*2)]
        for k,site_nbr in enumerate(site_nbrs):
            if site_nbr < N:
                total_spin[i][0] += J[0][k][0]*h[site_nbr][j]
                total_spin[i][1] -= J[0][k][1]*h[site_nbr][j]
    return [[x[0], x[1]] for i in range(N**2) for x in [total_spin[i]]]
first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in [priority_total[i*N+j] for i in range(N) for j in range(N)]]

first:
def priority(N, h, J):
    priority_total = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return priority_total.tolist()

first:
def priority(N,h,J):
    total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += J[0][i*N+j] + h[site_nbr][j]
            total_spin[i*N+j][1] -= J[0][i*N+j] - h[site_nbr][j]
    return [[x,0] if x > 0 else [0,1] for x in [x[0]-x[1] for x in total_spin]]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf'), float('inf')] for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0][0] += J[0][i*N+j]
                priority_total[i*N+j][1][1] -= J[1][i*N+j]
            else:
                priority_total[i*N+j][0][1] -= J[0][i*N+j]
                priority_total[i*N+j][1][0] += J[1][i*N+j]
    return [[x[0], x[1]] for x in [max(x) for x in priority_total]]

first:
def priority(N,h,J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in total_spin]

first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
                for k in range(3):
                    site_nbr = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += J[site_nbr][j]
                priority_total = [[0,0] for _ in range(N**2)]
                for i in range(N**2):
                    if h[i//N][i%N] > 0:
                        priority_total[i][0] -= 1
                        priority_total[i][1] += 1
                    else:
                        priority_total[i][0] += 1
                        priority_total[i][1] -= 1
                return [x for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    return [[x[0], x[1]] for sublist in priority_total for x in sublist]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i][j][0] += J[0][i*N+j]
                priority_total[i][j][1] -= J[1][i*N+j]
            else:
                site_nbr = (i + ((j+1)%2 - 1)) % N
                priority_total[i][j][0] -= J[0][i*N+j]
                priority_total[i][j][1] += J[1][i*N+j]
    return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i//N][i%N]]]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += J[0][i*N+j]
                priority_total[i][j][1] -= J[1][i*N+j]
            else:
                priority_total[i][j][0] -= J[0][i*N+j]
                priority_total[i][j][1] += J[1][i*N+j]
    return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i][j] if j==0 else [(priority_total[i][j-1][0]+h[i][j])*1.+(J[3][i*N+j])*(1.),(priority_total[i][j-1][1]-h[i][j])*1.-(J[3][i*N+j])*(1.)] for j in range(N)]]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                total_spin = [0, 0]
                total_spin[1] += J[i*N+j][i*N+site_nbr][1]
                priority_total[i*N+j] = [-total_spin[0], total_spin[1]]
            else:
                total_spin = [0, 0]
                total_spin[0] += J[i*N+j][i*N+site_nbr][0]
                priority_total[i*N+j] = [total_spin[0], -total_spin[1]]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i][j][0] += J[0][i*N+j]
                priority_total[i][j][1] -= J[1][i*N+j]
            else:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i][j][0] -= J[0][i*N+j]
                priority_total[i][j][1] += J[1][i*N+j]
    return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i//N][i%N]]]

first:
def priority(N, h, J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
            for k in range(3):
                site_nbr = (i + ((k-1)%2 - 1)) % N
                total_spin = h[site_nbr][j]
                if J[i*N+j, i*N+site_nbr*N+j] > 0:
                    priority_total[i*N+j][0] += total_spin
                    priority_total[i*N+j][1] -= total_spin
                else:
                    priority_total[i*N+j][0] -= total_spin
                    priority_total[i*N+j][1] += total_spin
            
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    for i in range(N**2):
        total_spin = [[0, 0]]
        for k in range(3):
            site_nbr = (i // N + ((k-1)%2 - 1)) % N
            total_spin[0][0] += h[site_nbr][i % N]
        if priority_total[i//N][i%N][0] > 0:
            return [[x, 0] for x in priority_total[i//N][i%N]]
        else:
            return [[x, 1] for x in priority_total[i//N][i%N]]
first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr1 = (i + ((j-1)%N - N//2)) % N
            site_nbr2 = (i + ((j+1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += J[0][i*N+j]
                priority_total[i*N+j][1] -= J[1][i*N+j]
                priority_total[i*N+j][0] += J[0][i*N+site_nbr1]
                priority_total[i*N+j][1] -= J[1][i*N+site_nbr1]
                if i > 0:
                    site_nbr3 = (i - 1 + ((j-1)%N - N//2)) % N
                    priority_total[i*N+j][0] += J[0][i*N+site_nbr3]
                    priority_total[i*N+j][1] -= J[1][i*N+site_nbr3]
                if i < N-1:
                    site_nbr4 = (i + 1 + ((j-1)%N - N//2)) % N
                    priority_total[i*N+j][0] += J[0][i*N+site_nbr4]
                    priority_total[i*N+j][1] -= J[1][i*N+site_nbr4]
                if j > 0:
                    site_nbr5 = (i + ((j-1)%N - N//2) - N) % N
                    priority_total[i*N+j][0] += J[0][i*N+site_nbr5]
                    priority_total[i*N+j][1] -= J[1][i*N+site_nbr5]
                if j < N-1:
                    site_nbr6 = (i + ((j+1)%N - N//2) - N) % N
                    priority_total[i*N+j][0] += J[0][i*N+site_nbr6]
                    priority_total[i*N+j][1] -= J[1][i*N+site_nbr6]
            else:
                priority_total[i*N+j][0] -= J[0][i*N+j]
                priority_total[i*N+j][1] += J[1][i*N+j]
                priority_total[i*N+j][0] -= J[0][i*N+site_nbr1]
                priority_total[i*N+j][1] += J[1][i*N+site_nbr1]
                if i > 0:
                    site_nbr3 = (i - 1 + ((j-1)%N - N//2)) % N
                    priority_total[i*N+j][0] -= J[0][i*N+site_nbr3]
                    priority_total[i*N+j][1] += J[1][i*N+site_nbr3]
                if i < N-1:
                    site_nbr4 = (i + 1 + ((j-1)%N - N//2)) % N
                    priority_total[i*N+j][0] -= J[0][i*N+site_nbr4]
                    priority_total[i*N+j][1] += J[1][i*N+site_nbr4]
                if j > 0:
                    site_nbr5 = (i + ((j-1)%N - N//2) - N) % N
                    priority_total[i*N+j][0] -= J[0][i*N+site_nbr5]
                    priority_total[i*N+j][1] += J[1][i*N+site_nbr5]
                if j < N-1:
                    site_nbr6 = (i + ((j+1)%N - N//2) - N) % N
                    priority_total[i*N+j][0] -= J[0][i*N+site_nbr6]
                    priority_total[i*N+j][1] += J[1][i*N+site_nbr6]
    return [[x[0], x[1]] for sublist in priority_total for x in sublist]
first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
                
    return [x for sublist in priority_total for x in sublist]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    
    for i in range(N):
        for j in range(N):
            total_spin = (i + ((j-1)%N - N//2)) % N
            if h[total_spin][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
    return [[x[0], x[1]] for x in total_spin]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N**2)]
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            priority_total[i*N+j][state[site_nbr][j]][0] += h[site_nbr][j]
            priority_total[i*N+j][int(1-state[state[site_nbr][j]][j])][1] -= h[site_nbr][j]
    
    return [[x[0], x[1]] for x in priority_total.flatten()]

first:
def priority(N,h,J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for k in range(3):
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((k-1)%2 - 1)) % N
                if h[site_nbr][j] > 0:
                    priority_total[i*N+j][1] += J[k][i*N+j]
                    priority_total[i*N+j][0] -= J[k][i*N+j]
                else:
                    priority_total[i*N+j][1] -= J[k][i*N+j]
                    priority_total[i*N+j][0] += J[k][i*N+j]
                    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0][0] += 1
                priority_total[i*N+j][0][1] -= 1
            else:
                priority_total[i*N+j][1][0] += 1
                priority_total[i*N+j][1][1] -= 1
    
    return [[x[0], x[1]] for sublist in priority_total for x in sublist]

first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][1] += 1
    for i in range(N**2):
        if total_spin[i][0] < -total_spin[i][1]:
            priority_total[i][0] = -total_spin[i][1]
        elif total_spin[i][0] > -total_spin[i][1]:
            priority_total[i][1] = -total_spin[i][0]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    total_spin = np.zeros((N*N, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
            for k in range(3):
                total_spin[i*N+j][0] += J[site_nbrs[k], i*N+j][0]
                total_spin[i*N+j][1] -= J[site_nbrs[k], i*N+j][1]
            if h[i][j] > 0:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in total_spin.flatten()]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    for i in range(N):
        for j in range(N//2):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin = i*N + j
            if h[site_nbr][j] > 0:
                priority_total[total_spin][0] += 1
                priority_total[total_spin][1] -= 1
            else:
                priority_total[total_spin][0] -= 1
    return [priority_total[i] for i in range(N**2)]

first:
def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = [total_spin[i*N+j][0], 0]
                priority_total[i*N+j][1] = [-total_spin[i*N+j][0], 1]
            else:
                priority_total[i*N+j][0] = [-total_spin[i*N+j][0], 0]
                priority_total[i*N+j][1] = [total_spin[i*N+j][0], 1]
    return [[x[0], x[1]] for x in priority_total]
first:
def priority(N, h, J):
    total_spin = [[0.0, 0.0] for _ in range(N**2)]
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr1 = (i + ((j-1)%N - N//2)) % N
            site_nbr2 = (i + ((j+1)%N - N//2)) % N
            site_nbr3 = (i + ((j-1)%N - N//2)) % N if j%2 == 0 else (i + ((j+1)%N - N//2)) % N
            site_nbr4 = (i + ((j+N-1)%N - N//2)) % N if i < N//2 else (i + ((j-N)%N - N//2)) % N
            total_spin[i*N+j][0] += J[0][i*N+j]
            total_spin[i*N+j][1] -= J[0][i*N+j]
            if h[i][j] > 0:
                total_spin[i*N+j][0] += J[1][site_nbr1*N+int((j-1)%N)] + J[2][site_nbr3*N+int((j-1)%N)] + J[3][site_nbr4*N+(j+N-1)%N]
                total_spin[i*N+j][1] -= J[1][site_nbr1*N+int((j-1)%N)] + J[2][site_nbr3*N+int((j-1)%N)] + J[3][site_nbr4*N+(j+N-1)%N]
            else:
                total_spin[i*N+j][0] += J[1][site_nbr2*N+int((j+1)%N)] + J[2][site_nbr4*N+(j+N-1)%N] + J[3][site_nbr1*N+(i+N//2)%N]
                total_spin[i*N+j][1] -= J[1][site_nbr2*N+int((j+1)%N)] + J[2][site_nbr4*N+(j+N-1)%N] + J[3][site_nbr1*N+(i+N//2)%N]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i][j][0] -= 1
                priority_total[i][j][1] += 1
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = i*N+j
                priority_total[total_spin][0] += 1
                priority_total[total_spin][1] -= 1
            else:
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = i*N+j
                priority_total[total_spin][0] -= 1
                priority_total[total_spin][1] += 1
    return [[priority_total[i*N+j][0], priority_total[i*N+j][1]] for i in range(N) for j in range(N)]
first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin = [x for x in priority_total[i*N+j]]
                total_spin[0] += h[site_nbr][j]
                total_spin[1] -= J[0][i*N+j]
            else:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin = [x for x in priority_total[i*N+j]]
                total_spin[0] -= h[site_nbr][j]
                total_spin[1] += J[0][i*N+j]
            if total_spin[0] > total_spin[1]:
                return [[total_spin[0], 0]]
            elif total_spin[0] < total_spin[1]:
                return [[total_spin[0], 1]]
    return [[-1, 0]]

first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    priority_total = [[[float('-inf'), float('inf')] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0][0] += 1
                priority_total[i*N+j][0][1] -= 1
            else:
                priority_total[i*N+j][1][0] -= 1
                priority_total[i*N+j][1][1] += 1
    
    return [[x[0], x[1]] for x in [y for sublist in priority_total for y in sublist]]

first:
def priority(N,h,J):
    total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][0] += J[site_nbr][i][0]
        total_spin[i][1] -= J[site_nbr][i][1]
    return [[x for x in row] for row in total_spin]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            total_spin[i*N+j][1] -= J[0][i*N+j]
    for i in range(N**2):
        if total_spin[i][0] > total_spin[i][1]:
            priority_total[i][0] = 1
            priority_total[i][1] = float('-inf')
        else:
            priority_total[i][1] = 1
            priority_total[i][0] = float('-inf')
    return [[x[0], x[1]] for sub in priority_total for x in [sub]]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i][j] if J[i][j][0] > 0 else priority_total[i][((N-1)-j)%N] for j in range(N)]]

first:
def priority(N,h,J):
    N2 = N**2
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
    
    for i, j in product(range(N), range(N)):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        if h[i][j] > 0:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
        else:
            priority_total[i*N+j][0] -= 1
    
    for i, j in product(range(N), range(N)):
        site_nbr = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
        else:
            priority_total[i*N+j][0] -= 1
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = [x for x in product(range(2), repeat=N)][site].index([1])
                priority_total[i*N+j][total_spin] -= 3
    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    total_spin = np.zeros((N**2, 2), dtype=float)
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][1] += 1
    return total_spin.tolist()
first:
def priority(N,h,J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [[0, 0] for _ in range(N**2)]
    for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        for j in range(N):
            total_spin[i*N+j][0] += h[site_nbr][j]
            total_spin[i*N+j][1] -= J[k][i*N+j]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
        if h[site_nbr][i%N] > 0:
            priority_total[i][0] += total_spin[i][0]
            priority_total[i][1] -= total_spin[i][1]
        else:
            priority_total[i][0] -= total_spin[i][0]
            priority_total[i][1] += total_spin[i][1]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    total_spin = np.zeros((N,N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i,(j-1)%N),(i,(j+1)%N),((i-1)%N,j),((i+1)%N,j)]
            for k, (ni,nj) in enumerate(site_nbrs):
                if ni < 0 or nj < 0:
                    site_nbrs[k] = ((ni+N)%N,(nj+N)%N)
                total_spin[i][j][:] += J[ni*N+nj][k]
    priority_total = np.zeros((N,N,2), dtype=float)
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i][j][1] += total_spin[i][j][0]
                priority_total[i][j][0] -= total_spin[i][j][1]
            else:
                priority_total[i][j][1] -= total_spin[i][j][0]
                priority_total[i][j][0] += total_spin[i][j][1]
    return np.array([[x[0], x[1]] for i in range(N) for j in range(N)]).tolist()
first:
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        if h[i//N][site_nbr] > 0:
            priority_total[i][0] += 1
            priority_total[i][1] -= 1
        else:
            priority_total[i][0] -= 1
    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for k in range(N):
        site_nbr = (k + ((N-1)%2 - 1)) % N
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            if h[site][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = np.zeros((N**2, 2))
    
    for i in range(N):
        for j in range(N):
            site_nbr1 = (i + ((j-1)%2 - 1)) % N
            site_nbr2 = (i + ((j+1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += J[0, i*N+j] + J[1, i*N+site_nbr1] + J[2, i*N+site_nbr2]
                priority_total[i*N+j][1] -= J[0, i*N+j] - J[1, i*N+site_nbr1] - J[2, i*N+site_nbr2]
            else:
                priority_total[i*N+j][0] -= J[0, i*N+j] + J[1, i*N+site_nbr1] + J[2, i*N+site_nbr2]
                priority_total[i*N+j][1] += J[0, i*N+j] - J[1, i*N+site_nbr1] - J[2, i*N+site_nbr2]
    
    return np.array(priority_total).tolist()

first:
def priority(N,h,J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            priority_total[i*N+j][1] += J[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
                
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    for k in range(3):
        site_nbr = lambda i, j: (i + ((k-1)%2 - 1)) % N
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i][j][0] += 1
                    priority_total[i][j][1] -= 1
                else:
                    priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for i in range(N) for j in range(N)]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
            
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = np.zeros((N*N,2))
    for k in range(3):
        site_nbr = (k%2 - 1)
        for i in range(N):
            for j in range(N):
                site = (i + ((j+site_nbr)%N - N//2)) % N
                total_spin[i*N+j] += h[site][j]
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        if state[i//N][i%N] > 0:
            priority_total[i][0] += total_spin[i][0]
            priority_total[i][1] -= total_spin[i][1]
        else:
            priority_total[i][0] -= total_spin[i][0]
            priority_total[i][1] += total_spin[i][1]
    return [[x[0], x[1]] for x in priority_total]
first:
def priority(N,h,J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N**2):
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [1,3]]
        total_spin = sum([h[j][i] for j in site_nbrs])
        if h[i//N][i%N] > 0:
            priority_total[i][0] += 1
            priority_total[i][1] -= 1
        else:
            priority_total[i][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[[0,0] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
            
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] += J[site_nbr][i*N+j]
                priority_total[i*N+j][1] -= J[site_nbr][i*N+j]
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] -= J[site_nbr][i*N+j]
                priority_total[i*N+j][1] += J[site_nbr][i*N+j]
    
    return [[x[0], x[1]] for x in priority_total]
first:
def priority(N, h, J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1]]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += sum(J[s][j] for s in site_nbrs)
                priority_total[i*N+j][1] -= sum(J[s][j] for s in site_nbrs)
            else:
                priority_total[i*N+j][0] -= sum(J[s][j] for s in site_nbrs)
                priority_total[i*N+j][1] += sum(J[s][j] for s in site_nbrs)
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    total_spin = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (i-1)%N, (i+1)%N]]
            total_spin[i*N+j] += np.sum([h[s][j]*np.sign(J[0][i*N+s][j]) for s in site_nbrs])
    return [(ts[0], 0) if ts[1] > 0 else (ts[0], 1) for ts in total_spin]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for x in itertools.chain.from_iterable(priority_total)]

first:
def priority(N,h,J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j] += h[site_nbr][j]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i*N+j][0] += J[site_nbr][i*N+j]
                priority_total[i*N+j][1] -= J[site_nbr][i*N+j]
            else:
                site_nbr = (i + ((j-1)%2) % N)
                priority_total[i*N+j][0] -= J[site_nbr][i*N+j]
                priority_total[i*N+j][1] += J[site_nbr][i*N+j]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    total_spin = [[0, 0] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            total_spin[i*N+j][1] -= h[site_nbr][j]
    
    for i in range(N**2):
        if total_spin[i][0] > 0:
            priority_total[i][0] = total_spin[i][0]
            priority_total[i][1] = -total_spin[i][1]
        else:
            priority_total[i][0] = -total_spin[i][0]
            priority_total[i][1] = total_spin[i][1]
    
    return [list(x) for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[0, 0] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for i in range(N) for j in range(N)]

first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr1 = (i + ((j-1)%N - N//2)) % N
            site_nbr2 = (i + ((j+1)%N - N//2)) % N
            site_nbr3 = (i + ((j-1)%N - N//2)) % N if j!=0 else (i + (N-1)%N - N//2)
            site_nbr4 = (i + ((j+1)%N - N//2)) % N if j!=(N-1) else (i + 0 - N//2)
            total_spin[i*N+j][0] += J[0][i*N+j] + J[1][site_nbr1*N+j] + J[3][site_nbr3*N+j] + J[4][site_nbr4*N+j]
            total_spin[i*N+j][1] -= J[2][i*N+j] + J[1][site_nbr1*N+j] + J[3][site_nbr3*N+j] + J[4][site_nbr4*N+j]
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in total_spin]

first:
def priority(N, h, J):
    total_spin = np.zeros((N*N, 2))
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            total_spin[i*N+j][1] -= 1 if h[i][j] > 0 else 0
    return total_spin.tolist()

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[site_nbr][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    
    return [[x[0], x[1]] for i in range(N**2) for j in range(2)]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for i in range(N) for j in range(N)]

first:
def priority(N, h, J):
    total_spin = np.zeros((N*N, 2), dtype=int)
    for i in range(N**2):
        site_nbr = (i // N + ((i % N) - 1) % N) % N
        total_spin[i][0] += h[site_nbr][i % N]
        if h[i//N][i%N] > 0:
            total_spin[i][1] -= 1
        else:
            total_spin[i][1] += 1
    return [x.tolist() for x in total_spin]
first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for i in range(N**2) for j in range(2) for x in (priority_total[i//N][i%N]) if i//N < N and i%N < N]

first:
def priority(N,h,J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][1] += 1
    return [[x[0],-x[1]] for x in total_spin]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr1 = (i + ((j-1)%N - N//2)) % N
            site_nbr2 = (i + ((j+1)%N - N//2)) % N
            
            if h[i][j] > 0:
                priority_total[i*N+j][0] += J[0][i*N+j]
                priority_total[i*N+j][1] -= J[1][i*N+j]
                priority_total[i*N+j][0] += J[0][site_nbr1*N+site_nbr2]
                priority_total[i*N+j][1] -= J[1][site_nbr1*N+site_nbr2]
                
                if i > 0:
                    site_nbr3 = (i - 1 + ((j-1)%N - N//2)) % N
                    priority_total[i*N+j][0] += J[0][i*N+j-1]
                    priority_total[i*N+j][1] -= J[1][i*N+j-1]
                    
                    if j > 0:
                        site_nbr4 = (i - 1 + ((j-1)%N - N//2)) % N
                        priority_total[i*N+j][0] += J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] -= J[1][site_nbr3*N+site_nbr4]
                    else:
                        site_nbr4 = (i - 1 + ((j+N-1)%N - N//2)) % N
                        priority_total[i*N+j][0] += J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] -= J[1][site_nbr3*N+site_nbr4]
                else:
                    site_nbr3 = (i + ((j-1)%N - N//2)) % N
                    if j > 0:
                        site_nbr4 = (i + ((j-1)%N - N//2)) % N
                        priority_total[i*N+j][0] += J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] -= J[1][site_nbr3*N+site_nbr4]
                    else:
                        site_nbr4 = (i + ((j+N-1)%N - N//2)) % N
                        priority_total[i*N+j][0] += J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] -= J[1][site_nbr3*N+site_nbr4]
                
                if i < N - 1:
                    site_nbr3 = (i + 1 + ((j-1)%N - N//2)) % N
                    if j > 0:
                        site_nbr4 = (i + 1 + ((j-1)%N - N//2)) % N
                        priority_total[i*N+j][0] += J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] -= J[1][site_nbr3*N+site_nbr4]
                    else:
                        site_nbr4 = (i + 1 + ((j+N-1)%N - N//2)) % N
                        priority_total[i*N+j][0] += J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] -= J[1][site_nbr3*N+site_nbr4]
                else:
                    site_nbr3 = (i + ((j-1)%N - N//2)) % N
                    if j > 0:
                        site_nbr4 = (i + ((j-1)%N - N//2)) % N
                        priority_total[i*N+j][0] += J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] -= J[1][site_nbr3*N+site_nbr4]
                    else:
                        site_nbr4 = (i + ((j+N-1)%N - N//2)) % N
                        priority_total[i*N+j][0] += J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] -= J[1][site_nbr3*N+site_nbr4]
            
            else:
                site_nbr1 = (i + ((j-1)%N - N//2)) % N
                site_nbr2 = (i + ((j+1)%N - N//2)) % N
                
                priority_total[i*N+j][0] -= J[0][i*N+j]
                priority_total[i*N+j][1] += J[1][i*N+j]
                priority_total[i*N+j][0] -= J[0][site_nbr1*N+site_nbr2]
                priority_total[i*N+j][1] += J[1][site_nbr1*N+site_nbr2]
                
                if i > 0:
                    site_nbr3 = (i - 1 + ((j-1)%N - N//2)) % N
                    priority_total[i*N+j][0] -= J[0][i*N+j-1]
                    priority_total[i*N+j][1] += J[1][i*N+j-1]
                    
                    if j > 0:
                        site_nbr4 = (i - 1 + ((j-1)%N - N//2)) % N
                        priority_total[i*N+j][0] -= J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] += J[1][site_nbr3*N+site_nbr4]
                    else:
                        site_nbr4 = (i - 1 + ((j+N-1)%N - N//2)) % N
                        priority_total[i*N+j][0] -= J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] += J[1][site_nbr3*N+site_nbr4]
                else:
                    site_nbr3 = (i + ((j-1)%N - N//2)) % N
                    if j > 0:
                        site_nbr4 = (i + ((j-1)%N - N//2)) % N
                        priority_total[i*N+j][0] -= J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] += J[1][site_nbr3*N+site_nbr4]
                    else:
                        site_nbr4 = (i + ((j+N-1)%N - N//2)) % N
                        priority_total[i*N+j][0] -= J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] += J[1][site_nbr3*N+site_nbr4]
                
                if i < N - 1:
                    site_nbr3 = (i + 1 + ((j-1)%N - N//2)) % N
                    if j > 0:
                        site_nbr4 = (i + 1 + ((j-1)%N - N//2)) % N
                        priority_total[i*N+j][0] -= J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] += J[1][site_nbr3*N+site_nbr4]
                    else:
                        site_nbr4 = (i + 1 + ((j+N-1)%N - N//2)) % N
                        priority_total[i*N+j][0] -= J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] += J[1][site_nbr3*N+site_nbr4]
                else:
                    site_nbr3 = (i + ((j-1)%N - N//2)) % N
                    if j > 0:
                        site_nbr4 = (i + ((j-1)%N - N//2)) % N
                        priority_total[i*N+j][0] -= J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] += J[1][site_nbr3*N+site_nbr4]
                    else:
                        site_nbr4 = (i + ((j+N-1)%N - N//2)) % N
                        priority_total[i*N+j][0] -= J[0][site_nbr3*N+site_nbr4]
                        priority_total[i*N+j][1] += J[1][site_nbr3*N+site_nbr4]
            
            return [p for p in priority_total if p[1] == 0 and p[2] >= 0]

priority_list = []
for i in range(100):
    if i % 10 == 0:
        priority_list.append([i, 0, -10])
    elif i % 5 == 0:
        priority_list.append([i, 1, -5])
    else:
        priority_list.append([i, 2, -1])

print(priority_list)
print(expert_priority(priority_list))
first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    total_spin = [[0,0] for i in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                total_spin[i*N+j][0] += h[site_nbr][j]
                total_spin[i*N+j][1] -= J[(i + ((j-1)%2 - 1)) % N, j][1]
            else:
                priority_total[i][j][1] += 1
                total_spin[i*N+j][0] -= h[site_nbr][j]
                total_spin[i*N+j][1] += J[(i + ((j-1)%2 - 1)) % N, j][1]
                
    for i in range(N**2):
        priority_total[i][0] = total_spin[i][0]
        priority_total[i][1] = -total_spin[i][1]
        
    return [[x[0], x[1]] for x in (sorted([(priority_total[i][j][0], priority_total[i][j][1]) for j in range(N)]) for i in range(N))]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin = [h[site_nbr][j], 1]
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin = [-h[site_nbr][j], -1]
            for k in range(3):
                site_nbr = (i + ((k-1)%2 - 1)) % N
                if J[i*N+j][site_nbr*N+(j+1)%N] > 0:
                    total_spin[1] -= 1
                else:
                    total_spin[1] += 1
            priority_total[i][j] = [x for x in total_spin]
    return [[x[0], x[1]] for x in [y for sublist in priority_total for y in sublist]]

first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N) - 1) % N)
        total_spin = h[site_nbr][i % N]
        if h[i//N][i%N] > 0:
            priority_total[i][0] += 1
            priority_total[i][1] -= 1
        else:
            priority_total[i][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        if h[i//N][i%N] > 0:
            priority_total[i][0] += J[site_nbr][i]
            priority_total[i][1] -= J[site_nbr][i]
        else:
            priority_total[i][0] -= J[site_nbr][i]
    return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i//N][i%N]]]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf'), float('inf')] for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in [priority_total[i*N+j] for i in range(N) for j in range(N)]]

first:
def priority(N,h,J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin = h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x, y] for x,y in sorted((tuple(x) for x in priority_total), reverse=True)]

first:
def priority(N,h,J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    N2 = N * N
    total_spin = [[0, 0] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            
            for k in range(3):
                site_nbr = (i + ((k-1)%2 - 1)) % N
                total_spin[i*N+j][0] += J[0][i*N+j+(site_nbr*N+k)]
                
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][1] += 1
            
            priority_total[i*N+j][0] = -total_spin[i*N+j][0]
            priority_total[i*N+j][1] = total_spin[i*N+j][1]
            
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            priority_total[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][1] -= J[i*N+j][0]
                priority_total[i*N+j][1] -= J[i*N+j][1]
            else:
                priority_total[i*N+j][0] -= J[i*N+j][0]
                priority_total[i*N+j][1] += J[i*N+j][0] + J[i*N+j][1]
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[site_nbr][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for x in itertools.chain.from_iterable(priority_total)]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin = [0, 0]
            if h[i][j] > 0:
                total_spin[0] += 1
                total_spin[1] -= 1
            else:
                total_spin[0] -= 1
                total_spin[1] += 1
            for k in range(3):
                site_nbr = (i + ((k-1)%2 - 1)) % N
                total_spin[0] += h[site_nbr][j]
                total_spin[1] -= h[site_nbr][j]
            priority_total[i*N+j] = total_spin
    return [[x[0], x[1]] for x in itertools.chain.from_iterable(priority_total)]

first:
def priority(N, h, J):
    priority_total = np.zeros((N**2, 2), dtype=float)
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return priority_total.tolist()

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += J[site_nbr][i*N+j][0]
                priority_total[i][j][1] -= J[site_nbr][i*N+j][1]
            else:
                priority_total[i][j][0] -= J[site_nbr][i*N+j][0]
                priority_total[i][j][1] += J[site_nbr][i*N+j][1]
    return [[x[0], x[1]] for i in range(N**2) for x in [[max(priority_total[i][j]), 0 if h[i][j]>0 else 1] for j in range(N)] for i in range(N)]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1)%N - N//2)) % N
        total_spin = J[0][i] + J[1][(i-N)%N] + J[2][(i+1)%N]
        if h[i//N][i%N] > 0:
            priority_total[i//N][i%N][0] += 1
            priority_total[i//N][i%N][1] -= 1
        else:
            priority_total[i//N][i%N][0] -= 1
    return [[x[0], x[1]] for sublist in priority_total for x in sublist]

first:
def priority(N, h, J):
    priority_total = [[0, 0] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                site_nbr = (site_nbr + ((j+1)%N - N//2)) % N
                priority_total[i*N+j][0] += J[0][i*N+j]
                priority_total[i*N+j][1] -= J[1][i*N+j]
            else:
                site_nbr = (site_nbr + ((j+1)%N - N//2)) % N
                priority_total[i*N+j][0] -= J[0][i*N+j]
                priority_total[i*N+j][1] += J[1][i*N+j]
    
    return [[x, 1-x] for x, _ in sorted([(sum(p), i) for i, p in enumerate(priority_total)])]

first:
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin = h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N,h,J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N) - 1) % N)
        if h[site_nbr][i % N] > 0:
            total_spin[i][0] += 1
            total_spin[i][1] -= 1
    for i in range(N**2):
        priority_total = [[-float('inf'), float('inf')] for _ in range(2)]
        for j in range(4):
            site_nbr = (i // N + ((i % N) - 1) % N)
            if h[site_nbr][i % N] > 0:
                priority_total[0] += 1
                priority_total[1] -= 1
        return [[x[0], x[1]] for x in total_spin]

first:
def priority(N, h, J):
    priority_total = [[[0, 0] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin = h[site_nbr][j]
            
            if J[i*N+j][0] > 0:
                total_spin += J[i*N+j][0]
            else:
                total_spin -= J[i*N+j][0]
                
            if J[i*N+j][2] > 0:
                total_spin += J[i*N+j][2]
            else:
                total_spin -= J[i*N+j][2]
                
            site_nbr = (i + ((j+1)%2 - 1)) % N
            total_spin += h[site_nbr][j]
            
            if J[i*N+j][1] > 0:
                total_spin += J[i*N+j][1]
            else:
                total_spin -= J[i*N+j][1]
                
            site_nbr = (i + ((j+N-1)%2 - 1)) % N
            total_spin += h[site_nbr][j]
            
            if J[i*N+2*j][0] > 0:
                total_spin += J[i*N+2*j][0]
            else:
                total_spin -= J[i*N+2*j][0]
                
            site_nbr = (i + ((j+N-1)%2 - 1)) % N
            if J[i*N+2*j][1] > 0:
                total_spin += J[i*N+2*j][1]
            else:
                total_spin -= J[i*N+2*j][1]
                
            priority_total[i*N+j][0] = -total_spin
            priority_total[i*N+j][1] = total_spin
            
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = np.zeros((N**2, 2), dtype=float)
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return priority_total.tolist()

first:
def priority(N, h, J):
    N2 = N * N
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
            
            for s in product([-1, 1], repeat=4):
                total_spin = sum(s[k] * J[site_nbrs[k]][i*N+j] for k in range(4))
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = max(priority_total[i*N+j][0], total_spin)
                    priority_total[i*N+j][1] = min(priority_total[i*N+j][1], -total_spin)
                else:
                    priority_total[i*N+j][0] = min(priority_total[i*N+j][0], -total_spin)
                    priority_total[i*N+j][1] = max(priority_total[i*N+j][1], total_spin)
                    
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin = J[site_nbr][i*N+j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    
    return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i][j] for j in range(N)]]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf'),float('-inf')] for _ in range(2)] for _ in range(N**2)]
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    for k in range(3):
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((k-1)%2 - 1)) % N
                total_spin[i*N+j][0] += h[site_nbr][j]
                total_spin[i*N+j][1] -= J[k][i*N+j]
    for i in range(N**2):
        if state[i//N][i%N] > 0:
            priority_total[i][0] += total_spin[i][0]
            priority_total[i][1] -= total_spin[i][1]
        else:
            priority_total[i][0] -= total_spin[i][0]
            priority_total[i][1] += total_spin[i][1]
    return [[x[0], x[1]] for x in priority_total]
first:
def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin = h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]

first:
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N**2):
        site_nbr = (i // N + ((i % N)-1) % N - (N//2)) % N
        if h[site_nbr][i % N] > 0:
            priority_total[i][0] += 1
            priority_total[i][1] -= 1
        else:
            priority_total[i][0] -= 1
    
    return [[x, y] for x, y in priority_total]

first:
def priority(N,h,J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr1 = (i + ((j-1)%N - N//2)) % N
            site_nbr2 = (i + (j+1-N//2)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= J[0][i*N+j][site_nbr1] + J[0][i*N+j][site_nbr2]
            else:
                priority_total[i][j][0] -= 1
                priority_total[i][j][1] += J[0][i*N+j][site_nbr1] + J[0][i*N+j][site_nbr2]
    return [[x[0], x[1]] for x in [y for sublist in priority_total for y in sublist]]

