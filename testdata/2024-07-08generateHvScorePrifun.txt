#score: {'data2D.txt': -0.27106867283950575}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = sum(state[i][j]*h[i][j] for i in range(N) for j in range(N))
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for k in range(N):
    site_nbr = (k + ((N-1)%2 - 1)) % N
    total_spin += sum(h[site_nbr][j] for j in range(N))
  if h[N//2][N//2] > 0:
    total_spin += 1
  else:
    total_spin -= 1
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = sum(state[i][j]*h[i][j] for i in range(N) for j in range(N))
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for k in range(4):
    if k == 0:
      site_nbr = lambda i,j: (i + ((j-1)%N - 1)) % N
    elif k == 1:
      site_nbr = lambda i,j: (i + ((j+1)%N - 1)) % N
    elif k == 2:
      site_nbr = lambda i,j: (i + ((i+1)%N - 1)) % N
    else:
      site_nbr = lambda i,j: (i + ((i-1)%N - 1)) % N
    for i in range(N):
      for j in range(N):
        total_spin += h[site_nbr(i,j)][j]
  if sum(sum(h[i][j] for j in range(N)) for i in range(N)) > 0:
    total_spin += 1
  else:
    total_spin -= 1
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin
    else:
      priority_total[i][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      total_spin[i*N+j][1] -= h[site_nbr][j]
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.000797993827160493}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = []
  for i in range(N**2):
    if (i//N)%2 == 0:
      total_spin = sum(h[i//N][j] for j in range(N))
    else:
      total_spin = -sum(h[(i-1)//N][j] for j in range(N))
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin, -total_spin])
    else:
      priority_total.append([-total_spin, total_spin])
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for row in [row[:] for row in priority_total] for x in row]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = state[i][site_nbr]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin = 0
      
      if h[i][j] > 0:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          total_spin += h[site_nbr][j]
          
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
        
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          total_spin += h[site_nbr][j]
          
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  return [priority_total[i*N+j] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.0007541666666666669}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = [[0, 0] for _ in range(N**2)]
  site_nbrs = [(i//N + ((i%N-1)%2 - 1)) % N for i in range(N**2)]
  magnetisms = [h[i//N][i%N] > 0 for i in range(N**2)]

  for i, (site_nbr, magnetism) in enumerate(zip(site_nbrs, magnetisms)):
    if magnetism:
      priority[i][1] += site_nbr
    else:
      priority[i][0] -= site_nbr

  return priority




#score: {'data2D.txt': -0.020511265432098764}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0,0]]*N for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for sublist in priority_total for x in sublist]




#score: {'data2D.txt': -0.0019841049382716054}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N,N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(4)]
      magnetisms = [h[i//N][k%N] > 0 for k in range(4)]
      
      if sum(magnetisms) > 0:
        priority_total[i][j][0] += sum(site_nbrs)
        priority_total[i][j][1] -= sum(site_nbrs)
      else:
        priority_total[i][j][0] -= sum(site_nbrs)
        priority_total[i][j][1] += sum(site_nbrs)
  
  return priority_total.reshape(N**2, 2).tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': 0.19623225308642003}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    total_spin = [0, 0]
    for j in range(4):
      site_nbr = (i // N + ((j-1) % 2 - 1)) % N
      if h[site_nbr][i % N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
    priority_total = [float('-inf') for _ in range(2)]
    if h[i//N][i%N] > 0:
      priority_total[0] = total_spin[0]
      priority_total[1] = -1 * total_spin[1]
    else:
      priority_total[0] = -1 * total_spin[0]
      priority_total[1] = total_spin[1]
    priorities.append(priority_total)
  return priorities




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2].reshape(-1, int(len(J_new)/2)), 1) + h).flatten()
  sum2 = (-np.prod(J_new[1::2].reshape(-1, int(len(J_new)/2)), 1)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_spin = np.zeros((N,N))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin[i][j] = -1
      else:
        site_spin[i][j] = 1
  for k in range(N**2):
    site_nbr = (k//N + ((k%N-1)%N - N//2)) % N
    total_spin[k][0] += h[site_nbr][k%N]
    if h[k//N][k%N] > 0:
      total_spin[k][1] -= site_spin[k//N][k%N]
    else:
      total_spin[k][1] += site_spin[k//N][k%N]
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%N - 1)) % N for j in range(3)]
    total_spin = [sum(h[site_nbr][i%N] for site_nbr in site_nbrs), 
           sum(-h[site_nbr][i%N] for site_nbr in site_nbrs)]
    if h[i//N][i%N] > 0:
      priority_total[i][1] -= total_spin[0]
      priority_total[i][0] += total_spin[1]
    else:
      priority_total[i][0] -= total_spin[0]
      priority_total[i][1] += total_spin[1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= J[i*N+N*N:i*N+site_nbr*N, i%N].sum()
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += J[i*N+N*N:i*N+site_nbr*N, i%N].sum()
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  site_nbrs = [(i//N + ((i%N-1)%2 - 1)) % N for i in range(N**2)]
  magnetisms = [h[i//N][i%N] > 0 for i in range(N**2)]

  for i, (site_nbr, magnetism) in enumerate(zip(site_nbrs, magnetisms)):
    if magnetism:
      priority_total[i][1] -= site_nbr
    else:
      priority_total[i][0] += site_nbr

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.001705401234567901}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr1 = (i//N + ((i%N-1)%N - 1)) % N
    site_nbr2 = (i//N + ((i%N+1)%N - 1)) % N
    if h[site_nbr1][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    if i >= N and site_nbr2 == (i-N)//N:
      continue
    elif h[site_nbr2][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x, -y] if x > y else [-x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.27106867283950575}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  return total_spin.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i][j][0] += h[site_nbr][j]
      priority_total[i][j][1] -= 1
  return [[x[0], x[1]] for x in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in itertools.product(range(N),range(N)):
    site_nbr = (i[0] + ((i[1]-1)%N - N//2)) % N
    if h[i[0]][i[1]] > 0:
      priority_total[i[0]*N+i[1]][0] += 1
      priority_total[i[0]*N+i[1]][1] -= 1
    else:
      priority_total[i[0]*N+i[1]][0] -= 1
  return [x for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      total_spin[i*N+j][1] -= 1
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[float(0) for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.27106867283950575}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2), dtype=float)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N*N,2), dtype=float)
  for k in range(N//2):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    priority_total[i*N+j][0] += total_spin[site_nbr][0]
    if h[i][j] > 0:
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][1] += 1
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  total_priority = [[(p[0], p[1]) for p in row] for row in priority_total]
  return [[min(p), 1 - min(map(lambda x: x if x == min(p) else float('inf'), p))] for p in itertools.chain(*total_priority)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - N//2) % N
    total_spin[i][0] += h[site_nbr][i%N]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    if h[int(i/N)][i%N] > 0:
      site = (int(i/N) + ((i % N)-1)%N - N//2) % N
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_priority = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_priority[i][j][0] += state[site_nbr][j]
        total_priority[i][j][1] -= state[site_nbr][j]
      else:
        total_priority[i][j][0] -= state[site_nbr][j]
  return [[min(p), 1 - min(map(lambda x: x if x == min(p) else float('inf'), p))] for p in itertools.chain(*total_priority)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j+1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for x in itertools.chain(*priority_total)]




#score: {'data2D.txt': -0.039319290123456786}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.reshape(-1, J.shape[-1]).T.flatten()
  sum1 = ((J_new[0::4] + J_new[1::4] + J_new[2::4] + J_new[3::4]) * 2).flatten() + h.flatten()
  sum2 = (-((J_new[1::4] - J_new[3::4]) + (J_new[0::4] - J_new[2::4]))).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_priority[i*N+j][0] += 1
        total_priority[i*N+j][1] -= 1
      else:
        total_priority[i*N+j][0] -= 1
  return [[min(p), 1 - min(map(lambda x: x if x == min(p) else float('inf'), p))] for p in itertools.chain(*[[(p[0], p[1])] for p in total_priority])]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_priority = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_priority[i][j][0] += state[site_nbr][j]
        total_priority[i][j][1] -= state[site_nbr][j]
      else:
        total_priority[i][j][0] -= state[site_nbr][j]
  
  return [[min(p), 1 - min(map(lambda x: x if x == min(p) else float('inf'), p))] for p in itertools.chain(*total_priority)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.full((N**2, 2), -np.inf)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [x.tolist() for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i][j][0] -= 1
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      j = i // N
      i = (i % N) + ((j-1)%2 - 1)
      priority_total[i][j][0] += 1
      priority_total[i][j][1] -= 1
    else:
      j = i // N
      i = (i % N) + ((j-1)%2 - 1)
      priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for site in range(N**2):
    spin = -1 if h[site//N][site%N] > 0 else 1
    total_spin[site][spin==1] += 1
  priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
  for site in range(N**2):
    spin = -1 if h[site//N][site%N] > 0 else 1
    for neighbor in range(max(site//N, 0), min((site//N+N)%N, N)):
      if J[neighbor*N+site%N][0] < 0:
        priority_total[site//N][site%N][spin==1] -= 1
      elif J[neighbor*N+site%N][0] > 0:
        priority_total[site//N][site%N][spin==-1] -= 1
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_energy = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]

  def spin_energy(site):
    spin = -1 if h[site//N][site%N] > 0 else 1
    return J[site//N][site%N][(site+((site//N)%2-1)) % N][spin==1]

  for i in range(N**2):
    site_energy[i//N][i%N][0] = total_spin[i][0]
    site_energy[i//N][i%N][1] = -1*total_spin[i][0] if h[i//N][i%N] > 0 else total_spin[i][1]

  return [[x[0], x[1]] for x in [site_energy[i//N][i%N] for i in range(N**2)]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.08004398148148154}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = int(N*N)
  site_interactions = (J[0::4].flatten() + J[1::4].flatten()).reshape(-1,2).T
  edge_interactions = (J[2::4].flatten() + J[3::4].flatten()).reshape(-1,2).T
  interactions = np.concatenate((site_interactions,edge_interactions),axis=1)
  sum_1 = np.sum(interactions,axis=0) + h.flatten()
  priority = np.column_stack((sum_1,np.zeros_like(sum_1)))
  return [[x[0],x[1]] for x in priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority.tolist())




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_energy = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]

  def spin_energy(site):
    spin = -1 if h[site//N][site%N] > 0 else 1
    return J[site//N][site%N][(site+((site//N)%2-1)) % N][spin==1]

  for i in range(N**2):
    site_energy[i//N][i%N][0] = total_spin[i][0]
    site_energy[i//N][i%N][1] = -1*total_spin[i][0] if h[i//N][i%N] > 0 else total_spin[i][1]

  return [[x[0], x[1]] for x in [site_energy[i//N][i%N] for i in range(N**2)]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.017587499999999992}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin = sum([h[site_nbr][j] * (-1)**((i-site_nbr)%2) for site_nbr in site_nbrs])
      if h[i][j] > 0:
        priority.append((-total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j+1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N)
    spin = -1 if h[i//N][i%N] > 0 else 1
    total_spin[i][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][1]
      else:
        site_nbr = (i + ((j+1)%N - N//2)) % N
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
        priority_total[i*N+j][1] += total_spin[i*N+j][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        priority_total[site_nbr][j][0] += 1
        priority_total[site_nbr][j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        priority_total[site_nbr][j][0] -= 1
  return [[x[0], x[1]] for row in [sublist[:N//2] + sublist[N//2:] for sublist in [list(map(lambda x: list(x), row)) for row in priority_total]] for x in row]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -1.4043209876543283e-05}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      total_spin[i*N+j][1] -= h[site_nbr][j]
  priorities = []
  for i in range(N**2):
    if h[int(i/N)][i%N] > 0:
      priorities.append([total_spin[i][0], 0])
    else:
      priorities.append([-x for x in total_spin[i]])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4],0)+h).flatten()
  sum_2 = (np.prod(J_new[1::4],0)+h).flatten()
  return np.column_stack((sum_1,-sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N)
    total_spin[i][1 if h[site_nbr % N][site_nbr // N] > 0 else 0] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N)
    if h[site_nbr % N][site_nbr // N] > 0:
      priority_total[i][0] += total_spin[i][1]
      priority_total[i][1] -= total_spin[i][0]
    else:
      priority_total[i][0] -= total_spin[i][1]
      priority_total[i][1] += total_spin[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = np.column_stack((np.prod(J[0::4].flatten(),0) + h.flatten(), -np.prod(J[3::4].flatten(),0) - h.flatten()))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i][j][0] += total_spin
        priority_total[i][j][1] -= total_spin
      else:
        priority_total[i][j][0] -= total_spin
  return [[x[0], x[1]] for x in [y for sublist in priority_total for y in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][1 if h[site_nbr][j] > 0 else 0] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][1]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][1]
        priority_total[i*N+j][1] += total_spin[i*N+j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += state[site][j]
        priority_total[i][j][1] -= state[site][j]
      else:
        priority_total[i][j][0] -= state[site][j]
  return [[min(p), 1 - min(map(lambda x: x if x == min(p) else float('inf'), p))] for p in itertools.chain(*priority_total)]




#score: {'data2D.txt': -0.039319290123456786}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.reshape(-1, J.shape[-1]).T.flatten()
  sum1 = ((J_new[0::4] + J_new[1::4] + J_new[2::4] + J_new[3::4]) * 2).flatten() + h.flatten()
  sum2 = (-((J_new[1::4] - J_new[3::4]) + (J_new[0::4] - J_new[2::4]))).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': 0.024862499999999996}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%2 - 1) % N
    if h[i//N][i%N] > 0:
      priorities.append([-state[site_nbr][i%N], state[site_nbr][i%N]])
    else:
      priorities.append([state[site_nbr][i%N], -state[site_nbr][i%N]])
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site = (i // N + ((i % N) - 1) % N) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[site_nbr][spin==1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for site in range(N**2):
    if state[site//N][site%N] == -1:
      priority_total[site][0] += 1
      priority_total[site][1] -= 1
    else:
      priority_total[site][0] -= 1
      priority_total[site][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      sites = [(site_nbrs[k],k) for k in [0,1,2,3] if 0 <= (site_nbrs[k]-i)%N < N and 0 <= (site_nbrs[k]-j)%N < N]
      for site, _ in sites:
        if h[site][j] > 0:
          priority_total[i][j][0] += 1
          priority_total[i][j][1] -= 1
        else:
          priority_total[i][j][0] -= 1
          priority_total[i][j][1] += 1
  return [[x[0], x[1]] for x in [x for sublist in priority_total for x in sublist]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0012498456790123456}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total.append([sum(J[i::,4*i+1:4*i+3].flatten()), -sum(J[i::,4*i+2:4*i+4].flatten())])
    else:
      priority_total.append([-sum(J[i::,4*i+1:4*i+3].flatten()), sum(J[i::,4*i+2:4*i+4].flatten())])
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for site in range(N**2):
    site_nbr = (site // N + ((site % N) - 1) % N)
    if h[site_nbr % N][site_nbr // N] > 0:
      priority_total[site][0] += sum([1 if state[i][j] == state[site//N][site%N] else -1 for i in range(N) for j in range(N) if ((i-site//N)**2 + (j-site%N)**2)**.5 == 1])
      priority_total[site][1] -= sum([1 if state[i][j] != state[site//N][site%N] else -1 for i in range(N) for j in range(N) if ((i-site//N)**2 + (j-site%N)**2)**.5 == 1])
    else:
      priority_total[site][0] -= sum([1 if state[i][j] != state[site//N][site%N] else -1 for i in range(N) for j in range(N) if ((i-site//N)**2 + (j-site%N)**2)**.5 == 1])
      priority_total[site][1] += sum([1 if state[i][j] == state[site//N][site%N] else -1 for i in range(N) for j in range(N) if ((i-site//N)**2 + (j-site%N)**2)**.5 == 1])
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for site in range(N**2):
    site_nbr = (site // N + ((site % N) - 1) % N)
    if h[site_nbr % N][site_nbr // N] > 0:
      priority_total[site][0] += state[site//N][site%N]
      priority_total[site][1] -= state[site//N][site%N]
    else:
      priority_total[site][0] -= state[site//N][site%N]
      priority_total[site][1] += state[site//N][site%N]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_magnetism = [sum([state[i][j]*h[i][j] for j in range(N)]) for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for site in range(N**2):
    site_nbr = (site // N + ((site % N) - 1) % N)
    if h[site_nbr % N][site_nbr // N] > 0:
      priority_total[site][0] += total_magnetism[site_nbr % N]
      priority_total[site][1] -= total_magnetism[site_nbr % N]
    else:
      priority_total[site][0] -= total_magnetism[site_nbr % N]
      priority_total[site][1] += total_magnetism[site_nbr % N]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_energy = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]

  def spin_energy(site):
    spin = -1 if h[site//N][site%N] > 0 else 1
    return J[site//N][site%N][(site+((site//N)%2-1)) % N][spin==1]

  for i in range(N**2):
    site_energy[i//N][i%N][0] = total_spin[i][0]
    site_energy[i//N][i%N][1] = -1*total_spin[i][0] if h[i//N][i%N] > 0 else total_spin[i][1]

  return [[x[0], x[1]] for x in [site_energy[i//N][i%N] for i in range(N**2)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_energy = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]

  def spin_energy(site):
    spin = -1 if h[site//N][site%N] > 0 else 1
    return J[site//N][site%N][(site+((site//N)%2-1)) % N][spin==1]

  for i in range(N**2):
    site_energy[i//N][i%N][0] = total_spin[i][0]
    site_energy[i//N][i%N][1] = -1*total_spin[i][0] if h[i//N][i%N] > 0 else total_spin[i][1]

  return [[x[0], x[1]] for x in [site_energy[i//N][i%N] for i in range(N**2)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_energy = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]

  def spin_energy(site):
    spin = -1 if h[site//N][site%N] > 0 else 1
    return J[site//N][site%N][(site+((site//N)%2-1)) % N][spin==1]

  for i in range(N**2):
    site_energy[i//N][i%N][0] = total_spin[i][0]
    site_energy[i//N][i%N][1] = -1*total_spin[i][0] if h[i//N][i%N] > 0 else total_spin[i][1]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1

  return [[x[0], x[1]] for x in [site_energy[i//N][i%N] for i in range(N**2)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_interactions[i*N+j][0] += 1
        site_interactions[i*N+j][1] -= 1
  return [[x[0], x[1]] for x in site_interactions]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[site_nbr][j][0] += 1
        priority_total[site_nbr][j][1] -= 1
      else:
        priority_total[site_nbr][j][0] -= 1
  return [[x[0], x[1]] for row in [sublist[:N//2] + sublist[N//2:] for sublist in [list(map(lambda x: list(x), row)) for row in priority_total]] for x in row]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += h[site][j]
        total_spin[i*N+j][1] -= h[site][j]
      else:
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] -= h[site][j]
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority.tolist())




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority.reshape(N2, 2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0.0 for _ in range(2)] for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[site_nbr][j][0] += 1
        priority_total[site_nbr][j][1] -= 1
      else:
        priority_total[site_nbr][j][0] -= 1
  return [[x[0], x[1]] for row in [sublist[:N//2] + sublist[N//2:] for sublist in [list(map(lambda x: list(x), row)) for row in priority_total]] for x in row]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[site_nbr][j][0] += 1
        priority_total[site_nbr][j][1] -= 1
      else:
        priority_total[site_nbr][j][0] -= 1
  return [[x[0], x[1]] for row in [sublist[:N//2] + sublist[N//2:] for sublist in [list(map(lambda x: list(x), row)) for row in priority_total]] for x in row]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority.tolist())




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  
  for i in range(N**2):
    if state[int(i/N)][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      site = site_nbrs[i]
      priority_total[site*N + i%N][0] += 1
      priority_total[site*N + i%N][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.08004398148148154}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = (J[0::4].flatten() + J[1::4].flatten()).reshape(-1,2).T
  edge_interactions = (J[2::4].flatten() + J[3::4].flatten()).reshape(-1,2).T
  interactions = np.concatenate((site_interactions,edge_interactions),axis=1)
  sum_1 = np.sum(interactions,axis=0) + h.flatten()
  priority = np.column_stack((sum_1,np.zeros_like(sum_1)))
  return [[x[0],x[1]] for x in priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.28945540123456703}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::N*N], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::N*N], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i][site_nbr][0] += 1
        priority_total[i][site_nbr][1] -= 1
      else:
        site_nbr = (i + ((j+1)%N - N//2)) % N
        priority_total[i][site_nbr][0] -= 1
        priority_total[i][site_nbr][1] += 1
  return [[x[0], x[1]] for x in [y for sublist in priority_total for y in sublist]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j+1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[min(p), 1 - min(map(lambda x: x if x == min(p) else float('inf'), p))] for p in [priority_total[i] for i in range(N**2)]]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[min(p), 1 - min(map(lambda x: x if x == min(p) else float('inf'), p))] for p in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4],0)+h).flatten()
  sum_2 = (np.prod(J_new[1::4],0)+h).flatten()
  priority = np.column_stack((sum_1,-sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1) % N - N//2)) % N
    if h[i // N][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - N//2) % N
    spin = -1 if h[i // N][i % N] > 0 else 1
    total_spin[i][spin==1] += 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - N//2) % N
    if h[i // N][i % N] > 0:
      priority_total[i][0] += total_spin[i][1]
      priority_total[i][1] -= total_spin[i][0]
    else:
      priority_total[i][0] -= total_spin[i][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.reshape(-1,4).T.flatten()
  sum1 = (np.prod(J_new[0::2],0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2],0)).flatten()
  priority = np.column_stack((sum1,-sum1))
  return(priority)




#score: {'data2D.txt': -0.0012498456790123456}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total.append([sum(J[i::,4*i+1:4*i+3].flatten()), -sum(J[i::,4*i+2:4*i+4].flatten())])
    else:
      priority_total.append([-sum(J[i::,4*i+1:4*i+3].flatten()), sum(J[i::,4*i+2:4*i+4].flatten())])
  return priority_total




#score: {'data2D.txt': -0.0012498456790123456}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] = sum(J[i::,4*i+1:4*i+3].flatten())
      priority_total[i][1] = -sum(J[i::,4*i+2:4*i+4].flatten())
    else:
      priority_total[i][0] = -sum(J[i::,4*i+1:4*i+3].flatten())
      priority_total[i][1] = sum(J[i::,4*i+2:4*i+4].flatten())
  return priority_total




#score: {'data2D.txt': -0.0012498456790123456}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total.append([sum(J[i::,4*i+1:4*i+3].flatten()), -sum(J[i::,4*i+2:4*i+4].flatten())])
    else:
      priority_total.append([-sum(J[i::,4*i+1:4*i+3].flatten()), sum(J[i::,4*i+2:4*i+4].flatten())])
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  
  return([x for x in priority])




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  
  for i in range(N2):
    site = (i % 2) * ((i // N) + (N // 2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  total_spin = [0,0]
  
  def get_priority(site):
    if h[site//N][site%N] > 0:
      return [total_spin[1], -total_spin[0]]
    else:
      return [-total_spin[1], total_spin[0]]
  
  for i in range(N*N):
    site = (i + ((i%N)-1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site = (i + ((i//N)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012695987654320984}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    if state[site_nbr][i%N] == 1:
      priorities.append([sum(J[i::,4*i+1:4*i+3].flatten()), -sum(J[i::,4*i+2:4*i+4].flatten())])
    else:
      priorities.append([-sum(J[i::,4*i+1:4*i+3].flatten()), sum(J[i::,4*i+2:4*i+4].flatten())])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.0012538580246913582}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    if h[i//N][i%N] > 0:
      spin_sum = sum(J[i::,4*i+1:4*i+3].flatten())
      spin_diff = sum(J[i::,4*i+2:4*i+4].flatten())
      priorities.append([spin_sum, spin_diff])
    else:
      spin_sum = -sum(J[i::,4*i+1:4*i+3].flatten())
      spin_diff = -sum(J[i::,4*i+2:4*i+4].flatten())
      priorities.append([-spin_sum, spin_diff])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += sum(J[i::,4*i+1:4*i+3].flatten())
      priority_total[i][1] -= sum(J[i::,4*i+2:4*i+4].flatten())
    else:
      priority_total[i][0] -= sum(J[i::,4*i+1:4*i+3].flatten())
      priority_total[i][1] += sum(J[i::,4*i+2:4*i+4].flatten())
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012174382716049386}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total = sum(J[i::,4*i+1:4*i+3].flatten()) - sum(J[i::,4*i+2:4*i+4].flatten())
    else:
      priority_total = -sum(J[i::,4*i+1:4*i+3].flatten()) + sum(J[i::,4*i+2:4*i+4].flatten())
    priorities.append([-priority_total,priority_total])
  return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + (k-1)%2 - 1) % N for k in range(3)] * N
      site_nbrs.remove(i)
      total_spin = sum([h[k][j] for k in site_nbrs])
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = np.full((N**2, 2), -np.inf)
  for site in range(N**2):
    site_nbr = (site // N + ((site % N) - 1) % N)
    if h[site_nbr % N][site_nbr // N] > 0:
      priority_total[site][0] += sum([1 if state[i][j] == state[site//N][site%N] else -1 for i in range(N) for j in range(N) if ((i-site//N)**2 + (j-site%N)**2)**.5 <= 1])
      priority_total[site][1] -= sum([1 if state[i][j] != state[site//N][site%N] else -1 for i in range(N) for j in range(N) if ((i-site//N)**2 + (j-site%N)**2)**.5 <= 1])
    else:
      priority_total[site][0] -= sum([1 if state[i][j] != state[site//N][site%N] else -1 for i in range(N) for j in range(N) if ((i-site//N)**2 + (j-site%N)**2)**.5 <= 1])
      priority_total[site][1] += sum([1 if state[i][j] == state[site//N][site%N] else -1 for i in range(N) for j in range(N) if ((i-site//N)**2 + (j-site%N)**2)**.5 <= 1])
  return priority_total.tolist()




#score: {'data2D.txt': -0.27106867283950575}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for x in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin = [0, 0]
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
      priority_total[i][j] = total_spin
  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i//N][i%N]]]




#score: {'data2D.txt': -0.23149614197530793}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = np.prod(np.roll(J_new.reshape(N,N,-1),-1,axis=2).sum(axis=(1,2)),axis=0) + h.flatten()
  sum2 = -np.prod(np.roll(J_new.reshape(N,N,-1),1,axis=2).sum(axis=(1,2)),axis=0) - h.flatten()
  priority = np.column_stack((sum1,sum2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + np.prod(J_new[3::4], 0)) * (-1)**((np.arange(N**2) % N). flatten())
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority.astype(int))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  
  J_new = J.flatten()
  
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  
  priority = np.column_stack((sum_1, -sum_2))
  
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2), dtype=int)
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%N) - 1) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority = np.column_stack((total_spin[:, 0], -total_spin[:, 1]))
  return priority.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum_3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum_4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2)) + np.column_stack((-sum_1, sum_3)) + np.column_stack((-sum_2, -sum_4))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.1965452160493829}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1

  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site_nbr][0]
      else:
        priority_total[i*N+j][1] = -total_spin[site_nbr][0]

  return np.column_stack((priority_total[:, 0], -priority_total[:, 1]))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum_3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum_4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2)) + np.column_stack((-sum_1, sum_3)) + np.column_stack((-sum_2, -sum_4))
  return(priority)




#score: {'data2D.txt': 0.0010467592592592592}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[int(i//N)][i%N] > 0:
      site_nbr = (int(i//N) + ((i%N-1)%N - N//2)) % N
      priority_total[i][0] += total_spin[site_nbr][i%N][0]
      priority_total[i][1] -= total_spin[site_nbr][i%N][1]
    else:
      site_nbr = (int(i//N) + ((i%N-1)%N - N//2)) % N
      priority_total[i][0] -= total_spin[site_nbr][i%N][0]
      priority_total[i][1] += total_spin[site_nbr][i%N][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j+1)%2 - 1)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.008439043209876542}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for k in range(3):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    total_spin[i*N+j] += h[site_nbr][j]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - 1)) % N
        priority_total[i*N+j][0] = total_spin[site_nbr][0]
        priority_total[i*N+j][1] = -1*total_spin[site_nbr][1]
      else:
        site_nbr = (i + ((j+1)%N - 1)) % N
        priority_total[i*N+j][0] = -1*total_spin[site_nbr][0]
        priority_total[i*N+j][1] = total_spin[site_nbr][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.001082253086419753}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    total_spin[i][1] -= h[site_nbr][i % N]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] = -1*total_spin[i*N+j][0]
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for site,spin in enumerate(itertools.product(range(N),range(N))):
    if h[site//N][site%N] > 0:
      priority_total[site][0] += spin[1]
      priority_total[site][1] -= spin[1]
    else:
      priority_total[site][0] -= spin[1]
      priority_total[site][1] += spin[1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [0]*N**2
  site_priority = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
      
      if h[i][j] > 0:
        site_priority[i*N+j][0] = total_spin[i*N+j]
      else:
        site_priority[i*N+j][1] = -total_spin[i*N+j]
  
  return [[x, -y] for x,y in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2].reshape(-1, 4)[:,-1], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2].reshape(-1, 4)[:,-1], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        total_spin[i*N+j][1] -= h[site_nbr][j]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site = (i + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[site][0]
      priority_total[i][1] -= total_spin[site][1]
    else:
      priority_total[i][0] -= total_spin[site][0]
  return [[x, -y] for x,y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [priority_total[i][j]]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  
  for i in range(N**2):
    priority_total = [total_spin[i][0], -total_spin[i][1]]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4],0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4],0) + h).flatten()
  priority = np.column_stack((sum_1,-sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0014134259259259256}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sums = []
  for i in range(2):
    sum_i = (np.prod(J_new[4*i:4*i+4], 0) + h).flatten()
    sums.append(sum_i)
  return list(map(list, zip(*sums)))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[i][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
        priority_total[i*N+j][1] = -total_spin
      else:
        priority_total[i*N+j][0] = -total_spin
        priority_total[i*N+j][1] = total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[float('-inf'), float('inf')] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbr = ((i+1)%N + (j-1)%2) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j][1] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
      else:
        priorities[i*N+j][0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.0014134259259259256}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sums = []
  for i in range(2):
    sum_i = (np.prod(J_new[4*i:4*i+4], 0) + h).flatten()
    sums.append(sum_i)
  return list(map(list, zip(*sums)))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority.tolist())




#score: {'data2D.txt': -7.608024691358018e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    total_spin = [0,0]
    site_nbr = (i // N, i % N)
    for k in range(4):
      if k == 0:
        total_spin[0] += J[k][site_nbr[0]][site_nbr[1]]
      elif k == 1:
        total_spin[0] += J[(k+2)%4][site_nbr[0]][(site_nbr[1]+1)%N]
      elif k == 2:
        total_spin[1] += J[k][(site_nbr[0]+1)%N][site_nbr[1]]
      else:
        total_spin[1] += J[k-2][site_nbr[0]][(site_nbr[1]-1)%N]
    priorities.append(list(total_spin))
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority.astype(int))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], axis=0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], axis=0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  # compute total spin at each site
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j, 0] += 1
        total_spin[i*N+j, 1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j, 0] += 1
        total_spin[i*N+j, 1] -= 1
        
  # compute priority for each site
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j, 0] = total_spin[site*N+((j-1)%N), 0]
        priority_total[i*N+j, 1] = -total_spin[site*N+((j-1)%N), 1]
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j, 0] = total_spin[site*N+(j-1)%N, 0]
        priority_total[i*N+j, 1] = -total_spin[site*N+(j-1)%N, 1]

  return priority_total.tolist()




#score: {'data2D.txt': -0.26103595679012315}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        for k in range(2):
          site = (i + ((k-1)%2 - 1)) % N
          total_spin[i*N+j][0] += h[site][j]
  
  for i in range(N**2):
    if h[(i//N)%N][(i%N)] > 0:
      priority_total = [total_spin[i][0], -total_spin[i][1]]
    else:
      priority_total = [-total_spin[i][0], total_spin[i][1]]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      
  for i in range(N**2):
    priority_total = [total_spin[i][0], -total_spin[i][1]]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in range(4):
      if k == 0:
        total_spin[i][0] += J[k][site_nbr[0]][site_nbr[1]]
      elif k == 1:
        total_spin[i][0] += J[(k+2)%4][site_nbr[0]][(site_nbr[1]+1)%N]
      elif k == 2:
        total_spin[i][1] += J[k][(site_nbr[0]+1)%N][site_nbr[1]]
      else:
        total_spin[i][1] += J[k-2][site_nbr[0]][(site_nbr[1]-1)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[i][0]])
    else:
      priorities.append([-1*total_spin[i][0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.0015689814814814817}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    total_spin = [0,0]
    site_nbr = (i // N, i % N)
    for k in range(4):
      if k == 0:
        total_spin[1] += J[k][site_nbr[0]][site_nbr[1]]
      elif k == 1:
        total_spin[0] += J[(k+2)%4][site_nbr[0]][(site_nbr[1]+1)%N]
      elif k == 2:
        total_spin[1] += J[k][(site_nbr[0]+1)%N][site_nbr[1]]
      else:
        total_spin[0] += J[k-2][site_nbr[0]][(site_nbr[1]-1)%N]
    priorities.append(list(total_spin))
  return(priorities)




#score: {'data2D.txt': 0.0008282407407407408}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    total_spin = [0,0]
    site_nbr = (i // N, i % N)
    for k in range(4):
      if k == 0:
        total_spin[0] += J[k][site_nbr[0]][site_nbr[1]]
      elif k == 1:
        total_spin[0] += J[(k+2)%4][site_nbr[0]][(site_nbr[1]+1)%N]
      elif k == 2:
        total_spin[1] += J[k][(site_nbr[0]+1)%N][site_nbr[1]]
      else:
        total_spin[1] += J[k-2][site_nbr[0]][(site_nbr[1]-1)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-x for x in total_spin])
    else:
      priorities.append(total_spin)
  return(priorities)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  sum_1 = (np.prod(J_flat[::4], 0) + h).flatten()
  sum_2 = (np.prod(J_flat[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.reshape(N**2, 2)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[i][0]])
    else:
      priorities.append([-1*total_spin[i][0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum_3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum_4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2)) + np.column_stack((-sum_1, sum_3)) + np.column_stack((-sum_2, -sum_4))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [0]*N**2
  site_priority = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j] += h[site_nbr][j]
      
      if total_spin[i*N+j] > 0:
        site_priority[i*N+j][0] = total_spin[i*N+j]
        site_priority[i*N+j][1] = float('-inf')
      else:
        site_priority[i*N+j][1] = -total_spin[i*N+j]
        site_priority[i*N+j][0] = float('-inf')
  
  return [[x, -y] for x,y in site_priority]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [0]*N**2
  site_priority = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
      
      if h[i][j] > 0:
        site_priority[i*N+j][0] = total_spin[i*N+j]
      else:
        site_priority[i*N+j][1] = -total_spin[i*N+j]
  
  return [[x, -y] for x,y in site_priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4],0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4],0) + h).flatten()
  priority = np.column_stack((sum_1,-sum_2))
  return(priority)




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j] = [total_spin, 0]
      else:
        priority_total[i*N+j] = [-total_spin, 1]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  site_priority = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][j] += [1, -1]
      else:
        total_spin[i][j] += [-1, 1]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - N//2)) % N
    if h[site_nbr][i%N] > 0:
      site_priority[i][0] += total_spin[site_nbr][i%N][0]
      site_priority[i][1] -= total_spin[site_nbr][i%N][1]
    else:
      site_priority[i][0] -= total_spin[site_nbr][i%N][0]
      site_priority[i][1] += total_spin[site_nbr][i%N][1]
  return [[x[0], x[1]] for x in site_priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flatten = J.flatten()
  sum_1 = (np.prod(J_flatten[0::4],0) + h).flatten()
  sum_2 = (np.prod(J_flatten[1::4],0) + h).flatten()
  priority = np.column_stack((sum_1,-sum_2))
  return priority




#score: {'data2D.txt': -0.01437175925925926}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += np.sum(J[:,i,j])
        priority_total[i*N+j][1] -= np.sum(J[:,i,j])
      else:
        priority_total[i*N+j][0] -= np.sum(J[:,i,j])
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.reshape(-1, 2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    total_spin[i][1 if h[site_nbr][i%N] > 0 else 0] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site_nbr][1]
      else:
        priority_total[i*N+j][1] = -1*total_spin[site_nbr][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -1*total_spin[i][0]
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    spin = 1 if h[site_nbr][i%N] > 0 else -1
    total_spin[i][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -1*total_spin[j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.049481018518518556}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[i // N][i % N] > 0:
      total_spin[i][0] += state[site_nbr][i % N]
      total_spin[i][1] -= state[site_nbr][i % N]
    else:
      total_spin[i][0] -= state[site_nbr][i % N]
      total_spin[i][1] += state[site_nbr][i % N]
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.14748842592592612}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, 0])
    else:
      priorities.append([total_spin, 1])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if i_offset == 0 and j_offset == 0:
        continue
      total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[0], float('-inf')])
    else:
      priorities.append([float('-inf'), -total_spin[0]])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_1 = sum(J[0][site_nbr[0]][(site_nbr[1] + k) % N] * state[(k+site_nbr[1])%N][site_nbr[0]] for k in range(N))
    total_spin_2 = sum(J[3 - (k+1)%4][site_nbr[0]][(site_nbr[1] - k) % N] * state[(k-site_nbr[1])%N][site_nbr[0]] for k in range(N))
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin_1 + total_spin_2])
    else:
      priorities.append([-1*(total_spin_1 + total_spin_2), float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.014317746913580245}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      if h[(site_nbr[0]+i_offset)%N][site_nbr[1]] > 0:
        total_spin[1] += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    priorities.append(total_spin)
  return(priorities)




#score: {'data2D.txt': -0.12726805555555554}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_1 = 0
    total_spin_2 = 0
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin_1 += 1
      else:
        total_spin_1 -= 1
      if J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N] > 0:
        total_spin_2 += 1
      else:
        total_spin_2 -= 1
    priorities.append([total_spin_1, -total_spin_2])
  return(priorities)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return([list(x) for x in priority])




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    spin = 1 if h[site_nbr][i%N] > 0 else -1
    total_spin[i][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -1*total_spin[j][0]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.reshape(N**2, 2)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.26103595679012315}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        for k in range(2):
          site = (i + ((k-1)%2 - 1)) % N
          total_spin[i*N+j][0] += h[site][j]
  for i in range(N**2):
    if h[(i//N)%N][(i%N)] > 0:
      priority_total = [total_spin[i][0], -total_spin[i][1]]
    else:
      priority_total = [-total_spin[i][0], total_spin[i][1]]
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    total_spin[i][1] -= h[site_nbr][i % N]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if state[i][j] == -1:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.01437175925925926}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = np.sum(J[:,i,j])
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = np.sum(J[:,i,j])
        priority_total[i*N+j][0] -= total_spin
  return priority_total




#score: {'data2D.txt': -0.16043533950617309}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[[0 for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site1 = (i + ((j-1)%2 - 1)) % N
      site2 = (i + ((j-1)%N - N//2)) % N
      
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
        if i > 0: priority_total[i-1][site1][0] += 1; priority_total[i-1][site1][1] -= 1
        if j > 0: priority_total[site2][j-1][0] += 1; priority_total[site2][j-1][1] -= 1
        if i < N - 1: priority_total[i+1][site1][0] -= 1; priority_total[i+1][site1][1] += 1
        if j < N - 1: priority_total[site2][j+1][0] -= 1; priority_total[site2][j+1][1] += 1
        
      else:
        priority_total[i][j][0] -= 1
        priority_total[i][j][1] += 1
        if i > 0: priority_total[i-1][site1][0] -= 1; priority_total[i-1][site1][1] += 1
        if j > 0: priority_total[site2][j-1][0] -= 1; priority_total[site2][j-1][1] += 1
        if i < N - 1: priority_total[i+1][site1][0] += 1; priority_total[i+1][site1][1] -= 1
        if j < N - 1: priority_total[site2][j+1][0] += 1; priority_total[site2][j+1][1] -= 1
  
  return [x for sublist in priority_total for x in sublist]




#score: {'data2D.txt': -0.050695216049382714}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  total_energy = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in [(0, 1), (1, 0), (-1, 1)]:
      j_offset, i_offset = k
      total_energy[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_energy[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    priorities.append([-total_energy[i][0], -total_energy[i][1]])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
  return [[priority_total[i][0], float('-inf')] if h[i//N][i%N] > 0 else [-1*priority_total[i][0], float('-inf')] for i in range(N**2)]




#score: {'data2D.txt': 0.0760412037037037}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      for j in range(N):
        if h[i//N][j] > 0:
          priority_total[i][0] = total_spin[i][0]
        else:
          priority_total[i][1] = -1*total_spin[i][0]
    else:
      for j in range(N):
        if h[i//N][j] < 0:
          priority_total[i][0] = total_spin[i][0]
        else:
          priority_total[i][1] = -1*total_spin[i][0]
  return(priority_total)




#score: {'data2D.txt': -0.15269768518518537}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.047214043209876544}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    spin_product = state[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities.append([spin_product, -spin_product])
    else:
      priorities.append([-spin_product, spin_product])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[::2],0)+h).flatten()
  sum2 = (-np.prod(J_new[1::2],0)).flatten()
  priority = np.column_stack((sum1,-sum1))
  return([list(x) for x in priority])




#score: {'data2D.txt': 0.001082253086419753}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    total_spin = h[site_nbr][i % N]
    if h[i//N][i%N] > 0:
      priorities.append([total_spin, -1*total_spin])
    else:
      priorities.append([-1*total_spin, total_spin])
  return priorities




#score: {'data2D.txt': 0.0007106481481481484}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin[i][0 if sum([h[site_nbr][i%N] for site_nbr in site_nbrs]) > 0 else 1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.14748842592592612}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, 0])
    else:
      priorities.append([total_spin, 1])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.14603410493827182}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (i-1)%N, i+1]]
      total_spin = sum(h[site_nbr][0] for site_nbr in site_nbrs)
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= -total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = ((np.prod(J_new[0::4], 0) + h).flatten() - (np.prod(J_new[1::4], 0)).flatten()).flatten()
  sum_2 = ((np.prod(J_new[2::4], 0) + h).flatten() - (np.prod(J_new[3::4], 0)).flatten()).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[0]])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.0006927469135802468}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_0 = sum([J[0][site_nbr[0]][(site_nbr[1]-1)%N] if j == 0 else J[3][site_nbr[0]][(site_nbr[1]+1)%N] for j in range(N)])
    total_spin_1 = sum([J[1][site_nbr[0]][(site_nbr[1]-1)%N] if i % N == 0 else J[2][site_nbr[0]][(site_nbr[1]+1)%N] if i % N == N-1 else J[3][site_nbr[0]][(site_nbr[1]-1)%N] for _ in range(N)])
    priorities.append([-1*total_spin_0, total_spin_1])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[0]])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        if h[i][j] > 0:
          priority_total = [total_spin[site][0]+1, -total_spin[site][1]-1]
        else:
          priority_total = [-total_spin[site][0]-1, total_spin[site][1]+1]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  site = lambda i, j: (i + ((j-1)%2 - 1)) % N
  priority_total = [[[float('-inf'), float('-inf')] for _ in range(N)] for _ in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[0], float('-inf')])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = 1 if h[i][j] > 0 else -1
      total_spin[i*N+j][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[j][0] += total_spin[i*N+j][1]
        priority_total[j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[j][0] -= total_spin[i*N+j][1]
        priority_total[j][1] += total_spin[i*N+j][0]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(-1, 2):
        site = (i + k) % N
        if h[site][j] > 0:
          total_spin[0] += 1
        else:
          total_spin[1] -= 1
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[0]
      else:
        priority_total[i*N+j][1] = -total_spin[0]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = 0
  site_priorities = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for k in range(N):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
        if h[i][j] > 0:
          site_priorities[i*N+j][0] = total_spin
        else:
          site_priorities[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in site_priorities]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  # Calculate total magnetism at each site
  total_spin = np.zeros((N, N))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i][j] = h[site_nbr][j]
  
  # Calculate priority based on magnetism and interactions
  J_new = J.flatten()
  sum_1 = np.prod(J_new[0::4], 0) + h.flatten()
  sum_2 = np.prod(J_new[1::4], 0) + h.flatten()
  priority = np.column_stack((sum_1, -sum_2))
  
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    spin = 1 if h[site_nbr][i % N] > 0 else -1
    total_spin[i][spin == 1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [0,0]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      if state[i//N][i%N] == 1:
        total_spin[0] += 1
      else:
        total_spin[1] -= 1
    else:
      if state[i//N][i%N] == -1:
        total_spin[0] += 1
      else:
        total_spin[1] -= 1
  return [[total_spin[0],total_spin[1]] for _ in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    spin = 1 if h[site_nbr][i%N] > 0 else -1
    total_spin[i][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -1*total_spin[j][0]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for x in np.array(priority_total).reshape(N**2, 2)]




#score: {'data2D.txt': 0.3341745370370361}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int(j/N)][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+int(j/N)][1] += 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[i*N+j][1] -= 1
        total_spin[site_nbr*N+j][1] += 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+j][0] += 1
        total_spin[i*N+j][1] += 1
        total_spin[site_nbr*N+j][1] -= 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    total_spin[i][0 if h[site_nbr][i%N] > 0 else 1] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[site][0]
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    spin = 1 if h[site_nbr][i%N] > 0 else -1
    priorities.append([spin, -spin])
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    total_spin = [0,0]
    site_nbrs = [(i//N + ((j-1)%N - 1)) % N for j in range(N)] + [(k + (i%N) - 1) % N for k in range(3)]
    for j in range(N):
      if h[j][i%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    priority_total[i] = [-total_spin[1], total_spin[0]]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.15467669753086444}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (site_nbr + ((i-1)%2 - 1)) % N
        total_spin[i*N+j][0] = h[site][j]
        total_spin[i*N+j][1] = -total_spin[i*N+j][0]
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priority_total[i][1] -= total_spin
      priority_total[i][0] += 1
    else:
      priority_total[i][0] -= total_spin
      priority_total[i][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = 1 if h[i][j] > 0 else -1
      total_spin = [[0, 0] for _ in range(N**2)]
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j] += h[site_nbr][j]
      priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
  return priority_total




#score: {'data2D.txt': 0.3341745370370361}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[site_nbr*N+int(i%N/N)][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[site_nbr*N+int(i%N/N)][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  J_new = J.flatten()
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += np.prod(J_new[(i+site_nbr)*N+(j-1)//2::4],0).sum() + h[i][j]
        priority_total[i*N+j][1] -= -np.prod(J_new[(i+site_nbr)*N+(j-1)//2::4],0).sum() - h[i][j]
      else:
        priority_total[i*N+j][0] -= np.prod(J_new[(i+site_nbr)*N+(j-1)//2::4],0).sum() + h[i][j]
        priority_total[i*N+j][1] += -np.prod(J_new[(i+site_nbr)*N+(j-1)//2::4],0).sum() - h[i][j]
  return priority_total.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.14748842592592612}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, 0])
    else:
      priorities.append([total_spin, 1])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': 0.24476342592592581}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, 1])
    else:
      priorities.append([total_spin, -1])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin = sum([h[site_nbr][j] for site_nbr in site_nbrs])
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-1*total_spin[i][0], float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin[i][0]])
  return(priorities)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j, 0] += 1
        total_spin[i*N+j, 1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j, 0] += 1
        total_spin[i*N+j, 1] -= 1
  
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j, 0] = total_spin[site*N+((j-1)%N), 0]
        priority_total[i*N+j, 1] = -total_spin[site*N+((j-1)%N), 1]
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j, 0] = total_spin[site*N+(j-1)%N, 0]
        priority_total[i*N+j, 1] = -total_spin[site*N+(j-1)%N, 1]

  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j, 0] += 1
        priority_total[i*N+j, 1] -= 1
      else:
        priority_total[i*N+j, 0] -= 1
  return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    spin = 1 if h[site_nbr][i % N] > 0 else -1
    total_spin[i][spin == 1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i: (i % N + ((i//N-1)%2 - 1)) % N
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_spin = 1 if h[site_nbr(i)][i%N] > 0 else -1
    priorities.append([site_spin, -site_spin])
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        state = [x for x in itertools.groupby(h.flatten())]
        total_spin[i*N+j][0] = sum(1 if item[0] > 0 else -1 for item in state)
        total_spin[i*N+j][1] = -total_spin[i*N+j][0]
  return [[-x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(3)]
      total_spin = sum([h[s][j] for s in site_nbrs]) 
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
  return priority_total




#score: {'data2D.txt': -0.0006927469135802468}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_0 = sum([J[0][site_nbr[0]][(site_nbr[1]-1)%N] if j == 0 else J[3][site_nbr[0]][(site_nbr[1]+1)%N] for j in range(N)])
    total_spin_1 = sum([J[1][site_nbr[0]][(site_nbr[1]-1)%N] if i % N == 0 else J[2][site_nbr[0]][(site_nbr[1]+1)%N] if i % N == N-1 else J[3][site_nbr[0]][(site_nbr[1]-1)%N] for _ in range(N)])
    priorities.append([-1*total_spin_0, total_spin_1])
  return(priorities)




#score: {'data2D.txt': -0.0014208333333333334}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 2*h[i][j]
        total_spin[site_nbr*N+int(j/N)][1] -= 2*h[i][j]
      else:
        total_spin[i*N+j][0] -= 2*h[i][j]
        total_spin[site_nbr*N+int(j/N)][1] += 2*h[i][j]
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': 0.33434367283950517}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int(j/N)][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+int(j/N)][1] += 1
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total = [[-x[1], x[0]] for x in total_spin]
    else:
      priority_total = [[-x[0], -x[1]] for x in total_spin]
  return priority_total




#score: {'data2D.txt': -0.008974845679012345}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site = (i // N + ((i % N-1)%N - N//2)) % N
    if h[site][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      total_spin[i*N+j][1] -= h[site_nbr][j]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] += total_spin[site_nbr*N+j][0]
        priority_total[i*N+j][1] -= total_spin[site_nbr*N+j][1]
      else:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] -= total_spin[site_nbr*N+j][0]
        priority_total[i*N+j][1] += total_spin[site_nbr*N+j][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  for i in range(N**2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    state[site][i%N] += 1 if h[site][i%N] > 0 else -1
    total_spin[i][0] += 1 if h[site][i%N] > 0 else -1
    total_spin[i][1] -= 1 if h[site][i%N] > 0 else 1
  priorities = [(total_spin[i][0],-total_spin[i][1]) for i in range(N**2)]
  return priorities




#score: {'data2D.txt': -0.009375771604938273}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((2,N**2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[0, i*N+j] += 1
        total_spin[1, i*N+j] -= 1
      else:
        state = site_nbr
        for _ in range(N):
          if state == (i + ((state-1)%N - N//2)) % N and h[i][state] > 0:
            total_spin[0, i*N+state] += 1
            total_spin[1, i*N+state] -= 1
          else:
            total_spin[0, i*N+state] -= 1
            total_spin[1, i*N+state] += 1
  return(total_spin.T)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[::2], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::2], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      spin = 1 if h[i][j] > 0 else -1
      total_spin[i*N+j][spin == 1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.3341547839506163}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i + ((i//N - N//2) % N))
    else:
      site = (i + (((i//N+N//2-1)%N)))
    site_nbr = (site + ((site//N - 1) % N - 1)) % N
    if h[i//N][i%N] > 0:
      site_priority[i][0] += 1
      site_priority[site_nbr*N+int(i%N/N)][1] -= 1
    else:
      site_priority[i][0] -= 1
      site_priority[site_nbr*N+int(i%N/N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  for k in range(3):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    if h[i][j] > 0:
      priority_total[i*N+j][0] += h[site_nbr][j]
    else:
      priority_total[i*N+j][1] -= h[site_nbr][j]

  return [[x, -y] for x,y in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum_3 = (-np.sum((J_new[0::2])**2, axis=0)).flatten()
  priority = np.column_stack((sum_1+sum_3, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  total_spin = [[0, 0] for _ in range(N**2)]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in site_interaction:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[i][0]])
    else:
      priorities.append([-1*total_spin[i][0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.002936265432098766}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (0, -1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+j_offset)%N] > 0:
        total_spin[0] += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin[0] -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      if h[(site_nbr[0]+i_offset)%N][site_nbr[1]] > 0:
        total_spin[1] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[1] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    priorities.append(total_spin)
  return(priorities)




#score: {'data2D.txt': 0.011877623456790122}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      if h[(site_nbr[0]+i_offset)%N][site_nbr[1]] > 0:
        total_spin[1] += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    priorities.append(total_spin)
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site = (i // N + (i % N - 1) % N) % N
    if h[i//N][i%N] > 0:
      total_spin[i//N*N+i%N][0] += np.prod(J[site*N+(i%N)//2::4],0).sum() + h[i//N][i%N]
      total_spin[i//N*N+i%N][1] -= -np.prod(J[site*N+(i%N)//2::4],0).sum() - h[i//N][i%N]
    else:
      total_spin[i//N*N+i%N][0] -= np.prod(J[site*N+(i%N)//2::4],0).sum() + h[i//N][i%N]
      total_spin[i//N*N+i%N][1] += -np.prod(J[site*N+(i%N)//2::4],0).sum() - h[i//N][i%N]
  return total_spin




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::2],0) + h).flatten()
  sum_2 = (np.prod(J_new[1::2],0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.019344290123456787}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((i-1)%N - N//2)) % N
    for j in range(N):
      state[site_nbr][j] += state[i][j]
      total_spin[(i*N+j)][0] += h[i][j]*state[i][j]
      if h[i][j] > 0:
        total_spin[(i*N+j)][1] -= state[i][j]
      else:
        total_spin[(i*N+j)][1] += state[i][j]
  priority_total = [[x[0], x[1]] for x in total_spin]
  return priority_total




#score: {'data2D.txt': 0.3341547839506163}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i + ((i//N - N//2) % N))
    else:
      site = (i + (((i//N+N//2-1)%N)))
    site_nbr = (site + ((site//N - 1) % N - 1)) % N
    if h[i//N][i%N] > 0:
      site_priority[i][0] += 1
      site_priority[site_nbr*N+int(i%N/N)][1] -= 1
    else:
      site_priority[i][0] -= 1
      site_priority[site_nbr*N+int(i%N/N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': 0.33434367283950517}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int(j/N)][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+int(j/N)][1] += 1
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total = [[-x[1], x[0]] for x in total_spin]
    else:
      priority_total = [[-x[0], -x[1]] for x in total_spin]
  return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = ((i+1)%N + (j-1)%2) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[(i+N*2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j][1] -= J[(i+N*2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
      else:
        priorities[i*N+j][0] -= J[(i+N*2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
  
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.29517206790123396}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site1 = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      site2 = (i + ((j+1)%N - N//2)) % N
      site3 = (i + ((j-1)%N - N//2)) % N
      site4 = (min((i+1)%N, j) + min(i,N-1)*N) % N
      total_spin[i*N+j][0] += h[site1][0]
      total_spin[i*N+j][1] -= h[site2][1]
      total_spin[i*N+j][0] += h[site3][2]
      total_spin[i*N+j][1] -= h[site4][3]
  return total_spin




#score: {'data2D.txt': -0.0010020061728395033}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_flat = J.flatten()
  total_spin = np.zeros((N2, 2))
  
  for i in range(N2):
    site = (i // N + ((i % N) - 1) % N)
    if h[i//N][i%N] > 0:
      total_spin[i][0] += sum(J_flat[(site+1)%N*N:(site+2)%N2])
      total_spin[i][1] -= sum(J_flat[site*N:(site+1)*N])
    else:
      total_spin[i][0] -= sum(J_flat[site*N:(site+1)*N])
      total_spin[i][1] += sum(J_flat[(site+1)%N*N:(site+2)%N2])
  
  return total_spin




#score: {'data2D.txt': -0.02475632716049383}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  
  for i in range(N):
    row = []
    for j in range(N):
      site1 = (i + ((j-1)%2 - 1)) % N
      site2 = (i + ((j-1)%N - N//2)) % N
      
      if h[i][j] > 0:
        total_spin_site = state[i][site1]
        total_spin_neighbor1 = state[(i-1) if i > 0 else (i+1)][site1]
        total_spin_neighbor2 = state[site2][(j-1) if j > 0 else (j+1)]
        
        priority = -total_spin_site - total_spin_neighbor1 - total_spin_neighbor2
      else:
        total_spin_site = state[i][j]
        total_spin_neighbor1 = state[(i-1) if i > 0 else (i+1)][site1]
        total_spin_neighbor2 = state[site2][(j-1) if j > 0 else (j+1)]
        
        priority = -total_spin_site + total_spin_neighbor1 + total_spin_neighbor2
      
      row.append((priority, -priority))
    priorities.append(row)
  
  return [x for sublist in priorities for x in sublist]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for site in range(N**2):
    i = site // N
    j = site % N
    site_nbr = (i + ((j-1)%N - 1)) % N
    
    if h[i][j] > 0:
      priority_total[site][0] += 1
      priority_total[site][1] -= 1
    else:
      priority_total[site][0] -= 1
      priority_total[site][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      spin = 1 if h[site_nbr][j] > 0 else -1
      total_spin[i*N+j][0] += spin
      total_spin[i*N+j][1] -= spin
  return [(total_spin[i][0],-total_spin[i][1]) for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_interactions = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        site_interactions[i*N+j, 0] += 1
        site_interactions[i*N+j, 1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        site_interactions[i*N+j, 0] += 1
        site_interactions[i*N+j, 1] -= 1

  return site_interactions.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j - 1) % 2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i * N + j, 0] += 1
        total_spin[i * N + j, 1] -= 1
      else:
        site = (i + ((j - 1) % N - N // 2)) % N
        total_spin[i * N + j, 0] += 1
        total_spin[i * N + j, 1] -= 1

  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j - 1) % N - N // 2)) % N
        priority_total[i * N + j, 0] = total_spin[site * N + ((j - 1) % N), 0]
        priority_total[i * N + j, 1] = -total_spin[site * N + ((j - 1) % N), 1]
      else:
        site = (i + ((j - 1) % 2 - 1)) % N
        priority_total[i * N + j, 0] = total_spin[site * N + (j - 1) % N, 0]
        priority_total[i * N + j, 1] = -total_spin[site * N + (j - 1) % N, 1]

  return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  total_spin = [[0, 0] for _ in range(N**2)]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in site_interaction:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[i][0]])
    else:
      priorities.append([-1*total_spin[i][0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.0076563271604938275}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  priorities = []
  for i in range(N**2):
    total_spin = [0, 0]
    site_nbr = (i // N, i % N)
    for k in site_interaction:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      elif state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == 1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-1*total_spin[0], -1*total_spin[1]])
    else:
      priorities.append([total_spin[0], total_spin[1]])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    site_interaction_values = []
    for k in site_interaction:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        site_interaction_values.append(-J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N])
      else:
        site_interaction_values.append(J[i_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N])
    if state[site_nbr[0]][site_nbr[1]] == -1:
      priorities.append([sum(site_interaction_values), float('-inf')])
    else:
      priorities.append([-1*sum(site_interaction_values), float('-inf')])
  
  return(priorities)




#score: {'data2D.txt': -0.019344290123456787}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    site_nbr = (i + ((i-1)%N - N//2)) % N
    for j in range(N):
      state[site_nbr][j] += state[i][j]
      total_spin[(i*N+j)][0] += h[i][j]*state[i][j]
      if h[i][j] > 0:
        total_spin[(i*N+j)][1] -= state[i][j]
      else:
        total_spin[(i*N+j)][1] += state[i][j]
  
  priority_total = [[x[0], x[1]] for x in total_spin]
  return priority_total




#score: {'data2D.txt': -0.019344290123456787}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((i-1)%N - N//2)) % N
    for j in range(N):
      state[site_nbr][j] += state[i][j]
      total_spin[(i*N+j)][0] += h[i][j]*state[i][j]
      if h[i][j] > 0:
        total_spin[(i*N+j)][1] -= state[i][j]
      else:
        total_spin[(i*N+j)][1] += state[i][j]
  priority_total = [[x[0], x[1]] for x in total_spin]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int(j/N)][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+int(j/N)][1] += 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': 0.3341745370370361}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int(j/N)][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+int(j/N)][1] += 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.reshape(-1, 4).swapaxes(0,1).flatten()
  sum1 = (np.prod(J_new[::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.008439043209876542}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      total_spin[i*N+j][1] -= h[site_nbr][j]
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[site_nbr*N+int(j/N)][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[site_nbr*N+int(j/N)][1] += 1
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i//N + ((i%N-1)%N - 1)) % N
    else:
      site = (i//N + ((i%N+1)%N - 1)) % N
    priority_total[i][0] += state[site][int(i%N/N)]
    priority_total[i][1] -= state[site][int(i%N/N)]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[site_nbr*N+int(j/N)][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[site_nbr*N+int(j/N)][1] += 1
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i//N + ((i%N-1)%N - N//2)) % N
      priority_total[i][0] += state[site][int((i%N)//N)]
      priority_total[i][1] -= state[site][int((i%N)//N)]
    else:
      site = (i//N + ((i%N-1)%N - N//2)) % N
      priority_total[i][0] -= state[site][int((i%N)//N)]
      priority_total[i][1] += state[site][int((i%N)//N)]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.02475632716049383}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  
  for i in range(N):
    row = []
    for j in range(N):
      site1 = (i + ((j-1)%2 - 1)) % N
      site2 = (i + ((j-1)%N - N//2)) % N
      
      if h[i][j] > 0:
        total_spin_site = state[i][site1]
        total_spin_neighbor1 = state[(i-1) if i > 0 else (i+1)][site1]
        total_spin_neighbor2 = state[site2][(j-1) if j > 0 else (j+1)]
        
        priority = -total_spin_site - total_spin_neighbor1 - total_spin_neighbor2
      else:
        total_spin_site = state[i][j]
        total_spin_neighbor1 = state[(i-1) if i > 0 else (i+1)][site1]
        total_spin_neighbor2 = state[site2][(j-1) if j > 0 else (j+1)]
        
        priority = -total_spin_site + total_spin_neighbor1 + total_spin_neighbor2
      
      row.append((priority, -priority))
    priorities.append(row)
  
  return [x for sublist in priorities for x in sublist]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (i-1)%N, (i+1)%N]]
      
      total_spin = sum([h[x][y] for x, y in zip(site_nbrs, [j]*4)]) + h[i][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.00532916666666665}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site = (i // N + ((i % N) - 1) % N)
    if h[i//N][i%N] > 0:
      priority_total[i][0] += sum(J[:,i*N:i*N+1].flatten())
      priority_total[i][1] -= sum(J.flatten()[(site+N2):(site+2)*N2])
    else:
      priority_total[i][0] -= sum(J.flatten()[(site):site+N2])
      priority_total[i][1] += sum(J[:,i*N:i*N+1].flatten())
  
  return priority_total




#score: {'data2D.txt': -0.0008804012345679006}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += sum(J[:, i*N+j:(site+1)*N].flatten())
        priority_total[i*N+j][1] -= sum(J[:, (site+N//2)*N+(j-1)%N:j*N].flatten())
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= sum(J[:, i*N+j:(site+1)*N].flatten())
        priority_total[i*N+j][1] += sum(J[:, (site+N//2)*N+(j-1)%N:j*N].flatten())
  
  return priority_total




#score: {'data2D.txt': 0.33434367283950517}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int(j/N)][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+int(j/N)][1] += 1
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total = [[-x[1], x[0]] for x in total_spin]
    else:
      priority_total = [[-x[0], -x[1]] for x in total_spin]
  return priority_total




#score: {'data2D.txt': -0.0008804012345679006}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += sum(J[:, i*N+j:(site+1)*N].flatten())
        total_spin[i*N+j][1] -= sum(J[:, (site+N//2)*N+(j-1)%N:j*N].flatten())
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= sum(J[:, i*N+j:(site+1)*N].flatten())
        total_spin[i*N+j][1] += sum(J[:, (site+N//2)*N+(j-1)%N:j*N].flatten())
  return total_spin




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, -1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    site = (site_nbr[0] + ((site_nbr[1]-1)%2 - 1)) % N
    if h[site_nbr[0]][site_nbr[1]] > 0:
      priority_total[i][0] = total_spin[0]
    else:
      priority_total[i][1] = -total_spin[0]
  return(priority_total)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for x in [y for sublist in priority_total for y in sublist]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += state[site_nbr][i%N]
      priority_total[i][1] -= state[site_nbr][i%N]
    else:
      priority_total[i][0] -= state[site_nbr][i%N]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0024591049382716047}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten().reshape((N*N,4))
  sums_0 = (J_new[:,0] + J_new[:,2]).flatten()
  sums_1 = (-J_new[:,1] - J_new[:,3]).flatten()
  return np.column_stack([sums_0,sums_1])




#score: {'data2D.txt': -0.0026791666666666665}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_map = {(i + ((j-1)%N - N//2)) % N: i*N+j for i in range(N) for j in range(N)}
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[site_map[(i + ((j-1)%N - N//2)) % N]][0] += 1
        total_spin[site_map[(i + ((j-1)%N - N//2)) % N]][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[site_map[site_nbr]][0] -= 1
        total_spin[site_map[site_nbr]][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          if h[site_nbr][j] > 0:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2 - 1)) % N
    total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j - 1) % N - 1)) % N
      if h[i][j] > 0:
        priority_total[i * N + j][0] += total_spin[site][0]
        priority_total[i * N + j][1] -= total_spin[site][0]
      else:
        priority_total[i * N + j][0] -= total_spin[site][0]
        priority_total[i * N + j][1] += total_spin[site][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19548287037037057}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site][0]
        priority_total[i*N+j][1] = -1*total_spin[site][0]
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00036404320987654283}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    total_spin[i][0 if h[site_nbr][i%N] > 0 else 1] += 1
  
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += total_spin[site][0]
  
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': -0.02475632716049383}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  
  for i in range(N):
    row = []
    for j in range(N):
      site1 = (i + ((j-1)%2 - 1)) % N
      site2 = (i + ((j-1)%N - N//2)) % N
      
      if h[i][j] > 0:
        total_spin_site = state[i][site1]
        total_spin_neighbor1 = state[(i-1) if i > 0 else (i+1)][site1]
        total_spin_neighbor2 = state[site2][(j-1) if j > 0 else (j+1)]
        
        priority = -total_spin_site - total_spin_neighbor1 - total_spin_neighbor2
      else:
        total_spin_site = state[i][j]
        total_spin_neighbor1 = state[(i-1) if i > 0 else (i+1)][site1]
        total_spin_neighbor2 = state[site2][(j-1) if j > 0 else (j+1)]
        
        priority = -total_spin_site + total_spin_neighbor1 + total_spin_neighbor2
      
      row.append((priority, -priority))
    priorities.append(row)
  
  return [x for sublist in priorities for x in sublist]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = ((i+1)%N + (j-1)%2) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priority_total[i*N+j][1] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
      else:
        priority_total[i*N+j][0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001532561728395062}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0, 0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j][1] -= J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      else:
        priorities[i*N+j][0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j][1] += J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.001532561728395062}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        priorities[i*N+j, 0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j, 1] -= J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      else:
        priorities[i*N+j, 0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j, 1] += J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
  
  return priorities




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.15742885802469123}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0, 0] for _ in range(N2)]
  
  sum_1 = (np.prod(J[::4], 0) + h).flatten()
  sum_2 = (np.prod(J[1::4], 0) + h).flatten()
  
  priority = np.column_stack((sum_1, -sum_2))
  
  return priority.tolist()




#score: {'data2D.txt': 0.33038040123456697}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        site_priority[site_nbr*N+int((j-1)//N)][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        site_priority[site_nbr*N+int((j-1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': 0.3341547839506163}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i + ((i//N - N//2) % N))
    else:
      site = (i + (((i//N+N//2-1)%N)))
    site_nbr = (site + ((site//N - 1) % N - 1)) % N
    if h[i//N][i%N] > 0:
      site_priority[i][0] += 1
      site_priority[site_nbr*N+int(i%N/N)][1] -= 1
    else:
      site_priority[i][0] -= 1
      site_priority[site_nbr*N+int(i%N/N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = ((i + (j-1)%N)//(N//2), (i + (j+1)%N)//(N//2))
      for k in [0, 1]:
        if h[site_nbr[k]][j] > 0:
          priority_total[i*N+j][0] += state[site_nbr[k]][j]
          priority_total[i*N+j][1] -= state[site_nbr[k]][j]
        else:
          priority_total[i*N+j][0] -= state[site_nbr[k]][j]
          priority_total[i*N+j][1] += state[site_nbr[k]][j]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum(s) for s in zip(*[s for s in state])]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % N - 1)) % N
      if h[i][j] > 0:
        priority_total[i * N + j][0] += total_spin[site_nbr]
        priority_total[i * N + j][1] -= total_spin[site_nbr]
      else:
        priority_total[i * N + j][0] -= total_spin[site_nbr]
        priority_total[i * N + j][1] += total_spin[site_nbr]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19548287037037057}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site][0]
        priority_total[i*N+j][1] = -1*total_spin[site][0]
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        priorities[i][j][0] += 2
        priorities[i][j][1] -= 2
      elif all(h[site_nbr][j] < 0 for site_nbr in site_nbrs):
        priorities[i][j][0] -= 2
        priorities[i][j][1] += 2
  return [[x[0], x[1]] for x in [item for sublist in priorities for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  for k in range(3):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      priority_total[i][j][0] += 1
      priority_total[i][j][1] -= 1
    else:
      priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for x in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0010887345679012352}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_spin_sum = sum(sum(state[i]) for i in range(N))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += -1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] += J[site_nbr*N+(i%N)//2::4].sum()
    else:
      priority_total[i][0] += J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] -= J[site_nbr*N+(i%N)//2::4].sum()
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = [(i + ((k-1)%2 - 1)) % N for k in [0,1]]
      total_spin = sum(s for s in (state[i][j], state[site_nbr[0]][j], state[site_nbr[1]][j]))
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -1*total_spin
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.00042854938271604957}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        for k in [(i-1)%N,i,(i+1)%N]:
          for l in [(j-1)%N,j,(j+1)%N]:
            site_nbr = (k*N+l)
            if i == k and j != l: 
              site_priority[i*N+j][0] += 1
              site_priority[site_nbr][1] -= 1
            elif i != k and j == l:
              site_priority[i*N+j][0] -= 1
              site_priority[site_nbr][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.06996651234567904}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if (i+1)%N != 0:
        site_nbrs.append((i+1)%N*N + j)
      if i != 0:
        site_nbrs.append(i*N+j-1)
      if (j+1)%N != 0:
        site_nbrs.append(i*N+(j+1)%N - N//2)
      for k in site_nbrs:
        total_spin = h[k//N][k%N]
        if h[i][j] > 0:
          priority_total[k//N*N+k%N][0] += total_spin
          priority_total[k//N*N+k%N][1] -= total_spin
        else:
          priority_total[k//N*N+k%N][0] -= total_spin
          priority_total[k//N*N+k%N][1] += total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j+1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.3341547839506163}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i + ((i//N - N//2) % N))
    else:
      site = (i + (((i//N+N//2-1)%N)))
    site_nbr = (site + ((site//N - 1) % N - 1)) % N
    if h[i//N][i%N] > 0:
      site_priority[i][0] += 1
      site_priority[site_nbr*N+int(i%N/N)][1] -= 1
    else:
      site_priority[i][0] -= 1
      site_priority[site_nbr*N+int(i%N/N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_spin_sum = sum(sum(state[i]) for i in range(N))
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += -site_spin_sum
        priority_total[i*N+j][1] -= -site_spin_sum
      else:
        priority_total[i*N+j][0] -= site_spin_sum
        priority_total[i*N+j][1] += site_spin_sum
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] += J[site_nbr*N+(i%N)//2::4].sum()
    else:
      priority_total[i][0] += J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] -= J[site_nbr*N+(i%N)//2::4].sum()
  return [x for x in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.0006516975308641969}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_spin_sum = sum(sum(state[i]) for i in range(N))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
      if h[i][j] > 0:
        site_spin_sum -= J[site_nbr*N+(j-1)//2::4].sum()
      else:
        site_spin_sum += J[site_nbr*N+(j-1)//2::4].sum()
  
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= site_spin_sum
      priority_total[i][1] += site_spin_sum
    else:
      priority_total[i][0] += site_spin_sum
      priority_total[i][1] -= site_spin_sum
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
  return [[priority_total[i][0], float('-inf')] if h[i//N][i%N] > 0 else [-1*priority_total[i][0], float('-inf')] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[0]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[priority_total[i][0], float('-inf')] if h[i//N][i%N] > 0 else [-1*priority_total[i][0], float('-inf')] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N**2):
    site = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      if h[site[0]][(site[1]+i_offset)%N] > 0:
        total_spin[0] += J[j_offset][site[0]][(site[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site[0]][(site[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site[0]][(site[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site[0]][(site[1]-j_offset)%N]
    state[site[0]][site[1]] += total_spin[0]
    if h[site[0]][site[1]] > 0:
      priority_total[i][0] = total_spin[0]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[priority_total[i][0], float('-inf')] if h[i//N][i%N] > 0 else [-1*priority_total[i][0], float('-inf')] for i in range(N**2)]




#score: {'data2D.txt': 0.0010467592592592592}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[int(i//N)][i%N] > 0:
      site_nbr = (int(i//N) + ((i%N-1)%N - N//2)) % N
      priority_total[i][0] += total_spin[site_nbr][i%N][0]
      priority_total[i][1] -= total_spin[site_nbr][i%N][1]
    else:
      site_nbr = (int(i//N) + ((i%N-1)%N - N//2)) % N
      priority_total[i][0] -= total_spin[site_nbr][i%N][0]
      priority_total[i][1] += total_spin[site_nbr][i%N][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = N * N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.reshape(N4, 2)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.3341745370370361}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
    if h[i//N][i%N] > 0:
      total_priority[i][0] += 1
      total_priority[site_nbr*N+int(i%N/N)][1] -= 1
    else:
      total_priority[i][0] -= 1
      total_priority[site_nbr*N+int(i%N/N)][1] += 1
  return [[-x[1], x[0]] for x in total_priority]




#score: {'data2D.txt': 0.33038040123456697}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        site_priority[site_nbr*N+int((j-1)//N)][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        site_priority[site_nbr*N+int((j-1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': 0.33434212962962867}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        if j < N-1:
          site_priority[site_nbr*N+int((j+1)//N)][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        if j < N-1:
          site_priority[site_nbr*N+int((j+1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += sum(J[:, i*N+j:(site_nbr+1)*N].flatten())
        priority_total[i*N+j][1] -= sum(J[:, (site_nbr+N//2)*N+(j-1)%N:j*N].flatten())
      else:
        priority_total[i*N+j][0] -= sum(J[:, i*N+j:(site_nbr+1)*N].flatten())
        priority_total[i*N+j][1] += sum(J[:, (site_nbr+N//2)*N+(j-1)%N:j*N].flatten())
  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i]]]




#score: {'data2D.txt': -0.0008804012345679006}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += sum(J[:, i*N+j:(site_nbr+1)*N].flatten())
        total_spin[i*N+j][1] -= sum(J[:, (site_nbr+N//2)*N+(j-1)%N:j*N].flatten())
      else:
        total_spin[i*N+j][0] -= sum(J[:, i*N+j:(site_nbr+1)*N].flatten())
        total_spin[i*N+j][1] += sum(J[:, (site_nbr+N//2)*N+(j-1)%N:j*N].flatten())
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin = sum(J[:, i*N+j:(site_nbr+1)*N].flatten()) - sum(J[:, (site_nbr+N//2)*N+(j-1)%N:j*N].flatten())
        priority_total[i*N+j][0] = total_spin
      else:
        total_spin = -sum(J[:, i*N+j:(site_nbr+1)*N].flatten()) + sum(J[:, (site_nbr+N//2)*N+(j-1)%N:j*N].flatten())
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - N//2)) % N
      site_nbr2 = (i + ((j+1)%N - N//2)) % N
      total_spin = [0, 0]
      if h[i][j] > 0:
        total_spin[0] += sum(J[:, i*N+j:(site_nbr1+1)*N].flatten())
        total_spin[0] -= sum(J[:, (site_nbr1+N//2)*N+(j-1)%N:j*N].flatten())
        total_spin[1] -= sum(J[:, i*N+j:(site_nbr2+1)*N].flatten())
        total_spin[1] += sum(J[:, (site_nbr2+N//2)*N+(j+1)%N:(i+1)*N, :].flatten())
      else:
        total_spin[0] -= sum(J[:, i*N+j:(site_nbr1+1)*N].flatten())
        total_spin[0] += sum(J[:, (site_nbr1+N//2)*N+(j-1)%N:j*N].flatten())
        total_spin[1] += sum(J[:, i*N+j:(site_nbr2+1)*N].flatten())
        total_spin[1] -= sum(J[:, (site_nbr2+N//2)*N+(j+1)%N:(i+1)*N, :].flatten())
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[0]
        priority_total[i*N+j][1] = -total_spin[1]
      else:
        priority_total[i*N+j][0] = -total_spin[0]
        priority_total[i*N+j][1] = total_spin[1]
  return priority_total




#score: {'data2D.txt': -0.0008804012345679006}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      if h[i][j] > 0:
        total_spin[i*N+j][0] = sum(J[:, i*N+j:(site_nbrs[0]+1)*N].flatten()) + \
                     sum(J[:, (site_nbrs[0]+1)*N+(j-1)%N:j*N].flatten())
        total_spin[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        total_spin[i*N+j][0] = -sum(J[:, i*N+j:(site_nbrs[0]+1)*N].flatten()) - \
                     sum(J[:, (site_nbrs[0]+1)*N+(j-1)%N:j*N].flatten())
        total_spin[i*N+j][1] = -total_spin[i*N+j][0]
  return [x.tolist() for x in total_spin]




#score: {'data2D.txt': -0.0008804012345679006}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - N//2)) % N
      site_nbr2 = (i + ((j+1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = sum(J[:, i*N+j:(site_nbr1+1)*N].flatten()) + sum(J[:, i*N+j:(site_nbr2+1)*N].flatten())
        priority_total[i*N+j][1] = -sum(J[:, i*N+j:(site_nbr1+1)*N].flatten()) - sum(J[:, i*N+j:(site_nbr2+1)*N].flatten())
      else:
        priority_total[i*N+j][0] = -sum(J[:, i*N+j:(site_nbr1+1)*N].flatten()) - sum(J[:, i*N+j:(site_nbr2+1)*N].flatten())
        priority_total[i*N+j][1] = sum(J[:, i*N+j:(site_nbr1+1)*N].flatten()) + sum(J[:, i*N+j:(site_nbr2+1)*N].flatten())
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site_nbr][spin==1] += 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[site_nbr][1]
    else:
      priority_total[i][1] = -1*total_spin[site_nbr][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0008804012345679006}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  return [[sum(J[:, i*N+j:(i+1)*N].flatten()) + sum(J[:, (i+1)*N:j+N].flatten()) if h[i][j] > 0 else -sum(J[:, i*N+j:(i+1)*N].flatten()) - sum(J[:, (i+1)*N:j+N].flatten()), 
      -sum(J[:, i*N+j:(i+1)*N].flatten()) - sum(J[:, (i+1)*N:j+N].flatten()) if h[i][j] > 0 else sum(J[:, i*N+j:(i+1)*N].flatten()) + sum(J[:, (i+1)*N:j+N].flatten())]
      for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.0017233024691358026}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site = (i // N + ((i % N) - 1) % N)
    k = i + N//2
    if h[i//N][i%N] > 0:
      total_spin[i][0] += sum(J[k%N*N:(k+1)%N*N].flatten())
      total_spin[i][1] -= sum(J[k%N*N:(k+1)%N*N].flatten())
    else:
      total_spin[i][0] -= sum(J[k%N*N:(k+1)%N*N].flatten())
      total_spin[i][1] += sum(J[k%N*N:(k+1)%N*N].flatten())
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0008804012345679006}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  N2 = N*N
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - N//2)) % N
      site_nbr2 = (i + ((j+1)%N - N//2)) % N
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += sum(J[:, i*N+j:(site_nbr1+1)*N].flatten()) + sum(J[:, i*N+j:(site_nbr2+1)*N].flatten())
        priority_total[i*N+j][1] -= sum(J[:, i*N+j:(site_nbr1+1)*N].flatten()) - sum(J[:, i*N+j:(site_nbr2+1)*N].flatten())
      else:
        priority_total[i*N+j][0] -= sum(J[:, i*N+j:(site_nbr1+1)*N].flatten()) - sum(J[:, i*N+j:(site_nbr2+1)*N].flatten())
        priority_total[i*N+j][1] += sum(J[:, i*N+j:(site_nbr1+1)*N].flatten()) + sum(J[:, i*N+j:(site_nbr2+1)*N].flatten())
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((2,N**2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[0, i*N+j] += 1
        total_spin[1, i*N+j] -= 1
      else:
        total_spin[0, i*N+j] -= 1
        total_spin[1, i*N+j] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][site_nbr] > 0:
        total_spin[0, i*N+site_nbr] += 1
        total_spin[1, i*N+site_nbr] -= 1
  return(total_spin.T)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_spin_sum = sum(sum(state[i]) for i in range(N))
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += site_spin_sum
        priority_total[i*N+j][1] -= site_spin_sum
      else:
        priority_total[i*N+j][0] -= site_spin_sum
        priority_total[i*N+j][1] += site_spin_sum
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] += J[site_nbr*N+(i%N)//2::4].sum()
    else:
      priority_total[i][0] += J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] -= J[site_nbr*N+(i%N)//2::4].sum()
  return [x for x in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.0008449074074074074}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += state[site_nbr][j]
        priority_total[i*N+j][1] -= state[site_nbr][j]
      else:
        priority_total[i*N+j][0] -= state[site_nbr][j]
        priority_total[i*N+j][1] += state[site_nbr][j]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] += J[site_nbr*N+(i%N)//2::4].sum()
    else:
      priority_total[i][0] += J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] -= J[site_nbr*N+(i%N)//2::4].sum()
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.0015118827160493827}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[site_nbr*N+(j-1)//2::4].sum()
        priority_total[i*N+j][1] -= J[site_nbr*N+(j-1)//2::4].sum()
      else:
        priority_total[i*N+j][0] -= J[site_nbr*N+(j-1)//2::4].sum()
        priority_total[i*N+j][1] += J[site_nbr*N+(j-1)//2::4].sum()
  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.15006373456790123}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_0 = sum([J[k][site_nbr[0]][(site_nbr[1]-k+3)%N] for k in [1, 2]])
    total_spin_1 = sum([J[k][site_nbr[0]][(site_nbr[1]+k-1)%N] for k in [-1, 1]])
    priorities.append([-1*total_spin_0, total_spin_1])
  return(priorities)




#score: {'data2D.txt': -0.0014563271604938269}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0., 0.] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j][1] -= J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      else:
        priorities[i*N+j][0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j][1] += J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      
      site_nbr3 = (site_nbr1 + (j-1)%2) % N
      site_nbr4 = ((i+1)%N + site_nbr2) % N
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[(i+N2*j):(i+1), site_nbr3, :].sum()
        priorities[i*N+j][1] -= J[(i+N2*j):(i+1), site_nbr4, :].sum()
      else:
        priorities[i*N+j][0] -= J[(i+N2*j):(i+1), site_nbr3, :].sum()
        priorities[i*N+j][1] += J[(i+N2*j):(i+1), site_nbr4, :].sum()
  
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.34222021604938163}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        priorities[i*N+j, 0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j, 1] -= J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      else:
        priorities[i*N+j, 0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j, 1] += J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
  
  for i in range(N):
    for j in range(N):
      site = ((i + ((j-1)%2 - 1)) % N)
      if h[i][j] > 0:
        priorities[i*N+j, 0] += 1
        priorities[i*N+j, 1] -= 1
      else:
        priorities[i*N+j, 0] -= 1
  
  return priorities




#score: {'data2D.txt': -0.0014563271604938269}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0., 0.] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j][1] -= J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      else:
        priorities[i*N+j][0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j][1] += J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      
      site_nbr3 = (site_nbr1 + (j-1)%2) % N
      site_nbr4 = ((i+1)%N + site_nbr2) % N
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[(i+N2*j):(i+1), site_nbr3, :].sum()
        priorities[i*N+j][1] -= J[(i+N2*j):(i+1), site_nbr4, :].sum()
      else:
        priorities[i*N+j][0] -= J[(i+N2*j):(i+1), site_nbr3, :].sum()
        priorities[i*N+j][1] += J[(i+N2*j):(i+1), site_nbr4, :].sum()
  
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.0013930555555555554}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        priorities.append([-J[(i+N*N*j):(i+1),site_nbr1, :].sum(), -J[(i+N*N*j):(i+1),site_nbr2, :].sum()])
      else:
        priorities.append([J[(i+N*N*j):(i+1),site_nbr1, :].sum(), J[(i+N*N*j):(i+1),site_nbr2, :].sum()])
  
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+(k-1)%2-1)%N for k in range(4) if (abs(k-1))!=1]
      if h[i][j] > 0:
        for site_nbr in site_nbrs:
          priority_total[i][j][0] += state[site_nbr][j]
          priority_total[i][j][1] -= state[site_nbr][j]
      else:
        for site_nbr in site_nbrs:
          priority_total[i][j][0] -= state[site_nbr][j]
          priority_total[i][j][1] += state[site_nbr][j]
  return [[x[0], x[1]] for x in [list(y) for y in itertools.chain(*priority_total)]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priorities = [[x[0], x[1]] for x in total_spin]
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  total_spin = [0.0, 0.0]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[(i+N**2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priority_total[i*N+j][1] -= J[(i+N**2*j):(i+1), (i+(j-1)%2) % N, :].sum()
        total_spin[0] += h[i][j]
      else:
        priority_total[i*N+j][0] -= J[(i+N**2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priority_total[i*N+j][1] += J[(i+N**2*j):(i+1), (i+(j-1)%2) % N, :].sum()
        total_spin[1] -= h[i][j]
      
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] = total_spin[0]
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][1] = -total_spin[1]
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[(i+N**2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priority_total[i*N+j][1] -= J[(i+N**2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      else:
        priority_total[i*N+j][0] -= J[(i+N**2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priority_total[i*N+j][1] += J[(i+N**2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      
      site_nbr3 = (site_nbr1 + (j-1)%2) % N
      site_nbr4 = ((i+1)%N + site_nbr2) % N
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[(i+N**2*j):(i+1), site_nbr3, :].sum()
        priority_total[i*N+j][1] -= J[(i+N**2*j):(i+1), site_nbr4, :].sum()
      else:
        priority_total[i*N+j][0] -= J[(i+N**2*j):(i+1), site_nbr3, :].sum()
        priority_total[i*N+j][1] += J[(i+N**2*j):(i+1), site_nbr4, :].sum()
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.05013564814814815}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, -1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    site = (site_nbr[0] + ((site_nbr[1]-1)%2 - 1)) % N
    if h[site_nbr[0]][site_nbr[1]] > 0:
      priorities.append([total_spin[0], -total_spin[1]])
    else:
      priorities.append([-total_spin[0], total_spin[1]])
  return(priorities)




#score: {'data2D.txt': 1.6512345679012274e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    site = (site_nbr[0] + ((site_nbr[1]-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priorities.append([-J[1][site_nbr[0]][(site_nbr[1]+1)%N] - J[0][site_nbr[0]][(site_nbr[1]-1)%N], 
               J[1][site_nbr[0]][(site_nbr[1]+1)%N] + J[0][site_nbr[0]][(site_nbr[1]-1)%N]])
    else:
      priorities.append([J[1][site_nbr[0]][(site_nbr[1]+1)%N] + J[0][site_nbr[0]][(site_nbr[1]-1)%N], 
               -J[1][site_nbr[0]][(site_nbr[1]+1)%N] - J[0][site_nbr[0]][(site_nbr[1]-1)%N]])
  return(priorities)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.24476342592592581}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, 1])
    else:
      priorities.append([total_spin, -1])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  return [[x, -y] for x,y in total_spin]




#score: {'data2D.txt': 0.20156712962962972}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum([state[i][j]*1 for j in range(N)]) for i in range(N)]
  
  priorities = []
  for i in range(N2):
    site_nbr1 = ((i//N+1)%N + (i%N-1)%2) % N
    site_nbr2 = (i//N+(i%N-1)%2) % N
    
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[site_nbr1] - total_spin[site_nbr2], total_spin[site_nbr1] + total_spin[site_nbr2]])
    else:
      priorities.append([-total_spin[site_nbr1] + total_spin[site_nbr2], -total_spin[site_nbr1] - total_spin[site_nbr2]])
  
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j][1] -= J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      else:
        priorities[i*N+j][0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j][1] += J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      
      site_nbr3 = (site_nbr1 + (j-1)%2) % N
      site_nbr4 = ((i+1)%N + site_nbr2) % N
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[(i+N2*j):(i+1), site_nbr3, :].sum()
        priorities[i*N+j][1] -= J[(i+N2*j):(i+1), site_nbr4, :].sum()
      else:
        priorities[i*N+j][0] -= J[(i+N2*j):(i+1), site_nbr3, :].sum()
        priorities[i*N+j][1] += J[(i+N2*j):(i+1), site_nbr4, :].sum()
  
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  for i in range(N2):
    site = (i // N + ((i % N) - 1) % N)
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.0017233024691358026}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site = (i // N + ((i % N) - 1) % N)
    k = i + N//2
    if h[i//N][i%N] > 0:
      total_spin[i][0] += sum(J[k%N*N:(k+1)%N*N].flatten())
      total_spin[i][1] -= sum(J[k%N*N:(k+1)%N*N].flatten())
    else:
      total_spin[i][0] -= sum(J[k%N*N:(k+1)%N*N].flatten())
      total_spin[i][1] += sum(J[k%N*N:(k+1)%N*N].flatten())
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.3341745370370361}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[site_nbr*N+int(i%N/N)][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[site_nbr*N+int(i%N/N)][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': 0.0039208333333333335}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        state[i][j] = 1
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int(j/N)][1] -= 1
      else:
        state[i][j] = -1
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+int(j/N)][1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if state[i][j] == -1:
        total_spin[i*N+j][0] -= 1
        total_spin[(i+1)%N*N+j][1] += 1
        priority_total[i*N+j][0] = 2*total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -2*total_spin[i*N+j][1]
      else:
        total_spin[i*N+j][0] += 1
        total_spin[(i+1)%N*N+j][1] -= 1
        priority_total[i*N+j][0] = -2*total_spin[i*N+j][0]
        priority_total[i*N+j][1] = 2*total_spin[i*N+j][1]
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': 0.3341745370370361}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[site_nbr*N+int(i%N/N)][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[site_nbr*N+int(i%N/N)][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.06341527777777779}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((2, N**2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - 1)) % N for k in range(3)]
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin[0, i*N+j] += 1
        total_spin[1, i*N+j] -= 1
      else:
        total_spin[0, i*N+j] -= 1
        total_spin[1, i*N+j] += 1
  return(total_spin.T)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2)) + np.column_stack((sum3, -sum4))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0009396604938271618}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_map = {(i + ((j-1)%N - N//2)) % N: i*N+j for i in range(N) for j in range(N)}
  for k in range(3):
    site_nbr = (k-1)%2
    for i in range(N**2):
      total_spin[i][0] += h[site_map[k]%N][i%N]
      total_spin[i][1] -= -h[site_map[k]%N][i%N]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N]>0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -1*total_spin[i][0]
    else:
      priority_total[i][1] = total_spin[i][0]
      priority_total[i][0] = -1*total_spin[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.01437175925925926}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += np.sum(J[:,i,j])
        priority_total[i*N+j][1] -= np.sum(J[:,i,j])
      else:
        priority_total[i*N+j][0] -= np.sum(J[:,i,j])
  return priority_total




#score: {'data2D.txt': -0.00175787037037037}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += sum(J[site*N:(site+1)*N].flatten())
      priority_total[i][1] -= sum(J[site*N:(site+1)*N].flatten())
    else:
      priority_total[i][0] -= sum(J[site*N:(site+1)*N].flatten())
  return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19548287037037057}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site][0]
        priority_total[i*N+j][1] = -1*total_spin[site][0]
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0017233024691358026}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site = (i // N + ((i % N) - 1) % N)
    k = i + N//2
    if h[i//N][i%N] > 0:
      total_spin[i][0] += sum(J[k%N*N:(k+1)%N*N].flatten())
      total_spin[i][1] -= sum(J[k%N*N:(k+1)%N*N].flatten())
    else:
      total_spin[i][0] -= sum(J[k%N*N:(k+1)%N*N].flatten())
      total_spin[i][1] += sum(J[k%N*N:(k+1)%N*N].flatten())
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0017233024691358026}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  for i in range(N2):
    site = (i // N + ((i % N) - 1) % N)
    k = i + N//2
    if h[i//N][i%N] > 0:
      total_spin[i][0] += sum(J[k%N*N:(k+1)%N*N].flatten())
      total_spin[i][1] -= sum(J[k%N*N:(k+1)%N*N].flatten())
    else:
      total_spin[i][0] -= sum(J[k%N*N:(k+1)%N*N].flatten())
      total_spin[i][1] += sum(J[k%N*N:(k+1)%N*N].flatten())
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[float('inf') for _ in range(2)] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += sum(J[site*N:(site+1)*N].flatten())
        priority_total[i*N+j][1] -= sum(J[site*N:(site+1)*N].flatten())
      else:
        priority_total[i*N+j][0] -= sum(J[site*N:(site+1)*N].flatten())
        priority_total[i*N+j][1] += sum(J[site*N:(site+1)*N].flatten())
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr1 = ((i+1)%N + (j-1)%N) % N
        site_nbr2 = (i+(j-1)%N - N//2) % N
        priority_total[i*N+j][0] += J_new[4*(site_nbr1*N+j) + 3]
        priority_total[i*N+j][1] -= J_new[4*(site_nbr2*N+i) + 0]
      else:
        site_nbr1 = ((i+1)%N + (j-1)%N) % N
        site_nbr2 = (i+(j-1)%N - N//2) % N
        priority_total[i*N+j][0] -= J_new[4*(site_nbr1*N+j) + 3]
        priority_total[i*N+j][1] += J_new[4*(site_nbr2*N+i) + 0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr1 = ((i//N+1)%N + (i%N-1)%2) % N
    site_nbr2 = (i//N+(i%N-1)%2) % N
    
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
      
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': 0.17344953703703703}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = sum(1 if J[(j%N)%4][site_nbr[0]][(site_nbr[1]+j-1)%N] > 0 else -1*1 if J[(j%N)%4][site_nbr[0]][(site_nbr[1]-j+1)%N] > 0 else 0 for j in range(4))
    priorities.append([total_spin, -1*total_spin])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0,0] for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0][0] += 1
        priority_total[site_nbr*N+int((j+1)//N)][0][1] -= 1
        priority_total[i*N+j][1][0] -= 1
      else:
        priority_total[i*N+j][0][0] -= 1
        priority_total[site_nbr*N+int((j+1)//N)][0][1] += 1
        priority_total[i*N+j][1][0] += 1
  return [[-x[1][0], x[0][0]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[site_nbr*N+int(i%N/N)][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[site_nbr*N+int(i%N/N)][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[[float('inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += sum(J[site*N:(site+1)*N].flatten())
        priority_total[i][j][1] -= sum(J[site*N:(site+1)*N].flatten())
      else:
        priority_total[i][j][0] -= sum(J[site*N:(site+1)*N].flatten())
        priority_total[i][j][1] += sum(J[site*N:(site+1)*N].flatten())
  return [[x[0], x[1]] for x in [y for sub_list in priority_total for y in sub_list]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]

  for i, row in enumerate(state):
    for j, spin in enumerate(row):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += sum(J[site*N:(site+1)*N].flatten())
        priority_total[i*N+j][1] -= sum(J[site*N:(site+1)*N].flatten())
      else:
        priority_total[i*N+j][0] -= sum(J[site*N:(site+1)*N].flatten())
        priority_total[i*N+j][1] += sum(J[site*N:(site+1)*N].flatten())

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0009464506172839506}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0 if h[i][j] > 0 else 1] += sum(J[site*N:(site+1)*N].flatten())
  return [[total_spin[i][0], total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.0011384259259259262}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin[i*N+j][0] += 2
        total_spin[i*N+j][1] -= 2
      elif any(h[site_nbr][j] < 0 for site_nbr in site_nbrs):
        if all(h[site_nbr][j] < 0 for site_nbr in site_nbrs) or h[i][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return [[x, y] for x, y in sorted([(a, b) for a, b in total_spin], reverse=True)]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.reshape(-1,4).T.flatten()
  sum_1 = (np.prod(J_new[::2],0) + h).flatten()
  sum_2 = (np.prod(J_new[1::2],0) + h).flatten()
  priority = np.column_stack((sum_1,-sum_2))
  return(priority)




#score: {'data2D.txt': -0.0009464506172839506}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += sum(J[site*N:(site+1)*N].flatten())
        total_spin[i*N+j][1] -= sum(J[site*N:(site+1)*N].flatten())
      else:
        total_spin[i*N+j][0] -= sum(J[site*N:(site+1)*N].flatten())
  return total_spin.tolist()




#score: {'data2D.txt': -0.0009464506172839506}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += sum(J[site*N:(site+1)*N].flatten())
        total_spin[i*N+j][1] -= sum(J[site*N:(site+1)*N].flatten())
      else:
        total_spin[i*N+j][0] -= sum(J[site*N:(site+1)*N].flatten())
  return total_spin.tolist()




#score: {'data2D.txt': -0.00045910493827160424}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    k = i + N//2
    if h[i//N][i%N] > 0:
      total_spin[i][0] += sum(J[k%N*N:(k+1)%N*N].flatten()) + (h[i//N][i%N]-h[(site+N)//N][(site+N)%N])
      total_spin[i][1] -= sum(J[k%N*N:(k+1)%N*N].flatten())
    else:
      total_spin[i][0] -= sum(J[k%N*N:(k+1)%N*N].flatten()) + (h[i//N][i%N]-h[(site+N)//N][(site+N)%N])
      total_spin[i][1] += sum(J[k%N*N:(k+1)%N*N].flatten())
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.1019699074074074}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          priority_total[i*N+j][0] += J[k,i,j]
          priority_total[i*N+j][1] -= J[k,i,j]
        else:
          total_spin += J[k,i,j]
      if total_spin != 0:
        if total_spin > 0:
          priority_total[i*N+j][0] = total_spin
        else:
          priority_total[i*N+j][1] = -total_spin
  return priority_total




#score: {'data2D.txt': 0.29374521604938286}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += np.sum(J[:,i,j])
        priority_total[i*N+j][1] -= np.sum(J[site*N:(site+1)*N].flatten())
      else:
        priority_total[i*N+j][0] -= np.sum(J[site*N:(site+1)*N].flatten())
  return priority_total




#score: {'data2D.txt': 0.027198302469135804}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for j in range(N)] + [(i//N + ((j+1)%N - N//2)) % N for j in range(N)]
    spin_magnetism = sum(1 if h[i//N][site_nbr] > 0 else -1 for site_nbr in site_nbrs)
    total_spin[i][1] += spin_magnetism
    total_spin[i][0] -= spin_magnetism
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3409893518518508}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2)) % N
    if h[i//N][i%N] > 0:
      priorities.append((J[site_nbr*N+(i%N)//2::4].sum(), -1))
    else:
      priorities.append((J[site_nbr*N+(i%N)//2::4].sum(), 1))
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum(row) for row in state]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= total_spin[0]
      priority_total[i][1] += total_spin[0]
    else:
      priority_total[i][0] += total_spin[1]
      priority_total[i][1] -= total_spin[1]
  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': 0.0007106481481481484}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin[i][0 if sum([h[site_nbr][i%N] for site_nbr in site_nbrs]) > 0 else 1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    interaction = sum([J[0][site_nbr[0]][(site_nbr[1]+j)%N] + J[1][site_nbr[0]][(site_nbr[1]-j)%N] for j in range(N)])
    if h[i//N][i%N] > 0:
      priorities.append([-interaction, float('-inf')])
    else:
      priorities.append([float('-inf'), interaction])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = 0
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      total_spin += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin])
    else:
      priorities.append([-1*total_spin, float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N,i%N)
    for k in [(0,1),(1,0),(-1,1),(1,-1)]:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
  priorities = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'),total_spin[i][0]])
    else:
      priorities.append([-1*total_spin[i][0],float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[0]])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.0016387345679012345}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  priority_total = [[0.0 for _ in range(2)] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr1 = ((i+1)%N + (j-1)%N) % N
        site_nbr2 = (i+(j-1)%N - N//2) % N
        priority_total[i*N+j][0] += J_new[4*(site_nbr1*N+j) + 3]
        priority_total[i*N+j][1] -= J_new[4*(site_nbr2*N+i) + 0]
      else:
        site_nbr1 = ((i+1)%N + (j-1)%N) % N
        site_nbr2 = (i+(j-1)%N - N//2) % N
        priority_total[i*N+j][0] -= J_new[4*(site_nbr1*N+j) + 3]
        priority_total[i*N+j][1] += J_new[4*(site_nbr2*N+i) + 0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0013594135802469127}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[h[i][j] if i%2 == 0 else -h[i][j] for j in range(N)] for i in range(N)]
  
  priorities = []
  for i in range(N2):
    site_nbr1 = ((i//N+1)%N + (i%N-1)%2) % N
    site_nbr2 = (i//N+(i%N-1)%2) % N
    
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[site_nbr1][i%N], -total_spin[site_nbr2][i%N]])
    else:
      priorities.append([-total_spin[site_nbr1][i%N], total_spin[site_nbr2][i%N]])
  
  return [[x, y] for x,y in priorities]




#score: {'data2D.txt': 0.0024591049382716047}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten().reshape((N*N,4))
  sums_0 = (J_new[:,0] + J_new[:,2]).flatten()
  sums_1 = (-J_new[:,1] - J_new[:,3]).flatten()
  return np.column_stack([sums_0,sums_1])




#score: {'data2D.txt': 0.0024591049382716047}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_flat = J.flatten().reshape((N2,4))
  
  sums_0 = (J_flat[:,1] + J_flat[:,3]).flatten()
  sums_1 = (-J_flat[:,0] - J_flat[:,2]).flatten()
  
  return np.column_stack([sums_0,sums_1])




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
      else:
        site = (i + ((j-1)%N - N//2)) % N
      neighbor_site = (site + ((site//N - 1) % N - 1)) % N
      if h[i][j] > 0:
        site_priority[i*N+j][0] -= 1
        site_priority[neighbor_site*N+int((j+1)//N)][1] += 1
      else:
        site_priority[i*N+j][0] += 1
        site_priority[neighbor_site*N+int((j+1)//N)][1] -= 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N**2):
    site = (i + ((state[i//N][i%N] - 1) % N))
    site_nbr = (site + ((site//N - 1) % N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[site_nbr*N+int(i%N/N)][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[site_nbr*N+int(i%N/N)][1] += 1

  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs = [(i+1)%N if j == 0 else (i-1+N)%N, (j+1)%N if i == N-1 else (j-1+N*N)%N]
        for site in site_nbrs:
          if h[site//N][site%N] > 0:
            site_priority[i*N+j][0] += 2
            site_priority[site][1] -= 1
          else:
            site_priority[i*N+j][0] += 1
            site_priority[site][1] += 1
      else:
        site_nbrs = [(i+1)%N if j == N-1 else (i-1+N)%N, (j+1)%N if i == 0 else (j-1+N*N)%N]
        for site in site_nbrs:
          if h[site//N][site%N] > 0:
            site_priority[i*N+j][0] -= 2
            site_priority[site][1] += 1
          else:
            site_priority[i*N+j][0] -= 1
            site_priority[site][1] -= 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': 0.06996651234567904}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if (i+1)%N != 0: site_nbrs.append((i+1)%N*N + j)
      if i != 0: site_nbrs.append(i*N+j-1)
      if (j+1)%N != 0: site_nbrs.append(i*N+(j+1)%N - N//2)
      for k in site_nbrs:
        total_spin = h[k//N][k%N]
        if h[i][j] > 0:
          priority_total[k//N*N+k%N][0] += total_spin
          priority_total[k//N*N+k%N][1] -= total_spin
        else:
          priority_total[k//N*N+k%N][0] -= total_spin
          priority_total[k//N*N+k%N][1] += total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[0]])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [float('-inf'), float('-inf')]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[0], total_spin[1]])
    else:
      priorities.append([-1*total_spin[0], -1*total_spin[1]])
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (2, -1), (-1, 1)]:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-1*total_spin[0], float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin[0]])
  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[site_nbr*N:(site_nbr+1)*N,j].sum() + (h[i][j]-h[site_nbr][j])
        priority_total[i*N+j][1] -= J[site_nbr*N:(site_nbr+1)*N,j].sum()
      else:
        priority_total[i*N+j][0] -= J[site_nbr*N:(site_nbr+1)*N,j].sum() + (h[i][j]-h[site_nbr][j])
  return priority_total




#score: {'data2D.txt': -0.1713597222222217}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  sum_1 = (np.prod(J[:, :N2].flatten(), axis=0) + h).flatten()
  sum_2 = (np.prod(J[:, N2:].flatten(), axis=0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [1,3]]
    for j in range(N):
      total_spin = sum([h[site_nbr][j] for site_nbr in site_nbrs])
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -1*total_spin
  return [x[:] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = sum(J[k][site_nbr[0]][(site_nbr[1]+k)%N] for k in [-1, 1])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0,0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+j_offset)%N] > 0:
        total_spin[0] += J[(i_offset+2)%4][site_nbr[0]][(site_nbr[1]+j_offset)%N]
      else:
        total_spin[1] += -J[(i_offset+2)%4][site_nbr[0]][(site_nbr[1]+j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[0]])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.001458796296296296}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin = [[0, 0] for _ in range(N**2)]
        state[site_nbrs[0]][j] += -1
        state[site_nbrs[1]][j] += 1 if site_nbrs[1]%N == j else -1
        state[site_nbrs[2]][j] += -1
        state[site_nbrs[3]][j] += 1 if site_nbrs[3]%N == j else -1
        
        for k in range(N):
          total_spin[k*N+j][0] += sum(h[i][k] for i in range(N))
          total_spin[k*N+j][1] -= sum(1 if h[i][k] > 0 else -1 for i in range(N))
        
        return [[x, y] for x, y in sorted([(a, b) for a, b in total_spin], reverse=True)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin = sum(1 for _ in range(N) if h[i][_]>0)
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      elif any(h[site_nbr][j] < 0 for site_nbr in site_nbrs):
        if all(h[site_nbr][j] < 0 for site_nbr in site_nbrs) or h[i][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.00045910493827160467}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = [[0.0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_priority[i*N+j][0] += J[site_nbr*N:(site_nbr+1)*N].flatten().sum()
        total_priority[i*N+j][1] -= J[i*N:(i+1)*N].flatten().sum()
      else:
        total_priority[i*N+j][0] -= J[i*N:(i+1)*N].flatten().sum() + J[site_nbr*N:(site_nbr+1)*N].flatten().sum()
  return total_priority




#score: {'data2D.txt': -0.0033180555555555554}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[site*N:(site+1)*N,i].sum() + (h[i][j]-h[site][j])
        total_spin[i*N+j][1] -= J[site*N:(site+1)*N,i].sum()
      else:
        total_spin[i*N+j][0] -= J[site*N:(site+1)*N,i].sum() + (h[i][j]-h[site][j])
  return total_spin




#score: {'data2D.txt': 0.3347121913580237}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site][1] += 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    if h[i//N][i%N] > 0:
      site = (i + ((i//N)%2 - 1)) % N
      total_spin[0] += sum(1 if J[(j%4)][site_nbr[0]][((site_nbr[1]+j-1)%N)] > 0 else -1*1 if J[(j%4)][site_nbr[0]][((site_nbr[1]-j+1)%N)] > 0 else 0 for j in range(2))
      total_spin[1] -= sum(-1*1 if J[j][site_nbr[0]][(site_nbr[1]+j-1)%N] > 0 else 1 if J[j][site_nbr[0]][(site_nbr[1]-j+1)%N] > 0 else 0 for j in range(2))
    else:
      site = (i + ((i//N)%2 - 1)) % N
      total_spin[1] -= sum(1 if J[(j%4)][site_nbr[0]][((site_nbr[1]+j-1)%N)] > 0 else -1*1 if J[(j%4)][site_nbr[0]][((site_nbr[1]-j+1)%N)] > 0 else 0 for j in range(2))
      total_spin[0] += sum(-1*1 if J[j][site_nbr[0]][(site_nbr[1]+j-1)%N] > 0 else 1 if J[j][site_nbr[0]][(site_nbr[1]-j+1)%N] > 0 else 0 for j in range(2))
    priorities.append([total_spin[0], total_spin[1]])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1)]:
      j_offset, i_offset = k
      if J[0][site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[0], -total_spin[1]])
    else:
      priorities.append([-total_spin[0], total_spin[1]])
  return(priorities)




#score: {'data2D.txt': 0.17344953703703703}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    site_spin = sum(1 if J[(j%N)%4][site_nbr[0]][(site_nbr[1]+j-1)%N] > 0 else -1*1 if J[(j%N)%4][site_nbr[0]][(site_nbr[1]-j+1)%N] > 0 else 0 for j in range(4))
    priorities.append([site_spin, -1*site_spin])
  return(priorities)




#score: {'data2D.txt': -0.32157669753086443}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = sum(J[:, i, j])
      if h[i][j] > 0:
        priority_total[i*N+j][0] = max(total_spin, priority_total[i*N+j][0])
        priority_total[i*N+j][1] = min(-total_spin, priority_total[i*N+j][1])
      else:
        priority_total[i*N+j][0] = min(-total_spin, priority_total[i*N+j][0])
        priority_total[i*N+j][1] = max(total_spin, priority_total[i*N+j][1])
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  for k in range(3):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00045910493827160467}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = [[0.0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_priority[i*N+j][0] += J[site_nbr*N:(site_nbr+1)*N].flatten().sum()
        total_priority[i*N+j][1] -= J[i*N:(i+1)*N].flatten().sum()
      else:
        total_priority[i*N+j][0] -= J[i*N:(i+1)*N].flatten().sum() + J[site_nbr*N:(site_nbr+1)*N].flatten().sum()
  return total_priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        
  for k in range(3):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    if h[i][j] > 0:
      priority_total[i*N+j][0] += J[site_nbr*N:(site_nbr+1)*N].flatten().sum()
      priority_total[i*N+j][1] -= J[i*N:(i+1)*N].flatten().sum()
    else:
      priority_total[i*N+j][0] -= J[site_nbr*N:(site_nbr+1)*N].flatten().sum() + J[i*N:(i+1)*N].flatten().sum()
      
  return priority_total




#score: {'data2D.txt': -0.01104182098765432}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = [[0.0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - N//2)) % N
      site_nbr2 = (i + ((j+1)%N - N//2)) % N
      if h[i][j] > 0:
        total_priority[i*N+j][0] += J[site_nbr1*N:(site_nbr1+1)*N].flatten().sum() + J[site_nbr2*N:(site_nbr2+1)*N].flatten().sum()
        total_priority[i*N+j][1] -= J[i*N:(i+1)*N].flatten().sum() - J[site_nbr1*N:(site_nbr1+1)*N].flatten().sum() - J[site_nbr2*N:(site_nbr2+1)*N].flatten().sum()
      else:
        total_priority[i*N+j][0] -= J[i*N:(i+1)*N].flatten().sum() + J[site_nbr1*N:(site_nbr1+1)*N].flatten().sum() + J[site_nbr2*N:(site_nbr2+1)*N].flatten().sum()
  return total_priority




#score: {'data2D.txt': -0.001458796296296296}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin = [[0, 0] for _ in range(N**2)]
        state[site_nbrs[0]][j] += -1
        state[site_nbrs[1]][j] += 1 if site_nbrs[1]%N == j else -1
        state[site_nbrs[2]][j] += -1
        state[site_nbrs[3]][j] += 1 if site_nbrs[3]%N == j else -1
        
        for k in range(N):
          total_spin[k*N+j][0] += sum(h[i][k] for i in range(N))
          total_spin[k*N+j][1] -= sum(1 if h[i][k] > 0 else -1 for i in range(N))
        
        return [[x, y] for x, y in sorted([(a, b) for a, b in total_spin], reverse=True)]
  
  priority_total = [[0, 0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += state[site_nbr][j]
        priority_total[i*N+j][1] -= state[site_nbr][j]
      else:
        priority_total[i*N+j][0] -= state[site_nbr][j]
        priority_total[i*N+j][1] += state[site_nbr][j]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] += J[site_nbr*N+(i%N)//2::4].sum()
    else:
      priority_total[i][0] += J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] -= J[site_nbr*N+(i%N)//2::4].sum()
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[site_nbr*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[site_nbr*N+j][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': 0.3338476851851842}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0.5 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int(i%N/N)][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+int(i%N/N)][1] += 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  site_interactions = []
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int((j-1)%N/N)][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+int((j-1)%N/N)][1] += 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': 0.3306047839506164}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        site_priority[site_nbr*N+int((j-1)//N)][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        site_priority[site_nbr*N+int((j-1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      k = i*N+j
      if h[i][j] > 0:
        total_spin = sum([state[site][j] for j in range(N)])
        priority_total[k][0] = total_spin
      else:
        total_spin = -sum([state[site][j] for j in range(N)])
        priority_total[k][1] = total_spin
  
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.00044675925925925943}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] = -total_spin[i*N+j][0]
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - N//2)) % N
      site_nbr2 = (i + ((j+1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr1][j]
      if h[i][j] > 0:
        priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
        for k in range(N**2):
          site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
          if h[site_nbr][k%N] > 0:
            priority_total[k][0] += 1
            priority_total[k][1] -= 1
          else:
            priority_total[k][0] -= 1
        return [[x[0], x[1]] for x in priority_total]
      else:
        total_spin[i*N+j][1] += h[site_nbr2][j]
  return [[-1, -1] for _ in range(N**2)]




#score: {'data2D.txt': -0.0007257716049382712}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[site_nbr][0] += 1
        total_spin[site_nbr][1] -= 1
      else:
        total_spin[site_nbr][0] -= 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[site][0] = total_spin[site][0]
        priority_total[site][1] = -1*total_spin[site][0]
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19548287037037057}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1

  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site][0]
        priority_total[i*N+j][1] = -1*total_spin[site][0]

  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i % N, i // N)
    total_spin = [0, 0]
    for k in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
      j_offset, i_offset = k
      total_spin[0] += J[i_offset][site_nbr[0]][(site_nbr[1]+j_offset)%N]
      total_spin[1] -= J[j_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), -total_spin[0]])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  total_spin = [[0, 0] for _ in range(N**2)]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in site_interaction:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[i][0]])
    else:
      priorities.append([-1*total_spin[i][0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.07007114197530867}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if (i+1)%N != 0:
        site_nbrs.append((i+1)%N*N + j)
      if i != 0:
        site_nbrs.append(i*N+j-1)
      if (j+1)%N != 0:
        site_nbrs.append(i*N+(j+1)%N - N//2)
      for k in site_nbrs:
        total_spin = h[k//N][k%N]
        if state[i][j] == state[k//N][k%N]:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.flatten()
  h_flat = h.flatten()
  sum_1 = (np.prod(J[::4], 0) + h_flat).flatten()
  sum_2 = (np.prod(J[1::4], 0) + h_flat).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = N * N
  sum_1 = np.zeros((N4,))
  sum_2 = np.zeros((N4,))
  for i in range(N4):
    site = (i // N + ((i % N-1)%N - N//2)) % N
    if h[site][i % N] > 0:
      sum_1[i] += 1
      sum_2[i] -= 1
    else:
      sum_1[i] -= 1
      sum_2[i] += 1
  return np.column_stack((sum_1, -sum_2)).reshape(N4, 2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[site][j][0] += 1
        priority_total[site][j][1] -= 1
      else:
        priority_total[site][j][0] -= 1
        priority_total[site][j][1] += 1
  return [[-x[1], x[0]] for x in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = sum((h[state[s][j]] if state[s][j] == h[i][j] else -h[i][j]) for s in [(site + ((k-1)%2 - 1)) % N for k in range(N)])
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.33473780864197433}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        if j < N-1:
          site_nbr = (site + ((site//N - 1) % N - 1)) % N
          total_spin[site_nbr*N+int((j+1)//N)][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        if j < N-1:
          site_nbr = (site + ((site//N - 1) % N - 1)) % N
          total_spin[site_nbr*N+int((j+1)//N)][1] += 1
  for i in range(N**2):
    priority_total[i][0], priority_total[i][1] = -total_spin[i][0], total_spin[i][1]
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N]>0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
      total_spin[i][0] -= 1
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N]>0:
      site_spin = 1
    else:
      site_spin = -1
    priority_total[i] = [site_spin, -site_spin]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_spin = 1 if h[i][j] > 0 else -1
      total_spin[i*N+j][0] += site_spin
      total_spin[i*N+j][1] -= site_spin
      
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    if h[i//N][i%N]>0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][0]
    else:
      priority_total[i][1] = total_spin[i][0]
      priority_total[i][0] = -total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_1 = sum(J[0][site_nbr[0]][(site_nbr[1] + k) % N] * state[(k+site_nbr[1])%N][site_nbr[0]] for k in range(N))
    total_spin_2 = sum(J[3 - (k+1)%4][site_nbr[0]][(site_nbr[1] - k) % N] * state[(k-site_nbr[1])%N][site_nbr[0]] for k in range(N))
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin_1 + total_spin_2])
    else:
      priorities.append([-1*(total_spin_1 + total_spin_2), float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_1 = sum(J[0][site_nbr[0]][(site_nbr[1] + k) % N] * state[(k+site_nbr[1])%N][site_nbr[0]] for k in range(N))
    total_spin_2 = sum(J[3 - (k+1)%4][site_nbr[0]][(site_nbr[1] - k) % N] * state[(k-site_nbr[1])%N][site_nbr[0]] for k in range(N))
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin_1 + total_spin_2])
    else:
      priorities.append([-1*(total_spin_1 + total_spin_2), float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_1 = sum(J[0][site_nbr[0]][(site_nbr[1] + k) % N] * state[(k+site_nbr[1])%N][site_nbr[0]] for k in range(N))
    total_spin_2 = sum(J[3 - (k+1)%4][site_nbr[0]][(site_nbr[1] - k) % N] * state[(k-site_nbr[1])%N][site_nbr[0]] for k in range(N))
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin_1 + total_spin_2])
    else:
      priorities.append([-1*(total_spin_1 + total_spin_2), float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_1 = sum(J[0][site_nbr[0]][(site_nbr[1] + k) % N] * state[(k+site_nbr[1])%N][site_nbr[0]] for k in range(N))
    total_spin_2 = sum(J[3 - (k+1)%4][site_nbr[0]][(site_nbr[1] - k) % N] * state[(k-site_nbr[1])%N][site_nbr[0]] for k in range(N))
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin_1 + total_spin_2])
    else:
      priorities.append([-1*(total_spin_1 + total_spin_2), float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.33434212962962867}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        if j < N-1:
          site_priority[site_nbr*N+int((j+1)//N)][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        if j < N-1:
          site_priority[site_nbr*N+int((j+1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': 0.32970941358024597}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr_up = (i + ((j-1)%N - N//2)) % N
        site_nbr_down = (site_nbr_up + ((site_nbr_up//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        site_priority[site_nbr_up*N+int((j-1)//N)][1] -= 1
        site_priority[site_nbr_down*N+int(j//N)][1] -= 1
      else:
        site_nbr_up = (i + ((j-1)%N - N//2)) % N
        site_nbr_down = (site_nbr_up + ((site_nbr_up//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        site_priority[site_nbr_up*N+int((j-1)//N)][1] += 1
        site_priority[site_nbr_down*N+int(j//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': 0.33019861111111015}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        site_priority[i*N+j][0] += 1
        site_priority[site_nbr*N+int((j+1)//N)][1] -= 1
      else:
        site_priority[i*N+j][0] -= 1
        site_priority[site_nbr*N+int((j+1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+((j-1)%N - N//2)) % N, (i+(j+1-N)%N) % N, (i-1+((j-1)%N - N//2)) % N if i > 0 else None, (i+1+((j-1)%N - N//2)) % N if i < N-1 else None]
      for site_nbr in site_nbrs:
        if site_nbr is not None and h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += state[site_nbr][j]
          priority_total[i*N+j][1] -= state[site_nbr][j]
        elif site_nbr is not None and h[site_nbr][j] < 0:
          priority_total[i*N+j][0] -= state[site_nbr][j]
          priority_total[i*N+j][1] += state[site_nbr][j]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.3312316358024691}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum1 = np.zeros((N2,1))
  sum2 = np.zeros((N2,1))
  
  for i in range(N2):
    s1 = 0
    s2 = 0
    
    for j in range(4):
      if (j==0 and ((i//N)%2==0 or (i%N)==0)) or ((j==1 and ((i//N)%2==1 or i==(N-1))) or (j==2 and ((i//N)%2==0 or i%(N*2)<N)) or (j==3 and ((i//N)%2==1 or i%(N*2)>N))):
        s1 += J_new[i]
      elif j==1:
        s1 -= J_new[i]
      elif j==2:
        s2 += J_new[i]
      else:
        s2 -= J_new[i]
        
    sum1[i,0] = s1
    sum2[i,0] = -s2
    
  return np.column_stack((sum1.sum(axis=1).reshape(N2,1), sum2.sum(axis=1).reshape(N2,1)))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i, j-1) if j > 0 else (i, N-1), 
             (i-1, j) if i > 0 else (N-1, j),
             (i+1, j) if i < N-1 else (0, j), 
             (i, j+1) if j < N-1 else (i, 0)]
      for site_nbr in site_nbrs:
        if h[site_nbr[0]][site_nbr[1]] > 0:
          priority_total[i*N+j][0] += state[site_nbr[0]][site_nbr[1]]
          priority_total[i*N+j][1] -= state[site_nbr[0]][site_nbr[1]]
        else:
          priority_total[i*N+j][0] -= state[site_nbr[0]][site_nbr[1]]
          priority_total[i*N+j][1] += state[site_nbr[0]][site_nbr[1]]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  total_spin = [[0.0, 0.0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%N) % N
      site_nbr2 = (i+(j-1)%N - N//2) % N
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J_new[4*(site_nbr1*N+j) + 3]
        priority_total[i*N+j][1] -= J_new[4*(site_nbr2*N+i) + 0]
      else:
        priority_total[i*N+j][0] -= J_new[4*(site_nbr1*N+j) + 3]
        priority_total[i*N+j][1] += J_new[4*(site_nbr2*N+i) + 0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.3300788580246904}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0,0]for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j]>0:
        site_priority[i*N+j][0]+=1
        site_priority[site_nbr*N+int((j-1)//N)][1]-=1
      else:
        site_priority[i*N+j][0]-=1
        site_priority[site_nbr*N+int((j-1)//N)][1]+=1
  return [[-x[1],x[0]]for x in site_priority]




#score: {'data2D.txt': 0.3300788580246904}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        site_priority[i*N+j][0] += 1
        site_priority[site_nbr*N+int((j-1)//N)][1] -= 1
      else:
        site_priority[i*N+j][0] -= 1
        site_priority[site_nbr*N+int((j-1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': 0.33016898148148055}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        site_priority[i*N+j][0] += 1
        site_priority[site*N+int((j-1)//N)][1] -= 1
      else:
        site_priority[i*N+j][0] -= 1
        site_priority[site*N+int((j-1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.32157669753086443}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = sum(J[:, i, j])
      if h[i][j] > 0:
        priority_total[i*N+j][0] = max(total_spin, priority_total[i*N+j][0])
        priority_total[i*N+j][1] = min(-total_spin, priority_total[i*N+j][1])
      else:
        priority_total[i*N+j][0] = min(-total_spin, priority_total[i*N+j][0])
        priority_total[i*N+j][1] = max(total_spin, priority_total[i*N+j][1])
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += sum(J[site_nbr*N:(site_nbr+1)*N].flatten())
        priority_total[i*N+j][1] -= sum(J[site_nbr*N:(site_nbr+1)*N].flatten())
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= sum(J[site_nbr*N:(site_nbr+1)*N].flatten())
  return priority_total




#score: {'data2D.txt': 0.19548287037037057}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site_nbr][0]
        priority_total[i*N+j][1] = -1*total_spin[site_nbr][0]
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19548287037037057}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site][0]
        priority_total[i*N+j][1] = -1*total_spin[site][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.3312316358024691}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum1 = np.zeros((N2,1))
  sum2 = np.zeros((N2,1))
  
  for i in range(N2):
    s1 = 0
    s2 = 0
    
    for j in range(4):
      if (j==0 and ((i//N)%2==0 or (i%N)==0)) or ((j==1 and ((i//N)%2==1 or i==(N-1))) or (j==2 and ((i//N)%2==0 or i%(N*2)<N)) or (j==3 and ((i//N)%2==1 or i%(N*2)>N))):
        s1 += J_new[i]
      elif j==1:
        s1 -= J_new[i]
      elif j==2:
        s2 += J_new[i]
      else:
        s2 -= J_new[i]
        
    sum1[i,0] = s1
    sum2[i,0] = -s2
    
  return np.column_stack((sum1.sum(axis=1).reshape(N2,1), sum2.sum(axis=1).reshape(N2,1)))




#score: {'data2D.txt': 0.17698472222222222}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum1 = np.zeros((N2,1))
  sum2 = np.zeros((N2,1))

  for i in range(N2):
    s1 = 0
    s2 = 0

    site = (i % (2 * N) - N)
    spin = 2 * h[i//N][site] - 1

    sum1[i,0] = J_new[i] + (spin * np.prod(J_new[4*i:4*(i+1)], 0)).sum()
    sum2[i,0] = -J_new[i] - (1-spin) * np.prod(J_new[4*i:4*(i+1)], 0).sum()

  return np.column_stack((sum1.sum(axis=1).reshape(N2,1), sum2.sum(axis=1).reshape(N2,1)))




#score: {'data2D.txt': 0.3312316358024691}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum1 = np.zeros((N2,1))
  sum2 = np.zeros((N2,1))

  for i in range(N2):
    s1 = 0
    s2 = 0
    
    for j in range(4):
      if (j==0 and ((i//N)%2==0 or (i%N)==0)) or ((j==1 and ((i//N)%2==1 or i==(N-1))) or (j==2 and ((i//N)%2==0 or i%(N*2)<N)) or (j==3 and ((i//N)%2==1 or i%(N*2)>N))):
        s1 += J_new[i]
      elif j==1:
        s1 -= J_new[i]
      elif j==2:
        s2 += J_new[i]
      else:
        s2 -= J_new[i]
        
    sum1[i,0] = s1
    sum2[i,0] = -s2
  
  return np.column_stack((sum1.sum(axis=1).reshape(N2,1), sum2.sum(axis=1).reshape(N2,1)))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = np.prod(J_new[0::4], 0) + h
  sum_2 = np.prod(J_new[1::4], 0) + h
  priority = np.column_stack((sum_1.flatten(), -sum_2.flatten()))
  return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    
    for k in [0, 1, 2]:
      if k == 0:
        site = (site_nbr[0], (site_nbr[1] - 1) % N)
      elif k == 1:
        site = ((site_nbr[0] + 1) % N, site_nbr[1])
      else:
        site = (site_nbr[0], (site_nbr[1] + 1) % N)
      
      total_spin[i][0] += J[k][site_nbr[0]][site_nbr[1]]
      total_spin[i][1] -= 1
      
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[i][0]])
    else:
      priorities.append([-1*total_spin[i][0], float('-inf')])
  
  return(priorities)




#score: {'data2D.txt': -0.022028858024691355}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in range(4):
      if k == 0:
        total_spin[i][0] += J[k][site_nbr[0]][site_nbr[1]]
      elif k == 1:
        total_spin[i][0] += J[(k+2)%4][site_nbr[0]][(site_nbr[1]+1)%N]
      elif k == 2:
        total_spin[i][1] += J[k][(site_nbr[0]+1)%N][site_nbr[1]]
      else:
        total_spin[i][1] += J[k-2][site_nbr[0]][(site_nbr[1]-1)%N]
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[i][0], -total_spin[i][1]])
    else:
      priorities.append([-total_spin[i][0], total_spin[i][1]])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_interactions = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr1 = ((i//N+1)%N + (i%N-1)%2) % N
    site_nbr2 = (i//N+(i%N-1)%2) % N
    
    if h[i//N][i%N] > 0:
      site_interactions[i][0] += J[(i+N*N*site_nbr1):(i+1),site_nbr1, :].sum() - J[(i+N*N*site_nbr2):(i+1),site_nbr2, :].sum()
      site_interactions[i][1] -= J[(i+N*N*site_nbr1):(i+1),site_nbr1, :].sum() + J[(i+N*N*site_nbr2):(i+1),site_nbr2, :].sum()
    else:
      site_interactions[i][0] += -J[(i+N*N*site_nbr1):(i+1),site_nbr1, :].sum() + J[(i+N*N*site_nbr2):(i+1),site_nbr2, :].sum()
      site_interactions[i][1] -= -J[(i+N*N*site_nbr1):(i+1),site_nbr1, :].sum() - J[(i+N*N*site_nbr2):(i+1),site_nbr2, :].sum()
  
  return [[x[0], x[1]] for x in site_interactions]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::2],0) + h).flatten()
  sum_2 = (-np.prod(J_new[1::2],0)).flatten()
  priority = np.column_stack((sum_1, -sum_1))
  return(priority)




#score: {'data2D.txt': -0.0014109567901234568}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_interactions = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        site_interactions[i*N+j][0] += J[(i+N*N*j):(i+1),site_nbr1, :].sum() - J[(i+N*N*j):(i+1),site_nbr2, :].sum()
        site_interactions[i*N+j][1] -= J[(i+N*N*j):(i+1),site_nbr1, :].sum() + J[(i+N*N*j):(i+1),site_nbr2, :].sum()
      else:
        site_interactions[i*N+j][0] += J[(i+N*N*j):(i+1),site_nbr1, :].sum() + J[(i+N*N*j):(i+1),site_nbr2, :].sum()
        site_interactions[i*N+j][1] -= J[(i+N*N*j):(i+1),site_nbr1, :].sum() - J[(i+N*N*j):(i+1),site_nbr2, :].sum()
  
  return [[x[0], x[1]] for x in site_interactions]




#score: {'data2D.txt': -0.34199953703703595}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0, 0] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
        
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[site][j][0] += sum([J[(i+N*N*j):(i+1),k, :].sum() for k in [(site_nbr1-1)%N, (site_nbr1+1)%N]])
        priority_total[site][j][1] -= 2*sum([J[(i+N*N*j):(i+1),k, :].sum() for k in [(site_nbr1-1)%N, (site_nbr1+1)%N]])
      else:
        priority_total[site][j][1] += sum([J[(i+N*N*j):(i+1),k, :].sum() for k in [(site_nbr1-1)%N, (site_nbr1+1)%N]])
        priority_total[site][j][0] -= 2*sum([J[(i+N*N*j):(i+1),k, :].sum() for k in [(site_nbr1-1)%N, (site_nbr1+1)%N]])
        
  return [[x[0], x[1]] for row in priority_total for x in row]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += h[site_nbr][j]
        priority_total[i*N+j][1] -= h[site_nbr][j]
      else:
        priority_total[i*N+j][0] -= h[site_nbr][j]
        priority_total[i*N+j][1] += h[site_nbr][j]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  
  priority = np.column_stack((sum_1, -sum_2))
  
  return(priority.tolist())




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return([list(x) for x in priority])




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0008717592592592589}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] += J[site_nbr*N+(i%N)//2::4].sum()
    else:
      priority_total[i][0] += J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] -= J[site_nbr*N+(i%N)//2::4].sum()
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    site_nbr = (i + ((-1)**((i-1)//N)) - N//2) % N
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  for i in range(N**2):
    site_nbr = (i // N + ((-1)**((i%N)//N)) - N//2) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] += J[site_nbr*N+(i%N)//2::4].sum()
    else:
      priority_total[i][0] += J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] -= J[site_nbr*N+(i%N)//2::4].sum()
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += state[site_nbr][j]
        total_spin[i*N+j][1] -= state[site_nbr][j]
      else:
        total_spin[i*N+j][0] -= state[site_nbr][j]
        total_spin[i*N+j][1] += state[site_nbr][j]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      total_spin[i][0] += sum(J[(i//N + ((i%N-1)%2 - 1)) % N + (k%4)*N+k//4::4].sum() for k in range(N))
      total_spin[i][1] -= sum(J[(i//N + ((i%N-1)%2 - 1)) % N + (k%4)*N+k//4::4].sum() for k in range(N))
    else:
      total_spin[i][0] -= sum(J[(i//N + ((i%N-1)%2 - 1)) % N + (k%4)*N+k//4::4].sum() for k in range(N))
      total_spin[i][1] += sum(J[(i//N + ((i%N-1)%2 - 1)) % N + (k%4)*N+k//4::4].sum() for k in range(N))
  return sorted([(a, b) for a, b in total_spin], reverse=True)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((i-1)%N - N//2)) % N
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] -= J[site_nbr*N+(i%N)//2::4].sum()
      total_spin[i][1] += J[site_nbr*N+(i%N)//2::4].sum()
    else:
      total_spin[i][0] += J[site_nbr*N+(i%N)//2::4].sum()
      total_spin[i][1] -= J[site_nbr*N+(i%N)//2::4].sum()
  return sorted([(a, b) for a, b in total_spin], reverse=True)




#score: {'data2D.txt': 6.635802469135976e-06}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  
  priority_total = [[0.0 for _ in range(2)] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += J_new[4*(site*N+j) + 3]
        priority_total[i*N+j][1] -= J_new[4*(i*N+((j-1)%N-N//2)) + 0]
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= J_new[4*(site*N+j) + 3]
        priority_total[i*N+j][1] += J_new[4*(i*N+((j-1)%N-N//2)) + 0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1

  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site_nbr][0]
        priority_total[i*N+j][1] = -total_spin[site_nbr][0]

  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site][0]
        priority_total[i*N+j][1] = -total_spin[site][0]
  
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += total_spin[site][0]
  
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += state[i][j]
        priority_total[i*N+j][1] -= state[i][j]
      else:
        priority_total[i*N+j][0] -= state[i][j]

  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  total_spin = [[0, 0] for _ in range(N**2)]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in site_interaction:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[i][0]])
    else:
      priorities.append([-1*total_spin[i][0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  for i in range(N**2):
    total_spin = [0, 0]
    site_nbr = (i // N, i % N)
    for k in site_interaction:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[0]])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[0], float('-inf')])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[0], float('-inf')])
    else:
      priorities.append([float('-inf'), total_spin[0]])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[0], float('-inf')])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    site = (site_nbr[0] + ((site_nbr[1]-1)%2 - 1)) % N
    total_spin = [0, 0]
    if h[i//N][i%N] > 0:
      total_spin[0] += h[site][i%N]
    else:
      total_spin[0] -= h[site][i%N]
    for k in [(0,1),(1,0),(-1,1),(1,-1)]:
      j_offset, i_offset = k
      if state[site_nbr[0]][(site_nbr[1]+i_offset)%N] == -1:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[0], float('-inf')])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.000703858024691358}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += state[site_nbr][j]
        priority_total[i*N+j][1] -= state[site_nbr][j]
      else:
        priority_total[i*N+j][0] -= state[site_nbr][j]
        priority_total[i*N+j][1] += state[site_nbr][j]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += sum(J[site_nbr*N+(k%4)*N+k//4::4].sum() for k in range(N))
      priority_total[i][1] -= sum(J[site_nbr*N+(k%4)*N+k//4::4].sum() for k in range(N))
    else:
      priority_total[i][0] -= sum(J[site_nbr*N+(k%4)*N+k//4::4].sum() for k in range(N))
      priority_total[i][1] += sum(J[site_nbr*N+(k%4)*N+k//4::4].sum() for k in range(N))
  
  return sorted([(a, b) for a, b in priority_total], reverse=True)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= sum(J[site_nbr*N+(k%N)//2::4].sum() for k in range(i))
      priority_total[i][1] += sum(J[site_nbr*N+(k%N)//2::4].sum() for k in range(i))
    else:
      priority_total[i][0] += sum(J[site_nbr*N+(k%N)//2::4].sum() for k in range(i))
      priority_total[i][1] -= sum(J[site_nbr*N+(k%N)//2::4].sum() for k in range(i))
  
  return sorted([(a, b) for a, b in priority_total], reverse=True)




#score: {'data2D.txt': 0.008068364197530865}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+int((j+1)//N)][0] += 1
        total_spin[i*N+j][0] -= 1
      else:
        total_spin[site_nbr*N+int((j+1)//N)][0] -= 1
        total_spin[i*N+j][0] += 1
  for j in range(N):
    if h[j//N][j%N] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -total_spin[j][0]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
      
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -1*total_spin[j][0]
  
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin = sum(h[site][j] for site in site_nbrs)
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin = sum(h[k][j] for k in range(N))
        priority_total[i*N+j][1] -= total_spin
      elif h[i][j] < 0:
        total_spin = sum(-h[k][j] for k in range(N))
        priority_total[i*N+j][0] += total_spin
      
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        priority_total[i*N+j][0] -= sum(J[site_nbr*N+(i%N)//2::4].sum() for site_nbr in site_nbrs)
        priority_total[i*N+j][1] += sum(J[site_nbr*N+(i%N)//2::4].sum() for site_nbr in site_nbrs)
      elif all(h[site_nbr][j] < 0 for site_nbr in site_nbrs):
        priority_total[i*N+j][0] += sum(-J[site_nbr*N+(i%N)//2::4].sum() for site_nbr in site_nbrs)
        priority_total[i*N+j][1] -= sum(J[site_nbr*N+(i%N)//2::4].sum() for site_nbr in site_nbrs)
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.0018177469135802476}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin[i*N+j][0] = sum(1 if h[k][j] > 0 else -1 for k in range(N))
      elif all(h[site_nbr][j] < 0 for site_nbr in site_nbrs):
        total_spin[i*N+j][1] = -sum(1 if h[k][j] > 0 else -1 for k in range(N))
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in total_spin], reverse=True)]




#score: {'data2D.txt': -0.0006893518518518516}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      total_spin = sum(h[site][j] for site in site_nbrs)
      if h[i][j] > 0:
        priorities[i][j][0] = total_spin
      else:
        priorities[i][j][1] = -total_spin

  return [[x, y] for x, y in sorted([(a, b) for a, b in [item for sublist in priorities for item in sublist]], reverse=True)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        priorities[i][j][0] += 2
        priorities[i][j][1] -= 2
      elif all(h[site_nbr][j] < 0 for site_nbr in site_nbrs):
        priorities[i][j][0] -= 2
        priorities[i][j][1] += 2

  return [[x[0], x[1]] for x in [item for sublist in priorities for item in sublist]]




#score: {'data2D.txt': 0.16680787037037062}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs = [(i+((k-1)%2 - 1)) % N for k in range(3)]
        for s in site_nbrs:
          if i < N//2:
            if h[s][j] > 0:
              site_priority[i*N+j][0] += 1
              site_priority[s*N+int(j/N)][1] -= 1
            else:
              site_priority[i*N+j][0] -= 1
              site_priority[s*N+int(j/N)][1] += 1
          else:
            if h[s][j] > 0:
              site_priority[i*N+j][0] -= 1
              site_priority[s*N+int(j/N)][1] += 1
            else:
              site_priority[i*N+j][0] += 1
              site_priority[s*N+int(j/N)][1] -= 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.15467669753086444}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (site_nbr + ((i-1)%2 - 1)) % N
        total_spin[i*N+j][0] = h[site][j]
        total_spin[i*N+j][1] = -total_spin[i*N+j][0]
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  for i in range(N**2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += 1 if state[site][i%N] == 1 else -1
    total_spin[i][1] -= 1 if state[site][i%N] == 1 else 1
  priorities = [(total_spin[i][0],-total_spin[i][1]) for i in range(N**2)]
  return priorities




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': 0.3312316358024691}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N*N):
    s1 = 0
    s2 = 0
    
    for j in range(4):
      if (j==0 and ((i//N)%2==0 or (i%N)==0)) or ((j==1 and ((i//N)%2==1 or i==(N-1))) or (j==2 and ((i//N)%2==0 or i%(N*2)<N)) or (j==3 and ((i//N)%2==1 or i%(N*2)>N))):
        s1 += J_flat[i]
      elif j==1:
        s1 -= J_flat[i]
      elif j==2:
        s2 += J_flat[i]
      else:
        s2 -= J_flat[i]
    
    total_spin[i] = [s1, -s2]
  
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N -1) % N) - 1) % N
    spin = -1 if h[i//N][i%N] > 0 else 1
    total_spin[i][spin==1] += 1

  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += np.sum(J[:,i,j])
      else:
        priority_total[i*N+j][1] -= np.sum(J[site_nbr*N:(site_nbr+1)*N].flatten())

  return priority_total




#score: {'data2D.txt': -0.001532561728395062}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j][1] -= J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      else:
        priorities[i*N+j][0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        priorities[i*N+j][1] += J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
  
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  site_priors = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr1 = ((i+1)%N + (j-1)%2) % N
        site_nbr2 = (i+(j-1)%2) % N
        total_spin[i*N+j][0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        total_spin[i*N+j][1] -= J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
        site_priors[i*N+j][0] += 1
        site_priors[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        total_spin[i*N+j][1] += J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
        site_priors[i*N+j][0] -= 1
        site_priors[i*N+j][1] += 1
        
  return [[x[0], x[1]] for x in site_priors]




#score: {'data2D.txt': -0.047544598765432135}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priorities = []
  for i in range(N2):
    site_nbr1 = (i//N + ((i%N-1)%2 - N//2)) % N
    site_nbr2 = (i//N + (i%N-1)//2) % N
    
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[site_nbr1][0] - total_spin[site_nbr2][0], total_spin[site_nbr1][0] + total_spin[site_nbr2][0]])
    else:
      priorities.append([-total_spin[site_nbr1][0] + total_spin[site_nbr2][0], -total_spin[site_nbr1][0] - total_spin[site_nbr2][0]])
  
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.0018177469135802476}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin[i*N+j][0] = sum(1 if h[k][j] > 0 else -1 for k in range(N))
      elif all(h[site_nbr][j] < 0 for site_nbr in site_nbrs):
        total_spin[i*N+j][1] = -sum(1 if h[k][j] > 0 else -1 for k in range(N))
      
  return [[x, y] for x, y in sorted([(a, b) for a, b in total_spin], reverse=True)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin = sum(1 if h[k][j] > 0 else -1 for k in range(N))
        priority_total[i][j][0] += total_spin
        priority_total[i][j][1] -= total_spin
      elif all(h[site_nbr][j] < 0 for site_nbr in site_nbrs):
        total_spin = sum(1 if h[k][j] > 0 else -1 for k in range(N))
        priority_total[i][j][0] -= total_spin
        priority_total[i][j][1] += total_spin
  return [[x[0], x[1]] for x in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.037466203703703724}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin = sum(1 if h[k][j] > 0 else -1 for k in range(N))
        
        if h[i][j] > 0:
          priority_total[i][j][0] = total_spin
        else:
          priority_total[i][j][1] = -total_spin
  
  return [[x[0], x[1]] for x in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.10007762345679021}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if (i, j) != ((k-1)//N, k%N)]
      total_spin = [0, 0]
      for site_nbr in site_nbrs:
        if h[site_nbr][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
      priority_total[i*N+j] = [sum(1 for k in range(N) if J[(k-1)//N][i][j]*h[k%N][j] > 0), -total_spin[0]]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.32970941358024597}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr_up = (i + ((j-1)%N - N//2)) % N
        site_nbr_down = (site_nbr_up + ((site_nbr_up//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        site_priority[site_nbr_up*N+int((j-1)//N)][1] -= 1
        site_priority[site_nbr_down*N+int(j//N)][1] -= 1
      else:
        site_nbr_up = (i + ((j-1)%N - N//2)) % N
        site_nbr_down = (site_nbr_up + ((site_nbr_up//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        site_priority[site_nbr_up*N+int((j-1)//N)][1] += 1
        site_priority[site_nbr_down*N+int(j//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::N], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::N], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0005143518518518524}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    spin = 1 if h[site_nbr][i%N] > 0 else -1
    total_spin[i][spin==1] += 1
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -1*total_spin[j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.007745833333333335}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - 1)) % N for k in range(3)]
      for k in site_nbrs:
        total_spin[i*N+j][0] += h[k%N][j%N]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][1] -= 1
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -total_spin[j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  
  for i in range(N**2):
    site_nbr = (site_nbrs[i] + ((i//N-1)%2 - 1)) % N
    spin = 1 if h[site_nbr][i%N] > 0 else -1
    total_spin[i][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[j*N+j][0] += total_spin[j*N+j][0]
        priority_total[j*N+j][1] -= total_spin[j*N+j][0]
      else:
        priority_total[j*N+j][1] = -total_spin[j*N+j][0]
        priority_total[j*N+j][0] = total_spin[j*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i % N, i // N)
    total_spin = [0, 0]
    for k in [(0, 1), (-1, 0), (1, -1), (-1, 1)]:
      j_offset, i_offset = k
      if abs(i_offset) == 1 and site_nbr[1] + i_offset >= N:
        continue
      total_spin[0] += J[i_offset][site_nbr[0]][(site_nbr[1]+j_offset)%N]
      total_spin[1] -= J[j_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), -total_spin[0]])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i % N, i // N)
    total_spin = [0, 0]
    for k in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
      j_offset, i_offset = k
      if site_nbr[0] + j_offset < N and site_nbr[1] + i_offset < N:
        total_spin[0] += J[i_offset][site_nbr[0]][(site_nbr[1]+j_offset)%N]
      if site_nbr[0] + j_offset >= 0 and site_nbr[1] - i_offset >= 0:
        total_spin[1] -= J[j_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-1*total_spin[0], float('-inf')])
    else:
      priorities.append([float('-inf'), -total_spin[0]])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i % N, i // N)
    total_spin = [0, 0]
    for k in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
      j_offset, i_offset = k
      total_spin[0] += J[i_offset][site_nbr[0]][(site_nbr[1]+j_offset)%N]
      total_spin[1] -= J[j_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), -total_spin[0]])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.03905601851851852}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(1, -1), (-1, 1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      if h[(site_nbr[0]+i_offset)%N][site_nbr[1]] > 0:
        total_spin[1] += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    priority_total[i][0] = -total_spin[0]
    priority_total[i][1] = total_spin[1]
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i, (j+1)%N), ((i+1)%N, j), (i, (j-1+N)%N), ((i-1+N)%N, j)]
      for k, nbr in enumerate(site_nbrs):
        if h[nbr[0]][nbr[1]] > 0:
          priorities[i*N+j][0] += J[k][nbr[0]][nbr[1]]
          priorities[i*N+j][1] -= J[k][nbr[0]][nbr[1]]
        else:
          priorities[i*N+j][0] -= J[k][nbr[0]][nbr[1]]
          priorities[i*N+j][1] += J[k][nbr[0]][nbr[1]]
  return(priorities)




#score: {'data2D.txt': 0.011877623456790122}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      if h[(site_nbr[0]+i_offset)%N][site_nbr[1]] > 0:
        total_spin[1] += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    priorities.append(total_spin)
  return(priorities)




#score: {'data2D.txt': -0.0003945987654320986}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  priority_total = [[0.0 for _ in range(2)] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J_new[4*(site*N+j) + 3]
        priority_total[i*N+j][1] -= J_new[4*(i*N+((j-1)%2 - 1)) + 0]
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] -= J_new[4*(site*N+j) + 3]
        priority_total[i*N+j][1] += J_new[4*(i*N+((j-1)%2 - 1)) + 0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.22840848765432106}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  priority_total = [[0.0 for _ in range(2)] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = J_new[4*(site*N+j) + 3]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin_up = sum([state[i][j] * (h[i][j]) for i in range(N) for j in range(N)])
  total_spin_down = -total_spin_up
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin_down
        priority_total[i*N+j][0] = -total_spin_up
      else:
        priority_total[i*N+j][1] = total_spin_up
        priority_total[i*N+j][0] = -total_spin_down
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0013032407407407404}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_interactions = []
  
  for i in range(N2):
    site_nbr1 = ((i//N+1)%N + (i%N-1)%2) % N
    site_nbr2 = (i//N+(i%N-1)%2) % N
    
    if h[i//N][i%N] > 0:
      site_interactions.append([J[(i+N2*site_nbr1):(i+1), ((i//N+1)%N + (i%N-1)%2) % N, :].sum(), -J[(i+N2*site_nbr2):(i+1), (i//N+(i%N-1)%2) % N, :].sum()])
    else:
      site_interactions.append([-J[(i+N2*site_nbr1):(i+1), ((i//N+1)%N + (i%N-1)%2) % N, :].sum(), J[(i+N2*site_nbr2):(i+1), (i//N+(i%N-1)%2) % N, :].sum()])
  
  return site_interactions




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': 0.24476342592592581}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, 1])
    else:
      priorities.append([total_spin, -1])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[j][0] = float('inf')
      else:
        priority_total[j][1] = float('-inf')
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]

  for i in range(N):
    for j in range(N):
      site_spin = 1 if h[i][j] > 0 else -1
      total_spin[i*N+j][0] += site_spin
      total_spin[i*N+j][1] -= site_spin

  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N**2):
    if h[i//N][i%N]>0:
      total_spin_value = total_spin[i][0]
      priority_total[i][0] = -total_spin_value
      priority_total[i][1] = total_spin_value
    else:
      total_spin_value = total_spin[i][0]
      priority_total[i][0] = total_spin_value
      priority_total[i][1] = -total_spin_value

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
 
  for i in range(N):
    for j in range(N):
      site_spin = 1 if h[i][j] > 0 else -1
      total_spin[i*N+j][0] += site_spin
      total_spin[i*N+j][1] -= site_spin
      
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    if h[i//N][i%N]>0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][0]
    else:
      priority_total[i][1] = total_spin[i][0]
      priority_total[i][0] = -total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        
  for i in range(N**2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    state[site][i%N] += 1 if h[site][i%N] > 0 else -1
    total_spin[i][0] += 1 if h[site][i%N] > 0 else -1
    total_spin[i][1] -= 1 if h[site][i%N] > 0 else 1
        
  priorities = [(total_spin[i][0],-total_spin[i][1]) for i in range(N**2)]
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.04845447530864198}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += state[site_nbr][j]
      total_spin[i*N+j][1] -= state[site_nbr][j]

  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    if h[i//N][i%N]>0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][0]
    else:
      priority_total[i][1] = total_spin[i][0]
      priority_total[i][0] = -total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.00829706790123457}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[site_nbr][0] -= 1
        total_spin[site_nbr][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    if h[i//N][i%N]>0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][0]
    else:
      priority_total[i][1] = total_spin[i][0]
      priority_total[i][0] = -total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0013594135802469127}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[h[i][j] if i%2 == 0 else -h[i][j] for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N2):
    site_nbr1 = (i//N + (i%N-1)%2) % N
    site_nbr2 = ((i//N+1)%N + (i%N-1)%2) % N
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[site_nbr1][i%N], -total_spin[site_nbr2][i%N]])
    else:
      priorities.append([-total_spin[site_nbr1][i%N], total_spin[site_nbr2][i%N]])
  return [[x, y] for x,y in priorities]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return [[x, y] for x,y in [tuple(total) for total in priority_total]]




#score: {'data2D.txt': 0.0007112654320987658}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[h[i][j] if i%2 == 0 else -h[i][j] for j in range(N)] for i in range(N)]
  priorities = []
  
  for i in range(N2):
    site_nbr1 = (i//N + (i%N-1)%2) % N
    site_nbr2 = ((i+1)%N + (i%N-1)//N) % N
    
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[site_nbr1][i%N], -total_spin[site_nbr2][i%N]])
    else:
      priorities.append([-total_spin[site_nbr1][i%N], total_spin[site_nbr2][i%N]])
  
  return [[x, y] for x,y in priorities]




#score: {'data2D.txt': -0.0650375}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_energy = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      total_energy[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_energy[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    priorities.append([-total_energy[0], -total_energy[1]])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    site_spin = sum(1 if J[(j%N)%4][site_nbr[0]][(site_nbr[1]+j-1)%N] > 0 else -1*1 if J[(j%N)%4][site_nbr[0]][(site_nbr[1]-j+1)%N] > 0 else 0 for j in range(4))
    site_spin = (site_spin + state[site_nbr[0]][site_nbr[1]]) % 2
    priorities.append([site_spin, -1*site_spin])
  return(priorities)




#score: {'data2D.txt': 0.17344953703703703}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    site_spin = sum(1 if J[(k%4)][site_nbr[0]][(site_nbr[1]+k-1)%N] > 0 else -1*1 if J[(k%4)][site_nbr[0]][(site_nbr[1]-k+1)%N] > 0 else 0 for k in range(4))
    priorities.append([site_spin, -1*site_spin])
  return(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1, (j+1)%N, (i-1+N)%N, (i+1)%N]]
      
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin[i*N+j][0] += 2
        total_spin[i*N+j][1] -= 2
      elif any(h[site_nbr][j] < 0 for site_nbr in site_nbrs):
        if all(h[site_nbr][j] < 0 for site_nbr in site_nbrs) or h[i][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in total_spin], reverse=True)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  for i in range(N):
    site = (i + ((j-1)%2 - 1)) % N
    if h[i][j] > 0:
      priority_total[i*N+j][0] += sum(J[site*N:(site+1)*N].flatten())
      priority_total[i*N+j][1] -= sum(J[site*N:(site+1)*N].flatten())
    else:
      priority_total[i*N+j][0] -= sum(J[site*N:(site+1)*N].flatten()) + sum(J[i*N:(i+1)*N].flatten())

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        total_spin = sum(J[site_nbr*N:(site_nbr+1)*N].flatten())
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1 + total_spin
          priority_total[i*N+j][1] -= 1 - total_spin
        else:
          priority_total[i*N+j][0] -= 1 + total_spin
          priority_total[i*N+j][1] = -1 + total_spin
  
  return [[p[0], p[1]] for p in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += sum(J[site_nbr*N:(site_nbr+1)*N].flatten())
        priority_total[i*N+j][1] -= sum(J[site_nbr*N:(site_nbr+1)*N].flatten())
      else:
        priority_total[i*N+j][0] -= sum(J[site_nbr*N:(site_nbr+1)*N].flatten())
  
  return [[total_spin[0], total_spin[1]] for total_spin in priority_total]




#score: {'data2D.txt': 0.001082253086419753}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    total_spin[i][1] -= h[site_nbr][i % N]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] = -1*total_spin[i*N+j][0]
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0013155864197530861}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
        state[site_nbrs[0]][j] += -1
        state[site_nbrs[1]][j] += 1 if site_nbrs[1]%N == j else -1
        state[site_nbrs[2]][j] += -1
        state[site_nbrs[3]][j] += 1 if site_nbrs[3]%N == j else -1
        
        for k in range(N):
          total_spin[k*N+j][0] = sum(h[i][k] for i in range(N))
          total_spin[k*N+j][1] = sum(1 if h[i][k] > 0 else -1 for i in range(N))
        
        return [[x, y] for x, y in sorted([(a, b) for a, b in total_spin], reverse=True)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      
      if all(h[site_nbr][0] > 0 for site_nbr in site_nbrs):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        
        total_spin = [sum(1 if h[i][j] > 0 else -1 for j in range(N)) for i in range(N)]
        priority_total[i*N+j][0] += sum(h[i][j]*total_spin[j] for j in range(N))
        priority_total[i*N+j][1] -= sum(-h[i][j]*total_spin[j] for j in range(N))
        
      elif all(h[site_nbr][0] < 0 for site_nbr in site_nbrs):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        
        total_spin = [sum(1 if h[i][j] > 0 else -1 for j in range(N)) for i in range(N)]
        priority_total[i*N+j][0] -= sum(h[i][j]*total_spin[j] for j in range(N))
        priority_total[i*N+j][1] += sum(-h[i][j]*total_spin[j] for j in range(N))
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.0022912037037037037}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  def sum_spin(i,j):
    spin = 0
    for k in range(3):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      spin += h[site_nbr][j]
    return spin

  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_spin = sum_spin(i,j)
      if h[i][j] > 0:
        priority_total[i*N+j][0] = site_spin
        priority_total[i*N+j][1] = -1*site_spin
      else:
        priority_total[i*N+j][0] = -site_spin
        priority_total[i*N+j][1] = site_spin
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -1*total_spin[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.05013564814814815}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, -1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[site_nbr[0]][site_nbr[1]] > 0:
      priorities.append([total_spin[0], -total_spin[1]])
    else:
      priorities.append([-total_spin[0], total_spin[1]])
  return(priorities)




#score: {'data2D.txt': -0.0022890432098765434}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, -1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] += -J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
        total_spin[1] -= -J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    site = (site_nbr[0] + ((site_nbr[1]-1)%2 - 1)) % N
    if h[site_nbr[0]][site_nbr[1]] > 0:
      priorities.append([total_spin[0], -total_spin[1]])
    else:
      priorities.append([-total_spin[0], total_spin[1]])
  return([[p1, p2] for p1, p2 in sorted(priorities)])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  total_spin_left = [float('-inf') for _ in range(2)]
  total_spin_right = [float('-inf') for _ in range(2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin_left[0] += J[0][i][j]
        total_spin_left[1] -= J[1][i][j]
        total_spin_right[0] += J[2][i][j]
        total_spin_right[1] -= J[3][i][j]
      else:
        total_spin_left[0] += -J[0][i][j]
        total_spin_left[1] -= -J[1][i][j]
        total_spin_right[0] += -J[2][i][j]
        total_spin_right[1] -= -J[3][i][j]
      if h[i][j] > 0:
        priorities.append([total_spin_left[0], -total_spin_right[0]])
      else:
        priorities.append([-total_spin_left[0], total_spin_right[0]])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in site_interaction:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
  priorities = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'),total_spin[i][0]])
    else:
      priorities.append([-1*total_spin[i][0],float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in site_interaction:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    priorities = []
    for i in range(N**2):
      if h[i//N][i%N] > 0:
        priorities.append([float('-inf'), total_spin[i][0]])
      else:
        priorities.append([-1*total_spin[i][0], float('-inf')])
    return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('inf'), -float('inf')] for _ in range(4)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for j_offset in [-1, 0, 1]:
      for i_offset in [-1, 0, 1]:
        if j_offset == 0 and i_offset == 0:
          continue
        site = (site_nbr[0] + i_offset, site_nbr[1] + j_offset)
        if site[0] < 0 or site[0] >= N or site[1] < 0 or site[1] >= N:
          continue
        priority_total[i][0][0] -= J[1][site[0]][site[1]]
        priority_total[i][0][1] += J[3][site[0]][site[1]]
        if h[site[0]][site[1]] > 0:
          priority_total[i][1][0] -= 2 * J[1][site[0]][site[1]]
          priority_total[i][1][1] += 2 * J[3][site[0]][site[1]]
        else:
          priority_total[i][1][0] += 2 * J[1][site[0]][site[1]]
          priority_total[i][1][1] -= 2 * J[3][site[0]][site[1]]
  return [[priority_total[i][0].index(min(priority_total[i][0])), priority_total[i][1].index(min(priority_total[i][1]))] for i in range(N**2)]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum1+sum2+sum3, -sum1-sum2-sum3))
  return(priority)




#score: {'data2D.txt': -0.0011384259259259251}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0.0, 0.0]] * N for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[site_nbr][j][0] += 1
        priority_total[site_nbr][j][1] -= 1
      else:
        priority_total[site_nbr][j][0] -= 1
  return [[x[0], x[1]] for x in [y for y in np.concatenate(priority_total).tolist()]]




#score: {'data2D.txt': 0.2083486111111112}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[site_nbr][0] += 1
        total_spin[site_nbr][1] -= 1
      else:
        total_spin[site_nbr][0] -= 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= total_spin[site][0]
      else:
        priority_total[i*N+j][0] -= total_spin[site][0]

  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.02238317901234568}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if J[k[0]][site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    priorities.append(total_spin)
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(1, 0), (-1, 0), (0, -1), (0, 1)]:
      j_offset, i_offset = k
      if J[3][site_nbr[0]][(site_nbr[1]-j_offset)%N] > 0:
        total_spin[0] += 2
      elif J[3][site_nbr[0]][(site_nbr[1]-j_offset)%N] < 0:
        total_spin[1] -= 2
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[0], float('-inf')])
    else:
      priorities.append([float('-inf'), -total_spin[0]])
  return(priorities)




#score: {'data2D.txt': -0.010488425925925927}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  site_spin_sum = sum(sum(h[i]) for i in range(N))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = site_spin_sum + J[site*N+(j-1)//2::4].sum()
        priority_total[i*N+j][0] = total_spin
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = site_spin_sum - J[site*N+(j-1)//2::4].sum()
        priority_total[i*N+j][1] = -total_spin
  
  return sorted([(a, b) for a, b in priority_total], reverse=True)




#score: {'data2D.txt': -0.0005214506172839501}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % N - N // 2)) % N
      total_spin = sum(sum(h[k][l] * state[k][l] for l in range(N)) for k in range(N))
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin

  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] += J[site_nbr*N+(i%N)//2::4].sum()
    else:
      priority_total[i][0] += J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] -= J[site_nbr*N+(i%N)//2::4].sum()

  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.0008717592592592589}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % N - N // 2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] -= J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] += J[site_nbr*N+(i%N)//2::4].sum()
    else:
      priority_total[i][0] += J[site_nbr*N+(i%N)//2::4].sum()
      priority_total[i][1] -= J[site_nbr*N+(i%N)//2::4].sum()

  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.04651466049382716}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N*N):
    s1 = 0
    s2 = 0
    
    for j in range(4):
      if (j==0 and ((i//N)%2==0 or (i%N)==0)) or ((j==1 and ((i//N)%2==1 or i==(N-1))) or (j==2 and ((i//N)%2==0 or i%(N*2)<N)) or (j==3 and ((i//N)%2==1 or i%(N*2)>N))):
        s1 += J_flat[i]
      elif j==1:
        s1 -= J_flat[i]
      elif j==2:
        s2 += J_flat[i]
      else:
        s2 -= J_flat[i]
    
    if h[i//N][i%N] > 0:
      total_spin[i][0] += s1
      total_spin[i][1] -= s2
    else:
      total_spin[i][0] -= s1
      total_spin[i][1] += s2
  
  priority_total = [[x[0], x[1]] for x in total_spin]
  
  return priority_total




#score: {'data2D.txt': 0.00026898148148148213}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.reshape(-1, 4).sum(axis=1)
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N*N):
    s1 = 0
    s2 = 0
    
    for j in range(4):
      if (j==0 and ((i//N)%2==0 or (i%N)==0)) or ((j==1 and ((i//N)%2==1 or i==(N-1))) or (j==2 and ((i//N)%2==0 or i%(N*2)<N)) or (j==3 and ((i//N)%2==1 or i%(N*2)>N))):
        s1 += J_flat[i]
      elif j==1:
        s1 -= J_flat[i]
      elif j==2:
        s2 += J_flat[i]
      else:
        s2 -= J_flat[i]
    
    total_spin[i] = [s1, -s2]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0014109567901234568}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_interactions = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        site_interactions[i*N+j][0] += J[(i+N*N*j):(i+1),site_nbr1, :].sum() - J[(i+N*N*j):(i+1),site_nbr2, :].sum()
        site_interactions[i*N+j][1] -= J[(i+N*N*j):(i+1),site_nbr1, :].sum() + J[(i+N*N*j):(i+1),site_nbr2, :].sum()
      else:
        site_interactions[i*N+j][0] += J[(i+N*N*j):(i+1),site_nbr1, :].sum() + J[(i+N*N*j):(i+1),site_nbr2, :].sum()
        site_interactions[i*N+j][1] -= J[(i+N*N*j):(i+1),site_nbr1, :].sum() - J[(i+N*N*j):(i+1),site_nbr2, :].sum()
  
  return [[x[0], x[1]] for x in site_interactions]




#score: {'data2D.txt': -0.0006893518518518516}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for site in range(N**2):
    site_nbr = (site // N + ((site % N - 1) % 2)) % N
    if h[site//N][site%N] > 0:
      total_spin = sum(J[site_nbr*N+(i%N)//2::4].sum() for i in range(N))
      priority_total[site][0] = total_spin
    else:
      total_spin = -sum(J[site_nbr*N+(i%N)//2::4].sum() for i in range(N))
      priority_total[site][1] = total_spin

  return sorted([(a, b) for a, b in priority_total], reverse=True)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  site_spin_sum = sum(sum(h[i]) for i in range(N))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = site_spin_sum + J[site*N+(j-1)//2::4].sum()
        priority_total[i*N+j][0] = total_spin
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = site_spin_sum - J[site*N+(j-1)//2::4].sum()
        priority_total[i*N+j][1] = -total_spin
  
  return sorted([(a,b) for a,b in priority_total], key=lambda x: (x[0]+x[1]), reverse=True)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum_3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum_4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  site_spin_sum = sum(sum(h[i]) for i in range(N))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = site_spin_sum + J[site*N+(j-1)//2::4].sum()
        priority_total[i*N+j][0] = total_spin
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = site_spin_sum - J[site*N+(j-1)//2::4].sum()
        priority_total[i*N+j][1] = -total_spin
  
  return sorted([(a, b) for a, b in priority_total], reverse=True)




#score: {'data2D.txt': -0.02238317901234568}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if J[k[0]][site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    priorities.append(total_spin)
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if J[k[0]][site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    site = (i + ((i//N-1)%2 - 1)) % N
    if h[i//N][site]%N > 0:
      priorities.append([total_spin[0], -1*total_spin[1]])
    else:
      priorities.append([-1*total_spin[0], total_spin[1]])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  total_spin = [float('-inf'), float('-inf')]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in site_interaction:
      j_offset, i_offset = k
      total_spin[0] += J[i_offset][site_nbr[0]][(site_nbr[1]+j_offset)%N]
      total_spin[1] -= J[j_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    priorities.append(total_spin)
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      if J[k[0]][site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[0], float('-inf')])
    else:
      priorities.append([float('-inf'), -total_spin[0]])
  return(priorities)




#score: {'data2D.txt': 0.32970941358024597}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr_up = (i + ((j-1)%N - N//2)) % N
        site_nbr_down = (site_nbr_up + ((site_nbr_up//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        site_priority[site_nbr_up*N+int((j-1)//N)][1] -= 1
        site_priority[site_nbr_down*N+int(j//N)][1] -= 1
      else:
        site_nbr_up = (i + ((j-1)%N - N//2)) % N
        site_nbr_down = (site_nbr_up + ((site_nbr_up//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        site_priority[site_nbr_up*N+int((j-1)//N)][1] += 1
        site_priority[site_nbr_down*N+int(j//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[site_nbr*N+int(j/N)][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[site_nbr*N+int(j/N)][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.0011384259259259251}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0.0, 0.0]] * N for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[site_nbr][j][0] += 1
        priority_total[site_nbr][j][1] -= 1
      else:
        priority_total[site_nbr][j][0] -= 1
  
  return [[x[0], x[1]] for x in [y for y in np.concatenate(priority_total).tolist()]]




#score: {'data2D.txt': -0.0028433641975308638}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0.0, 0.0]] * N for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[site_nbr1][j][0] += 1
        priority_total[site_nbr1][j][1] -= 1
        priority_total[site_nbr2][j][0] += 1
        priority_total[site_nbr2][j][1] -= 1
      else:
        priority_total[site_nbr1][j][0] -= 1
        priority_total[site_nbr1][j][1] += 1
        priority_total[site_nbr2][j][0] -= 1
        priority_total[site_nbr2][j][1] += 1
  
  return [[x[0], x[1]] for x in [y for y in np.concatenate(priority_total).tolist()]]




#score: {'data2D.txt': 0.33434212962962867}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        if j < N-1:
          site_priority[site_nbr*N+int((j+1)//N)][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        if j < N-1:
          site_priority[site_nbr*N+int((j+1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': 0.33434212962962867}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        if j < N-1:
          site_priority[site_nbr*N+int((j+1)//N)][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        if j < N-1:
          site_priority[site_nbr*N+int((j+1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[site][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[site][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': 0.20156712962962972}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum([state[i][j]*1 for j in range(N)]) for i in range(N)]
  
  priorities = []
  for i in range(N2):
    site_nbr1 = ((i//N+1)%N + (i%N-1)%2) % N
    site_nbr2 = (i//N+(i%N-1)%2) % N
    
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[site_nbr1] - total_spin[site_nbr2], total_spin[site_nbr1] + total_spin[site_nbr2]])
    else:
      priorities.append([-total_spin[site_nbr1] + total_spin[site_nbr2], -total_spin[site_nbr1] - total_spin[site_nbr2]])
  
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': 0.2690439814814816}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += np.sum(J[:,i,j])
        priority_total[i*N+j][1] -= np.sum(J[site:N*2:3].flatten())
      else:
        priority_total[i*N+j][0] -= np.sum(J[site:N*2:3].flatten())
  return priority_total




#score: {'data2D.txt': 0.1019699074074074}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        for k in range(4):
          priority_total[i*N+j][0] += J[k,i,j]
          if k == 3:
            break
      else:
        total_spin = 0
        for k in range(4):
          site = (i + ((k-1)%2 - 1)) % N
          total_spin += J[k,i,j]
        priority_total[i*N+j][1] -= total_spin
  return priority_total




#score: {'data2D.txt': -0.22128873456790102}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  for i in range(N2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    k = i + N//2
    if h[i//N][i%N] > 0:
      priority_total[i][0] = sum(J[k%N*N:(k+1)%N*N].flatten()) + (h[i//N][i%N]-h[(site+N)//N][(site+N)%N])
      priority_total[i][1] = -sum(J[k%N*N:(k+1)%N*N].flatten())
    else:
      priority_total[i][0] = -sum(J[k%N*N:(k+1)%N*N].flatten()) + (h[i//N][i%N]-h[(site+N)//N][(site+N)%N])
      priority_total[i][1] = sum(J[k%N*N:(k+1)%N*N].flatten())
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00045910493827160424}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  for i in range(N2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    k = i + N//2
    if h[i//N][i%N] > 0:
      total_spin[i][0] += sum(J[k%N*N:(k+1)%N*N].flatten()) + (h[i//N][i%N]-h[(site+N)//N][(site+N)%N])
      total_spin[i][1] -= sum(J[k%N*N:(k+1)%N*N].flatten())
    else:
      total_spin[i][0] -= sum(J[k%N*N:(k+1)%N*N].flatten()) + (h[i//N][i%N]-h[(site+N)//N][(site+N)%N])
      total_spin[i][1] += sum(J[k%N*N:(k+1)%N*N].flatten())
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0013097222222222219}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0.0, 0.0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      
      total_spin[site][spin==1] += sum(J[(i*N+j)%N2:(i*N+2)*N2].flatten())
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -total_spin[j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_spin = 1 if h[i][j] > 0 else -1
      total_spin[i*N+j][0] += site_spin
      total_spin[i*N+j][1] -= site_spin
      
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    if h[i//N][i%N]>0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][0]
    else:
      priority_total[i][1] = total_spin[i][0]
      priority_total[i][0] = -total_spin[i][0]
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0010507716049382712}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      total_spin = sum(h[site][j] for site in site_nbrs)
      if h[i][j] > 0:
        priorities[i][j][0] = -total_spin
        priorities[i][j][1] = 1
      else:
        priorities[i][j][0] = 1
        priorities[i][j][1] = total_spin

  return sorted([(a, b) for a, b in [item for sublist in priorities for item in sublist]], reverse=True)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i // N + ((i % N - 1) % 2)) % N for k in range(4)]
    total_spin[i][0] += sum(J[site_nbr*N+(i%N)//2::4].sum() if h[site_nbr//N][site_nbr%N] > 0 else -J[site_nbr*N+(i%N)//2::4].sum() for site_nbr in site_nbrs)
    total_spin[i][1] -= sum(J[site_nbr*N+(i%N)//2::4].sum() if h[site_nbr//N][site_nbr%N] > 0 else -J[site_nbr*N+(i%N)//2::4].sum() for site_nbr in site_nbrs)
  return sorted([(a, b) for a, b in total_spin], reverse=True)




#score: {'data2D.txt': -0.001297685185185185}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin[i*N+j][0] += 2
        total_spin[i*N+j][1] -= 2
      elif any(h[site_nbr][j] < 0 for site_nbr in site_nbrs):
        if all(h[site_nbr][j] < 0 for site_nbr in site_nbrs) or h[i][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return [[x, y] for x, y in sorted([(a, b) for a, b in total_spin], reverse=True)]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      total_spin[i*N+j][0] += sum(h[site_nbr][j] * (-1 if h[site_nbr][j] > 0 else 1) for site_nbr in site_nbrs)
      total_spin[i*N+j][1] -= sum(h[site_nbr][j] * (-1 if h[site_nbr][j] < 0 else 1) for site_nbr in site_nbrs)
  return [[x, y] for x, y in sorted([(a, b) for a, b in total_spin], reverse=True)]




#score: {'data2D.txt': -0.0014708333333333338}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]

  for i in range(N**2):
    site_nbrs = [(i // N + ((k - 1) % 2) - 1) % N for k in [i % N - 1, i % N + 1, (N - 1) + (i // N - 1) % N, (N - 1) + (i // N + 1) % N]]
    if all(h[site_nbr][i % N] > 0 for site_nbr in site_nbrs):
      priority_total[i][0] += sum(sum(1 for k in range(N) if h[k][l] > 0) for l in range(N))
      priority_total[i][1] -= sum(sum(-1 for k in range(N) if h[k][l] < 0) for l in range(N))
    elif any(h[site_nbr][i % N] < 0 for site_nbr in site_nbrs):
      if all(h[site_nbr][i % N] < 0 for site_nbr in site_nbrs) or h[i // N][i % N] > 0:
        priority_total[i][0] -= sum(sum(1 for k in range(N) if h[k][l] > 0) for l in range(N))
        priority_total[i][1] += sum(sum(-1 for k in range(N) if h[k][l] < 0) for l in range(N))
      else:
        priority_total[i][0] += sum(sum(1 for k in range(N) if h[k][l] > 0) for l in range(N))
        priority_total[i][1] -= sum(sum(-1 for k in range(N) if h[k][l] < 0) for l in range(N))

  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[float('inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site*N+int((j-1)//N)][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site*N+int((j-1)//N)][1] += 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[site][int((j-1)//N)][1] -= 1
      else:
        priority_total[i][j][0] -= 1
        priority_total[site][int((j-1)//N)][1] += 1
  return [[-x[1], x[0]] for sublist in priority_total for x in sublist]




#score: {'data2D.txt': -0.33499552469135707}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_priority = (i + ((j-1)%2 - 1)) % N
        neighbor = (site_priority + ((site_priority//N - 1) % N - 1)) % N
        state[i*N+j][0] += 1
        if j < N-1:
          state[neighbor*N+int((j+1)//N)][1] -= 1
      else:
        site_priority = (i + ((j-1)%2 - 1)) % N
        neighbor = (site_priority + ((site_priority//N - 1) % N - 1)) % N
        state[i*N+j][0] -= 1
        if j < N-1:
          state[neighbor*N+int((j+1)//N)][1] += 1
  return state.tolist()




#score: {'data2D.txt': 0.33434212962962867}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        if j < N-1:
          site_priority[site_nbr*N+int((j+1)//N)][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        if j < N-1:
          site_priority[site_nbr*N+int((j+1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[site][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[site][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': 0.33434212962962867}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        if j < N-1:
          site_priority[site_nbr*N+int((j+1)//N)][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        if j < N-1:
          site_priority[site_nbr*N+int((j+1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[site][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[site][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.2046770061728397}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += J[3,i,j]
        priority_total[i*N+j][1] -= J[3,i,j]
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = np.sum(J[:,site,j])
        if total_spin > 0:
          priority_total[i*N+j][0] = total_spin
        else:
          priority_total[i*N+j][1] = -total_spin
  return priority_total




#score: {'data2D.txt': -0.0018177469135802476}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin[i*N+j][0] = sum(1 if h[k][j] > 0 else -1 for k in range(N))
      elif all(h[site_nbr][j] < 0 for site_nbr in site_nbrs):
        total_spin[i*N+j][1] = -sum(1 if h[k][j] > 0 else -1 for k in range(N))
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in total_spin], reverse=True)]




#score: {'data2D.txt': -0.0018177469135802476}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      
      if all(h[site_nbr][j] > 0 for site_nbr in site_nbrs):
        total_spin[i*N+j][0] = sum(1 if h[k][j] > 0 else -1 for k in range(N))
      elif all(h[site_nbr][j] < 0 for site_nbr in site_nbrs):
        total_spin[i*N+j][1] = -sum(1 if h[k][j] > 0 else -1 for k in range(N))
  
  return [[x, y] for x, y in sorted([(a, b) for a, b in total_spin], reverse=True)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      
      for site_nbr in site_nbrs:
        if h[site_nbr][0] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1

  return sorted([(a, b) for a, b in total_spin], reverse=True)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[site][0] += 1
        priority_total[site][1] -= 1
      else:
        priority_total[site][0] -= 1
        priority_total[site][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for k in range(3):
    site_nbr = (k-1) % N
    for i in range(N):
      for j in range(N):
        total_spin[i*N+j][0] += h[site_nbr][j]
  for i in range(N**2):
    if state[i//N][i%N] > 0:
      priority_total[i][1] -= J[:,i//N,i%N].flatten().sum()
      priority_total[i][0] += J[:,i//N,i%N].flatten().sum()
    else:
      priority_total[i][0] -= J[:,i//N,i%N].flatten().sum()

  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (-np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  site = lambda i, j: (i + ((j-1)%2 - 1)) % N
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[p[0], p[1]] for p in priority_total]




#score: {'data2D.txt': 0.005821759259259258}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (0, -1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+j_offset)%N] > 0:
        total_spin[0] += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin[0] -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      if h[(site_nbr[0]+i_offset)%N][site_nbr[1]] > 0:
        total_spin[1] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[1] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if state[i//N][i%N] > 0:
      priorities.append([-total_spin[0], -total_spin[1]])
    else:
      priorities.append([total_spin[0], total_spin[1]])
  return(priorities)




#score: {'data2D.txt': 0.0003208333333333333}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(1, -1), (-1, 1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      if h[(site_nbr[0]+i_offset)%N][site_nbr[1]] > 0:
        total_spin[1] += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    priority_total[i][0] = -total_spin[0]
    priority_total[i][1] = total_spin[1]
  return [[-x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.10354182098765431}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(1,-1),(-1,1),(0,1),(1,0)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[0] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      if h[(site_nbr[0]+i_offset)%N][site_nbr[1]] > 0:
        total_spin[1] += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[0], -total_spin[1]])
    else:
      priorities.append([-total_spin[0], total_spin[1]])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[site_nbr][int(i%N/N)][1] -= 1
      else:
        priority_total[i][j][0] -= 1
        priority_total[site_nbr][int(i%N/N)][1] += 1
  return [[-x[1], x[0]] for x in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[site_nbr*N+int(i%N/N)][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[site_nbr*N+int(i%N/N)][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': 0.3300788580246904}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        site_priority[i*N+j][0] += 1
        site_priority[site_nbr*N+int((j-1)//N)][1] -= 1
      else:
        site_priority[i*N+j][0] -= 1
        site_priority[site_nbr*N+int((j-1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int((j-1)//N)][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+int((j-1)//N)][1] += 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': 0.06868070987654323}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_priority[i*N+j][0] += 1
        if i < N//2:
          site_priority[(i+1)%N*N+j][1] -= 1
          site_priority[i*N+(j+1)%N][1] -= 1
          site_priority[(i+1)%N*N+(j+1)%N][0] += 1
        else:
          site_priority[i*N+j][1] -= 1
          site_priority[(i-1)%N*N+j][0] += 1
          site_priority[i*N+(j-1)%N][0] += 1
      else:
        site_priority[i*N+j][0] -= 1
        if i < N//2:
          site_priority[(i+1)%N*N+j][1] += 1
          site_priority[i*N+(j+1)%N][1] += 1
          site_priority[(i+1)%N*N+(j+1)%N][0] -= 1
        else:
          site_priority[i*N+j][1] += 1
          site_priority[(i-1)%N*N+j][0] -= 1
          site_priority[i*N+(j-1)%N][0] -= 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[site_nbr*N+int((j-1)//N)][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[site_nbr*N+int((j-1)//N)][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.010593364197530864}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    total_spin = [0, 0]
    site_nbr = (i // N, i % N)
    for k in [(0, -1), (1, 0), (0, 1), (-1, 0)]:
      j_offset, i_offset = k
      if site_nbr[1] == 0 and j_offset < 0 or site_nbr[1] == N-1 and j_offset > 0:
        continue
      if site_nbr[0] == 0 and i_offset < 0 or site_nbr[0] == N-1 and i_offset > 0:
        continue
      total_spin[1] += J[k[1]][site_nbr[0]][(site_nbr[1]+k[0])%N]
      total_spin[0] -= J[k[0]][site_nbr[0]][(site_nbr[1]-k[1])%N]
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[0], -total_spin[1]])
    else:
      priorities.append([total_spin[0], total_spin[1]])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  total_spin = [[0, 0] for _ in range(N**2)]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in site_interaction:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), -total_spin[i][0]])
    else:
      priorities.append([-1*total_spin[i][0], float('-inf')])
  
  return(priorities)




#score: {'data2D.txt': 0.0009711419753086426}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    total_spin = [0, 0]
    site_nbr = (i // N, i % N)
    for k in range(4):
      if k == 0:
        total_spin[1] += J[k][site_nbr[0]][site_nbr[1]]
      elif k == 1:
        total_spin[0] += J[(k+2)%4][site_nbr[0]][(site_nbr[1]+1)%N]
      elif k == 2:
        total_spin[1] += J[k][(site_nbr[0]+1)%N][site_nbr[1]]
      else:
        total_spin[0] += J[k-2][site_nbr[0]][(site_nbr[1]-1)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-1*total_spin[0], -1*total_spin[1]])
    else:
      priorities.append([total_spin[0], total_spin[1]])
  return(priorities)




#score: {'data2D.txt': -0.00145354938271605}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += J[site_nbr*N+(i%N)//2::4].sum()
      total_spin[i][1] -= J[site_nbr*N+(i%N)//2::4].sum()
    else:
      total_spin[i][0] -= J[site_nbr*N+(i%N)//2::4].sum()
      total_spin[i][1] += J[site_nbr*N+(i%N)//2::4].sum()
  return sorted([(a, b) for a, b in total_spin], reverse=True)




#score: {'data2D.txt': 0.004232870370370371}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [(sum([J[(i + ((j-1)%N - N//2)) % N*N+(k-1)//2::4].sum() for k in range(N)]), 
      sum([-1 * J[(i + ((j-1)%N - N//2)) % N*N+(k-1)//2::4].sum() for k in range(N)]) if h[i][j] > 0 else 
      sum(J[(i + ((j-1)%N - N//2)) % N*N+(k-1)//2::4].sum() for k in range(N))) 
      for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': 0.24476342592592581}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, 1])
    else:
      priorities.append([total_spin, -1])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in [(0, 1), (1, 0), (-1, 1), (1, -1)]:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
  priorities = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[i][0]])
    else:
      priorities.append([-1*total_spin[i][0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site = (i // N, (i % N) - ((i // N + i % N) % 2) - 1)
    if h[site[0]][site[1]] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      site = (site[0], ((-1 * site[1]) + (i % N)) % N)
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N,i%N)
    for k in [(0,1),(1,0),(-1,1),(1,-1)]:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priorities = [float('-inf'),total_spin[i][0]]
    else:
      priorities = [-1*total_spin[i][0],float('-inf')]
    for j in range(2):
      total_spin[i][j] = max(min(total_spin[i][j],priorities[j]),-min(priorities[j],0))
  return [[x,y] for x,y in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_1 = sum(J[0][site_nbr[0]][(site_nbr[1] + k) % N] * state[(k+site_nbr[1])%N][site_nbr[0]] for k in range(N))
    total_spin_2 = sum(J[3 - (k+1)%4][site_nbr[0]][(site_nbr[1] - k) % N] * state[(k-site_nbr[1])%N][site_nbr[0]] for k in range(N))
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin_1 + total_spin_2])
    else:
      priorities.append([-1*(total_spin_1 + total_spin_2), float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_1 = sum(J[0][site_nbr[0]][(site_nbr[1] + k) % N] * state[(k+site_nbr[1])%N][site_nbr[0]] for k in range(N))
    total_spin_2 = sum(J[3 - (k+1)%4][site_nbr[0]][(site_nbr[1] - k) % N] * state[(k-site_nbr[1])%N][site_nbr[0]] for k in range(N))
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin_1 + total_spin_2])
    else:
      priorities.append([-1*(total_spin_1 + total_spin_2), float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.0009908950617283948}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((i-1)%N - N//2)) % N
    for j in range(N):
      state[site_nbr][j] += state[i][j]
      total_spin[(i*N+j)][0] += h[i][j]*state[i][j]
      if h[i][j] > 0:
        total_spin[(i*N+j)][1] -= state[i][j]
      else:
        total_spin[(i*N+j)][1] += state[i][j]
  priority_total = [[x[0], x[1]] for x in total_spin]
  return sorted([(a, b) for a, b in priority_total], reverse=True)




#score: {'data2D.txt': -0.0012594135802469135}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin = sum(state[site_nbr][k] for k in range(N))
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
  return [[x, y] for x, y in sorted([(a, b) for a, b in priority_total], reverse=True)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[[0,0] for _ in range(N)] for _ in range(N)]
  
  for i in range(N2):
    site = (i // N + ((i % N) - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i//N][i%N][0] += 1
      priority_total[i//N][i%N][1] -= 1
    else:
      priority_total[i//N][i%N][0] -= 1
  
  return [[x, y] for x,y in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.0013594135802469127}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[h[i][j] if i%2 == 0 else -h[i][j] for j in range(N)] for i in range(N)]
  
  priorities = []
  for i in range(N2):
    site_nbr1 = ((i//N+1)%N + (i%N-1)%2) % N
    site_nbr2 = (i//N+(i%N-1)%2) % N
    
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[site_nbr1][i%N], -total_spin[site_nbr2][i%N]])
    else:
      priorities.append([-total_spin[site_nbr1][i%N], total_spin[site_nbr2][i%N]])
  
  return [[x, y] for x,y in priorities]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.2825233024691353}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i//N + (k-1)%N) % N for k in [0,N-1,i%N]]
    total_spin = sum([h[site][i%N] for site in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, 1])
    else:
      priorities.append([total_spin, -1])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.0022912037037037037}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    if h[i//N][i%N]>0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][0]
    else:
      priority_total[i][1] = total_spin[i][0]
      priority_total[i][0] = -total_spin[i][0]
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, -1), (1, 1)]:
      j_offset, i_offset = k
      if i_offset == 0 and j_offset == 0:
        continue
      total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[0]])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[site][j][0] += 1
        priority_total[site][j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[site][j][0] -= 1
  return([[total[0], total[1]] for row in priority_total for total in row])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, -1), (-1, 1)]:
      j_offset, i_offset = k
      total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin[0], -float('inf')])
    else:
      priorities.append([total_spin[0], float('inf')])
  return(priorities)




#score: {'data2D.txt': -0.18656990740740742}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([h[k//N][k%N] * (2*state[i][j] - 1) for k in [(i+1)%N*N+j, i*N+j-1, i*N+(j+1)%N-N//2] if k < N**2]) for j in range(N)] for i in range(N)]
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+1)%N*N+j, i*N+j-1, i*N+(j+1)%N-N//2]
      if state[i][j] > 0:
        priority_total[site_nbrs[0]][0] += total_spin[i][j]
        priority_total[site_nbrs[0]][1] -= total_spin[i][j]
      else:
        priority_total[site_nbrs[0]][0] -= total_spin[i][j]
        priority_total[site_nbrs[0]][1] += total_spin[i][j]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    for k in range(3):
      site_nbr = (i // N + ((k-1)%2 - 1)) % N
      total_spin[i][0] += state[site_nbr][(i % N)]
      total_spin[i][1] -= state[site_nbr][(i % N)]
  
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    if h[i//N][i%N]>0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][0]
    else:
      priority_total[i][1] = total_spin[i][0]
      priority_total[i][0] = -total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - N//2)) % N for k in range(3)]
      
      total_spin[i*N+j][0] += sum([state[site_nbr][j] for site_nbr in site_nbrs])
      total_spin[i*N+j][1] -= sum([-state[site_nbr][j] for site_nbr in site_nbrs])
      
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    if h[i//N][i%N]>0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][0]
    else:
      priority_total[i][1] = total_spin[i][0]
      priority_total[i][0] = -total_spin[i][0]
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  spin_total = np.zeros((N2,2))
  
  for i in range(N2):
    site = (i + ((i%N)-N//2)) % N
    s1 = 0
    s2 = 0
    
    if h[i//N][i%N] > 0:
      priority_total = [s1+1, -s2-1]
    else:
      priority_total = [-s1-1, -s2+1]
    
    spin_total[i] = priority_total
  
  return spin_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site1 = (i + ((i//N)%2 - 1)) % N
    site2 = (i + ((i%N)-1) % N)
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
      
  return priorities




#score: {'data2D.txt': -0.001015895061728395}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = []
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum(state[site_nbr][i%N] if site_nbr != i else state[i//N][i%N] for site_nbr in site_nbrs)
    priority_total.append([total_spin, -total_spin])
  return sorted(priority_total, reverse=True)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N - 1) % N)) % N
    for j in range(N):
      total_spin = state[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
  return [[a, b] for a, b in sorted([(x[0], -x[1]) for x in priority_total], reverse=True)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.0003834876543209873}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  for i in range(N2):
    site = (i + ((i//N)%2 - 1)) % N
    if h[site//N][site%N] > 0:
      total_spin[i][0] += 1
    else:
      total_spin[i][1] -= 1
  
  return np.column_stack((total_spin[:, 0], -total_spin[:, 1]))




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.0009631172839506176}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N**2,2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (N-1)+(i-1)%N, (N-1)+(i+1)%N]]
      
      for site_nbr in site_nbrs:
        if h[site_nbr][0] > 0:
          total_spin[i*N+j][0] += state[site_nbr][j]
          total_spin[i*N+j][1] -= state[site_nbr][j]
        else:
          total_spin[i*N+j][0] -= state[site_nbr][j]
          total_spin[i*N+j][1] += state[site_nbr][j]

  return sorted([(a, b) for a, b in total_spin], reverse=True)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1, (j+1)%N, (i-1)%N, (i+1)%N]]
      
      for site_nbr in site_nbrs:
        if h[site_nbr][0] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1

  return sorted([(a, b) for a, b in priority_total], reverse=True)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1, (j+1)%N, (i-1+N)%N, (i+1)%N]]
      
      for site_nbr in site_nbrs:
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1

  return sorted([(a, b) for a, b in total_spin], reverse=True)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += sum(J[k,i,j] for k in range(4) if abs(k-2) == j or k == i)
        priority_total[i*N+j][1] -= sum(J[k,i,j] for k in range(4) if k != i and k != j)
      else:
        priority_total[i*N+j][0] -= sum(J[k,i,j] for k in range(4) if abs(k-2) == j or k == i)
  return priority_total




#score: {'data2D.txt': -0.0009464506172839506}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = [[0, 0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = np.sum(J[site*N:(site+1)*N].flatten())
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
  return priority_total




#score: {'data2D.txt': 0.001897993827160494}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_flat = J.reshape(-1, J.shape[-1])
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J_flat[i*N:(i+1)*N, j].sum()
        total_spin[i*N+j][1] -= J_flat[site*N:(site+1)*N, j].flatten().sum()
      else:
        total_spin[i*N+j][0] -= J_flat[site*N:(site+1)*N, j].flatten().sum()
  
  return total_spin




#score: {'data2D.txt': 0.29374521604938286}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = [0] * N**2
  magnetism_contributions = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        magnetism_contributions[i*N+j][0] += sum(J[:,i,j])
        magnetism_contributions[i*N+j][1] -= sum(J[site*N:(site+1)*N].flatten())
      else:
        magnetism_contributions[i*N+j][0] -= sum(J[site*N:(site+1)*N].flatten())
  
  return magnetism_contributions




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': 0.24476342592592581}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_interactions = []
  for i in range(N2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum([h[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      site_interactions.append([-total_spin, 1])
    else:
      site_interactions.append([total_spin, -1])
  return [list(x) for x in site_interactions]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - N//2)) % N for k in range(4)]
      
      for spin in [-1, 1]:
        total_spin = sum([state[site][j] if (site==i and jj==j) else state[site][jj] for site, jj in zip(site_nbrs, [(j-1)%N + i//N * N for _ in range(4)])])
        
        priority_total[i][j][0] = max(priority_total[i][j][0], total_spin)
        priority_total[i][j][1] = min(priority_total[i][j][1], -total_spin)
  
  return [[x[0], x[1]] for x in (priority_total[i][j] for i in range(N) for j in range(N))]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum3 = (-np.prod(J_new[2::4], 0)).flatten()
  sum4 = (-np.prod(J_new[3::4], 0)).flatten()
  
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.001532561728395062}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        total_spin[i*N+j][1] -= J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      else:
        total_spin[i*N+j][0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        total_spin[i*N+j][1] += J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001532561728395062}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        total_spin[i*N+j][1] -= J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
      else:
        total_spin[i*N+j][0] -= J[(i+N2*j):(i+1), ((i+1)%N + (j-1)%2) % N, :].sum()
        total_spin[i*N+j][1] += J[(i+N2*j):(i+1), (i+(j-1)%2) % N, :].sum()
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    priority_spin = [0,0]
    if h[site_nbr][i%N] > 0:
      priority_spin[0] += state[site_nbr].count(1)
      priority_spin[1] -= state[site_nbr].count(-1)
    else:
      priority_spin[0] -= state[site_nbr].count(1)
      priority_spin[1] += state[site_nbr].count(-1)
    priorities.append(priority_spin)
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
    else:
      total_spin[i][1] -= 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        
  return total_spin.tolist()




#score: {'data2D.txt': -0.33500632716049283}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i*N+j][0] += total_spin[site*N+j][1]
      else:
        total_spin[i*N+j][1] -= total_spin[site*N+j][0]
  
  return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]

  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]

  for i in range(N):
    for j in range(N):
      site_spin = 1 if h[i][j] > 0 else -1
      total_spin[i*N+j][0] += site_spin
      total_spin[i*N+j][1] -= site_spin

  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1

      total_spin[site][spin==1] += 1

  for i in range(N**2):
    if h[i//N][i%N]>0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][0]
    else:
      priority_total[i][1] = total_spin[i][0]
      priority_total[i][0] = -total_spin[i][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19647793209876557}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum(1 if h[i][j] > 0 else -1 for j in range(N)) for i in range(N)]
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]

  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i]
        priority_total[i*N+j][1] = -total_spin[i]
      else:
        priority_total[i*N+j][1] = total_spin[i]
        priority_total[i*N+j][0] = -total_spin[i]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001261574074074074}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      spin = 1 if h[i][j] > 0 else -1
      total_spin[site][spin==1] += 1
  
  priority_total = []
  
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(3)]
    
    if any(state[i//N][j] == spin for j,spin in zip(site_nbrs,[state[site//N][site%N] for site in site_nbrs])):
      priority_total.append([-total_spin[i][0], total_spin[i][0]])
    else:
      priority_total.append([total_spin[i][0], -total_spin[i][0]])
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.33038040123456697}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        site_priority[site_nbr*N+int((j-1)//N)][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        site_priority[site_nbr*N+int((j-1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': 0.33038040123456697}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] += 1
        site_priority[site_nbr*N+int((j-1)//N)][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        site_nbr = (site + ((site//N - 1) % N - 1)) % N
        site_priority[i*N+j][0] -= 1
        site_priority[site_nbr*N+int((j-1)//N)][1] += 1

  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': 0.17529429012345704}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i//N + (k-1)%N) % N for k in [0,N-1,i%N]]
    total_spin = sum([state[site][i%N] for site in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, 1])
    else:
      priorities.append([total_spin, -1])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': 0.2825233024691353}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i//N + (k-1)%N) % N for k in [0,N-1,i%N]]
    total_spin = sum([h[site][i%N] for site in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, 1])
    else:
      priorities.append([total_spin, -1])
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.01636064814814815}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[site_nbr][0] += 1
        total_spin[site_nbr][1] -= 1
      else:
        total_spin[site_nbr][0] -= 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site][0] += 1
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += total_spin[site][0]

  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - 1)) % N for k in range(3)]
      for k in site_nbrs:
        if h[k][j] > 0:
          priority_total[i][j][0] += 1
          priority_total[i][j][1] -= 1
        else:
          priority_total[i][j][0] -= 1
          priority_total[i][j][1] += 1
  
  return [[x[0], x[1]] for x in [y for sublist in priority_total for y in sublist]]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - 1)) % N for k in range(3)]
      for k in site_nbrs:
        total_spin[i*N+j][0] += h[k%N][j%N]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][1] -= 1
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -total_spin[j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001261574074074074}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      spin = 1 if h[i][j] > 0 else -1
      total_spin[site][spin==1] += 1
      
  priority_total = []
  
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(3)]
    
    if any(state[i//N][j] == spin for j,spin in zip(site_nbrs,[state[site//N][site%N] for site in site_nbrs])):
      priority_total.append([-total_spin[i][0], total_spin[i][0]])
    else:
      priority_total.append([total_spin[i][0], -total_spin[i][0]])
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(3)]
      if all(state[i//N][j] == state[site//N][(site%N)] for site in site_nbrs):
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[-total_spin[i][0], total_spin[i][0]] for i in range(N**2)]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbrs = [(i // N + ((k-1) % N - N//2)) % N for k in range(3)]
    
    if any(state[i//N][j] == 1-spin for j,spin in zip(site_nbrs,[state[site//N][site%N] for site in site_nbrs])):
      total_spin[i][0] += sum(h[i//N][j] for j in site_nbrs)
      total_spin[i][1] -= sum(h[i//N][j] for j in site_nbrs)
    else:
      total_spin[i][0] += -sum(h[i//N][j] for j in site_nbrs)
      total_spin[i][1] -= -sum(h[i//N][j] for j in site_nbrs)
  
  priority_total = [[total_spin[i][0], total_spin[i][1]] for i in range(N**2)]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0009121913580246914}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin0 = 0
    total_spin1 = 0
    for k in [(1, -1), (-1, 1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin0 += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
        total_spin1 -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin0 -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
        total_spin1 += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    site = (site_nbr[0] + ((site_nbr[1]-1)%2 - 1)) % N
    if h[site_nbr[0]][site_nbr[1]] > 0:
      priority_total[i][0] = total_spin0
      priority_total[i][1] = -total_spin1
    else:
      priority_total[i][0] = -total_spin0
      priority_total[i][1] = total_spin1
  return(priority_total)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin0 = [0, 0]
    total_spin1 = [0, 0]
    for k in [(1, -1), (-1, 1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+i_offset)%N] > 0:
        total_spin0[0] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
        total_spin1[0] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin0[0] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
        total_spin1[0] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      if h[(site_nbr[0]+i_offset)%N][site_nbr[1]] > 0:
        total_spin0[1] += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
        total_spin1[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin0[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
        total_spin1[1] += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
    site = (site_nbr[0] + ((site_nbr[1]-1)%2 - 1)) % N
    if h[site_nbr[0]][site_nbr[1]] > 0:
      priority_total[i][0] = total_spin0[1]
    else:
      priority_total[i][1] = total_spin1[0]
  return(priority_total)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(1, -1), (-1, 1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+j_offset)%N] > 0:
        total_spin[0] += J[j_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin[0] -= J[j_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      if h[(site_nbr[0]+i_offset)%N][site_nbr[1]] > 0:
        total_spin[1] += J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[site_nbr[0]][site_nbr[1]] > 0:
      priority_total[i][0] = -total_spin[0]
    else:
      priority_total[i][1] = total_spin[1]
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site = (i // N, i % N)
    site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
    total_spin = [0, 0]
    for k in site_interaction:
      j_offset, i_offset = k
      total_spin[0] += J[j_offset][site[0]][(site[1]+i_offset)%N]
      total_spin[1] -= J[i_offset][site[0]][(site[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[0]])
    else:
      priorities.append([-1*total_spin[0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[site*N+j][0] -= 1
        priority_total[site*N+j][1] += 1
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  total_spin = [[0, 0] for _ in range(N**2)]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in site_interaction:
      j_offset, i_offset = k
      total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin[i][1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin[i][0]])
    else:
      priorities.append([-1*total_spin[i][0], float('-inf')])
  return(priorities)




#score: {'data2D.txt': -0.04845447530864198}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin = state[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
        priority_total[i*N+j][1] = -total_spin
      else:
        priority_total[i*N+j][0] = -total_spin
        priority_total[i*N+j][1] = total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0026791666666666665}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_map = {(i + ((j-1)%N - N//2)) % N: i*N+j for i in range(N) for j in range(N)}
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[site_map[(i + ((j-1)%N - N//2)) % N]][0] += 1
        total_spin[site_map[(i + ((j-1)%N - N//2)) % N]][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[site_map[site_nbr]][0] -= 1
        total_spin[site_map[site_nbr]][1] += 1
  return [[total_spin[i][0], total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - N//2)) % N for k in range(4)]
      
      for spin in [-1, 1]:
        total_spin = sum([state[site][j] if (site==i and jj==j) else state[site][jj] for site, jj in zip(site_nbrs, [(j-1)%N + i//N * N for _ in range(4)])])
        
        priority_total[i][j][0] = max(priority_total[i][j][0], total_spin)
        priority_total[i][j][1] = min(priority_total[i][j][1], -total_spin)
  
  return [[x[0], x[1]] for x in (priority_total[i][j] for i in range(N) for j in range(N))]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - 1)) % N for k in range(3)]
      
      if h[i][j] > 0:
        priority_total[i][j][0] += sum([state[site][j] for site in site_nbrs])
        priority_total[i][j][1] -= sum([-state[site][j] for site in site_nbrs])
      else:
        priority_total[i][j][0] -= sum([state[site][j] for site in site_nbrs])
        priority_total[i][j][1] += sum([-state[site][j] for site in site_nbrs])
      
  return [[x[0], x[1]] for x in (priority_total[i][j] for i in range(N) for j in range(N))]




#score: {'data2D.txt': 0.33019861111111015}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        site_priority[i*N+j][0] += 1
        site_priority[site_nbr*N+int((j+1)//N)][1] -= 1
      else:
        site_priority[i*N+j][0] -= 1
        site_priority[site_nbr*N+int((j+1)//N)][1] += 1
  return [[-x[1], x[0]] for x in site_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  total_spin = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    site = (i + ((i//N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    
    for k in site_interaction:
      j_offset, i_offset = k
      if h[(site_nbr[0]+i_offset)%N][(site_nbr[1]-j_offset)%N] > 0:
        total_spin[i][0] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[i][0] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    
    priorities.append(total_spin[i])
  return(priorities)




#score: {'data2D.txt': 0.005821759259259258}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin = [0, 0]
    for k in [(0, 1), (1, 0), (-1, 1), (0, -1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+j_offset)%N] > 0:
        total_spin[0] += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin[0] -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      if h[(site_nbr[0]+i_offset)%N][site_nbr[1]] > 0:
        total_spin[1] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[1] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if state[i//N][i%N] > 0:
      priorities.append([-total_spin[0], -total_spin[1]])
    else:
      priorities.append([total_spin[0], total_spin[1]])
  return(priorities)




#score: {'data2D.txt': 0.005821759259259258}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in [(0, 1), (1, 0), (-1, 1), (0, -1)]:
      j_offset, i_offset = k
      if h[site_nbr[0]][(site_nbr[1]+j_offset)%N] > 0:
        total_spin[i][0] += J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      else:
        total_spin[i][0] -= J[i_offset][site_nbr[0]][(site_nbr[1]-i_offset)%N]
      if h[(site_nbr[0]+i_offset)%N][site_nbr[1]] > 0:
        total_spin[i][1] += J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      else:
        total_spin[i][1] -= J[j_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
    if state[i//N][i%N] > 0:
      priorities.append([-total_spin[i][0], -total_spin[i][1]])
    else:
      priorities.append([total_spin[i][0], total_spin[i][1]])
  return(priorities)




#score: {'data2D.txt': 0.0002631172839506174}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[0,0] for _ in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if (i+1)%N != 0:
        site_nbrs.append((i+1)%N*N + j)
      if i != 0:
        site_nbrs.append(i*N+j-1)
      if (j+1)%N != 0:
        site_nbrs.append(i*N+(j+1)%N - N//2)
      for k in site_nbrs:
        total_spin[i*N+j][0] += h[k//N][k%N]
        if state[i][j] == state[k//N][k%N]:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2)) + np.column_stack((-sum3, sum4))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  site_nbrs = []
  for i in range(N):
    for j in range(N):
      if (i+1)%N != 0: site_nbrs.append((i+1)%N*N + j)
      if i != 0: site_nbrs.append(i*N+j-1)
      if (j+1)%N != 0: site_nbrs.append(i*N+(j+1)%N - N//2)
      for k in site_nbrs:
        total_spin = h[k//N][k%N]
        if state[i][j] == state[k//N][k%N]:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j - 1) % 2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        site = (i + ((j - 1) % N - N // 2)) % N
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site = (i % N) + ((i//N)%2 - 1) % N
    
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_flat = J.flatten()
  total_spin = np.zeros((N2, 2))
  
  for i in range(N2):
    site = (i // N) % 2
    if h[i//N][i%N] > 0:
      site = (site + ((i%N-1)%2 - 1)) % N
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      site = (site + ((i%N-1)%2 - 1)) % N
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      for k in site_interaction:
        j_offset, i_offset = k
        if j == N-1 and j_offset < 0 or j == 0 and j_offset > 0:
          continue
        if i == N-1 and i_offset < 0 or i == 0 and i_offset > 0:
          continue
        priority_total[i*N+j][0] += J[j_offset][i][site_nbr]
        priority_total[i*N+j][1] -= J[i_offset][i][site_nbr]
  return priority_total




#score: {'data2D.txt': -0.008998611111111093}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  priorities = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  total_spin = [0, 0]
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    for k in site_interaction:
      j_offset, i_offset = k
      if site_nbr[1] == 0 and j_offset < 0 or site_nbr[1] == N-1 and j_offset > 0:
        continue
      if site_nbr[0] == 0 and i_offset < 0 or site_nbr[0] == N-1 and i_offset > 0:
        continue
      total_spin[0] += J[k[1]][site_nbr[0]][(site_nbr[1]+k[0])%N]
      total_spin[1] -= J[k[0]][site_nbr[0]][(site_nbr[1]-k[1])%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] = -total_spin[0]
      priorities[i][1] = -total_spin[1]
    else:
      priorities[i][0] = total_spin[0]
      priorities[i][1] = total_spin[1]
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  site_interaction = [(0, 1), (1, 0), (-1, 1), (1, -1)]
  
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_1 = [0, 0]
    total_spin_2 = [0, 0]
    
    for k in site_interaction:
      j_offset, i_offset = k
      total_spin_1[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset)%N]
      total_spin_1[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset)%N]
      
      total_spin_2[0] += J[j_offset][site_nbr[0]][(site_nbr[1]+i_offset-1)%N]
      total_spin_2[1] -= J[i_offset][site_nbr[0]][(site_nbr[1]-j_offset+1)%N]
    
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), -total_spin_1[0]])
    else:
      priorities.append([-1*total_spin_1[0], float('-inf')])
  
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_1 = sum(J[0][site_nbr[0]][(site_nbr[1] + k) % N] * state[(k+site_nbr[1])%N][site_nbr[0]] for k in range(N))
    total_spin_2 = sum(J[3 - (k+1)%4][site_nbr[0]][(site_nbr[1] - k) % N] * state[(k-site_nbr[1])%N][site_nbr[0]] for k in range(N))
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin_1 + total_spin_2])
    else:
      priorities.append([-1*(total_spin_1 + total_spin_2), float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  
  for i in range(N**2):
    site_nbr = (i // N, i % N)
    total_spin_1 = sum(J[0][site_nbr[0]][(site_nbr[1] + k) % N] * state[(k+site_nbr[1])%N][site_nbr[0]] for k in range(N))
    total_spin_2 = sum(J[3 - (k+1)%4][site_nbr[0]][(site_nbr[1] - k) % N] * state[(k-site_nbr[1])%N][site_nbr[0]] for k in range(N))
    
    if h[i//N][i%N] > 0:
      priorities.append([float('-inf'), total_spin_1 + total_spin_2])
    else:
      priorities.append([-1*(total_spin_1 + total_spin_2), float('-inf')])
  return(priorities)




#score: {'data2D.txt': 0.3341745370370361}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1) % N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int(j/N)][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+int(j/N)][1] += 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': 0.19079398148148174}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+(j%N)][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+(j%N)][1] += 1
  
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+(j%N)][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+(j%N)][1] += 1
  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[site_nbr*N+int(i%N/N)][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[site_nbr*N+int(i%N/N)][1] += 1
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[site_nbr*N+int(i%N/N)][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[site_nbr*N+int(i%N/N)][0] -= 1
      priority_total[i][1] += 1
  
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.31534274691357944}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i//N + (k-1)%N) % N for k in [0,N-1,i%N]]
    if h[i//N][i%N] > 0:
      total_spin[i][0] += sum([state[site][i%N] for site in site_nbrs])
      total_spin[i][1] -= len(site_nbrs)
    else:
      total_spin[i][0] += -sum([state[site][i%N] for site in site_nbrs])
      total_spin[i][1] += len(site_nbrs)

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((2, N2))
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = ((i+1)%N + (j-1)%2) % N
      site_nbr2 = (i+(j-1)%2) % N
      
      if h[i][j] > 0:
        total_spin[0, i*N+j] += 1
        total_spin[1, i*N+j] -= 1
      else:
        total_spin[0, i*N+j] -= 1
        total_spin[1, i*N+j] += 1
      
  priorities = []
  
  for i in range(N2):
    if h[i//N][i%N] > 0:
      priorities.append([total_spin[0, i], -total_spin[1, i]])
    else:
      priorities.append([-total_spin[0, i], total_spin[1, i]])
  
  return [[x[0], x[1]] for x in priorities]




