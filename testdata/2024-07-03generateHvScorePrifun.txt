#score: {'data2D.txt': -0.27106867283950575}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for sublist in priority_total for x in sublist]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(N):
    site_nbr = (k + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[k][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = state[i][j]*h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return [[x, y] for x,y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N,N,2))
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i//N][i%N][0]
      priority_total[i][1] -= total_spin[i//N][i%N][1]
    else:
      priority_total[i][0] -= total_spin[i//N][i%N][0]
      priority_total[i][1] += total_spin[i//N][i%N][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[float('-inf'), float('-inf')] for _ in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N)
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf'),float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N**2):
    if total_spin[i][0] > 0:
      priority_total[i][0] = -priority_total[i][1]
    elif total_spin[i][0] < 0:
      priority_total[i][1] = -priority_total[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin = [0,0]
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
      priority_total[i*N+j] = total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[float('-inf'),float('-inf')] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][site_nbr] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for x in itertools.chain(*priority_total)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i//N][i%N]]]




#score: {'data2D.txt': -0.010806327160493826}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j] += [1, -1]
      else:
        total_spin[i*N+j] += [-1, 1]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  for i in range(N):
    for k in range(3):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N2)]
  for i in range(N2):
    if total_spin[i][0] > total_spin[i][1]:
      priority_total[i] = [total_spin[i][0], 0]
    elif total_spin[i][0] < total_spin[i][1]:
      priority_total[i] = [total_spin[i][1], 1]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      site_nbr = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        for k in range(3):
          site_nbr[i][k%2] += h[(i//N + ((k-1)%2 - 1)) % N][i%N]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        if h[i//N][i%N] > 0:
          priority_total[i][0] = total_spin[i][0]
        else:
          priority_total[i][1] = -1*total_spin[i][0]
      return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i%N]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0, 0] for _ in range(N**2)]
        total_spin = [[0, 0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            total_spin[i][0 if h[site_nbr][i%N] > 0 else 1] += 1
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                spin = -1 if h[i][j] > 0 else 1
                total_spin[site][spin==1] += 1
        for i in range(N**2):
            priority_total[i] = [total_spin[i][1], -total_spin[i][0]]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N)-1)%N) % N
            total_spin[i][0] += h[site_nbr][i%N]
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -total_spin[i][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0014097222222222221}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        
        for i in range(N**2):
            site_nbr = (i // N + ((i%N-1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i%N]
            total_spin[i][1] += -1*h[site_nbr][i%N]
        
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[j][0]
                else:
                    priority_total[j][1] = -1*total_spin[j][0]
                    
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        site_nbrs = []
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][h[i][j]>0] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[int(i/N)][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [[x[0], x[1]] for x in priority_total]









#score: {'data2D.txt': -0.010386882716049383}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i%N]
        if sum([sum(row) for row in total_spin]) > 0:
            priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
            for i in range(N):
                for j in range(N):
                    site = (i + ((j-1)%N - N//2)) % N
                    if h[i][j] > 0:
                        priority_total[i*N+j][0] += 1
                        priority_total[i*N+j][1] -= 1
                    else:
                        priority_total[i*N+j][0] -= 1
            return [[x[0], x[1]] for x in priority_total]
        else:
            return [[-1,0] for _ in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += 1
                    priority_total[i*N+j][1] -= 1
                else:
                    priority_total[i*N+j][0] -= 1
                    
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    site = (i + ((j-1)%N - N//2)) % N
                    priority_total[i][j][0] += 1
                    priority_total[i][j][1] -= 1
                else:
                    site = (i + ((j-1)%N - N//2)) % N
                    priority_total[i][j][0] -= 1
        return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
        
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    priority_total[site_nbr][j][0] += 1
                    priority_total[site_nbr][j][1] -= 1
                else:
                    priority_total[site_nbr][j][0] -= 1
        return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [priority_total[i][j]]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i + ((i%N)//2 - N//2)) % N
        if h[i//N][site_nbr] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
      for i in range(N):
          for j in range(N):
              site_nbr = (i + ((j-1)%2 - 1)) % N
              if h[i][j] > 0:
                  priority_total[i*N+j][0] += 1
                  priority_total[i*N+j][1] -= 1
              else:
                  priority_total[i*N+j][0] -= 1
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
        
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                if h[site_nbr][j] > 0:
                    priority_total[i][j][0] += 1
                    priority_total[i][j][1] -= 1
                else:
                    priority_total[i][j][0] -= 1
                    
        return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
      for i in range(N):
        for j in range(N):
          site_nbr = (i + ((j-1)%2 - 1)) % N
          total_spin = h[site_nbr][j]
          if h[i][j] > 0:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
          else:
            priority_total[i*N+j][0] -= 1
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      N2 = N*N
      total_spin = [[0. for _ in range(2)] for _ in range(N2)]
      priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
      for i in range(N):
          for j in range(N):
              site_nbr = (i + ((j-1)%N - N//2)) % N
              total_spin[i*N+j][0] += h[site_nbr][j]
              if h[i][j] > 0:
                  priority_total[i*N+j][0] += 1
                  priority_total[i*N+j][1] -= 1
              else:
                  priority_total[i*N+j][0] -= 1
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.007843981481481481}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N2)]
    for i in range(N2):
        site_nbr = (i//N + ((i%N)-1)%N) % N
        total_spin = [0, 0]
        for k in range(3):
            if h[site_nbr][i%N] > 0:
                total_spin[1] -= 1
            else:
                total_spin[0] += 1
        priority_total[i][0] = total_spin[0]
        priority_total[i][1] = -total_spin[1]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
      for i in range(N):
        for j in range(N):
          site_nbr = (i + ((j-1)%2 - 1)) % N
          total_spin = h[site_nbr][j]
          if h[i][j] > 0:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
          else:
            priority_total[i*N+j][0] -= 1
          for k in range(3):
            site_nbr = (i + ((k-1)%2 - 1)) % N
            total_spin += h[site_nbr][j]
          if h[i][j] > 0:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
          else:
            priority_total[i*N+j][0] -= 1
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin = 0
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          total_spin += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for sublist in priority_total for x in sublist]




#score: {'data2D.txt': -0.007741820987654322}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      site_nbr = []
      for i in range(N):
        for j in range(N):
          site = (i + ((j-1)%N - 1)) % N
          spin = -1 if h[i][j] > 0 else 1
          total_spin[i*N+j][spin==1] += 1
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N):
        for j in range(N):
          site_nbr = (i + ((j-1)%2 - 1)) % N
          total_spin[i*N+j] += h[site_nbr][j]
      for j in range(N):
        if h[j][0] > 0:
          priority_total[j][0] = total_spin[j][0]
        else:
          priority_total[j][1] = -1*total_spin[j][0]
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
          site_nbr = (i // N + ((i % N - 1)%N) - 1) % N
          total_spin[i][0] += h[site_nbr][i%N]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N):
          for j in range(N):
              if h[i][j] > 0:
                  priority_total[i*N+j][0] = total_spin[i*N+j][0]
              else:
                  priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site_nbr][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 0))
                else:
                    priorities.append((-1*total_spin, 1))
        return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][0] += h[site_nbr][i%N]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        if h[i//N][i%N] > 0:
          priority_total[i][0] = total_spin[i][0]
        else:
          priority_total[i][1] = -1*total_spin[i][0]
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        for j in range(N):
          total_spin = 0
          site_nbr = (i + ((j-1)%2 - 1)) % N
          total_spin += h[site_nbr][j]
          if h[i][j] > 0:
            priority_total = [total_spin, 0]
          else:
            priority_total = [-1*total_spin, 1]
          priorities.append(priority_total)
      return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        for j in range(N):
          total_spin = 0
          site_nbr = (i + ((j-1)%2 - 1)) % N
          total_spin += h[site_nbr][j]
          if h[i][j] > 0:
            priorities.append([total_spin, 0])
          else:
            priorities.append([-1*total_spin, 1])
      return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N**2)]
        site_nbr = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                spin = -1 if h[i][j] > 0 else 1
                total_spin[i*N+j][spin==1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j] += h[site_nbr][j]
        for i in range(N**2):
            if h[int(i/N)][i%N] > 0:
                priority_total[i] = [total_spin[i][0], 0]
            else:
                priority_total[i] = [-1*total_spin[i][0], 1]
        return priority_total




#score: {'data2D.txt': -0.0009399691358024688}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N**2)]
        site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
        
        for k in range(3):
            for i in range(N**2):
                total_spin[i][0] += h[site_nbrs[i]][int(i/N)]
        
        priority_total = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                spin = -1 if h[i][j] > 0 else 1
                total_spin[site][spin==1] += 1
        
        for i in range(N**2):
            if h[int(i/N)][int(i%N)] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        
        return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
            total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
        priority_total = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[j*N+i][0] = total_spin[j*N+i][0]
                else:
                    priority_total[j*N+i][1] = -1*total_spin[j*N+i][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
          site_nbr = (i // N + ((i % N-1)%N - 1)) % N
          total_spin[i][1 if h[site_nbr][i%N] > 0 else 0] += 1
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - 1)) % N
              if h[i][j] > 0:
                  priority_total[i*N+j][0] = total_spin[site][0]
              else:
                  priority_total[i*N+j][1] = -1*total_spin[site][0]
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                spin = -1 if h[i][j] > 0 else 1
                total_spin[i*N+j][spin==1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for k in range(3):
            site_nbr = (i + ((k-1)%2 - 1)) % N
            total_spin[i*N+j] += h[site_nbr][j]
        return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        total_spin[i][0] += h[site_nbr][i % N]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N):
        for j in range(N):
          if h[i][j] > 0:
            priority_total[i*N+j][0] = total_spin[i*N+j][0]
          else:
            priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][h[i][j]>0] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N]>0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0 if h[site_nbr][j] > 0 else 1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[site][0]
                else:
                    priority_total[j][1] = -1*total_spin[site][0]
        return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
    sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
    priority = np.column_stack((sum_1, -sum_2))
    return(priority)




#score: {'data2D.txt': 0.0032081790123456785}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1)%N - 1)) % N
        total_spin[i][0 if h[i//N][i%N] > 0 else 1] += 1
      for j in range(N):
        for i in range(N):
          site_nbr = (i + ((j-1)%2 - 1)) % N
          priority_total[j*N+i][0 if h[i][j] > 0 else 1] = total_spin[site_nbr*N+j][0 if h[site_nbr//N][site_nbr%N] > 0 else 1]
      return [[x[0], 1-x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i % N + (i//N-1)%2 - 1) % N
            total_spin[i][1 if h[site_nbr//N][site_nbr%N] > 0 else 0] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                spin = -1 if h[i][j] > 0 else 1
                total_spin[site][spin==1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j] += h[site_nbr][j]
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][1] += h[site_nbr][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            total_spin[i][h[i//N][i%N] > 0] += 1
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.15269768518518537}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      priority_total = [[0,0] for _ in range(N**2)]
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
          site_nbr = (i//N + ((i%N-1)%N - 1)) % N
          total_spin[i][h[i//N][i%N]>0] += h[site_nbr][i%N]
      for j in range(N**2):
          if h[j//N][j%N] > 0:
              priority_total[j][0] = total_spin[j][0]
          else:
              priority_total[j][1] = -1*total_spin[j][0]
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    site_nbr = [[-1 if i == (j+((i-1)%N - 1))%N else 0 for j in range(N)] for i in range(N)]
    for i in range(N):
      for j in range(N):
        spin = -1 if h[i][j] > 0 else 1
        total_spin[i*N+j][spin==1] += 1
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
      if site_nbr[i//N][i%N]:
        priority_total[i][0] = total_spin[i][0]
      else:
        priority_total[i][1] = -1*total_spin[i][0]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      priority_total = [[0,0] for _ in range(N**2)]
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N):
        for j in range(N):
          site_nbr = (i + ((j-1)%N - 1)) % N
          total_spin[i*N+j][1 if h[site_nbr][j] > 0 else 0] += 1
      for j in range(N):
        if h[0][j] > 0:
          priority_total[j][0] = total_spin[j][0]
        else:
          priority_total[j][1] = -1*total_spin[j][0]
      return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                spin = -1 if h[i][j] > 0 else 1
                total_spin[site][spin==1] += 1
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0 if h[site_nbr][j]>0 else 1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site = (i//N + ((i%N-1)%N - 1)) % N
            if h[i//N][i%N]>0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.007741820987654322}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][h[i][j]>0] += h[site_nbr][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[j][0]
                else:
                    priority_total[j][1] = -1*total_spin[j][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += h[site_nbr][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0014097222222222221}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N - 1)%N) - 1) % N
            total_spin[i][0] += h[site_nbr][i%N]
        priority_total = [[0,0] for _ in range(N**2)]
        for j in range(N):
            if h[j//N][j]%2 > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]
        return priority_total




#score: {'data2D.txt': -0.17972824074074076}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        site_nbr = [ [(i + ((j-1)%N - 1)) % N for j in range(N)] for i in range(N) ]
        
        for k in range(3):
            for i in range(N):
                for j in range(N):
                    total_spin[i*N+j][0] += h[site_nbr[i][k]][j]
                    
        priority_total = [[0,0] for _ in range(N**2)]
        
        for i in range(N**2):
            if h[i//N][i%N]>0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
                
        return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - 1)) % N
                total_spin = -1 if h[i][j] > 0 else 1
                total_spin += h[site_nbr][j]
                priority_total[i*N+j] = [total_spin, -1*total_spin]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i//N + ((i%N-1)%N - 1)) % N
        total_spin[i][0] += h[site_nbr][i%N]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        if h[i//N][i%N] > 0:
          priority_total[i][0] = total_spin[i][0]
        else:
          priority_total[i][1] = -1*total_spin[i][0]
      return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            total_spin[i][1 if h[site_nbr][i%N] > 0 else 0] += 1
        for j in range(N):
            priority_total[j][0] = total_spin[j][0]
            priority_total[j][1] = -1*total_spin[j][0]
        return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i//N + ((i%N)-1)%N) % N
        total_spin[i][0] += h[site_nbr][i%N]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        if h[i//N][i%N] > 0:
          priority_total[i][0] = total_spin[i][0]
        else:
          priority_total[i][1] = -1*total_spin[i][0]
      return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i//N + ((i%N-1)%N - 1)) % N
            total_spin = h[site_nbr][i%N]
            if h[i//N][i%N] > 0:
                priority_total[i][0] += total_spin
            else:
                priority_total[i][1] = -1*total_spin
        return priority_total




#score: {'data2D.txt': -0.000984413580246913}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i//N + ((i%N-1)%N - 1)) % N
        total_spin[i][0 if h[site_nbr][i%N] > 0 else 1] += 1
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            spin = -1 if h[i][j] > 0 else 1
            total_spin[site][spin==1] += 1
            priority_total[site][0 if total_spin[site][0] >= total_spin[site][1] else 1] += 1
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0, 0] for _ in range(N**2)]
      for i in range(N**2):
          site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
          total_spin[i][1 if h[site_nbr][i % N] > 0 else 0] += 1
      priority_total = [[0, 0] for _ in range(N**2)]
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - 1)) % N
              if h[i][j] > 0:
                  priority_total[j*N+i][0] = total_spin[site][0]
              else:
                  priority_total[j*N+i][1] = -1*total_spin[site][0]
      return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += h[site_nbr][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N - 1)%N) % N)
            total_spin[i][0 if h[site_nbr//N][site_nbr%N] > 0 else 1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N - 1)%N) % N)
            if h[site_nbr//N][site_nbr%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i//N + ((i%N)-1)%N) % N
            total_spin[i][0] += h[site_nbr][i%N]
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                if h[site_nbr][j] > 0:
                    state = 1
                else:
                    state = -1
                total_spin[i*N+j][state] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][1]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [x for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        site_nbr = [[0]*N for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site_nbr[i][j] = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] += h[site_nbr[i][j]][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[int(i/N)][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += h[site_nbr][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i//N + ((i%N-1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i%N]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.004754783950617283}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
            total_spin[i][0] += h[site_nbr][i//N]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    site_nbr = (i + ((j-1)%2 - 1)) % N
                    priority_total[i*N+j][0] += 1
                    priority_total[i*N+j][1] -= 1
                else:
                    site_nbr = (i + ((j-1)%2 - 1)) % N
                    priority_total[i*N+j][0] -= 1
        return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      priority_total = [[0,0] for _ in range(N**2)]
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1)%N - 1)) % N
        total_spin[i][1 if h[site_nbr//N][site_nbr%N]>0 else 0] += 1
      for j in range(N):
        priority_total[j][0] = total_spin[j][0]
        priority_total[j][1] = -1*total_spin[j][0]
      return [[x, y] for x,y in priority_total]




#score: {'data2D.txt': 0.0001279320987654317}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N - 1)%N) // N - 1) % N
            total_spin[i][0] += h[site_nbr][i % N]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -total_spin[i][0]
        return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.15429645061728445}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      site_nbrs = []
      for k in range(3):
        for i in range(N):
          for j in range(N):
            site_nbr = (i + ((k-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        if h[i//N][i%N] > 0:
          priority_total[i] = [total_spin[i][0], 0]
        else:
          priority_total[i] = [-1*total_spin[i][0], 1]
      return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += h[site_nbr][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return priority_total



















#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
        
        for i in range(N**2):
            site_nbr = (i // N + ((i % N) - 1) % N)
            if h[i//N][i%N] > 0:
                priority_total[i][0] += 1
                priority_total[i][1] -= 1
            else:
                priority_total[i][0] -= 1
        
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
      for i in range(N):
        for j in range(N):
          site_nbr = (i + ((j-1)%2 - 1)) % N
          if h[i][j] > 0:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
          else:
            priority_total[i*N+j][0] -= 1
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      total_spin = [[0, 0] for _ in range(N**2)]
      priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
      for i in range(N):
          for j in range(N):
              site_nbr = (i + ((j-1)%2 - 1)) % N
              total_spin[i*N+j][0] += h[site_nbr][j]
              if h[i][j] > 0:
                  priority_total[i*N+j][0] += 1
                  priority_total[i*N+j][1] -= 1
              else:
                  priority_total[i*N+j][0] -= 1
      for i in range(N**2):
          if total_spin[i][0] > 0:
              priority_total[i][0] = float('-inf')
          elif total_spin[i][0] < 0:
              priority_total[i][1] = float('inf')
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        priority_total = [[[float('-inf'),float('-inf')] for _ in range(2)] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += h[site_nbr][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0][0] -= 1
                    priority_total[i*N+j][0][1] += 1
                else:
                    priority_total[i*N+j][0][0] += 1
                    priority_total[i*N+j][0][1] -= 1
        
        return [[x[0][0],x[0][1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site_nbr][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += 1
                    priority_total[i*N+j][1] -= 1
                else:
                    priority_total[i*N+j][0] -= 1
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    priority_total[i][j][0] += 1
                    priority_total[i][j][1] -= 1
                else:
                    priority_total[i][j][0] -= 1
        return [[x[0], x[1]] for x in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
      for i in range(N):
        for j in range(N):
          site_nbr = (i + ((j-1)%2 - 1)) % N
          if h[i][j] > 0:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
          else:
            priority_total[i*N+j][0] -= 1
      for i in range(N**2):
        min_val = min(priority_total[i])
        if min_val == float('-inf'):
          continue
        index = [k for k, v in enumerate(priority_total[i]) if v == min_val].index(min_val)
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin = 0
                for k in range(3):
                    site_nbr = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site_nbr][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += 1
                    priority_total[i*N+j][1] -= 1
                else:
                    priority_total[i*N+j][0] -= 1
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += 1
                    priority_total[i*N+j][1] -= 1
                else:
                    priority_total[i*N+j][0] -= 1
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += 1
                    priority_total[i*N+j][1] -= 1
                else:
                    priority_total[i*N+j][0] -= 1
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin = [0, 0]
            if h[i][j] > 0:
                total_spin[0] += 1
                total_spin[1] -= 1
            else:
                total_spin[0] -= 1
                total_spin[1] += 1
            for k in range(3):
                site_nbr = (i + ((k-1)%2 - 1)) % N
                total_spin[0] += h[site_nbr][j]
            priority_total[i*N+j] = [total_spin[0], -total_spin[1]]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][1] += 1
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[site_nbr][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
      for i in range(N):
        for j in range(N):
          site_nbr = (i + ((j-1)%2 - 1)) % N
          if h[i][j] > 0:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
          else:
            priority_total[i*N+j][0] -= 1
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i//N + ((i%N-1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i%N]
        
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009940277777777779}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                spin = -1 if h[i][j] > 0 else 1
                total_spin[i*N+j][spin==1] += 1
        for i in range(N**2):
            for k in range(3):
                site_nbr = (i // N + ((k-1)%2 - 1)) % N
                total_spin[i] += h[site_nbr][i % N]
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]
        return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i % N + (i//N - 1)%N) % N
            total_spin[i][0 if h[site_nbr][i%N] > 0 else 1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i % N + (i//N - 1)%N) % N
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009727623456790123}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      site_nbr = [[-N-1 for _ in range(N)] for _ in range(N)]
      for k in range(3):
        for i in range(N):
          for j in range(N):
            site_nbr[i][j] = (i + ((k-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr[i][j]][j]
      priority_total = [[0,0] for _ in range(N**2)]
      for j in range(N):
        if h[j//N][j%N] > 0:
          priority_total[j][0] = total_spin[j][0]
        else:
          priority_total[j][1] = -1*total_spin[j][0]
      return [priority_total[i].copy() for i in range(N**2)]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i//N + ((i%N-1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i%N]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i//N + ((i%N-1)%N - 1)) % N
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j] += h[site_nbr][j]
        for i in range(N**2):
            if h[int(i//N)][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.20015447530864225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += h[site_nbr][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i] = [total_spin[i][0], 0]
            else:
                priority_total[i] = [-1*total_spin[i][0], 1]
        return priority_total




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
        total_spin[i][0] += h[site_nbr][i%N]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
        if h[i//N][i%N] > 0:
          priority_total[i][0] = total_spin[i][0]
        else:
          priority_total[i][1] = -1*total_spin[i][0]
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
        h_flipped = [[-1*x if x > 0 else 1*x for x in row] for row in h]
        for i in range(N**2):
            site = site_nbrs[i]
            spin = -1 if h_flipped[site][i%N] > 0 else 1
            total_spin[i][spin==1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i%N]
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001401697530864198}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N**2)]
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin = [0, 0]
                if h[i][j] > 0:
                    total_spin[0] += 1
                    total_spin[1] -= 1
                else:
                    total_spin[0] -= 1
                    total_spin[1] += 1
                for k in range(3):
                    site_nbr = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += h[site_nbr][j]
                if state[i][j] == 1:
                    priority_total[i*N+j][0] = total_spin[0]
                    priority_total[i*N+j][1] = -total_spin[1]
                else:
                    priority_total[i*N+j][0] = -total_spin[0]
                    priority_total[i*N+j][1] = total_spin[1]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[[float('-inf'), float('-inf')] for _ in range(2)] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin = [0, 0]
                if h[i][j] > 0:
                    total_spin[0] += 1
                    total_spin[1] -= 1
                else:
                    total_spin[0] -= 1
                    total_spin[1] += 1
                for k in range(3):
                    site_nbr = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += h[site_nbr][j]
                priority_total[i*N+j][0] = total_spin[0]
                priority_total[i*N+j][1] = -total_spin[1]
        
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin = [0, 0]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += 1
                    priority_total[i*N+j][1] -= 1
                else:
                    priority_total[i*N+j][0] -= 1
                    priority_total[i*N+j][1] += 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[site][j] > 0:
                        total_spin[0] += 1
                        total_spin[1] -= 1
                    else:
                        total_spin[0] -= 1
                        total_spin[1] += 1
                priority_total[i*N+j][0] = total_spin[0]
                priority_total[i*N+j][1] = -total_spin[1]
        
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.053504783950617286}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N - 1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i % N]
        
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        
        return [[x[0], 1-x[0]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i//N + ((i%N-1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i%N]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        return [x[:] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += h[site_nbr][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i % N + ((i//N - 1)%2 - 1)) % N
            total_spin[i][1 if h[site_nbr][i%N] > 0 else 0] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i % N + ((i//N - 1)%2 - 1)) % N
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i//N + ((i%N-1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i%N]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
            total_spin[i][0] += h[site_nbr][i % N]
        priority_total = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        total_spin[i][0] += h[site_nbr][i % N]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        if h[i // N][i % N] > 0:
          priority_total[i][0] = total_spin[i][0]
        else:
          priority_total[i][1] = -1*total_spin[i][0]
      return priority_total




#score: {'data2D.txt': -0.2684050925925922}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site_nbr = (i + ((2-j)%2 - 1)) % N
                total_spin += h[site_nbr][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 0))
                else:
                    priorities.append((-1*total_spin, 1))
        return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N**2)]
        site_nbr = [0]*4
        for i in range(N**2):
            for k in range(3):
                site_nbr[k] = (i // N + ((k-1)%2 - 1)) % N
                total_spin[i][0] += h[site_nbr[k]][i%N]
        priority_total = [[0, 0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site_nbr][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 0))
                else:
                    priorities.append((total_spin, 1))
        return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
            total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
        priority_total = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[j*N+i][0] = total_spin[j*N+i][0]
                else:
                    priority_total[j*N+i][1] = -1*total_spin[j*N+i][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i % N]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.15269768518518537}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i % N]
            
        for j in range(N):
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                spin = -1 if h[i][j] > 0 else 1
                total_spin[i*N+j][spin==1] += 1
                
        for j in range(N**2):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]
                
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][0] += h[site_nbr][i % N]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N):
        for j in range(N):
          if h[i][j] > 0:
            priority_total[i*N+j][0] = total_spin[i*N+j][0]
          else:
            priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        total_spin[i][0 if h[site_nbr//N][site_nbr%N] > 0 else 1] += 1
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        if h[i//N][i%N] > 0:
          priority_total[i][0] = total_spin[i][0]
        else:
          priority_total[i][1] = -1*total_spin[i][0]
      return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            total_spin[i][0 if h[site_nbr][i%N] > 0 else 1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[site][0]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[site][0]
        return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - N//2)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += 1
                    priority_total[i*N+j][1] -= 1
                else:
                    priority_total[i*N+j][0] -= 1
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        site_nbr = [0]*4
        priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += 1
                    priority_total[i*N+j][1] -= 1
                else:
                    priority_total[i*N+j][0] -= 1
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - N//2)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += 1
                    priority_total[i*N+j][1] -= 1
                else:
                    priority_total[i*N+j][0] -= 1
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        site_nbr = (i//N + ((i%N-1)%N - 1)) % N
        total_spin[i][0 if h[site_nbr][i%N] > 0 else 1] += 1
      for j in range(N):
        for i in range(N):
          site = (i + ((j-1)%2 - 1)) % N
          spin = -1 if h[i][j] > 0 else 1
          total_spin[i*N+j][spin==1] += 1
      for j in range(N):
        if h[0][j] > 0:
          priority_total[j][0] = total_spin[j][0]
        else:
          priority_total[j][1] = -1*total_spin[j][0]
      return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
            total_spin[i][0 if h[site_nbr // N][site_nbr % N] > 0 else 1] += 1
        priority_total = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            site_nbr = (i + ((N-1)%2 - 1)) % N
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N) - 1) % N)
            total_spin[i][0 if h[site_nbr // N][site_nbr % N] > 0 else 1] += 1
        priority_total = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[site][0]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[site][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0011587962962962964}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        for j in range(N):
          total_spin = [0, 0]
          site_nbr = (i + ((j-1)%2 - 1)) % N
          total_spin[0] += h[site_nbr][j]
          total_spin[1] -= h[i][j]
          if h[i][j] > 0:
            priorities.append(total_spin)
          else:
            priorities.append([-x for x in total_spin])
      return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            total_spin[i][0 if h[site_nbr][i%N] > 0 else 1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_nbr = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][h[i][j]>0] += h[site_nbr][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i] = total_spin[i][0:1]+[0]
            else:
                priority_total[i] = [0]+total_spin[i][1:2]
        return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum2 = (-1)*sum1
        priority = np.column_stack((sum1, sum2))
        return(priority)




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            total_spin[i][0] += h[site_nbr][i%N]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.2000797839506175}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = []
        for i in range(N**2):
            total_spin = 0
            site_nbr = (i // N + ((i % N) - 1)) % N
            total_spin += h[site_nbr][i % N]
            if h[i//N][i%N] > 0:
                priorities.append([total_spin, 0])
            else:
                priorities.append([total_spin, 1])
        return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum2 = (-1)*sum1
        priority = np.column_stack((sum1, sum2))
        return [[x[0], x[1]] for x in priority.reshape(-1, 2)]




#score: {'data2D.txt': -0.009077623456790125}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N):
          for j in range(N):
              site_nbr = (i + ((j-1)%N - 1)) % N
              total_spin[i*N+j][site_nbr==j] += h[site_nbr][j]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
          if h[i//N][i%N] > 0:
              priority_total[i][0] = total_spin[i][0]
          else:
              priority_total[i][1] = -1*total_spin[i][0]
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum2 = (-1)*sum1
        priority = np.column_stack((sum1, sum2))
        return [[i[0], i[1]] for i in priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            site_nbr = (i // N + ((i % N-1)%N - 1)) % N
            total_spin[i][1 if h[site_nbr][i%N] > 0 else 0] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -total_spin[i][0]
        return [x[:] for x in priority_total]




#score: {'data2D.txt': -0.0014097222222222221}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        
        for i in range(N**2):
            site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
            total_spin[i][0] += h[site_nbr][i % N]
            
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[j][0]
                else:
                    priority_total[j][1] = -1*total_spin[j][0]
                    
        return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0,0] for _ in range(N**2)]
      for i in range(N):
        for j in range(N):
          site_nbr = (i + ((j-1)%N - 1)) % N
          total_spin[i*N+j][0] += h[site_nbr][j]
      priority_total = [[0,0] for _ in range(N**2)]
      for i in range(N**2):
        if h[i//N][i%N] > 0:
          priority_total[i][0] = total_spin[i][0]
        else:
          priority_total[i][1] = -1*total_spin[i][0]
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
        for i in range(N**2):
            site_nbr = site_nbrs[i]
            total_spin[i][0] += h[site_nbr][i%N]
            total_spin[i][1] -= h[site_nbr][i%N]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -total_spin[i][0]
        return [priority_total[i] for i in range(N**2)]








#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][0] -= 1
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[site_nbr][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
    return [[x[0], x[1]] for x in total_spin]









#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N**2):
        site = (i // N + ((i % N) - 1) % N)
        if h[i // N][i % N] > 0:
            priority_total[i][0] += 1
            priority_total[i][1] -= 1
        else:
            priority_total[i][0] -= 1
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin = i*N+j
            if h[i][j] > 0:
                priority_total[total_spin][0] += 1
                priority_total[total_spin][1] -= 1
            else:
                priority_total[total_spin][0] -= 1
    return [x for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[float('inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                total_spin[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                site = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for x in itertools.chain.from_iterable(priority_total)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N) - 1) % N)
        total_spin[i][0 if h[site_nbr//N][site_nbr%N] > 0 else 1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N) - 1) % N)
        total_spin[i][0 if h[site_nbr//N][site_nbr%N] > 0 else 1] += J[site_nbr//N][site_nbr%N][0]
    for i in range(N**2):
        priority_total[i][0] = total_spin[i][0]
        priority_total[i][1] = -1 * total_spin[i][1]
    return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0, 0] for _ in range(N**2)]
    total_spin = [[0, 0] for _ in range(N**2)]
    
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][0] += h[site_nbr][i % N]
        total_spin[i][1] += -h[site_nbr][i % N]
        
    for i in range(N**2):
        site = (i // N + ((i % N - 1) % N - 1)) % N
        if h[i//N][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -total_spin[i][0]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
    return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin = state[site_nbr][j]
            
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin = h[site_nbr][j]
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
    return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [priority_total[i][j]]]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for i in range(N) for k in range(3)]
    
    for j in range(N):
        for i in range(N):
            site_nbr = (i + ((j-1)%N - N//2)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            total_spin[i*N+j][1] -= 1
            
    return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                site_nbr = (i + ((j-1)%N - N//2)) % N
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            total_spin[i*N+j][1] -= 1 if h[i][j] > 0 else 1
    return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.14149367283950637}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        priority_total[i] = [total_spin[i][1], -total_spin[i][0]] if h[i//N][i%N] > 0 else [-x for x in total_spin[i]]
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            spin = -1 if h[i][j] > 0 else 1
            total_spin[site][spin==1] += 1
            
    for i in range(N**2):
        if h[int(i//N)][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -1*total_spin[i][0]
            
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.045745833333333374}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            spin = 0 if h[i][j] > 0 else 1
            priority_total[i*N+j][spin] += total_spin[site][spin]
    return [[x, 0] if x > 0 else [-x, 1] for x in [sum(a) for a in priority_total]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N) - 1) % N)
        total_spin[i][0 if h[site_nbr // N][site_nbr % N] > 0 else 1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][0 if h[i][j] > 0 else 1] += 1
            priority_total[site][0 if h[i][j] > 0 else 1] = total_spin[site][0] if h[i][j] > 0 else -total_spin[site][1]
    return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][0 if h[site_nbr//N][site_nbr%N]>0 else 1] += 1
    for j in range(N**2):
        site = (j // N + ((j % N-1)%N-1)) % N
        priority_total[j] = [total_spin[site][0], -1*total_spin[site][1]]
    return priority_total




#score: {'data2D.txt': -0.010425771604938272}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N)) % N
        total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
    return [[total_spin[i][0], total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.010754166666666667}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0, 0] for _ in range(N**2)]
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
    for j in range(N):
        for i in range(N):
            site = (i + ((j-1)%N - 1)) % N
            spin = -1 if h[i][j] > 0 else 1
            total_spin[j*N+i][spin==1] += 1
    for j in range(N**2):
        priority_total[j][0 if total_spin[j][0] >= total_spin[j][1] else 1] = total_spin[j][0 if total_spin[j][0] > total_spin[j][1] else 1]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.005020216049382716}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            spin = -1 if h[i][j] > 0 else 1
            total_spin[i*N+j][spin==1] += 1
    priority_total = [[0,0] for _ in range(N**2)]
    for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        for j in range(N):
            total_spin[i*N+j][spin==1] += h[site_nbr][j]
    return [[0 if x[0] > 0 else 1, 1-x[0]] for x in total_spin]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][0] += h[site_nbr][i % N]
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        if h[i // N][i % N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -1 * total_spin[i][0]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
        total_spin[i][1 if h[site_nbr//N][site_nbr%N] > 0 else 0] += 1
    return [[sum(x),1-x[0]] for x in total_spin]




#score: {'data2D.txt': -0.1985677469135804}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
        total_spin[i][0 if h[site_nbr//N][site_nbr%N]>0 else 1] += 1
    for j in range(N**2):
        priority_total[j][0 if h[j//N][j%N]>0 else 1] = total_spin[j][0 if h[j//N][j%N]>0 else 1]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        total_spin[i][1 if h[site_nbr][i%N] > 0 else 0] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -1*total_spin[i][0]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
    
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -1*total_spin[i][0]
    
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0, 0] for _ in range(N**2)]
    total_spin = [[0, 0] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0 if h[site_nbr][j] > 0 else 1] += 1
            
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -total_spin[i][1]
            
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
        total_spin[i][1 if h[site_nbr][i % N] > 0 else 0] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
        if h[i // N][i % N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -total_spin[i][0]
    return [[priority_total[i][0], priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.007382561728395061}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        total_spin[i][0 if h[site_nbr][i%N] > 0 else 1] += 1
    for j in range(N**2):
        site = (j // N + ((j % N-1)%N - 1)) % N
        priority_total[j][0 if h[site][j%N] > 0 else 1] = total_spin[j][0 if h[site][j%N] > 0 else 1]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
        total_spin[i][0 if h[site_nbr][i%N] > 0 else 1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
        total_spin[i][0 if h[site_nbr][i%N] > 0 else 1] += h[site_nbr][i%N]
    for i in range(N**2):
        priority_total[i] = [total_spin[i][0], -1*total_spin[i][1]]
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        total_spin[i][1 if h[site_nbr][i % N]>0 else 0] += 1
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[site][0]
            else:
                priority_total[i*N+j][1] = -1*total_spin[site][0]
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0, 0] for _ in range(N**2)]
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][1 if h[site_nbr][i % N] > 0 else 0] += 1
    for j in range(N**2):
        if h[j // N][j % N] > 0:
            priority_total[j][0] = total_spin[j][0]
        else:
            priority_total[j][1] = -1 * total_spin[j][0]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.010046759259259259}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        total_spin[i][1 if h[site_nbr][i%N] > 0 else 0] += 1
    for j in range(N):
        for i in range(N):
            site_nbr = (i + ((j-1)%N - 1)) % N
            priority_total[j*N+i][1 if h[i][j] > 0 else 0] = total_spin[j*N+i][1 if h[i][j] > 0 else 0]
    return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N**2):
        site = (i + ((i//N-1)%2 - 1)) % N
        if h[site][i%N] > 0:
            priority_total[i][0] += 1
            priority_total[i][1] -= 1
        else:
            priority_total[i][0] -= 1
            priority_total[i][1] += 1
    for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][i%N] > 0:
            priority_total[i][0] -= 1
            priority_total[i][1] += 1
        else:
            priority_total[i][0] += 1
            priority_total[i][1] -= 1
    return [[x, y] for x,y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] += 1
                priority_total[i*N+j][1] -= 1
            else:
                priority_total[i*N+j][0] -= 1
                priority_total[i*N+j][1] += 1
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum1 = (J_new[0::2].prod(axis=0) + h).flatten()
    sum2 = (-J_new[1::2].prod(axis=0)).flatten()
    return np.column_stack((sum1, -sum1))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i//N + ((i%N-1)%N - 1)) % N
        total_spin[i][0 if h[site_nbr][i%N] > 0 else 1] += 1
    for j in range(N):
        for i in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
    return priority_total




#score: {'data2D.txt': -0.14828256172839524}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1)%N - 1)) % N
        total_spin[i][h[i//N][i%N] > 0] += 1
    for j in range(N):
        for i in range(N):
            site = (i + ((j-1)%N - 1)) % N
            priority_total[i*N+j][0 if h[i][j] > 0 else 1] = total_spin[site][0 if h[i][j] > 0 else 1]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i//N + ((i%N-1)%N - 1)) % N
        total_spin[i][0] += h[site_nbr][i%N]
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -1*total_spin[i][0]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N) - 1) % N)
        total_spin[i][0 if h[site_nbr // N][site_nbr % N] > 0 else 1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N) - 1) % N)
        if h[i // N][i % N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -total_spin[i][0]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N) // N - 1) % N
        total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N) // N - 1) % N
        if h[i//N][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -total_spin[i][1]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
        total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
        priority_total[i][0 if h[site_nbr][i % N] > 0 else 1] = total_spin[i][0]
    for j in range(N**2):
        priority_total[j][0] = total_spin[j][0]
        if h[(j // N)][j % N] > 0:
            priority_total[j][1] = total_spin[j][0]
        else:
            priority_total[j][1] = -1 * total_spin[j][0]
    return [x for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
        total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            spin = -1 if h[i][j] > 0 else 1
            total_spin[site][spin==1] += 1
    return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.001082253086419753}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        total_spin[i][0] += h[site_nbr][i%N]
        total_spin[i][1] += -h[site_nbr][i%N]
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -total_spin[i][1]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.006996759259259259}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            spin = -1 if h[i][j] > 0 else 1
            total_spin[site][spin==1] += 1
    return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0, 0] for _ in range(N**2)]
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        total_spin[i][0 if h[site_nbr//N][site_nbr%N] > 0 else 1] += 1
    for j in range(N):
        for i in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            spin = -1 if h[i][j] > 0 else 1
            total_spin[i*N+j][spin] += 1
    for j in range(N**2):
        priority_total[j] = [total_spin[j][0], -1*total_spin[j][1]]
    return priority_total




#score: {'data2D.txt': -0.04796342592592596}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        total_spin[i][1 if h[site_nbr][i % N] > 0 else 0] += 1
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j] = total_spin[site]
            else:
                priority_total[i*N+j] = [-x for x in total_spin[site]]
    return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N-1)%N - 1)) % N
        total_spin[i][0] += h[site_nbr][i%N]
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -1*total_spin[i][0]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0007257716049382712}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            spin = -1 if h[i][j] > 0 else 1
            total_spin[site][spin==1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j] += h[site_nbr][j]
    return [total_spin[i] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i//N + ((i%N-1)%N - 1)) % N
        total_spin[i][h[i//N][i%N]>0] += 1
    for j in range(N):
        for i in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.12418472222222235}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            spin = -1 if h[i][j] > 0 else 1
            total_spin[site][spin==1] += 1
            
    for i in range(N**2):
        for k in range(3):
            site_nbr = (i + ((k-1)%2 - 1)) % N
            total_spin[i] += h[site_nbr][i%N]
            
    for j in range(N**2):
        if h[j//N][j%N] > 0:
            priority_total[j] = [total_spin[j][0], 0]
        else:
            priority_total[j] = [-1*total_spin[j][0], 1]
    
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        if h[i // N][i % N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -1 * total_spin[i][0]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
        total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
        if h[i//N][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -1*total_spin[i][0]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -total_spin[i][0]
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.1662800925925921}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            spin = -1 if h[i][j] > 0 else 1
            total_spin[site][spin==1] += 1
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j] += h[site_nbr][j]
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -1*total_spin[i][0]
    return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
        total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
    
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_nbr = (i + ((j-1)%N - 1)) % N
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i*N+j][0]
            else:
                priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
    
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        site_nbr = (i % N // N + ((i % N) - 1) % N)
        total_spin[i][1 if h[site_nbr // N][site_nbr % N] > 0 else 0] += 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1 * total_spin[j][0]
    return [[x[0], x[1]] for x in priority_total]




