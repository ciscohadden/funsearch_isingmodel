#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N,N,2))
  priority_total=np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j]>0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.002499228395061728}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  return([list(t) for t in total_spin])




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  total_spin = np.zeros((N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.19698256172839457}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
  return total_spin.reshape(N**2, 2)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
      
  for i in range(N**2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site][i%N] > 0:
      priority_total = np.zeros((N**2, 2))
      for k in range(N**2):
        site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
        if h[site_nbr][k%N] > 0:
          priority_total[k][0] += 1
          priority_total[k][1] -= 1
        else:
          priority_total[k][0] -= 1
      return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  interacting_spins = np.zeros((4, N, N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis=i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis=i)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.28881250000000014}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for k in range(4):
        site = (site_nbr + ((k-1)%2 - 1)) % N
        if J[k,i,j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priorities[i*N+j][0] = total_spin
      priorities[i*N+j][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      priority_total[k][0] += 1
      priority_total[k][1] -= 1
    else:
      priority_total[k][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.0013600308641975305}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site][i%N] > 0:
      for k in range(N**2):
        site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
        if h[site_nbr][k%N] > 0:
          total_spin[i][0] += 1
          total_spin[i][1] -= 1
        else:
          total_spin[i][0] -= 1
      return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i//N,i%N][0] += 1
      total_spin[i//N,i%N][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  priority_total = np.zeros((N*N, 2))

  # Calculate site magnetism and update priorities
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1

  # Calculate interaction priorities
  for k in range(N**2):
    i = k // N
    j = k % N
    site_nbr = (i + ((j-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      priority_total[k][0] += 1
      priority_total[k][1] -= 1
    else:
      priority_total[k][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      priority_total[k][0] += 1
      priority_total[k][1] -= 1
    else:
      priority_total[k][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  site_neighbor = (np.arange(N) + ((np.arange(N)-1)%2 - 1)) % N
  for i in range(N):
    for j in range(N):
      total_spin[i][j][0] += h[site_neighbor[i]][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N, 2))
  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      priority_total[k][0] += 1
      priority_total[k][1] -= 1
    else:
      priority_total[k][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.13068348765432103}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.reshape(4, N**2)
  h = h.flatten()
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      if J[k][i] > 0:
        total_spin[i][0] += h[site_nbr]
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= h[site_nbr]
        total_spin[i][1] += 1
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return([list(t) for t in total_spin])




#score: {'data2D.txt': 0.028777623456790125}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.reshape((4, N*N))
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin[i][0] += h[site][i%N]
      if h[site][i%N] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][0] += J[k][i]
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= J[k][i]
        total_spin[i][1] += 1
  return([list(t) for t in total_spin])




#score: {'data2D.txt': -0.2689158950617281}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][(i % N)]
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][(i % N)] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin.tolist()




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] -= 1
      else:
        priority_total[i*N+j][0] += 1
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i] > 0:
        total_spin[i][j][0] += 1
      else:
        total_spin[i][j][0] -= 1
      k += 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.002499228395061728}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  return([list(t) for t in total_spin])




#score: {'data2D.txt': -0.003224537037037036}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  return([list(t) for t in total_spin])




#score: {'data2D.txt': -0.0011248456790123459}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][0] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  return([list(t) for t in total_spin])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.29886373456790055}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for k in range(N**2):
    site = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site][k%N] > 0:
      total_spin[k][0] += 1
      total_spin[k][1] -= 1
    else:
      total_spin[k][0] -= 1
  return total_spin.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += total_spin[site_nbr][j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [list(t) for t in total_spin]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total = np.zeros((N**2,2))
        for i in range(N**2):
          site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
          if h[site_nbr][i%N] > 0:
            priority_total[i][0] += 1
            priority_total[i][1] -= 1
          else:
            priority_total[i][0] -= 1
        return priority_total




#score: {'data2D.txt': -0.11005077160493826}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0][site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.2242328703703704}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if J[0][site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
    
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i * N + j][0] += 1
        priority_total[i * N + j][1] -= 1
      else:
        priority_total[i * N + j][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.052889351851851854}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        if J[k][site_nbr][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= total_spin
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': 0.00016404320987654299}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
        
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
        
  return([list(t) for t in total_spin])




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for k in range(N**2):
    site = (k % N + ((k//N-1)%2 - 1)) % N
    total_spin = h[site][k%N]
    if h[site][k%N] > 0:
      priority_total[k][0] += 1
      priority_total[k][1] -= 1
    else:
      priority_total[k][0] -= 1
  return priority_total.tolist()




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return priorities




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
      else:
        total_spin[i*N+j][0] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
        else:
          priority_total[i*N+j][0] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
      else:
        total_spin[i][j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N, 2))
  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      priority_total[k][0] += 1
      priority_total[k][1] -= 1
    else:
      priority_total[k][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      total_spin[k][0] += 1
      total_spin[k][1] -= 1
    else:
      total_spin[k][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      total_spin[k][0] += 1
      total_spin[k][1] -= 1
    else:
      total_spin[k][0] -= 1
      total_spin[k][1] += 1
  return total_spin




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.018216203703703707}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.reshape((4,N*N))
  total_spin = [[0,0] for _ in range(N*N)]
  
  # calculate magnetism contribution
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  
  # calculate interaction contribution
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += J[0][i]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= J[0][i]
      total_spin[i][1] += 1
    
    site_nbr = (site_nbr + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += J[1][i]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= J[1][i]
      total_spin[i][1] += 1
    
    site_nbr = (site_nbr + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += J[2][i]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= J[2][i]
      total_spin[i][1] += 1
    
    site_nbr = (site_nbr + ((i%N+1)%N - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += J[3][i]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= J[3][i]
      total_spin[i][1] += 1
  
  return([list(t) for t in total_spin])




#score: {'data2D.txt': -0.00027731481481481574}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.reshape((4, N*N))
  priority_list = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    sum_h = sum(h[site_nbr][j] for j in range(N))
    sum_J = sum(J[k][i] for k in range(4) if k%2 == (i//N+1)%2)
    priority_list[i][0] += sum_h + sum_J
    if sum_h > 0:
      priority_list[i][1] -= 1
    else:
      priority_list[i][1] += 1
  return([list(t) for t in priority_list])




#score: {'data2D.txt': -0.009445216049382716}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(4):
      if k == 0:
        site = (i + ((k-1)%2 - 1)) % N
      else:
        site = (i + ((k%2 - 1) * N + (k//2 - 1))) % N
      total_spin[i][0] += h[site][i%N]
      if h[site][i%N] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
  return([list(t) for t in total_spin])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
        else:
          total_spin[0] -= 1
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[0]
  return priority_total




#score: {'data2D.txt': -4.475308641975595e-06}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  return([list(t) for t in total_spin])




#score: {'data2D.txt': -0.002499228395061728}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  return([list(t) for t in total_spin])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return priority_total




#score: {'data2D.txt': -0.14237824074074076}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  
  for i in range(N):
    for j in range(N):
      total_spin = h[i][j]
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if J[k][site_nbr][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return priority_total




#score: {'data2D.txt': 0.06255447530864197}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_list = np.zeros((N2,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[0][site_nbr][j] > 0:
        priority_list[i*N+j][0] += 1
        priority_list[i*N+j][1] -= 1
      elif J[0][site_nbr][j] < 0:
        priority_list[i*N+j][0] -= 1
        priority_list[i*N+j][1] += 1
      
      if J[1][i][j] > 0:
        priority_list[i*N+j][0] += 1
        priority_list[i*N+j][1] -= 1
      elif J[1][i][j] < 0:
        priority_list[i*N+j][0] -= 1
        priority_list[i*N+j][1] += 1
      
      if J[2][site_nbr][j] > 0:
        priority_list[i*N+j][0] += 1
        priority_list[i*N+j][1] -= 1
      elif J[2][site_nbr][j] < 0:
        priority_list[i*N+j][0] -= 1
        priority_list[i*N+j][1] += 1
      
      if J[3][i][j] > 0:
        priority_list[i*N+j][0] += 1
        priority_list[i*N+j][1] -= 1
      elif J[3][i][j] < 0:
        priority_list[i*N+j][0] -= 1
        priority_list[i*N+j][1] += 1
      
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_list[i][0] += 1
      priority_list[i][1] -= 1
    else:
      priority_list[i][0] -= 1
  
  return priority_list




#score: {'data2D.txt': -0.0323523148148149}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(4):
        if J[k][site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return total_spin.tolist()




#score: {'data2D.txt': -0.19698256172839457}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for k in range(N**2):
    i = k // N
    j = k % N
    site_nbr = (i + ((j-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[k][0] += 1
      total_spin[k][1] -= 1
    else:
      total_spin[k][0] -= 1
  
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return([list(t) for t in total_spin])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total.tolist()




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if total_spin > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': 0.18973935185185203}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.17669799382716048}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.reshape((4, N*N))
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_magnetism = sum(h[site_nbr][j] for j in range(N))
    for k in range(3):
      if J[k][i] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1
    priorities[i][0] += total_magnetism
  return([list(t) for t in priorities])




#score: {'data2D.txt': 0.028777623456790125}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.reshape((4, N*N))
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin[i][0] += h[site][i%N]
      if h[site][i%N] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][0] += J[k][i]
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= J[k][i]
        total_spin[i][1] += 1
  return([list(t) for t in total_spin])




#score: {'data2D.txt': 0.0718192901234568}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.reshape((4,N*N))
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priorities[i][0] += J[k][i]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= J[k][i]
        priorities[i][1] += 1
  return([list(t) for t in priorities])




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][0] -= 1
  priority_total = np.zeros((N*N,2))
  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      priority_total[k][0] += 1
      priority_total[k][1] -= 1
    else:
      priority_total[k][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      priority_total[k][0] += 1
      priority_total[k][1] -= 1
    else:
      priority_total[k][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
        else:
          priority_total[i*N+j][0] += 1
  
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N, 2))
  for k in range(N**2):
    site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site_nbr][k%N] > 0:
      priority_total[k][0] += 1
      priority_total[k][1] -= 1
    else:
      priority_total[k][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.010439351851851849}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = []
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_nbrs.append((site_nbr, i))
  priorities = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    for k in range(4):
      if k == 0:
        site = site_nbrs[i][0]
      else:
        site = (i + ((k%2 - 1) * N + (k//2 - 1))) % N
      priorities[i][0] += h[site][i%N]
      if h[site][i%N] > 0:
        priorities[i][1] -= 1
      else:
        priorities[i][1] += 1
  return([list(t) for t in priorities])




#score: {'data2D.txt': -0.009445216049382716}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,-N**2//2] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0,0]
    for k in range(4):
      if k == 0:
        site = (i + ((k-1)%2 - 1)) % N
      else:
        site = (i + ((k%2 - 1) * N + (k//2 - 1))) % N
      total_spin[0] += h[site][i%N]
      if h[site][i%N] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
    for j in range(2):
      priority_total[i][j] = total_spin[j]
  return([list(t) for t in priority_total])




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    else:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  return total_spin




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    else:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [list(t) for t in total_spin]




#score: {'data2D.txt': -0.004077932098765432}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  priorities = [[0,0] for _ in range(N2)]
  J = J.reshape((4,N2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += J[k][i]
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= J[k][i]
        priorities[i][1] += 1
  
  return([list(t) for t in priorities])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      priority_total[i*N+j][0] += total_spin[0]
      priority_total[i*N+j][1] += total_spin[1]
  return priority_total




#score: {'data2D.txt': -0.08853009259259258}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.reshape((4, N*N))
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      priority_total[i][0] += h[site][i%N]
      if h[site][i%N] > 0:
        priority_total[i][1] -= 1
      else:
        priority_total[i][1] += 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priority_total[i][0] -= J[k][i]
        priority_total[i][1] += 1
      else:
        priority_total[i][0] += J[k][i]
        priority_total[i][1] -= 1
  return([list(t) for t in priority_total])




#score: {'data2D.txt': -0.010692746913580247}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.reshape((4,N*N))
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin[i][0] += h[site][i%N]
      if h[site][i%N] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
      
      site_nbr = (i + ((k-1)%2 - 1)) % N
      priority_total[i][0] += J[k][site_nbr*N+i%N]
      if h[site][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
  
  return([list(t) for t in priority_total])




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.reshape((4, N*N))
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    for k in range(4):
      if J[k][i] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  return [[t[0], -t[1]] for t in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i][j][0] -= 1
    else:
      total_spin[i][j][0] += 1

  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        if k == 0:
          total_spin[i*N+j][0] += h[site_nbr][j]
        elif k == 1:
          if h[i][j] > 0:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
        else:
          site = (i + ((k-1)%2 - 1)) % N
          if h[site][j] > 0:
            total_spin[i*N+j][0] += 1
          else:
            total_spin[i*N+j][0] -= 1

  return total_spin




#score: {'data2D.txt': -0.08480416666666668}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        if J[k][site_nbr][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] += sum([a for a in h[site_nbr]]) + total_spin[0]
      if sum(h[site_nbr]) > 0:
        priority_total[i*N+j][1] -= 1 - total_spin[1]
      else:
        priority_total[i*N+j][1] += 1 - total_spin[1]

  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  def energy(spin_config):
    total_energy = 0
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        interaction_energy = J[site_nbr][i*N+j]
        if spin_config[i*N+j] == 1:
          total_energy += h[site_nbr][j] + interaction_energy
        else:
          total_energy -= h[site_nbr][j] - interaction_energy
    return total_energy

  def priority_func(spin_config):
    spin_config = np.array(spin_config).reshape(N, N)
    energy_val = energy(spin_config.flatten())
    if spin_config.sum() > 0:
      return [-x for x in energy_val]
    else:
      return [x for x in energy_val]

  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
     site_nbr = (i + ((j-1)%2 - 1)) % N
     total_spin[i*N+j][0] += h[site_nbr][j]
     if h[i][j] > 0:
      total_spin[i*N+j][1] -= 1
     else:
      total_spin[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in total_spin]

  spin_config = np.random.randint(2, size=(N,N))
  res = minimize(priority_func, spin_config.flatten(), method='SLSQP')
  return [[-1 if x < 0 else 1 for x in row] for row in res.x.reshape(N, N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[-total_spin[k][0], -total_spin[k][1]] for k in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.180304475308642}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i*N+j][0] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
        if J[k,i,j] > 0:
          priorities[i*N+j][1] -= 1
        else:
          priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  site_nbr_indices = {(i+N*j): (i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)}
  for i in range(N**2):
    total_spin = h[site_nbr_indices[i%N]][i//N]
    if total_spin > 0:
      priorities[i][0] += -1
      priorities[i][1] -= 1
    else:
      priorities[i][0] += 1
      priorities[i][1] += 1
  for i in range(N**2):
    site = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site][i%N] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    else:
      priorities[i][0] += 1
      priorities[i][1] -= 1
  return(priorities)




#score: {'data2D.txt': -0.04599490740740741}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  site_nbr = np.zeros((N*N,2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr[i*N+j][0] = (i + ((j-1)%2 - 1)) % N
      site_nbr[i*N+j][1] = i
  for i in range(N**2):
    site_nbr[i][0], site_nbr[i][1] = site_nbr[i][1], site_nbr[site_nbr[i][0]*N+int(i/N)][0]
  for i in range(N**2):
    total_spin[site_nbr[i][1]][site_nbr[i][0]][0] += h[site_nbr[i][1]][site_nbr[i][0]]
    if h[site_nbr[i][1]][site_nbr[i][0]] > 0:
      total_spin[site_nbr[i][1]][site_nbr[i][0]][1] -= 1
    else:
      total_spin[site_nbr[i][1]][site_nbr[i][0]][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i//N][i%N][0] += 1
      total_spin[i//N][i%N][1] -= 1
    else:
      total_spin[i//N][i%N][0] -= 1
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      priorities[i*N+j][0] += -0.5*J[0,i,j]*total_spin[i][j][0]
      priorities[i*N+j][1] -= total_spin[i][j][1]
      if J[1,i,j] > 0:
        priorities[i*N+j][0] -= 1
      else:
        priorities[i*N+j][0] += 1
      priorities[i*N+j][1] += -0.5*J[2,i,j]*total_spin[i][j][0]
      priorities[i*N+j][1] -= total_spin[i][j][1]
      if J[3,i,j] > 0:
        priorities[i*N+j][0] -= 1
      else:
        priorities[i*N+j][0] += 1
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  priority_total = [[-total_spin[k][0], -total_spin[k][1]] for k in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
    else:
      total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[k][0], -total_spin[k][1]] for k in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[-total_spin[k][0], -total_spin[k][1]] for k in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2), dtype=int)
  
  for i in range(N2):
    total_spin = 0
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.010500771604938272}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbrs[site_nbr]][(i%N)]
    if h[i%N][(i//N)] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    if h[site_nbr][i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin += h[site][i%N]
      if h[i//N][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priority_total = [[-total_spin[k][0], -total_spin[k][1]] for k in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  priority_total = [[-total_spin[k][0], -total_spin[k][1]] for k in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[-total_spin[k][0], -total_spin[k][1]] for k in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[-total_spin[k][0], -total_spin[k][1]] for k in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,-0] for _ in range(N**2)]
  total_spin = [0,0]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return [x for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.007117129629629629}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N**2
  for i in range(N**2):
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      total_spin[i] += h[site][i%N]
    if h[site_nbrs[i]][0] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    else:
      priorities[i][0] += 1
      priorities[i][1] -= 1
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return(priority_total)




#score: {'data2D.txt': -0.3430239197530853}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = total_spin.copy()
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total = total_spin.copy()
      priority_total[i][0] -= 1
    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priority_total += 1
      else:
        priority_total -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[-total_spin[k][0], -total_spin[k][1]] for k in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N**2
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)//2 - 1) % N
    total_spin[i] += h[site_nbr][i%N]
    if h[site_nbrs[i]][i%N] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    else:
      priorities[i][0] += 1
      priorities[i][1] -= 1
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbr = [(i % N + ((i//N-1)%2 - 1)) % N for i in range(N**2)]
  
  for i in range(N**2):
    total_spin[i][0] += h[site_nbr[i]][i%N]
    if h[site_nbr[i]][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return(total_spin)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)//2 - 1) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbrs[i]][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)//2 - 1) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbrs[i]][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  priorities = [(total_spin[i][0], -total_spin[i][1]) for i in range(N**2)]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = total_spin[1]
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[-total_spin[k][0], -total_spin[k][1]] for k in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.010756018518518517}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbr = [(i % N + ((i//N-1)%2 - 1)) % N for i in range(N**2)]
  
  for k in range(3):
    for i in range(N**2):
      site = (i % N + ((k-1)%2 - 1)) % N
      total_spin[i][0] += h[site][i%N]
      if h[site][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return(total_spin)




#score: {'data2D.txt': -0.023747685185185212}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_list = np.zeros((N2,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if J[0][site_nbr][j] > 0:
        total_spin += 1
      elif J[0][site_nbr][j] < 0:
        total_spin -= 1
      
      if J[1][i][j] > 0:
        total_spin += 1
      elif J[1][i][j] < 0:
        total_spin -= 1
      
      if J[2][site_nbr][j] > 0:
        total_spin += 1
      elif J[2][site_nbr][j] < 0:
        total_spin -= 1
      
      if J[3][i][j] > 0:
        total_spin += 1
      elif J[3][i][j] < 0:
        total_spin -= 1
      
      priority_list[i*N+j][0] = total_spin
      priority_list[i*N+j][1] = -total_spin
  
  return priority_list




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j], h[i][j]]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = np.concatenate((total_spin[:, 0][:, None], -total_spin[:, 1][:, None]), axis=1)
  return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  return(total_spin.reshape(N*N,2).tolist())




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]

  return(priority_total)




#score: {'data2D.txt': -0.023752932098765434}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][1]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
        priority_total[i*N+j][1] += total_spin[i*N+j][1]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total

  site_nbr = (i + ((k-1)%2 - 1)) % N
  if h[site_nbr][j] > 0:
    total_spin += 1
  else:
    total_spin -= 1

  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1

  return [[total_spin[i], -total_spin[i]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
    else:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
    
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  
  return (priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return(total_spin)




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N**2
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)//2 - 1) % N
    total_spin[i] += h[site_nbr][i%N]
    if h[site_nbrs[i]][i%N] > 0:
      priorities[i][0] -= 1
      priorities[i][1] += 1
    else:
      priorities[i][0] += 1
      priorities[i][1] -= 1
  return(priorities)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for k in range(2):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin += h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    site = (i + ((3-1)%2 - 1)) % N
    if h[site][i] > 0:
      priority_total += 1
    else:
      priority_total -= 1
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0,0]
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [x for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr1][j] + h[site_nbr2][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  
  for k in range(3):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3346547839506163}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
        priority_total[site_nbr1][0] += 1
        priority_total[site_nbr2][0] += 1
        priority_total[site_nbr1][1] -= 1
        priority_total[site_nbr2][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        priority_total[site_nbr1][0] -= 1
        priority_total[site_nbr2][0] -= 1
        priority_total[site_nbr1][1] += 1
        priority_total[site_nbr2][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((0)%2 - 1)) % N
      site_nbr2 = (j + ((0)%2 - 1)) % N
      total_spin = h[site_nbr1][site_nbr2]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((1)%2 - 1)) % N
      site_nbr2 = (j + ((1)%2 - 1)) % N
      total_spin += h[site_nbr1][site_nbr2]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((2)%2 - 1)) % N
      site_nbr2 = (j + ((2)%2 - 1)) % N
      total_spin += h[site_nbr1][site_nbr2]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((3)%2 - 1)) % N
      site_nbr2 = (j + ((3)%2 - 1)) % N
      total_spin += h[site_nbr1][site_nbr2]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,-0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = np.concatenate((total_spin[:, 0][:, None], -total_spin[:, 1][:, None]), axis=1)
  return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  priority_total = np.concatenate((total_spin[:, 0][:, None], -total_spin[:, 1][:, None]), axis=1)
  return priority_total.tolist()




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1
      
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  
  return (priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.0012955246913580244}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  
  for i in range(N):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = np.sum(J[:,i*N:i*N+N], axis=0)
    
    if h[i].sum() > 0:
      priority_total[:,0] += 1
      priority_total[:,1] -= 2 * (np.sum(h[i]) + np.sum(total_spin[1:]))
    else:
      priority_total[:,0] -= 1
      priority_total[:,1] += 2 * (np.sum(h[i]) + np.sum(total_spin[1:]))
  
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x, -y] for x, y in priority_total]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    else:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i * N + j][0] += 1
        priority_total[i * N + j][1] -= 1
      else:
        priority_total[i * N + j][0] -= 1
        priority_total[i * N + j][1] += 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  total_spin = [0,0]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
      
  for i in range(N**2):
    if sum(total_spin[i]) > N*N//2:
      priority_total = [[-1,1]]*N*N
    else:
      priority_total = [[1,-1]]*N*N
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j], 0]
      if h[i][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[1] += h[site][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.006327314814814814}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    
    for k in range(3):
      if J[k][site_nbr][i%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    
    priority_total[i][0] += sum([a for a in h[site_nbr]]) + total_spin[0]
    if sum(h[site_nbr]) > 0:
      priority_total[i][1] -= 1 - total_spin[1]
    else:
      priority_total[i][1] += 1 - total_spin[1]
  
  return priority_total




#score: {'data2D.txt': -0.05699861111111112}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2), dtype=int)
  
  # Calculate magnetism based priorities
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  # Calculate interaction based priorities
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(4):
        if J[k][site_nbr][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j][0] += sum([a for a in h[site_nbr]]) + total_spin[0]
      if sum(h[site_nbr]) > 0:
        priority_total[i*N+j][1] -= 1 - total_spin[1]
      else:
        priority_total[i*N+j][1] += 1 - total_spin[1]

  return priority_total




#score: {'data2D.txt': -0.04970478395061729}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      if J[0][site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      elif J[0][site_nbr][j] < 0:
        total_spin[0] -= 1
        total_spin[1] += 1
      if J[1][site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      elif J[1][site_nbr][j] < 0:
        total_spin[0] -= 1
        total_spin[1] += 1
      if J[2][site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      elif J[2][site_nbr][j] < 0:
        total_spin[0] -= 1
        total_spin[1] += 1
      if J[3][site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      elif J[3][site_nbr][j] < 0:
        total_spin[0] -= 1
        total_spin[1] += 1

      priority_total[i*N+j][0] += sum([a for a in h[site_nbr]]) + total_spin[0]
      if sum(h[site_nbr]) > 0:
        priority_total[i*N+j][1] -= 1 - total_spin[1]
      else:
        priority_total[i*N+j][1] += 1 - total_spin[1]

  return priority_total




#score: {'data2D.txt': -0.010500771604938272}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbrs[site_nbr]][(i%N)]
    if h[i%N][(i//N)] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.010500771604938272}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbrs[site_nbr]][(i%N)]
    if h[i%N][(i//N)] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.18973935185185203}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total

  neighbor_list = [(i, j) for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[-x for x in y] for y in total_spin]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  # first row
  for i in range(1, N):
    site_nbr = (i + ((N - 1) % 2 - 1)) % N
    if h[i][0] > 0:
      total_spin[i * N][0] += 1
      total_spin[i * N][1] -= 1
    else:
      total_spin[i * N][0] -= 1
      total_spin[i * N][1] += 1

  # first column
  for j in range(1, N):
    site_nbr = (N - 1) % N
    if h[0][j] > 0:
      for i in range(N):
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
    else:
      for i in range(N):
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1

  # other sites
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1

  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    else:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.04188780864197534}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return([list(total_spin[i]) for i in range(N*N)])




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  site_nbrs = [(i % N + ((i // N - 1) % 2 - 1)) % N for i in range(N ** 2)]
  for i in range(N**2):
    total_spin[i][0] += h[site_nbrs[i]][i % N]
    if h[site_nbrs[i]][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  
  return (priority_total)




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]

  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i%N][i//N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  n = N**2
  spin_priorities = np.zeros((n, 2))

  for i in range(n):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      spin_priorities[i][0] += 1
      spin_priorities[i][1] -= 1
    else:
      spin_priorities[i][0] -= 1
      spin_priorities[i][1] += 1

  for i in range(n):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if total_spin > 0:
      spin_priorities[i][0] += 1
      spin_priorities[i][1] -= 1
    else:
      spin_priorities[i][0] -= 1
      spin_priorities[i][1] += 1

  return spin_priorities.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.14715138888888907}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] += total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] -= len([True for k in range(3) if h[(i + ((k-1)%2 - 1)) % N][j] > 0])
      else:
        priority_total[i*N+j][1] += len([True for k in range(3) if h[(i + ((k-1)%2 - 1)) % N][j] < 0])
  return [[x[0], -x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  site_nbrs = [(i % N + ((i // N - 1) % 2 - 1)) % N for i in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbrs[i]][i % N]
    if h[site_nbrs[i]][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]

  site_nbrs = [(i % N + ((i // N - 1) % 2 - 1)) % N for i in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return (priority_total)




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  site_nbrs = [(i%N + ((i//N-1)%2-1))%N for i in range(N**2)]
  for i in range(N**2):
    total_spin[i][0] += h[site_nbrs[i]][i%N]
    if h[site_nbrs[i]][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  priority_total = [[total_spin[i][0],-total_spin[i][1]] for i in range(N*N)]
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  
  return ([list(map(lambda x: (-1) ** (x + 1), row)) for row in priority_total])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.19698256172839457}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return([list(x) for x in total_spin])




#score: {'data2D.txt': -0.0010433641975308645}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      priorities[i*N+j][0] += J[0, i, j] * (h[site_nbr][j] - h[i][j])
      priorities[i*N+j][1] -= J[1, i, j] * (h[site_nbr][j] - h[i][j])
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
          total_spin += 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          total_spin -= 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      
  return priority_total




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return ([list(map(lambda x: (-1)**(x+1), row)) for row in total_spin])




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  
  return ([list(map(lambda x: (-1) ** (x + 1), row)) for row in priority_total])




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]

  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]

  return ([list(map(lambda x: (-1) ** (x + 1), row)) for row in priority_total])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return([list(x) for x in total_spin])




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return priorities + total_spin/N**2




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N))
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return priorities




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  interacting_spins = np.zeros((4,N,N))  
  for i in range(4):
    interacting_spins[i] = ((i % 2) * 2 - 1) * h + ((i // 2) % 2) * J[i]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][1] += 1
  
  return(priority_total)




#score: {'data2D.txt': 0.05967978395061734}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[-h[i][j] for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      if i > 0:
        priorities[i][j] += -J[0][i-1][j]
      if j > 0:
        priorities[i][j] += -J[1][i][j-1]
      if i < N-1:
        priorities[i][j] += J[2][i+1][j]
      if j < N-1:
        priorities[i][j] += J[3][i][j+1]
  return [[priorities[i][j], 0] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0,0.0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total=np.zeros((N**2,2))
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][i%N] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.001936882716049405}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j] - h[i][j]
      if J[0, i, j] > 0:
        priorities[i*N+j][0] += 1 * total_spin
        priorities[i*N+j][1] -= 1 * total_spin
      else:
        priorities[i*N+j][0] -= 1 * total_spin
        priorities[i*N+j][1] += 1 * total_spin
  return priorities




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(N**2):
    site = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site][k%N] > 0:
      total_spin[k][0] += 1
      total_spin[k][1] -= 1
    else:
      total_spin[k][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  J_ = J.reshape((4, -1))
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))

  total_spin = np.zeros((N2, 2))

  for i in range(N2):
    site_nbr = (i % N + ((i // N) % 2 - 1)) % N
    if h[i // N][i % N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    else:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1

  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    
    if h[i // N][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i//N][i%N][0] += 1
      total_spin[i//N][i%N][1] -= 1
    else:
      total_spin[i//N][i%N][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[0] += 1
      priorities[i*N+j] = [total_spin[0], total_spin[1]]
  return priorities




#score: {'data2D.txt': -0.016323919753086422}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  total_spin = np.zeros((N, N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
      
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
      
  for i in range(N):
    if h[0][i] > 0:
      priority_total[i][0] = total_spin[0][i][0]
    else:
      priority_total[i][1] = -total_spin[0][i][0]
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.11162114197530865}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(4):
      if J_[j][i] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  priority_total = [[0.0, 0.0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  site_nbrs = [(i % N + ((i // N - 1) % 2 - 1)) % N for i in range(N**2)]

  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  return priority_total




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]

  site_nbrs = [(i % N + ((i // N - 1) % 2 - 1)) % N for i in range(N**2)]

  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return (priority_total)




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]

  site_nbrs = [(i % N + ((i // N - 1) % 2 - 1)) % N for i in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return (priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
    
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': 0.18973935185185203}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  total_spin = np.zeros((N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.028056018518518563}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j] - h[i][j]
        if J[k, i, j] > 0:
          priority_total[i*N+j][0] += 1 * total_spin
          priority_total[i*N+j][1] -= 1 * total_spin
        else:
          priority_total[i*N+j][0] -= 1 * total_spin
          priority_total[i*N+j][1] += 1 * total_spin
  return priority_total




#score: {'data2D.txt': -0.001936882716049405}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j] - h[i][j]
      if J[0, i, j] > 0:
        priorities[i*N+j][0] += 1 * total_spin
        priorities[i*N+j][1] -= 1 * total_spin
      else:
        priorities[i*N+j][0] -= 1 * total_spin
        priorities[i*N+j][1] += 1 * total_spin
  return priorities




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return ([list(map(lambda x: (-1)**(x+1), row)) for row in total_spin])




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_square = N*N
  total_spin = [[0, 0] for _ in range(N_square)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N_square)]
  
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': 0.15130416666666688}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i * N + j][0] -= 1
        priority_total[i * N + j][1] += 1
      else:
        total_spin -= 1
        priority_total[i * N + j][0] += 1
        priority_total[i * N + j][1] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]

  return([[-x[0],-x[1]] if x[0]>0 else [x[0],-x[1]] for x in priority_total])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  
  return priority_total




#score: {'data2D.txt': 0.0034868827160493823}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if J[0][site_nbr][j] > 0:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
      else:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      if total_spin > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
      
  return priority_total




#score: {'data2D.txt': -0.002278549382716049}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(N):
      if J[0][site_nbr][j] > 0:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
      else:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
  return total_spin




#score: {'data2D.txt': -0.31976836419752996}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  spin_priority = np.zeros((N2,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        spin_priority[i*N+j][0] += 1
        spin_priority[i*N+j][1] -= 1
      else:
        spin_priority[i*N+j][0] -= 1
  
  for k in range(3):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin = 0
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      spin_priority[i*N+k][0] += total_spin
      spin_priority[i*N+k][1] -= total_spin
  
  return spin_priority




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
    
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N * N):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  return (priority_total)




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin.tolist()




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  
  return (priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  priority_total = [[0, 0] for _ in range(N * N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i * N + j][0] += 1
        priority_total[i * N + j][1] -= 1
      else:
        priority_total[i * N + j][0] -= 1

  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
      
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr][j][0]
        priority_total[i*N+j][1] -= total_spin[site_nbr][j][1]
      else:
        priority_total[i*N+j][0] -= total_spin[site_nbr][j][0]
        priority_total[i*N+j][1] += total_spin[site_nbr][j][1]
      
  for k in range(N**2):
    site = (k % N + ((k//N-1)%2 - 1)) % N
    if h[site][k%N] > 0:
      priority_total[k][0] += 1
      priority_total[k][1] -= 1
    else:
      priority_total[k][0] -= 1
      priority_total[k][1] += 1
      
  return priority_total




#score: {'data2D.txt': -0.22700200617283905}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
      
  priority_total = np.zeros((N**2, 2))
  
  for k in range(N):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][i] > 0:
        total_spin[i][k][0] += 1
        total_spin[i][k][1] -= 1
      else:
        total_spin[i][k][0] -= 1
        total_spin[i][k][1] += 1
      
  for i in range(N**2):
    priority_total[i][0] = total_spin[i//N][i%N][0]
    if h[i//N][i%N] > 0:
      priority_total[i][1] = -total_spin[i//N][i%N][1]
    else:
      priority_total[i][1] = total_spin[i//N][i%N][1]
      
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  priority_total = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  return ([list(map(lambda x: (-1) ** (x + 1), row)) for row in priority_total])




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  
  return ([list(map(lambda x: (-1) ** (x + 1), row)) for row in priority_total])




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  return ([list(map(lambda x: (-1) ** (x + 1), row)) for row in priority_total])




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return ([list(map(lambda x: (-1) ** (x + 1), row)) for row in priority_total])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  
  priority_total = np.zeros((N2, 2))
  
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  
  return priority_total




#score: {'data2D.txt': -0.2207300925925926}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J_flat[i] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for k in range(3):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i] > 0:
        total_spin = np.sum(J[k][:, i])
        priority_total[i*N+i][0] += 1
        priority_total[i*N+i][1] -= 1 * (total_spin > 0)
      else:
        total_spin = -np.sum(J[k][:, i])
        priority_total[i*N+i][0] -= 1
        priority_total[i*N+i][1] += 1 * (total_spin < 0)
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
        
  for k in range(4):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
    
  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  return (priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))
  
  for k in range(4):
    for i,j in itertools.product(range(N),range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return priorities




#score: {'data2D.txt': -0.32417083333333246}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = 1
    else:
      priority_total[j][1] = -1
  
  for i in range(1, N):
    if h[i][0] > 0:
      priority_total[i*N + 0][0] = 1
    else:
      priority_total[i*N + 0][1] = -1
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.33384984567901144}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    if h[0][i] > 0:
      priority_total[i][0] = -np.sum(priority_total[:, 1])
    else:
      priority_total[i][0] = np.sum(priority_total[:, 0])
  return priority_total




#score: {'data2D.txt': -0.34030200617283846}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = 1
    else:
      priority_total[j][1] = -1
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N**2):
    if h[int(i//N)][i%N] > 0:
      total_spin[i][0] = -1
    else:
      total_spin[i][1] = 1
  
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': -0.1806384259259262}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for j in range(N):
      if J[0][site_nbr][j] > 0:
        total_spin += h[i//N][j]
      else:
        total_spin -= h[i//N][j]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin
      priority_total[i][1] -= 2*total_spin + 1
    else:
      priority_total[i][0] -= total_spin
      priority_total[i][1] = -total_spin + 1
  return priority_total




#score: {'data2D.txt': 0.006961882716049383}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  # Calculate total spin and priority for each site
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    else:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
      
  # Calculate priority for assigning spins to -1 and 1 based on site interactions and magnetism
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  
  for i in range(N2):
    if h[i//N][i%N] > 0:
      total_spin[i][0] += J_flat[4*i + ((i//N-1)%2 - 1)*N + (i%N)]
      total_spin[i][1] -= J_flat[4*i + ((i//N-1)%2 - 1)*N + (i%N)]
    else:
      total_spin[i][0] -= J_flat[4*i + ((i//N-1)%2 - 1)*N + (i%N)]
      total_spin[i][1] += J_flat[4*i + ((i//N-1)%2 - 1)*N + (i%N)]
      
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
      priorities[i][1] += 1
  return priorities.tolist()




#score: {'data2D.txt': -0.009445216049382716}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    
    priority_total[i][0] += total_spin
    priority_total[i][1] = -priority_total[i][0]
  
  return priority_total




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  site_nbrs = [(i % N + ((i // N - 1) % 2 - 1)) % N for i in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbrs[i]][i % N]
    if h[site_nbrs[i]][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbrs = [(i % N + ((i // N - 1) % 2 - 1)) % N]
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  total_spin = [0, 0]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[0] += 1
      priorities[i*N+j] = [total_spin[0], total_spin[1]]
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j], 0]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities.append([1, -1])
    else:
      priorities.append([-1, 1])
  return priorities




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  return (priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[0] += 1
      priorities[i*N+j] = [total_spin[0], total_spin[1]]
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[0] += 1
      priorities[i*N+j] = [total_spin[0], total_spin[1]]
  return priorities




#score: {'data2D.txt': 0.1898905864197533}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return [[priorities[i][0], -priorities[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  return ([list(map(lambda x: (-1) ** (x + 1), row)) for row in priority_total])




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][i%N] > 0:
          total_spin[i][0] += 1
          total_spin[i][1] -= 1
        else:
          total_spin[i][0] -= 1
          total_spin[i][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  return ([list(map(lambda x: (-1) ** (x + 1), row)) for row in priority_total])




#score: {'data2D.txt': -0.0005449074074074074}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i % N]
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  return ([list(map(lambda x: (-1) ** (x + 1), row)) for row in priority_total])




#score: {'data2D.txt': -0.001936882716049405}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j] - h[i][j]
      if J[0, i, j] > 0:
        priorities[i*N+j][0] += 1 * total_spin
        priorities[i*N+j][1] -= 1 * total_spin
      else:
        priorities[i*N+j][0] -= 1 * total_spin
        priorities[i*N+j][1] += 1 * total_spin
  return priorities




#score: {'data2D.txt': 0.09752453703703716}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.1898905864197533}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.0014229938271604935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      return [[priority_total[i][0], -priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.0013773148148148147}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N,N,2))
  for k in range(4):
    if k%2==0:
      for i in range(N):
        for j in range(N):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          total_spin[i][j][0] += h[site_nbr][j]
          if h[i][j] > 0:
            total_spin[i][j][0] += 1
            total_spin[i][j][1] -= 1
          else:
            total_spin[i][j][0] -= 1
            total_spin[i][j][1] += 1
    else:
      for i in range(N):
        site_nbr = (i + ((k-2)%2 - 1)) % N
        for j in range(N):
          if h[site_nbr][j] > 0:
            total_spin[i][j][0] += 1
            total_spin[i][j][1] -= 1
          else:
            total_spin[i][j][0] -= 1
            total_spin[i][j][1] += 1  
  return [(i*N+j, (-sum(J[i][j]*total_spin[k-1][i][j]) if k%2==0 else -J[(k-1)%4][i][j]),) for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.016323919753086422}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  for i in range(N):
    if h[0][i] > 0:
      priority_total[i][0] = total_spin[0][i][0]
    else:
      priority_total[i][1] = -total_spin[0][i][0]
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[0, 0] for _ in range(N**2)]
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][0] -= 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
          total_spin += 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          total_spin -= 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.0093125}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return [[priority_total[i][0], -priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.2742109567901232}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    site_nbr = (i + ((2-1)%2 - 1)) % N
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin = sum(h[site_nbr][j] for site_nbr in site_nbrs)
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  site_nbrs = []
  for i in range(N**2):
    if i % N == 0:
      site_nbr = (i + ((N-1)%2 - 1)) % N
    else:
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
    else:
      total_spin[i*N+j][0] -= 1
  return([total_spin[i*N+j] for i in range(N) for j in range(N)])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return total_spin.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      site = (i // N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
    for k in range(3):
      site = (i // N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
    for k in range(3):
      site = (i // N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
    return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return([total_spin[i*N+j] for i in range(N) for j in range(N)])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1
  return([total_spin[i*N+j] for i in range(N) for j in range(N)])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return([total_spin[i*N+j] for i in range(N) for j in range(N)])




#score: {'data2D.txt': -0.17293256172839455}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
    else:
      total_spin[i*N+j][0] -= 1
  return ([total_spin[i*N+j] for i in range(N) for j in range(N)])




#score: {'data2D.txt': -0.2207300925925926}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_flat = np.concatenate((J[0].flatten(), J[1].flatten(), J[2].flatten(), J[3].flatten()))
  
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J_flat[i] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.00043070987654320985}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  flat_J = J.reshape(-1, 4).sum(axis=1)

  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + flat_J[i]
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1

  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))

  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1

  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return([total_spin[i*N+j] for i in range(N) for j in range(N)])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  return([total_spin[i*N+j] for i in range(N) for j in range(N)])




#score: {'data2D.txt': -0.15769274691358048}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      for k in range(4):
        neighbor_i = (i + ((k%2) - 1)) % N
        neighbor_j = (j + ((k//2) - 1)) % N
        
        if h[neighbor_i][neighbor_j] > 0:
          total_spin += J[k, i, j]
        else:
          total_spin -= J[k, i, j]
      
      priorities[i*N+j, 0] = total_spin
      priorities[i*N+j, 1] = -total_spin
  
  return priorities.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  site_nbrs = []
  
  for k in range(3):
    for i in range(N ** 2):
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      total_spin[i][0] += h[site_nbr][i % N]
      if h[i // N][i % N] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
  
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i][j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i][j][0] += 1
      else:
        total_spin[i][j][0] -= 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    site_nbr = (i + ((2-1)%2 - 1)) % N
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return [[priority_total[i][0], -priority_total[i][1]] for i in range(N * N)]




#score: {'data2D.txt': 0.2742109567901232}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    site_nbr = (i + ((2-1)%2 - 1)) % N
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]




#score: {'data2D.txt': 0.2742109567901232}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    site_nbr = (i + ((2-1)%2 - 1)) % N
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
  return priority_total




#score: {'data2D.txt': -0.003911574074074074}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J_flat[i*4] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1

  return priority_total




#score: {'data2D.txt': -0.16921435185185135}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  priority_total = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  for i in range(N):
    if h[0][i] > 0:
      priority_total[i][0] = total_spin[0][0]
    else:
      priority_total[i][1] = -total_spin[0][0]
  
  return ([priority_total[i*N+j] for i in range(N) for j in range(N)])




#score: {'data2D.txt': 0.1648658950617279}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    if h[0][i] > 0:
      total_spin[i][0] = total_spin[0][1]
    else:
      total_spin[i][1] = -total_spin[0][1]

  priority_total = [[-a for a in b] for b in total_spin]

  return [list(a) for a in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N*N,2))
  for k in range(3):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][0] -= 1
  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  for i in range(N**2):
    total_spin[i][0] += h[site_nbrs[i]][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.04700787037037041}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = 0
    for k in range(4):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin + 1
      priority_total[i][1] -= 2*total_spin+1
    else:
      priority_total[i][0] -= total_spin - 1
      priority_total[i][1] += 2*total_spin-1
  
  return priority_total




#score: {'data2D.txt': 0.2742109567901232}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  
  for i in range(N):
    site_nbr = (i + ((2-1)%2 - 1)) % N
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N * N)]




#score: {'data2D.txt': 0.1648658950617279}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    if h[0][i] > 0:
      total_spin[i][0] = total_spin[0][1]
    else:
      total_spin[i][1] = -total_spin[0][1]

  priority_total = [[-a for a in b] for b in total_spin]

  return [list(a) for a in priority_total]




#score: {'data2D.txt': -0.10918935185185198}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    site_nbr = (i + ((0)%2 - 1)) % N
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j, 0] += 1
        total_spin[i*N+j, 1] -= 1
      else:
        total_spin[i*N+j, 0] -= 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i, 0] += 1
      total_spin[i, 1] -= 1
    else:
      total_spin[i, 0] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j, 0] += J[0, i, j]
      else:
        total_spin[i*N+j, 0] -= J[0, i, j]
      
      site_nbr = (i + ((1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j, 0] += J[1, i, j]
      else:
        total_spin[i*N+j, 0] -= J[1, i, j]
      
      site_nbr = (i + ((2)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j, 0] += J[2, i, j]
      else:
        total_spin[i*N+j, 0] -= J[2, i, j]
      
      site_nbr = (i + ((3)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j, 0] += J[3, i, j]
      else:
        total_spin[i*N+j, 0] -= J[3, i, j]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i, 0] += 1
      total_spin[i, 1] -= 1
    else:
      total_spin[i, 0] -= 1
  
  return total_spin.tolist()




#score: {'data2D.txt': -0.15769274691358048}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
      for k in range(4):
        neighbor_i = (i + ((k%2) - 1)) % N
        neighbor_j = (j + ((k//2) - 1)) % N
        
        if h[neighbor_i][neighbor_j] > 0:
          total_spin += J[k, i, j]
        else:
          total_spin -= J[k, i, j]
        
      priorities[i*N+j, 0] = total_spin
      priorities[i*N+j, 1] = -total_spin
      
  return priorities.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(2):
    site_nbr = (i + ((j-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return total_spin.tolist()




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return total_spin

  # Add your logic here to create a priority function based on the site interactions and magnetism.
  # For example, you can calculate the priority for each spin as follows:

  def get_priority(total_spin):
    priority_list = []
    for i in range(N**2):
      spin = np.sign(total_spin[i][0])
      if spin == 1:
        priority = J[0][i]
      else:
        priority = -J[0][i]
      priority_list.append([spin, priority])
    return priority_list

  return get_priority




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i][j][0] += 1
      else:
        total_spin[i][j][0] -= 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.14147299382716066}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(2):
        total_spin[i][j] += 1
    else:
      for j in range(2):
        total_spin[i][j] -= 1
  
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': -0.240644907407407}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': 0.009474537037037038}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(3)]
    neighbors_spin = [h[s][i%N] for s in site_nbrs]
    total_spin = sum([a*b for a,b in zip(neighbors_spin, [1,-1])])
    magnetism = sum([a*b for a,b in zip(neighbors_spin, [1,1])])
    
    # Calculate priorities
    priority_0 = -magnetism
    priority_1 = total_spin
    
    priorities.append([priority_0, priority_1])
  
  return np.array(priorities)




#score: {'data2D.txt': -0.14147299382716066}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      for j in range(2):
        total_spin[i][j] += 1
    else:
      for j in range(2):
        total_spin[i][j] -= 1
  
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [total_spin[i] for i in range(N*N)]




#score: {'data2D.txt': -0.0008662037037037036}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  for k in range(3):
    for i in range(N**2):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i][0] += h[site_nbrs[i]][i%N]
      if h[i//N][i%N] > 0:
        priority_total = [total_spin[i][0] + 1, -total_spin[i][1] - 1]
      else:
        priority_total = [-total_spin[i][0] - 1, total_spin[i][1] + 1]
  
  return [[priority_total[0], -priority_total[1]] for i in range(N*N)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  for i in range(N**2):
    total_spin[i][0] += h[site_nbrs[i]][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return [[priority_total[i][0], -priority_total[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    if h[0][i] > 0:
      priority_total[i][0] = total_spin[0][0]
    else:
      priority_total[i][1] = -total_spin[0][0]
  return ([total_spin[i*N+j] for i in range(N) for j in range(N)])




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.009996450617283952}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  
  for i in range(N**2):
    for k in range(3):
      site = (i % N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][0] += 1
      else:
        total_spin[i][0] -= 1
  
  return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
        
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr1][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  for k in range(2):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
          total_spin += 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          total_spin -= 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.010322376543209878}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
  for i in range(N**2):
    site = (i % N + ((3-1)%2 - 1)) % N
    if h[site][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  site_nbrs = [(i % N + ((i // N - 1) % 2 - 1)) % N for i in range(N*N)]

  for i in range(N**2):
    site_nbr = site_nbrs[i]
    total_spin[i][0] += h[site_nbr][i % N]
    if h[i // N][i % N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.0014245370370370369}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][0] -= 1
  return [[priority_total[i][0], -priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.09752453703703716}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[total_spin[i][0],-total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[-a for a in b] for b in total_spin]
  return [list(a) for a in priority_total]




#score: {'data2D.txt': -0.009445216049382716}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  priorities = [(np.sign(t[0]), np.sign(t[1])) for t in total_spin]
  return [list(x) for x in priorities]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    total_spin[i][0] += h[site_nbrs[i]][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i + ((i//N+1)%2 - 1)) % N
    if h[site_nbrs[i]][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return [[priority_total[i][0], -priority_total[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(N)]
    site_nbr_sum = sum(h[site_nbrs[j]][j] for j in range(N))
    
    if h[i//N][i%N] > 0:
      total_spin[i][0] += site_nbr_sum
      total_spin[i][1] -= (N - site_nbr_sum)
    else:
      total_spin[i][0] -= site_nbr_sum
      total_spin[i][1] += (N - site_nbr_sum)
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.12185632716049376}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  for i in range(N**2):
    total_spin[i][0] += h[site_nbrs[i]][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return [list(a) for a in priority_total]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[-a for a in b] for b in total_spin]
  return [list(a) for a in priority_total]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[-a for a in b] for b in total_spin]
  return [list(a) for a in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1

  priority_total = [[-a for a in b] for b in total_spin]
  return [list(a) for a in priority_total]




#score: {'data2D.txt': 0.011550462962962964}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(4)]
    neighbors_spin = [h[s][i%N] for s in site_nbrs]
    total_spin = sum([a*b for a,b in zip(neighbors_spin, [1,-1,1,1])])
    magnetism = sum([a*b for a,b in zip(neighbors_spin, [1,1,1,1])])
    
    # Calculate priorities
    priority_0 = -magnetism
    priority_1 = total_spin
    
    priorities.append([priority_0, priority_1])
  
  return np.array(priorities)




#score: {'data2D.txt': 0.009474537037037038}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(3)]
    neighbors_spin = [h[s][i%N] for s in site_nbrs]
    total_spin = sum([a*b for a,b in zip(neighbors_spin, [1,-1])])
    magnetism = sum([a*b for a,b in zip(neighbors_spin, [1,1])])
    
    # Calculate priorities
    priority_0 = -magnetism
    priority_1 = total_spin
    
    priorities.append([priority_0, priority_1])
  
  return np.array(priorities)




#score: {'data2D.txt': 0.009474537037037038}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(3)]
    neighbors_spin = [h[s][i%N] for s in site_nbrs]
    total_spin = sum([a*b for a,b in zip(neighbors_spin, [1,-1])])
    magnetism = sum([a*b for a,b in zip(neighbors_spin, [1,1])])
    
    # Calculate priorities
    priority_0 = -magnetism
    priority_1 = total_spin
    
    priorities.append([priority_0, priority_1])
  
  return np.array(priorities)




#score: {'data2D.txt': 0.009474537037037038}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(3)]
    neighbors_spin = [h[s][i%N] for s in site_nbrs]
    total_spin = sum([a*b for a,b in zip(neighbors_spin, [1,-1])])
    magnetism = sum([a*b for a,b in zip(neighbors_spin, [1,1])])
    
    # Calculate priorities
    priority_0 = -magnetism
    priority_1 = total_spin
    
    priorities.append([priority_0, priority_1])
  
  return np.array(priorities)




#score: {'data2D.txt': 0.34260046296296187}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  for k in range(3):
    for i in range(N**2):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i][0] += h[site_nbrs[i]][i%N]
      if h[i//N][i%N] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]

  for k in range(3):
    for i in range(N**2):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i][0] += h[site_nbrs[i]][i%N]
      if h[i//N][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return total_spin.reshape(N2, 2)




#score: {'data2D.txt': -0.2207300925925926}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  J_flat = np.concatenate((J[0].flatten(), J[1].flatten(), J[2].flatten(), J[3].flatten()))
  
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J_flat[i] > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))

  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return priority_total




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))

  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1

  return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]

  for i in range(N**2):
    site_nbr = (i + ((3-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbrs[i]][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  priority_list = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  return priority_list




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]

  for i in range(N**2):
    site_nbr = (i + ((i//N+((i%N-1)%2)-1)) % N)
    total_spin[i][0] += h[site_nbrs[i]][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr = (i + ((i//N+((i%N-1)%2)-1)) % N)
    if h[site_nbrs[i]][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]

  for i in range(N**2):
    site_nbr = (i + ((3-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbrs[i]][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.18973935185185203}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return priority_total




#score: {'data2D.txt': 0.0484013888888889}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  
  total_spin = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    
    if J_flat[(i % N*4) + (i//N)] > 0:
      if h[i//N][i%N] > 0:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
      else:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
    
    if J_flat[(i % N*4) + ((i//N)%N)] > 0:
      if h[(i+1)%N][i%N] > 0:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
      else:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
    
    if J_flat[(i % N*4) + (N+i//N)] > 0:
      if h[i//N][(i+1)%N] > 0:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
      else:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
    
    if J_flat[(i % N*4) + (N+i//N)%N] > 0:
      if h[(i+1)%N][(i+1)%N] > 0:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
      else:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
  
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))

  priority_total = np.zeros((N2, 2))

  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority_total = np.zeros((N2, 2))
  
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin -= 1
    else:
      total_spin += 1
  
  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i, j: (i + ((j-1)%2 - 1)) % N
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr_i_j = site_nbr(i, j)
      total_spin[i*N+j][0] += h[site_nbr_i_j][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[-1, -1] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr_i_j = site_nbr(i, j)
      if h[site_nbr_i_j][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
  for i in range(N*N):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      
      priority_total[i*N+j] = [sum([a*b for a,b in zip(total_spin,[1,-1])]), sum([a*b for a,b in zip(total_spin,[1,1])])]
  
  return priority_total




#score: {'data2D.txt': -0.0005297839506172838}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(N)]
    
    for j in range(N):
      site_nbr = site_nbrs[j]
      total_spin[i][0] += h[site_nbr][j]
      
      if h[i//N][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.1606294753086417}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(N)]
    
    for j in range(N):
      for k in range(3):
        site = (site_nbrs[j] + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site][j]
        
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.0007319444444444447}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(N)]
    
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][0] += h[site_nbrs[j]][j]
      
      if h[i//N][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
    
    for k in range(3):
     site = (i + ((k-1)%2 - 1)) % N
     if h[site][j] > 0:
       total_spin[i][0] += 1
       total_spin[i][1] -= 1
     else:
       total_spin[i][0] -= 1
       total_spin[i][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.0015424382716049383}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      
      total_energy = [0, 0]
      for k, neighbor_i in enumerate(site_nbrs):
        if J[k][i*N+j][0] > 0:
          total_energy[0] += h[neighbor_i][j]
          if h[i][j] > 0:
            total_energy[1] -= 1
          else:
            total_energy[1] += 1
        else:
          total_energy[0] -= h[neighbor_i][j]
          if h[i][j] > 0:
            total_energy[1] += 1
          else:
            total_energy[1] -= 1
      
      return [[total_energy[0], -total_energy[1]] for _ in range(N*N)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += int(total_spin[site_nbr][j][0] > 0)
      priority_total[i*N+j][1] -= int(total_spin[site_nbr][j][0] > 0)
  
  return priority_total




#score: {'data2D.txt': -0.009536882716049383}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  flat_J = J.reshape(-1, 4).sum(axis=1)
  
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N] + flat_J[i]
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  priority = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    site_val = h[site_nbr][i%N]
    if site_val > 0:
      priority[i][0] += np.abs(site_val)
      priority[i][1] -= np.abs(site_val)
    else:
      priority[i][0] -= np.abs(site_val)
      priority[i][1] += np.abs(site_val)
  
  return priority




#score: {'data2D.txt': -0.038475462962962996}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  flat_J = J.reshape(-1, 4).sum(axis=1)
  
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j] + flat_J[i*N+j]
      if total_spin > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.0052535493827160495}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  flat_J = J.reshape(-1, 4).sum(axis=1)
  
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[i%N][i%N] > 0:
      total_spin = h[site_nbr][i%N] + flat_J[i]
      priority_total[i][0] += int(total_spin>0)
      priority_total[i][1] -= int(total_spin>0)
    else:
      total_spin = -h[site_nbr][i%N] + flat_J[i]
      priority_total[i][0] -= int(total_spin>0)
      priority_total[i][1] += int(total_spin>0)

  return priority_total




#score: {'data2D.txt': -0.00043070987654320985}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  flat_J = J.reshape(-1, 4).sum(axis=1)

  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N] + flat_J[i]
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1

  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin = priority_total[i][0] - priority_total[i][1]
    else:
      total_spin = priority_total[i][0] + priority_total[i][1]

    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1

  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1
  
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += total_spin[site_nbr][j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  priority_total = np.zeros((N * N, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      for k in range(3):
        site = (i + ((k - 1) % 2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i][j][0] += 1
        else:
          total_spin[i][j][0] -= 1

  for i in range(N * N):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.038475462962962996}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  flat_J = J.reshape(-1, 4).sum(axis=1)
  
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j] + flat_J[i*N+j]
      if total_spin > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if total_spin > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      
      priority_total[i*N+j][0] += total_spin
      if total_spin > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(2):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for k in range(3):  
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.06165601851851854}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  
  total_spin = np.zeros((N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total[i][0] += total_spin[site_nbr][0]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      if J_flat[i*4+0] > 0 or J_flat[i*4+3] > 0:
        priority_total[i][1] += 1
      else:
        priority_total[i][0] -= 1
        
    else:
      if J_flat[i*4+1] < 0 or J_flat[i*4+2] < 0:
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] += 1
        
  return priority_total




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return total_spin.tolist()




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': -0.05569675925925928}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))

  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return total_spin + priority_total




#score: {'data2D.txt': -0.010322376543209878}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
  for i in range(N**2):
    site = (i % N + ((3-1)%2 - 1)) % N
    if h[site][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
  for i in range(N**2):
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return [list(row) for row in total_spin]




#score: {'data2D.txt': -0.010322376543209878}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
    site = (i % N + ((3-1)%2 - 1)) % N
    if h[site][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
    site_nbr = (i % N + ((3-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return [np.array([total_spin[i][0], total_spin[i][1]]) for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(2):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': -0.34284490740740636}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
    else:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': -0.0009233024691358027}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0.0, 0.0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += J[0][site_nbr][i%N]
      total_spin[i][1] -= 1.0
    else:
      total_spin[i][0] -= J[0][site_nbr][i%N]
      total_spin[i][1] += 1.0
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(3):
      k = i // N * N + (j % N)
      if J[j+1][site_nbr][k%N] > 0:
        total_spin[i][0] -= 1.0
        total_spin[i][1] += 1.0
      else:
        total_spin[i][0] += 1.0
        total_spin[i][1] -= 1.0
    
  return [list(map(lambda x: 2*x - N if x > (N/2) else 2*x, spin)) for spin in total_spin]




#score: {'data2D.txt': -0.0016233024691358025}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priorities = [[0, 0] for _ in range(N2)]
  for i in range(N2):
    site_nbr1 = (i % N + ((i // N - 1) % 2 - 1)) % N
    site_nbr2 = (i % N + ((i // N + 1) % 2 - 1)) % N
    if h[site_nbr1][i % N] > 0:
      priorities[i][0] += J[0][site_nbr1][i % N]
      priorities[i][1] -= J[1][site_nbr1][i % N]
    else:
      priorities[i][0] -= J[0][site_nbr1][i % N]
      priorities[i][1] += J[1][site_nbr1][i % N]
    if h[site_nbr2][i % N] > 0:
      priorities[i][0] += J[0][site_nbr2][i % N]
      priorities[i][1] -= J[1][site_nbr2][i % N]
    else:
      priorities[i][0] -= J[0][site_nbr2][i % N]
      priorities[i][1] += J[1][site_nbr2][i % N]
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.12185632716049376}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1

  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        
  site_nbr = (i + ((j-1)%2 - 1)) % N
  for j in range(N):
    site_nbrs = [(site_nbr + ((k-1)%2 - 1)) % N for k in range(3)]
    
    for k in range(3):
      if h[site_nbrs[k]][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.2457587962962964}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.1606294753086417}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(N)]
    
    for j in range(N):
      for k in range(3):
        site = (site_nbrs[j] + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site][j]
        
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.0008128086419753088}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
      priority_total = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
      return [priority_total for i in range(N*N)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return priority_total




#score: {'data2D.txt': 0.2457587962962964}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  priority_total = [[0, 0] for _ in range(N*N)]
  
  for k in range(3):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        total_spin[i*N+j][0] += h[site_nbr][j]
        
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
        
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        
  return [[priority_total[i][0], -priority_total[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.12185632716049376}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  return [[sum([a*b for a,b in zip(total_spin[i], [1, -1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for k in range(3):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
          
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
      
  priority_total = [[val[0], -val[1]] for val in total_spin]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
    for k in range(2):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
        
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
        
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[sum([a*b for a,b in zip(total_spin[i], [1,-1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': -0.03206435185185186}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for k in range(3):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][0] > 0:
        total_spin[i*N:][:,1] -= 1
      else:
        total_spin[i*N:][:,1] += 1

  return total_spin




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  return [[sum([a*b for a,b in zip(total_spin[i], [1, -1])]), sum([a*b for a,b in zip(total_spin[i],[1,1])])] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  priority_total = [[0, 0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return [[priority_total[i][0], -priority_total[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.2457587962962964}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  priority_total = np.vstack((total_spin[:, 0], -total_spin[:, 1])).T
  
  return priority_total.tolist()




#score: {'data2D.txt': 0.2572819444444444}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total = [1,-1]
      else:
        priority_total = [-1,1]
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  return [row for row in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      
      if h[site][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
    
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
  
  return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= 2*(total_spin>0)-1
  return [[val[0],-val[1]] for val in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  site_nbr = (lambda i, j: ((i + ((j-1)%2 - 1)) % N))
  
  for i in range(N):
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr(i,j)][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': -0.0009233024691358027}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0.0, 0.0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += J[0][site_nbr][i%N]
      total_spin[i][1] -= 1.0
    else:
      total_spin[i][0] -= J[0][site_nbr][i%N]
      total_spin[i][1] += 1.0
    
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for j in range(3):
     k = i // N * N + (j % N)
     if J[j+1][site_nbr][k%N] > 0:
      total_spin[i][0] -= 1.0
      total_spin[i][1] += 1.0
     else:
      total_spin[i][0] += 1.0
      total_spin[i][1] -= 1.0
    
  return [list(map(lambda x: 2*x - N if x > (N/2) else 2*x, spin)) for spin in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      for k in range(2):
        site = (i + (k%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return [[val[0],-val[1]] for val in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return [row for row in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
      for k in range(2):
        site = (i + ((k - 1) % 2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i * N + j][0] -= 1
          total_spin[i * N + j][1] += 1
        else:
          total_spin[i * N + j][0] += 1
          total_spin[i * N + j][1] -= 1
      
      for k in range(2):
        site = (i + ((k - 1) % 2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i * N + j][0] += 1
          total_spin[i * N + j][1] -= 1
        else:
          total_spin[i * N + j][0] -= 1
          total_spin[i * N + j][1] += 1
      
  return [row for row in total_spin]




#score: {'data2D.txt': -0.0011316358024691358}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
      if h[i][j] > 0:
        priority_total = [1,-1]
      else:
        priority_total = [-1,1]
      
      return [row for row in total_spin]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[total_spin[i][0],-total_spin[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1 - J_flat[N*i % (4*N) + i%N]
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1 - J_flat[N*i % (4*N) + i%N]
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
        
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
      else:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
        
  return priority_total




#score: {'data2D.txt': -0.07609583333333302}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for k in range(3):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        total_spin[i*N+j][0] += h[site][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        
  return(priorities)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.010956635802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_magnetism = h[site_nbr][j]
      
      if total_magnetism > 0:
        priorities[i*N+j] = [1, -1]
      else:
        priorities[i*N+j] = [-1, 1]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_magnetism += h[site_nbr][j]
      
      if total_magnetism > 0:
        priorities[i*N+j] = [1, -1]
      else:
        priorities[i*N+j] = [-1, 1]
  
  return [row for row in priorities]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin += 1
        total_spin -= 1
      else:
        total_spin -= 1
        total_spin += 1
        
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin -= 1
          total_spin += 1
        else:
          total_spin += 1
          total_spin -= 1
      
      priority_total[i*N+j][0] = total_spin
  return [row for row in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N**2,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return(priority_total)




#score: {'data2D.txt': -0.16858472222222246}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1

  for k in range(3):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1

  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for k in range(4): # consider all 4 neighbors
    for i in range(N):
      for j in range(N):
        site_nbrs = [(i + ((j-1)%2 - 1)) % N, (i + ((j+1)%2 - 1)) % N, (i + ((k-1)%2 - 1)) % N, (i + ((k+1)%2 - 1)) % N]
        for site_nbr in site_nbrs:
          total_spin[i*N+j][0] += h[site_nbr][j]
          if h[i][j] > 0:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [[h[i][j]*2 for _ in range(2)] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(2):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority_total = [[0, 0] for _ in range(N*N)]
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': -0.1565942901234569}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': -0.225443981481481}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        
  return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': 0.024075462962962958}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))

  total_spin = np.zeros((N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = total_spin[i][0]
      priority_total[i*N+j][1] = -total_spin[i][1]

  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin + 1
        priority_total[i*N+j][1] -= total_spin - 1
      else:
        priority_total[i*N+j][0] -= total_spin - 1
        priority_total[i*N+j][1] += total_spin + 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': -0.001334722222222222}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      total_spin = np.sum(J[:,i*N+j])
      if np.any(h==np.sum(J[:,i*N+j])):
        if h[i][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
  return priority_total




#score: {'data2D.txt': -0.011780092592592592}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if J[0][site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.0064270061728395065}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
      
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  
  for i in range(N2):
    if h[i//N][i%N] > 0:
      total_spin[i][0] += J_flat[4*i + ((i//N-1)%2 - 1)*N + (i%N)]
      total_spin[i][1] -= J_flat[4*i + ((i//N-1)%2 - 1)*N + (i%N)]
    else:
      total_spin[i][0] -= J_flat[4*i + ((i//N-1)%2 - 1)*N + (i%N)]
      total_spin[i][1] += J_flat[4*i + ((i//N-1)%2 - 1)*N + (i%N)]
      
  return [row[:2] for row in total_spin]




#score: {'data2D.txt': -0.2803294753086415}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbr = lambda i,j : (i + ((j-1)%2 - 1)) % N
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = site_nbr(i,k%N)
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin.tolist()




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  priority_list = [(total_spin[i*N+j][0], -total_spin[i*N+j][1]) for i in range(N) for j in range(N)]
  
  return priority_list




#score: {'data2D.txt': -0.0014807098765432095}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin -= 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          total_spin += 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
      
      return priority_total.tolist()




#score: {'data2D.txt': -0.29649027777777714}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4,-1)
  J_flat = np.concatenate((J_[0],J_[1],J_[2],J_[3]))
  total_spin = np.zeros((N2,2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      if J_flat[i*4+0] > 0 or J_flat[i*4+3] > 0:
        total_spin[i][1] += 1
      else:
        total_spin[i][0] -= 1
    else:
      if J_flat[i*4+1] < 0 or J_flat[i*4+2] < 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] += 1
        
  return total_spin




#score: {'data2D.txt': -0.2689158950617281}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = [(i % N + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]

  for i in range(N**2):
    site_nbr = (site_nbrs[i] + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  return total_spin




#score: {'data2D.txt': -0.00043070987654320926}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i,j:(i % N + ((i//N-1)%2 - 1)) % N
  return [[J[0][site_nbr(i,j)][j] if h[i][j] > 0 else -J[0][site_nbr(i,j)][j], 
          J[1][site_nbr(i,j)][j] if h[i][j] > 0 else -J[1][site_nbr(i,j)][j]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  result = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
        
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
          total_spin -= 1
        else:
          total_spin -= 1
          total_spin += 1
      
      result[i*N+j] = [total_spin, -total_spin]
  
  return result




#score: {'data2D.txt': 0.34257731481481374}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
    else:
      total_spin[i*N+j][0] -= 1
      
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        
  return total_spin.tolist()




#score: {'data2D.txt': -0.007888117283950617}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if total_spin > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      if J[k][site_nbr][i%N] > 0:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
      else:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
    
  return priority_total




#score: {'data2D.txt': -0.0029976851851851853}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    for k in range(4):  
      site_nbr = (i % N + ((k-1)%2 - 1)) % N
      if J[k][site_nbr][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
        
  return priority_total




#score: {'data2D.txt': -0.012156327160493828}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += J[0][site_nbr][i%N]
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= J[0][site_nbr][i%N]
      total_spin[i][1] += 1
  
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.3359779320987644}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_flat = J.flatten()
  J_indices = np.unravel_index(np.arange(J_flat.size), (N,N,N,4))
  
  priorities = np.zeros((N2, 2), dtype=int)
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    J_site_neighbors = J_indices[3][(J_indices[0]==site_nbr) & (np.abs(J_indices[1]-i%N)<=1)]
    
    if h[i//N][i%N] > 0:
      priorities[i][0] += np.sum(J_flat[J_site_neighbors])
      priorities[i][1] -= 2*np.sum(1)
    else:
      priorities[i][0] -= np.sum(J_flat[J_site_neighbors])
      priorities[i][1] += 2*np.sum(1)
      
  return priorities




#score: {'data2D.txt': -0.19698256172839457}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [list(t) for t in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  spin_values = [-1, 1]
  
  # Calculate total magnetism and interactions for each site
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      site_nbrs.remove(i)
      total_spin[i*N+j][0] += sum(h[site_nbr][j] for site_nbr in site_nbrs)
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= len([k for k in site_nbrs if h[k][j] > 0])
      else:
        total_spin[i*N+j][1] += len([k for k in site_nbrs if h[k][j] < 0])
  
  # Calculate priorities for each site
  priority_values = [[val[0], -val[1]] for val in total_spin]
  
  return priority_values




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  priority_total = [[0, 0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1

  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.reshape(-1, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': -0.34291774691357924}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(2):
    site = (i + ((k)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
    else:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.0034859567901234572}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i,j:(i % N + ((i//N-1)%2 - 1)) % N
  return [[sum(J[0][site_nbr(i,j)][k] for k in range(3) if h[(i+(k-1)%2-N//2)%N][j]>0) - sum(-J[0][site_nbr(i,j)][k] for k in range(3) if h[(i+(k-1)%2-N//2)%N][j]<=0),
      sum(J[1][site_nbr(i,j)][k] for k in range(3) if h[(i+(k-1)%2-N//2)%N][j]>0) - sum(-J[1][site_nbr(i,j)][k] for k in range(3) if h[(i+(k-1)%2-N//2)%N][j]<=0)] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.043009722222222255}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i, j: (i % N + ((i // N - 1) % 2 - 1)) % N
  return [[sum(J[0][site_nbr(i, j)][k] for k in range(3) if abs(h[i][(j+k)%N]-h[site_nbr(i,j)][(k+1)%3]) > h[i][j]) 
      if h[i][j] > 0 else -sum(J[0][site_nbr(i, j)][k] for k in range(3) if abs(h[i][(j+k)%N]-h[site_nbr(i,j)][(k+1)%3]) > h[i][j]), 
      sum(J[1][site_nbr(i, j)][k] for k in range(3) if abs(h[i][(j+k)%N]-h[site_nbr(i,j)][(k+1)%3]) > h[i][j]) 
      if h[i][j] > 0 else -sum(J[1][site_nbr(i, j)][k] for k in range(3) if abs(h[i][(j+k)%N]-h[site_nbr(i,j)][(k+1)%3]) > h[i][j])] 
      for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.00043070987654320926}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i,j:(i % N + ((i//N-1)%2 - 1)) % N
  return [[J[0][site_nbr(i,j)][j] if h[i][j] > 0 else -J[0][site_nbr(i,j)][j], 
      J[1][site_nbr(i,j)][j] if h[i][j] > 0 else -J[1][site_nbr(i,j)][j]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.16194768518518532}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return priority_total.reshape(-1, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.009474537037037038}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.18973935185185203}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
          total_spin += 1
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          total_spin -= 1
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
    for k in range(N2):
      site_nbr = (k % N + ((k//N-1)%2 - 1)) % N
      if h[site_nbr][k%N] > 0:
        priority_total[k][0] += 1
        priority_total[k][1] -= 1
      else:
        priority_total[k][0] -= 1
    return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.002721759259259259}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  J_reshape = J.reshape((4,N2))
  
  priority_total = np.zeros((N2,2))
  for k in range(4):
    site_nbr = (k % 2)
    
    total_spin = h[site_nbr].sum()
    if total_spin > 0:
      priority_total[:,0] += -1
      priority_total[:,1] -= 1
    else:
      priority_total[:,0] -= 1
      priority_total[:,1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total.reshape(-1, 2)




#score: {'data2D.txt': -0.0011316358024691358}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
      return [[val[0],-val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  priority_total = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  priority_total = [[0,0] for _ in range(N*N)]
  
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  return [[val[0],-val[1]] for val in total_spin]




#score: {'data2D.txt': -0.001378858024691358}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = [[0, 0] for _ in range(N2)]
  
  site_nbr = lambda i, j: (i + ((j - 1) % 2 - 1)) % N
  
  for i in range(N):
    for j in range(N):
      site_nbr_site = site_nbr(i, j)
      total_spin[i * N + j][0] += h[site_nbr_site][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
      for k in range(2):
        site = (i + ((k - 1) % 2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i * N + j][0] -= 1
          total_spin[i * N + j][1] += 1
        else:
          total_spin[i * N + j][0] += 1
          total_spin[i * N + j][1] -= 1
      
      if h[i][j] > 0:
        priority_total = [1, -1]
      else:
        priority_total = [-1, 1]
      
      return [[row[0], row[1]] for row in total_spin]




#score: {'data2D.txt': -0.0011316358024691358}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
      return [row for row in total_spin]




#score: {'data2D.txt': -0.03296867283950618}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(2):
        if h[site_nbr][j] > 0:
          priorities[i*N+j][0] += J[k][site_nbr][j]
          priorities[i*N+j][1] -= J[k][site_nbr][j]
        else:
          priorities[i*N+j][0] -= J[k][site_nbr][j]
          priorities[i*N+j][1] += J[k][site_nbr][j]
  
  return [row for row in priorities]




#score: {'data2D.txt': -0.00043070987654320926}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i,j:(i % N + ((i//N-1)%2 - 1)) % N
  return [[J[0][site_nbr(i,j)][j] if h[i][j] > 0 else -J[0][site_nbr(i,j)][j], 
      J[1][site_nbr(i,j)][j] if h[i][j] > 0 else -J[1][site_nbr(i,j)][j]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      if h[site_nbr][(k-1)%N] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1
    return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  priority_total = [[0, 0] for _ in range(N*N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
      
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1
    return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      if h[site_nbr][(k-1)%N] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(2):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      
      total_spin[i*N+j][0] += h[site_nbr1][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 2
      else:
        total_spin[i*N+j][1] += 2
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  priority_total = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  priority_total = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': -0.28305910493827163}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_ = J.reshape(4, -1)
  J_flat = np.concatenate((J_[0], J_[1], J_[2], J_[3]))
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    
    if J_flat[i] > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    
    site_nbr = (i % N + ((i//N)%2 - 1)) % N
    total_spin += h[site_nbr][i%N]
    
    if J_flat[(i+1) % (4*N2)] > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    
    if J_flat[(i+N2) % (4*N2)] > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    
    if J_flat[(i+N2)% (4*N2)] > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    
  return priority_total




#score: {'data2D.txt': -0.0013973765432098767}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[i*N2:(i+1)*N2].sum() > 0:
      total_spin += 1
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      total_spin -= 1
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  flat_J = J.reshape(-1,4).sum(axis=1)
  
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j] + flat_J[i*N+j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][0] -= 1
      priority_total[i*N+j][1] += 1
  
  site_nbr = (i + ((k-1)%2 - 1)) % N
  total_spin = h[site_nbr][j]
  if h[i][j] > 0:
    priority_total[i*N+j][0] += 1
    priority_total[i*N+j][1] -= 1
  else:
    priority_total[i*N+j][0] -= 1
    priority_total[i*N+j][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  flat_J = J.reshape(-1, 4).sum(axis=1)
  
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j] + flat_J[i*N+j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      if h[site_nbr][(k-1)%N] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      if h[site_nbr][(k-1)%N] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1
    return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total = np.zeros((N**2, 2))
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          if h[site][j] > 0:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
        return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] = total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][1] += 1
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': 0.33378503086419653}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  for k in range(N):
    site = (k - (k%2)) % N
    if h[site][j] > 0:
      total_spin[k*N+j][0] += 1
    else:
      total_spin[k*N+j][0] -= 1
      
  return [[val[0], -val[1]] for val in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for k in range(2):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
          
  return [list(row) for row in total_spin]




#score: {'data2D.txt': 0.0007106481481481484}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  for k in range(N):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
        else:
          total_spin[i*N+j][0] -= 1
        
  return [[val[0],-val[1]] for val in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      total_spin = [h[site_nbr][j],0]
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      
      priorities[i*N+j] = [total_spin[0],abs(total_spin[0]-N*N)]
  
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      if h[site_nbr][(k-1)%N] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1
    return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = np.array([0,0])
    for k in range(3):
      if h[site_nbr][(k-1)%N] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1
    return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  return [[total_spin[i][0],-total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [row for row in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      if h[site_nbr][(k-1)%N] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1
    return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j], 0]
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j] = [total_spin[0], -total_spin[1]]
  return priority_total




#score: {'data2D.txt': -0.15427453703703725}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priorities[i*N+j][0] += J[k,i,j]
          priorities[i*N+j][1] -= J[k,i,j]
        else:
          priorities[i*N+j][0] -= J[k,i,j]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.005916203703703703}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  interacting_spins = np.zeros((4, N, N))  
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis=i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis=i)

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1

      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if J[k, i, j] > 0:
          priorities[i*N+j][0] += J[k, i, j]
          priorities[i*N+j][1] -= J[k, i, j]
        else:
          priorities[i*N+j][0] -= J[k, i, j]

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': 0.009474537037037038}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i%N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.16543626543209902}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += J[k, i, j]
          total_spin[i*N+j][1] -= J[k, i, j]
        else:
          total_spin[i*N+j][0] -= J[k, i, j]
  return(total_spin)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N - 1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][site_nbr] > 0:
        total_spin[i*N+site_nbr][0] += 1
        total_spin[i*N+site_nbr][1] -= 1
      else:
        total_spin[i*N+site_nbr][0] -= 1
        total_spin[i*N+site_nbr][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i*N+k][0] += 1
        total_spin[i*N+k][1] -= 1
      else:
        total_spin[i*N+k][0] -= 1
        total_spin[i*N+k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.26515231481481477}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += J[k, site_nbr][j]
        if h[site][j] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priorities[i*N+j][0] = total_spin
  return(priorities)




#score: {'data2D.txt': -0.0018554012345679016}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for k in range(4):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i][j][0] += 1
      total_spin[i][j][1] -= 1
    else:
      total_spin[i][j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = [1, -1]
    else:
      priority_total = [-1, 1]
  return([priority_total for _ in range(N**2)])




#score: {'data2D.txt': 0.26515231481481477}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += J[k, site_nbr][j]
        if h[site][j] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priorities[i*N+j][0] = total_spin
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': 0.26515231481481477}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += J[k, site_nbr][j]
        if h[site][j] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priorities[i*N+j][0] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.2727646604938272}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += J[k, site_nbr][j]
        if h[site][j] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priorities[i*N+j][0] = total_spin
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_list = []
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j], 0]
      if h[i][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_list.append(total_spin)
  return np.array(priority_list).reshape(-1,2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+k%N][0] += h[site_nbr][k%N]
      if h[i][k%N] > 0:
        total_spin[i*N+k%N][1] -= 1
      else:
        total_spin[i*N+k%N][1] += 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin = h[site_nbr][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': 0.26515231481481477}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += J[k, site_nbr][j]
        if h[site][j] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priorities[i*N+j][0] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.2727646604938272}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += J[k, site_nbr][j]
        if h[site][j] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priorities[i*N+j][0] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
        
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1
      
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  for k in range(N):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i*N+k][0] += 1
        total_spin[i*N+k][1] -= 1
      else:
        total_spin[i*N+k][0] -= 1
        total_spin[i*N+k][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][0] -= 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[priority_total[i][0], -priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.15427453703703725}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priorities[i*N+j][0] += J[k,i,j]
          priorities[i*N+j][1] -= J[k,i,j]
        else:
          priorities[i*N+j][0] -= J[k,i,j]
  return(priorities)




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
      
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i*N+k][0] += 1
        total_spin[i*N+k][1] -= 1
      else:
        total_spin[i*N+k][0] -= 1
        total_spin[i*N+k][1] += 1
      k += 1
      
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.14446898148148155}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site_nbr][j] + J[k,i,j]
      if total_spin > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.005916203703703703}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if J[k, i, j] > 0:
          priority_total[i*N+j][0] += J[k, i, j]
          priority_total[i*N+j][1] -= J[k, i, j]
        else:
          priority_total[i*N+j][0] -= J[k, i, j]
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for k in range(3):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i*N+k][0] += 1
        total_spin[i*N+k][1] -= 1
      else:
        total_spin[i*N+k][0] -= 1
        total_spin[i*N+k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.26515231481481477}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += J[k, site_nbr][j]
        if h[site][j] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priorities[i*N+j][0] = total_spin
      priorities[i*N+j][1] = -total_spin
  return(priorities)




#score: {'data2D.txt': -0.17236095679012373}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    site_nbr = (i + ((i-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.26515231481481477}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += J[k, site_nbr][j]
        if h[site][j] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priorities[i*N+j][0] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  
  for k in range(3):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][0] > 0:
        total_spin[i*N+0][0] += 1
        total_spin[i*N+0][1] -= 1
      else:
        total_spin[i*N+0][0] -= 1
        total_spin[i*N+0][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for k in range(N):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      if h[site_nbr][(k-1)%N] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1
    return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return [[priority_total[i][0], -priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total = np.zeros((N**2, 2))
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          if h[site][j] > 0:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
        return priority_total.reshape(-1,2)
  return total_spin




#score: {'data2D.txt': 0.2727646604938272}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += J[k, site_nbr][j]
        if h[site][j] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priorities[i*N+j][0] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.12185632716049376}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  
  for i in range(N):
    for j in range(N):
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.26515231481481477}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += J[k, site_nbr][j]
        if h[site][j] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priorities[i*N+j][0] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  
  for i in range(N):
    site_nbr = (i + ((i-1)%2 - 1)) % N
    for j in range(N):
      total_spin = h[site_nbr][j] 
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      
      site_nbr = (j + ((i-1)%2 - 1)) % N
      total_spin += J[0,site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      
      site_nbr = (i + ((j+1)%2 - 1)) % N
      total_spin += J[1,site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      
      site_nbr = ((N-1) + (i+j)%2 - 1) % N
      total_spin += J[2,site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      
      site_nbr = (i + ((N-1)-j)%2 - 1) % N
      total_spin += J[3,site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      
      priorities[i*N+j][0] = total_spin
  return(priorities)




#score: {'data2D.txt': -0.046749537037036944}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        if J[k,site_nbr][j] > 0:
          total_spin -= 1
        else:
          total_spin += 1
      priorities[i*N+j][0] = total_spin
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N**2, 2))
  for k in range(N):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1

  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': -0.007194907407407406}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i%N][i//N][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      if i % N == 0:
        total_spin[i//N][i%N][1] -= 1
      elif i % N == N-1:
        total_spin[i//N][(i+1)%N][1] += 1
      else:
        total_spin[i//N][((i+1)%N)][1] += 1
    else:
      if i % N == 0:
        total_spin[i//N][i%N][1] += 1
      elif i % N == N-1:
        total_spin[i//N][(i-1)%N][1] -= 1
      else:
        total_spin[i//N][(i+1)%N][1] -= 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  prior = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      prior[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        prior[i*N+j][0] += 1
        prior[i*N+j][1] -= 1
      else:
        prior[i*N+j][0] -= 1
        prior[i*N+j][1] += 1
  return prior.reshape(-1,2)




#score: {'data2D.txt': -0.005720524691358024}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if total_spin > 0:
      priority_total[i%N*N+i//N][0] += 1
      priority_total[i%N*N+i//N][1] -= 1
    else:
      priority_total[i%N*N+i//N][0] -= 1
      priority_total[i%N*N+i//N][1] += 1
  return priority_total




#score: {'data2D.txt': -0.3051964506172833}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      if i % N == 0:
        total_spin[i][1] -= 1
      elif i % N == N-1:
        total_spin[i][1] += 1
      else:
        if (i+1)%N != N-1 and (i//N)*N+i%N < (i+1)//N*N+(i+1)%N:
          total_spin[i][1] -= 1
        else:
          total_spin[i][1] += 1
    else:
      if i % N == 0:
        total_spin[i][1] += 1
      elif i % N == N-1:
        total_spin[i][1] -= 1
      else:
        if (i+1)%N != N-1 and (i//N)*N+i%N < (i+1)//N*N+(i+1)%N:
          total_spin[i][1] += 1
        else:
          total_spin[i][1] -= 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': -0.005720524691358024}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i%N*N+i//N][0] += 1
      priority_total[i%N*N+i//N][1] -= 1
    else:
      priority_total[i%N*N+i//N][0] -= 1
      priority_total[i%N*N+i//N][1] += 1

  return priority_total




#score: {'data2D.txt': -0.005720524691358024}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if total_spin > 0:
      priority_total[i%N*N+i//N][0] += 1
      priority_total[i%N*N+i//N][1] -= 1
    else:
      priority_total[i%N*N+i//N][0] -= 1
      priority_total[i%N*N+i//N][1] += 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      if total_spin[i*N+j][0] > 0:
        priorities[i*N+j] = [-total_spin[i*N+j][1], -total_spin[i*N+j][0]]
      else:
        priorities[i*N+j] = [total_spin[i*N+j][1], -total_spin[i*N+j][0]]
  
  return priorities.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = sum(J[k, site_nbr][j] for k in range(4))
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [list(row) for row in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.1938828703703704}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      total_spin = sum(h[site_nbr][j] for site_nbr in site_nbrs)
      if all(J[k,site_nbr][j] > 0 for k, site_nbr in zip(range(4), site_nbrs)):
        total_spin -= 1
      elif any(J[k,site_nbr][j] < 0 for k, site_nbr in zip(range(4), site_nbrs)):
        total_spin += 1
      
      priorities[i*N+j][0] = total_spin
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      if h[site_nbr][(k-1)%N] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i, j in itertools.product(range(N), range(N)):
    site_nbr = (i + ((j-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return priority_total.reshape(-1, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      if h[site_nbr][j] > 0:
        priority_total = np.zeros((N**2, 2))
        
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          
          if h[site][j] > 0:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
        
        return priority_total.reshape(-1,2)
  
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = np.array([0, 0])
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total[i*N+j] = total_spin
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        
  return [[total_spin[i][0],-total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i*N+k][0] += 1
        total_spin[i*N+k][1] -= 1
      else:
        total_spin[i*N+k][0] -= 1
        total_spin[i*N+k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.0015754629629629625}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0, 0.0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site_nbr][j]
        if h[i][j] > 0:
          priorities[i*N+j][0] += 1
          priorities[i*N+j][1] -= 1
        else:
          priorities[i*N+j][0] -= 1
      return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  return total_spin.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total.reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0,0]
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1

    return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return [[priority_total[i][0], -priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.12185632716049376}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.12185632716049376}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return [[total_spin[i][0],-total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.12185632716049376}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return total_spin + priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1,2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = [(i % N + ((i//N-1)%2 - 1)) % N for i in range(N**2)]
  spin_priorities = []
  for i in range(N**2):
    total_energy = h[site_nbrs[i]][i%N]
    if J[0][site_nbrs[i]][i%N] > 0:
      total_energy += 1
      total_spin[i][1] -= 1
    else:
      total_energy -= 1
      total_spin[i][1] += 1
    spin_priorities.append([-total_energy, -total_energy])
  return spin_priorities




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2), dtype=int)
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i//N][i%N][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i//N][i%N][1] -= 1
    else:
      total_spin[i//N][i%N][1] += 1
  return [(total_spin[i][j][0], -total_spin[i][j][1]) for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.0015754629629629625}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0, 0.0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
        if h[i][j] > 0:
          priorities[i*N+j][0] += 1
          priorities[i*N+j][1] -= 1
        else:
          priorities[i*N+j][0] -= 1
      return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0, 0.0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
        else:
          total_spin[0] -= 1
        priorities[i*N+j][0] += total_spin[0]
        priorities[i*N+j][1] -= total_spin[1]
  return(priorities)




#score: {'data2D.txt': -0.005720524691358024}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i%N*N+i//N][0] += 1
      priority_total[i%N*N+i//N][1] -= 1
    else:
      priority_total[i%N*N+i//N][0] -= 1
      priority_total[i%N*N+i//N][1] += 1

  return priority_total




#score: {'data2D.txt': -0.005720524691358024}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i%N*N+i//N][0] += 1
      priority_total[i%N*N+i//N][1] -= 1
    else:
      priority_total[i%N*N+i//N][0] -= 1
      priority_total[i%N*N+i//N][1] += 1

  return priority_total




#score: {'data2D.txt': -0.0015921296296296302}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin.reshape(-1, 2).T.flatten().reshape(N**2, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  return total_spin.reshape(-1, 2)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  return total_spin




#score: {'data2D.txt': -0.005720524691358024}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i%N*N+i//N][0] += 1
      priority_total[i%N*N+i//N][1] -= 1
    else:
      priority_total[i%N*N+i//N][0] -= 1
      priority_total[i%N*N+i//N][1] += 1

  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0, 0.0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return [row for row in priorities]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0, 0.0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      total_spin = [0.0, 0.0]
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
        
      priorities[i*N+j] = [-total_spin[1], -total_spin[0]]
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return [[total_spin[i][0],-total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i*N+k][0] += 1
        total_spin[i*N+k][1] -= 1
      else:
        total_spin[i*N+k][0] -= 1
        total_spin[i*N+k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i*N+k][0] += 1
        total_spin[i*N+k][1] -= 1
      else:
        total_spin[i*N+k][0] -= 1
        total_spin[i*N+k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1

  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
  for k in range(3):
    site = (i + ((k - 1) % 2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i * N + j][0] += 1
      total_spin[i * N + j][1] -= 1
    else:
      total_spin[i * N + j][0] -= 1
      total_spin[i * N + j][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i*N+k][0] += 1
        total_spin[i*N+k][1] -= 1
      else:
        total_spin[i*N+k][0] -= 1
        total_spin[i*N+k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site_nbr][j]
        if h[i][j] > 0:
          priorities[i*N+j][0] += 1
          priorities[i*N+j][1] -= 1
        else:
          priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(2):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  interacting_spins = np.zeros((4,N,N))  
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis=i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis=i)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.2689158950617281}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for k in range(4):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      priorities[i*N+j][0] += 1
      priorities[i*N+j][1] -= 1
    else:
      priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total=np.zeros((N*N,2))
  for k in range(4):
    site_nbr = (k % 2) 
    total_spin = np.zeros((N*N,2)) 
    for i in range(N):
      for j in range(N):  
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
    for i in range(N**2):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      if h[site_nbr][(k-1)%N] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for k in range(2):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return [total_spin[i*N+j].tolist() for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  
  site_nbr = (i + ((k-1)%2 - 1)) % N
  total_spin += h[site_nbr][j]
  
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total = np.zeros((N*N, 2))
      for k in range(4):
        site_nbr = (k % 2) 
        total_spin = np.zeros((N*N,2)) 
        for i in range(N):
          for j in range(N):  
            site_nbr = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site_nbr][j]
            if h[i][j] > 0:
              total_spin[i*N+j][1] -= 1
            else:
              total_spin[i*N+j][1] += 1
        for i in range(N**2):
          site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
          if h[site_nbr][i%N] > 0:
            priority_total[i][0] += 1
            priority_total[i][1] -= 1
          else:
            priority_total[i][0] -= 1
        return(priority_total)
  return(total_spin)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.19698256172839457}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = [0, 0]
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
  
  return [[total_spin[0], -total_spin[1]] for total_spin in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[site_nbr][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      site = (site_nbr + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.0008128086419753088}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      priority_total = [total_spin[i][0]+h[site_nbr][i%N], total_spin[i][1]-1]
    else:
      priority_total = [total_spin[i][0]-h[site_nbr][i%N], total_spin[i][1]+1]

    return [[priority_total[0], -priority_total[1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.19698256172839457}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  site_nbr = np.zeros(N**2, dtype=int)
  
  for i in range(N):
    for j in range(N):
      site_nbr[i*N+j] = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr[i*N+j]][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      
  return total_spin.tolist()




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[1] -= 1
      else:
        total_spin[1] += 1
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[1] += 1
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return(priority_total)




#score: {'data2D.txt': -0.0005171296296296299}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0 if not h[site_nbr][j] else 1
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= 2*total_spin - 1
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    priority_total = np.array([0,0])
    for k in range(3):
      if h[site_nbr][(k-1)%N] > 0:
        priority_total[0] += 1
        priority_total[1] -= 1
      else:
        priority_total[0] -= 1
        priority_total[1] += 1
    return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1

  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  total_spin = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1

  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    else:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1

  return [[total_spin[i][0],-total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return [[total_spin[i][0],-total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for k in range(2):
    for i in range(N**2):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    total_spin[0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.19699490740740688}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin -= 1
      else:
        total_spin += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.10113657407407417}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if h[i][site_nbr] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  for k in range(2):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i][j][0] += 1
    else:
      total_spin[i][j][0] -= 1

  return priority_total.flatten().reshape((N*N,2))




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin.astype(int).tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  prior = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        prior[i*N+j][0] += 1
        prior[i*N+j][1] -= 1
      else:
        prior[i*N+j][0] -= 1
  return prior

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        prior[i*N+j][0] += 1
        prior[i*N+j][1] -= 1
      else:
        prior[i*N+j][0] -= 1
  return prior

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      prior[i][0] += 1
      prior[i][1] -= 1
    else:
      prior[i][0] -= 1
  return prio




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  priority_total = [[0,0] for _ in range(N*N)]
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
  priority_total = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1
  priority_total = np.zeros((N**2,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority_list = [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  
  return priority_list




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.18063472222222168}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  for k in range(3):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))
  
  # Calculate the total spin at each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  # Calculate the priority for each site
  priority_total = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total.astype(int).tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = [[0,0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [list(i) for i in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  for k in range(N):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i*N+k][0] += 1
        total_spin[i*N+k][1] -= 1
      else:
        total_spin[i*N+k][0] -= 1
        total_spin[i*N+k][1] += 1
        
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
  
  for i in range(N ** 2):
    site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  for i in range(N):
    k = 0
    while k < N:
      site = (i + ((k - 1) % 2 - 1)) % N
      if h[site][k] > 0:
        total_spin[i * N + k][0] += 1
        total_spin[i * N + k][1] -= 1
      else:
        total_spin[i * N + k][0] -= 1
        total_spin[i * N + k][1] += 1
      k += 1
  
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N ** 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
      
  return [[total_spin[i][0],-total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j],0]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
      priority_total[i*N+j][0] += 1 - total_spin[i][j][1]
      priority_total[i*N+j][1] = -priority_total[i*N+j][0]
  
  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for k in range(2):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
        else:
          total_spin[i*N+j][0] -= 1

  return total_spin.flatten().reshape(-1, 2)




#score: {'data2D.txt': -0.00019984567901234573}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  # Compute magnetism at each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  # Compute priority for each site
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    for k in range(3):
      site = (i // N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][1] += 1
      else:
        total_spin[i][1] -= 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for k in range(2):
    for i in range(N**2):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1
      else:
        priorities[i][0] -= 1
  return(priorities)




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

      priority_total[i*N+j][0] = -total_spin[i][j][0]
      priority_total[i*N+j][1] = 1 - np.abs(total_spin[i][j][1])

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  return total_spin.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  
  for i in range(N):
    site_nbr = (i + ((i-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    site_nbr = (i + ((0)%2 - 1)) % N
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  for k in range(2):
    site = (i + ((k)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin[i*N+j][0] += 1
    else:
      total_spin[i*N+j][0] -= 1
  
  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.11162114197530865}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for k in range(4):
    site_nbr = (k%2 - 1)
    for i in range(N):
      for j in range(N):
        site = (i + ((j+site_nbr)%2 - 1)) % N
        total_spin[i*N+j][0] += J[k,i,j]
        if J[k,i,j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return priority_total




#score: {'data2D.txt': -0.29886373456790055}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1
  return priority_total




#score: {'data2D.txt': 0.15188657407407408}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site = (i + ((j+site_nbr)%2 - 1)) % N
        total_spin[i*N+j][0] += J[k, i, j]
        if J[k, i, j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  
  priority_total = [[0, 0] for _ in range(N*N)]
  
  for k in range(3):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site = (i + ((j+site_nbr)%2 - 1)) % N
        total_spin[i*N+j][0] += J[k, i, j]
        if J[k, i, j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.07390354938271596}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  for k in range(4):
    site_nbr = (k%2 - 1)
    for i in range(N):
      for j in range(N):
        site = (i + ((j+site_nbr)%2 - 1)) % N
        total_spin = J[k,i,j]
        if J[k,i,j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return(priority_total)




#score: {'data2D.txt': -0.11162114197530865}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += J[0,i,j]
      if J[0,i,j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site_nbr = (k%2 - 1)
    for i in range(N):
      for j in range(N):
        site = (i + ((j+site_nbr)%2 - 1)) % N
        total_spin[i*N+j][0] += J[k+1,i,j]
        if J[k+1,i,j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.22957762345679017}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for k in range(4):
    site_nbr = (k%2 - 1)
    for i in range(N):
      for j in range(N):
        site = (i + ((j+site_nbr)%2 - 1)) % N
        total_spin[i*N+j][0] += J[k,i,j]
        if J[k,i,j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  
  return(total_spin)




#score: {'data2D.txt': -0.3262100308641966}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(4):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if J[k][site_nbr][i]%N > 0:
        priority_total[i*N+int(k/2)][0] += 1
        priority_total[i*N+int(k/2)][1] -= 1
      else:
        priority_total[i*N+int(k/2)][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.10357762345679021}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        total_spin -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return([list(x) for x in priority_total])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += J[k,i,j]
        if J[k,i,j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((3-1)%2 - 1)) % N
      total_spin[i*N+j][0] += J[3,i,j]
      if J[3,i,j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  return(priority_total)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total = np.zeros((N*N, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        total[i*N+j][0] -= 1
        total[i*N+j][1] += 1
      else:
        total_spin -= 1
        total[i*N+j][0] += 1
        total[i*N+j][1] -= 1
  return([list(x) for x in total])




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.225443981481481}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return(total_spin)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total[i*N+j][0] += 1
        total[i*N+j][1] -= 1
      else:
        total[i*N+j][0] -= 1
        total[i*N+j][1] += 1
  return([list(x) for x in total])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return([list(x) for x in total_spin])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  # Compute magnetism at each site
  for i in range(N):
    for j in range(N):
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  # Compute priority for each site
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
      
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.00019984567901234573}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  # Compute magnetism at each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  # Compute priority for each site
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    for k in range(3):
      site = (i // N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][1] += 1
      else:
        total_spin[i][1] -= 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.24355478395061686}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i][j][0]
      priority_total[i*N+j][1] = 1 - np.abs(total_spin[i][j][1])

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority_total = np.zeros((N*N,2))
  
  for k in range(N):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
  
  return total_spin.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  # Compute magnetism at each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  # Compute priority for each site
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    for k in range(3):
      site = (i // N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  # Compute magnetism at each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  # Compute priority for each site
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  # Compute magnetism at each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  # Compute priority for each site
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N - 1) // N * 2)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return([list(x) for x in priority_total])




#score: {'data2D.txt': 0.14486033950617302}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin += J[k][site_nbr][i%N]
        if J[k][site_nbr][i%N] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site_nbr][j]
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        else:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  return([list(x) for x in priority_total])




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N*N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return([list(x) for x in priority_total])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return([list(x) for x in priority_total])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total = np.zeros((N*N, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        total_spin += 1
        total[i*N+j][0] -= 1
        total[i*N+j][1] += 1
      else:
        total_spin -= 1
        total[i*N+j][0] += 1
        total[i*N+j][1] -= 1
  return([list(x) for x in total])




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = sum(J[k][site_nbr]*J[k][(i + ((k-1)%2 - 1)) % N] for k in range(3))
      if h[site_nbr][j] > 0:
        total[i*N+j][0] += 1
        total[i*N+j][1] -= 1
      else:
        total[i*N+j][0] -= 1
        total[i*N+j][1] += 1
  return([list(x) for x in total])




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [0, 0]
      if h[site_nbr][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = [0, 0]
    total_spin[0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.06642206790123462}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  total_spin = np.zeros((N,N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
      
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if abs(k-1) == 1: # left neighbor
          j_nbr = max(0, min(N-1, j-1))
        elif k == 2: # top neighbor
          i_nbr = max(0, min(N-1, i-1))
          j_nbr = j
        else: # right or bottom neighbor
          i_nbr = i
          j_nbr = min(max(0, j+1), N-1)
        total_spin[i][j_nbr][0] += h[site_nbr][j_nbr]
        if h[i][j] > 0:
          total_spin[i][j_nbr][1] -= 1
        else:
          total_spin[i][j_nbr][1] += 1
      
      priority_total[i*N+j][0] = total_spin[i][j][0]
      priority_total[i*N+j][1] = -total_spin[i][j][1]
  
  return(priority_total)




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.00915231481481481}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      total_spin = sum(h[site_nbr][j] for site_nbr in site_nbrs)
      if h[i][j] > 0:
        priorities.append([-total_spin, 1 - np.abs(total_spin)])
      else:
        priorities.append([total_spin, np.abs(total_spin) + 1])
  return np.array(priorities).reshape(-1,2)




#score: {'data2D.txt': -0.0015723765432098763}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
  
  for k in range(3):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  
  return [[a, -b] for a, b in total_spin]




#score: {'data2D.txt': -0.06553256172839507}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority_total = np.zeros((N*N, 2))
  
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site = (i + ((j+site_nbr)%2 - 1)) % N
        priority_total[i*N+j][0] += J[k, i, j]
        if J[k, i, j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += J[k, i, j]
        if J[k, i, j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  
  return [[x[0], N - x[1]] for x in total_spin]




#score: {'data2D.txt': 0.24355478395061686}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i][j][0]
      priority_total[i*N+j][1] = 1 - np.abs(total_spin[i][j][1])

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N*N,2))
  for k in range(4):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for k in range(N):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin[i][j][0] += 1
          total_spin[i][j][1] -= 1
        else:
          total_spin[i][j][0] -= 1
          total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i][j][0]
      priority_total[i*N+j][1] = 1 - np.abs(total_spin[i][j][1])

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  # Calculate total spin
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  # Calculate interaction spin
  for k in range(4):
    site = (k%2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((j+site)%2 - 1)) % N
        total_spin[i*N+j][0] += J[k,i,j]
        if J[k,i,j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  
  # Calculate priority
  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] += h[site_nbr][j]
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return [np.array(p) for p in priority_total]




#score: {'data2D.txt': 0.19649398148148145}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_energy = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      for k in range(3):
        site_nbr = (i + ((j + k % 2 - 1) % 2) - 1) % N
        if h[site_nbr][j] > 0:
          site_energy[i * N + j][0] += J[k, i, j]
          site_energy[i * N + j][1] -= 1
        else:
          site_energy[i * N + j][0] -= J[k, i, j]
          site_energy[i * N + j][1] += 1
  return [[site_energy[i * N + j][0], -site_energy[i * N + j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.11162114197530865}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += J[0,i,j]
      if J[0,i,j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  for k in range(3):
    site_nbr = (k%2 - 1)
    for i in range(N):
      for j in range(N):
        site = (i + ((j+site_nbr)%2 - 1)) % N
        total_spin[i*N+j][0] += J[k+1,i,j]
        if J[k+1,i,j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  return(total_spin)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  for i in range(N2):
    if h[i//N][i%N] > 0:
      total_spin[i][1] += 1
    else:
      total_spin[i][1] -= 1
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  # Compute magnetism at each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  # Compute priority for each site
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  for i in range(N2):
    site_nbr = (i // N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] += 1
    else:
      total_spin[i][1] -= 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.09580910493827176}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((0)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i][j][0]
      if np.abs(total_spin[i][j][1]) < N/2:
        priority_total[i*N+j][1] = 1
      else:
        priority_total[i*N+j][1] = -1

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': 0.10065848765432107}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((0)%2 - 1)) % N
      if h[i][site_nbr] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1

  site_nbr = (i + ((2)%2 - 1)) % N
  if h[i][site_nbr] > 0:
    total_spin[i][j][0] += 1
    total_spin[i][j][1] -= 1
  else:
    total_spin[i][j][0] -= 1
    total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i][j][0]
      priority_total[i*N+j][1] = 1 - np.abs(total_spin[i][j][1])

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = sum([J[k][i*N+j] for k in range(4)])
      if h[i][j] > 0:
        priority_total = [total_spin+1, -total_spin-1]
      else:
        priority_total = [-total_spin-1, total_spin+1]
      return ([list(x) for x in total])




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return(priority_total)




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  priority_total = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return(priority_total)




#score: {'data2D.txt': -0.2689158950617281}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      priorities[i*N+j][0] += total_spin
      priorities[i*N+j][1] -= total_spin
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.00019984567901234573}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N*N,2))
  for k in range(4):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][1] += 1

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      if abs(total_spin[i*N+j][1]) > N//2:
        priority_total[i*N+j][1] = -np.sign(total_spin[i*N+j][1])
      else:
        priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])

  return [list(p) for p in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.29432391975308586}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N2):
    site_nbr = (i // N + ((i%N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N -1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] += 1
    else:
      total_spin[i][1] -= 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    total_spin = [0, 0]
    site_nbr = (i // N + ((i % N - 1) % 2 - 1)) % N
    total_spin[0] += h[site_nbr][i % N]
    if h[i // N][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.15666064814814828}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_nbrs = []
  
  for i in range(N):
    temp = []
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
    site_nbrs.append(temp)
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return(total_spin)




#score: {'data2D.txt': 0.2700470679012342}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] = -total_spin
      if np.abs(total_spin) < N/2:
        priority_total[i*N+j][1] = 1
      else:
        priority_total[i*N+j][1] = -1
  return priority_total.flatten().reshape(-1, 2)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  site_nbrs = []
  
  for i in range(N):
    temp = []
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
    site_nbrs.append(temp)
  
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  
  return(total_spin)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  site_priors = []
  for i in range(N**2):
    site_priors.append([-total_spin[i][0], -total_spin[i][1]])
  
  return site_priors




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[-np.inf,-np.inf] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N -1) % 2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if total_spin > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
      
  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N -1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] += 1
    else:
      total_spin[i][1] -= 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  site_priors = []
  for i in range(N**2):
    spin_sum = total_spin[i][0]
    if h[i//N][i%N] > 0:
      spin_sum += 1
    else:
      spin_sum -= 1
    
    site_priors.append([-spin_sum, -total_spin[i][1]])
  
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([p_pos, p_neg])
    elif p_pos < p_neg:
      site_priors.append([-p_neg, -p_pos])
    else:
      site_priors.append([p_pos, p_neg])
      
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      if abs(total_spin[i*N+j][1]) > N//2:
        priority_total[i*N+j][1] = -np.sign(total_spin[i*N+j][1])
      else:
        priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]

  return [list(p) for p in priority_total]




#score: {'data2D.txt': -0.2689158950617281}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      if abs(total_spin[i*N+j][1]) > N//2:
        priority_total[i*N+j][0] = -total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -np.sign(total_spin[i*N+j][1])
      else:
        priority_total[i*N+j][0] = 1 - np.abs(total_spin[i*N+j][1])
        if h[i][j] > 0:
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][1] += 1

  return [list(p) for p in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      if abs(total_spin[i*N+j][1]) > N//2:
        priority_total[i*N+j][1] = -np.sign(total_spin[i*N+j][1])
      else:
        priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])

  return [list(p) for p in priority_total]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      if total_spin[i*N+j][1] > N//2:
        priority_total[i*N+j] = [1, -abs(total_spin[i*N+j][0])]
      elif total_spin[i*N+j][1] < -N//2:
        priority_total[i*N+j] = [-1, abs(total_spin[i*N+j][0])]
      else:
        if total_spin[i*N+j][0] > 0:
          priority_total[i*N+j] = [1, -abs(total_spin[i*N+j][0])]
        else:
          priority_total[i*N+j] = [-1, abs(total_spin[i*N+j][0])]

  return [list(p) for p in priority_total]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      if abs(total_spin[i*N+j][1]) > N//2:
        priority_total[i*N+j][1] = -np.sign(total_spin[i*N+j][1])
      else:
        priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])

  return [list(p) for p in priority_total]




#score: {'data2D.txt': 0.24355478395061686}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      if abs(total_spin[i*N+j][1]) > N//2:
        priority_total[i*N+j][1] = -np.sign(total_spin[i*N+j][1])
      else:
        priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])

  return [list(p) for p in priority_total]




#score: {'data2D.txt': 0.24355478395061686}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1

  priority_total = [[0, 0] for _ in range(N ** 2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i * N + j][0] = -total_spin[i * N + j][0]
        priority_total[i * N + j][1] = -total_spin[i * N + j][1]
      else:
        priority_total[i * N + j][0] = total_spin[i * N + j][0]
        priority_total[i * N + j][1] = -total_spin[i * N + j][1]

  return [list(p) for p in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = [h[site_nbr][j], 0]
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[0] += 1
        else:
          total_spin[0] -= 1
      priority_total[i*N+j][0] = -total_spin[0]
      if abs(total_spin[1]) > N//2:
        priority_total[i*N+j][1] = -np.sign(total_spin[1])
      else:
        priority_total[i*N+j][1] = 1 - np.abs(total_spin[1])
  return [list(p) for p in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  for i in range(N**2):
    if total_spin[i][0] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    elif total_spin[i][0] < 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1

  return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([p_pos, p_neg])
    elif p_pos < p_neg:
      site_priors.append([-p_neg, -p_pos])
    else:
      site_priors.append([p_pos, p_neg])
      
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([p_pos, p_neg])
    elif p_pos < p_neg:
      site_priors.append([-p_neg, -p_pos])
    else:
      site_priors.append([p_pos, p_neg])
      
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([p_pos, p_neg])
    elif p_pos < p_neg:
      site_priors.append([-p_neg, -p_pos])
    else:
      site_priors.append([p_pos, p_neg])

  return site_priors




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
        else:
          total_spin[i*N+j][0] -= 1
        
  return([total_spin[i*N+j] for i in range(N) for j in range(N)])




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      if abs(total_spin[i*N+j][1]) > N//2:
        priority_total[i*N+j][1] = -np.sign(total_spin[i*N+j][1])
      else:
        priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])

  return [list(p) for p in priority_total]




#score: {'data2D.txt': 0.24355478395061686}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      if abs(total_spin[i*N+j][1]) > N//2:
        priority_total[i*N+j][1] = -np.sign(total_spin[i*N+j][1])
      else:
        priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])

  return [list(p) for p in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      if abs(total_spin[i*N+j][1]) > N//2:
        priority_total[i*N+j][1] = -np.sign(total_spin[i*N+j][1])
      else:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return [list(p) for p in priority_total]




#score: {'data2D.txt': -0.2423634259259259}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J4xN2 = np.reshape(J,(4,N2))
  total_spin = [[0,0] for _ in range(N2)]
  for i in range(N2):
    site_nbr = (i // N + ((i % N -1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if J4xN2[k][i] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N -1) % 2 - 1)) % N
    priority_total[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
      
  for k in range(2):
    site = (i // N + ((k-1)%2 - 1)) % N
    if h[site][i%N] > 0:
      priority_total[i][1] -= 1
    else:
      priority_total[i][1] += 1
      
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.33539675925925827}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1
  for k in range(2):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      for i in range(N):
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
    else:
      for i in range(N):
        total_spin[i][j][0] -= 1
  return total_spin.reshape(-1,2).tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N -1) % 2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([p_pos,p_neg])
    elif p_pos < p_neg:
      site_priors.append([-p_neg,-p_pos])
    else:
      site_priors.append([p_pos,p_neg])
      
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([p_pos, p_neg])
    elif p_pos < p_neg:
      site_priors.append([-p_neg, -p_pos])
    else:
      site_priors.append([p_pos, p_neg])
      
  return site_priors




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N ** 2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  priority_total = [[0, 0] for _ in range(N ** 2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    if h[int(i//N)][i%N] > 0:
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]

  return [list(p) for p in priority_total]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])

  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
      for k in range(3):
        site = (i + ((k - 1) % 2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i * N + j][0] -= 1
          total_spin[i * N + j][1] += 1
        else:
          total_spin[i * N + j][0] += 1
          total_spin[i * N + j][1] -= 1
  
  return([list(x) for x in total_spin])




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.018035648148148144}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      for k in range(4):
        if k == 0:
          total_spin[i*N+j][0] += h[site_nbr][j]
          if h[i][j] > 0:
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][1] += 1
        elif k == 1 and i > 0 and j < N-1:
          site = (i - 1 + ((j+1)%2 - 1)) % N
          if h[site][j+1] > 0:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
          else:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
        elif k == 2 and j > 0:
          site = (i + ((j-1)%2 - 1)) % N
          if h[site][j-1] > 0:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
          else:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
        elif k == 3 and i < N-1:
          site = (i + 1 + ((j-1)%2 - 1)) % N
          if h[site][j-1] > 0:
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
          else:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
        
  return([list(x) for x in total_spin])




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    
    if p_pos > p_neg + 1e-6:
      site_priors.append([p_pos, -p_neg])
    elif p_neg > p_pos + 1e-6:
      site_priors.append([-p_pos, p_neg])
    else:
      site_priors.append([p_pos, p_neg])
      
  return site_priors




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([-p_neg,p_pos])
    elif p_pos < p_neg:
      site_priors.append([p_pos,-p_neg])
    else:
      site_priors.append([p_pos,p_neg])
      
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  for i in range(N**2):
    if total_spin[i][0] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    elif total_spin[i][0] < 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1

  for k in range(3):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      total_spin += 1
    else:
      total_spin -= 1

  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N -1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  
  # Calculate priority for each site based on the total spin and interaction with neighbors
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.3344902777777768}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        
  for k in range(N):
    site = (k + ((j-1)%2 - 1)) % N
    if h[site][i] > 0:
      total_spin[k*N+i][0] += 1
      total_spin[k*N+i][1] -= 1
    else:
      total_spin[k*N+i][0] -= 1
      total_spin[k*N+i][1] += 1
      
  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priorities = [[x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': -0.012033796296296294}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N -1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  
  for k in range(3):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][0] > 0:
        for j in range(N):
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      else:
        for j in range(N):
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      if total_spin[i*N+j][0] > N//2:
        priority_total[i*N+j] = [1, -1]
      elif total_spin[i*N+j][0] < -N//2:
        priority_total[i*N+j] = [-1, 1]
      else:
        if abs(total_spin[i*N+j][1]) > N//2:
          priority_total[i*N+j] = [-np.sign(total_spin[i*N+j][1]), np.abs(total_spin[i*N+j][1])]
        else:
          priority_total[i*N+j] = [0, 0]

  return [list(p) for p in priority_total]




#score: {'data2D.txt': 0.024862499999999996}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    if abs(total_spin[i][1]) > N//2:
      priority_total[i][1] = -np.sign(total_spin[i][1])
    else:
      priority_total[i][1] = 1 - np.abs(total_spin[i][1])

  return [list(p) for p in priority_total]




#score: {'data2D.txt': 0.000977006172839506}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      if abs(total_spin[i*N+j][0]) > N//2:
        priority_total[i*N+j][0] = -np.sign(total_spin[i*N+j][0])
      else:
        priority_total[i*N+j][0] = 1 - np.abs(total_spin[i*N+j][0])

  return [list(p) for p in priority_total]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  for i in range(N**2):
    if total_spin[i][0] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    elif total_spin[i][0] < 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1

  return [list(t) for t in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  for k in range(2):
    for i in range(N**2):
      if total_spin[i][0] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      elif total_spin[i][0] < 0:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1

  return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([-p_neg, p_pos])
    elif p_pos < p_neg:
      site_priors.append([p_neg, -p_pos])
    else:
      site_priors.append([p_pos, p_neg])
      
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg and h[i//N][i%N]>0:
      site_priors.append([p_pos, p_neg])
    elif p_pos < p_neg and h[i//N][i%N]<0:
      site_priors.append([-p_neg, -p_pos])
    else:
      if np.random.rand() > 0.5:
        site_priors.append([p_pos, p_neg])
      else:
        site_priors.append([-p_neg, -p_pos])
      
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  priority = []
  for i in range(N2):
    spin_sum = total_spin[i][0]
    mag_sum = total_spin[i][1]
    
    if spin_sum > mag_sum:
      priority.append([-1, 1])
    elif spin_sum < mag_sum:
      priority.append([1, -1])
    else:
      if h[i//N][i%N] > 0:
        priority.append([-1, 1])
      else:
        priority.append([1, -1])
  
  return priority




#score: {'data2D.txt': -0.24656435185185172}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    site_nbr = (i + ((i+1)%2 - 1)) % N
    total_spin[i*N:(i+1)*N, 0] += h[site_nbr]
    total_spin[i*N:(i+1)*N, 1][h[i]>0] -= 1
  
  return [list(x) for x in total_spin.reshape(N2, 2)]




#score: {'data2D.txt': 0.2554723765432095}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    if h[site_nbr][i] > 0:
      for j in range(N):
        total_spin[i*N+j][1] -= 1
    else:
      for j in range(N):
        total_spin[i*N+j][1] += 1
  
  priorities = [[x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N2):
    site = (i//N, i%N)
    neighbor = ((site[0]+((site[1]-1)%2 - 1)) % N, i%N)
    if np.abs(total_spin[i][0]) > np.abs(total_spin[i][1]):
      total_spin[i][0] += J[neighbor][i]
      if h[neighbor[0]][neighbor[1]] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
  
  priorities = [[x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  priorities = [[x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N -1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
    
    for k in range(3):
      site = (i // N + ((k-1)%2 - 1)) % N
      if h[site][i%N] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
        
  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if abs(p_pos) > abs(p_neg):
      site_priors.append([p_pos, p_neg])
    elif abs(p_pos) < abs(p_neg):
      site_priors.append([-p_neg, -p_pos])
    else:
      site_priors.append([p_pos, p_neg])
      
  return site_priors




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([p_pos, 1])
    elif p_pos < p_neg:
      site_priors.append([-p_neg, -1])
    else:
      site_priors.append([p_pos/2, 0.5])
      
  return site_priors




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([-p_pos, p_neg])
    elif p_pos < p_neg:
      site_priors.append([p_pos, -p_neg])
    else:
      site_priors.append([p_pos, p_neg])
      
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  # Calculate magnetism at each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  # Calculate interaction with nearest neighbors
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priorities = [[x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    
    if h[i//N][i%N]>0 and p_pos > p_neg:
      site_priors.append([p_pos, p_neg])
    elif h[i//N][i%N]<0 and p_neg > p_pos:
      site_priors.append([-p_neg, -p_pos])
    else:
      if np.random.rand() > 0.5:
        site_priors.append([p_pos, p_neg])
      else:
        site_priors.append([-p_neg, -p_pos])
        
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if h[i//N][i%N] > 0:
      if p_pos >= p_neg:
        site_priors.append([p_pos, p_neg])
      else:
        site_priors.append([-p_neg, -p_pos])
    elif h[i//N][i%N] < 0:
      if p_pos <= p_neg:
        site_priors.append([-p_neg, -p_pos])
      else:
        site_priors.append([p_pos, p_neg])
    else:
      if np.random.rand() > 0.5:
        if p_pos >= p_neg:
          site_priors.append([p_pos, p_neg])
        else:
          site_priors.append([-p_neg, -p_pos])
      else:
        if p_pos <= p_neg:
          site_priors.append([-p_neg, -p_pos])
        else:
          site_priors.append([p_pos, p_neg])
  
  return site_priors




#score: {'data2D.txt': 0.21111373456790125}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
      for k in range(3):
        site = (i + ((k - 1) % 2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i * N + j][0] -= 1
          total_spin[i * N + j][1] += 1
        else:
          total_spin[i * N + j][0] += 1
          total_spin[i * N + j][1] -= 1
      
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      if h[site_nbr][i % N] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1
      
  return([list(x) for x in total_spin])




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([p_pos, -p_neg])
    elif p_pos < p_neg:
      site_priors.append([-p_neg, p_pos])
    else:
      site_priors.append([p_pos, p_neg])

  return site_priors




#score: {'data2D.txt': -0.26079182098765397}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N2):
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1

  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    if h[site_nbr][i] > 0:
      for j in range(N):
        total_spin[i*N+j][1] -= 1
    else:
      for j in range(N):
        total_spin[i*N+j][1] += 1

  priorities = np.zeros((N2, 2))
  for i in range(N2):
    if total_spin[i][0] > total_spin[i][1]:
      priorities[i][0] = 1
      priorities[i][1] = -1
    elif total_spin[i][0] < total_spin[i][1]:
      priorities[i][0] = -1
      priorities[i][1] = 1
    else:
      if total_spin[i][0] > 0:
        priorities[i][0] = 1
        priorities[i][1] = -1
      elif total_spin[i][0] < 0:
        priorities[i][0] = -1
        priorities[i][1] = 1

  return priorities.tolist()




#score: {'data2D.txt': 0.2554723765432095}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    if h[site_nbr][i] > 0:
      for j in range(N):
        total_spin[i*N+j][1] -= 1
    else:
      for j in range(N):
        total_spin[i*N+j][1] += 1
  
  priorities = [[x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': 0.32926188271604845}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
        
  for i in range(N2):
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
      
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    if h[site_nbr][i] > 0:
      for j in range(N):
        total_spin[i*N+j][1] -= 1
    else:
      for j in range(N):
        total_spin[i*N+j][1] += 1
        
  priorities = [[x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': 0.31004768518518444}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N//2+1):
      k = (i + j) % N
      site_nbr = (k + ((j-1)%2 - 1)) % N
      total_spin[k*N+(N-j-1)][0] += h[site_nbr][N-j-1]
      if h[i][N-j-1] > 0:
        total_spin[k*N+(N-j-1)][1] -= 1
      else:
        total_spin[k*N+(N-j-1)][1] += 1

  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([p_pos, p_neg])
    elif p_pos < p_neg:
      site_priors.append([-p_neg, -p_pos])
    else:
      site_priors.append([p_pos, p_neg])

  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    
    if p_pos > p_neg:
      site_priors.append([p_pos,p_neg])
    elif p_pos < p_neg:
      site_priors.append([-p_neg,-p_pos])
    else:
      if np.random.rand() < 0.5:
        site_priors.append([p_pos,p_neg])
      else:
        site_priors.append([-p_neg,-p_pos])
  
  return site_priors




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([-p_neg, p_pos])
    elif p_pos < p_neg:
      site_priors.append([p_neg, -p_pos])
    else:
      site_priors.append([p_pos, p_neg])

  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_priors = []
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N**2):
    site_priors.append([-total_spin[i][0], -total_spin[i][1]])
    
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  site_priors = []
  for i in range(N**2):
    spin_sum = total_spin[i][0]
    if h[i//N][i%N] > 0:
      spin_sum += 1
    else:
      spin_sum -= 1
    
    site_priors.append([-spin_sum - total_spin[i][1], -total_spin[i][1]])
    
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priorities = [[x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N//2):
      site = (i + ((2*j+1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i*N+(N-1-j)][0] += 1
        total_spin[i*N+(N-1-j)][1] -= 1
      else:
        total_spin[i*N+(N-1-j)][0] -= 1
        total_spin[i*N+(N-1-j)][1] += 1
        
  priorities = [[x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': 0.09660972222222236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  for i in range(N2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][1] -= 1
    else:
      total_spin[i][1] += 1
      
  priorities = [[x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1

  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([-p_neg, p_pos])
    elif p_pos < p_neg:
      site_priors.append([p_neg, -p_pos])
    else:
      site_priors.append([p_pos, p_neg])

  return site_priors




#score: {'data2D.txt': -0.0017569444444444442}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    site_nbr = (i + ((1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    site_nbr = (i + ((2)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    site_nbr = (i + ((3)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    priority_total[i*N+i][0] = -total_spin[i*N+i][0]
    if h[i][i] > 0:
      priority_total[i*N+i][1] = 1 - np.abs(total_spin[i*N+i][1])
    else:
      priority_total[i*N+i][1] = 1 + np.abs(total_spin[i*N+i][1])

  for i in range(N):
    for j in range(i+1,N):
      site_nbr = (j + ((2)%2 - 1)) % N
      if h[site_nbr][i] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(i+1,N):
      site_nbr = (j + ((3)%2 - 1)) % N
      if h[site_nbr][i] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    priority_total[i*N+i][0] = -total_spin[i*N+i][0]
    if h[i][i] > 0:
      priority_total[i*N+i][1] = 1 - np.abs(total_spin[i*N+i][1])
    else:
      priority_total[i*N+i][1] = 1 + np.abs(total_spin[i*N+i][1])

  for i in range(N):
    for j in range(i+1,N):
      site_nbr = (j + ((2)%2 - 1)) % N
      if h[site_nbr][i] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(i+1,N):
      site_nbr = (j + ((3)%2 - 1)) % N
      if h[site_nbr][i] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    priority_total[i*N+i][0] = -total_spin[i*N+i][0]
    if h[i][i] > 0:
      priority_total[i*N+i][1] = 1 - np.abs(total_spin[i*N+i][1])
    else:
      priority_total[i*N+i][1] = 1 + np.abs(total_spin[i*N+i][1])

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.24667669753086374}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      if abs(total_spin[i*N+j][0]) > abs(total_spin[i*N+j][1]):
        priority_total[i*N+j][0] = -total_spin[i*N+j][0]
        priority_total[i*N+j][1] = 1
      else:
        priority_total[i*N+j][0] = 1 - np.abs(total_spin[i*N+j][0])
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      neighbor_sum = 0
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          neighbor_sum -= 1
        else:
          neighbor_sum += 1
      total_spin[i*N+j][0] += h[i][j] + neighbor_sum
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] += 1

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N*N,2))
  for k in range(4):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr1][j] + h[site_nbr2][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 2
      else:
        total_spin[i*N+j][1] += 2

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 2
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 2
        priority_total[i*N+j][1] -= 1

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': 0.21111373456790125}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  priority_total = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.10283101851851861}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + (j+1)%N) % N
      total_spin[i*N+j][0] += h[site_nbr1][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(2):
        site = (i + ((k)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        
  return([list(x) for x in total_spin])




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(2):
        site = (i + ((k)%2 - 1)) % N
        if h[site][j] > 0:
          if k == 0:  
            total_spin[i*N+j][0] -= 1
            total_spin[i*N+j][1] += 1
          else:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
        
        site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if k == 0:  
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
          else:
            total_spin[i*N+j][0] -= 1
        
  return([list(x) for x in total_spin])




#score: {'data2D.txt': 0.21340848765432097}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
      for k in range(3):
        site = (i + ((k - 1) % 2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i * N + j][0] -= 1
          total_spin[i * N + j][1] += 1
        else:
          total_spin[i * N + j][0] += 1
          total_spin[i * N + j][1] -= 1
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return([list(x) for x in total_spin])




#score: {'data2D.txt': -0.001024537037037037}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
  for i in range(N):
    site = (i % 2) - 1
    for j in range(N):
      if h[site][j] > 0:
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1
      else:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      
  return([list(x) for x in total_spin])




#score: {'data2D.txt': -0.05184367283950619}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1)%N, (i+1)%N, (j-1)%N, (j+1)%N]
      site_nbr_values = [h[site_nbr][j] for site_nbr in site_nbrs if i != site_nbr and j != (site_nbr % N)]
      total_spin[i][j][0] += np.sum(site_nbr_values)
      if h[i][j] > 0:
        total_spin[i][j][1] -= len([value for value in site_nbr_values if value > 0])
      else:
        total_spin[i][j][1] += len([value for value in site_nbr_values if value < 0])

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i][j][0]
      priority_total[i*N+j][1] = 1 - np.abs(total_spin[i][j][1])

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': 0.13437854938271662}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      total_spin[i][j][0] = np.tanh(total_spin[i][j][0])
      if h[i][j] > 0:
        total_spin[i][j][0] -= 0.5
      else:
        total_spin[i][j][0] += 0.5

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -total_spin[i][j][0]
        priority_total[i*N+j][1] = 1 - np.abs(total_spin[i][j][0])
      else:
        priority_total[i*N+j][0] = total_spin[i][j][0]
        priority_total[i*N+j][1] = np.abs(total_spin[i][j][0])

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i][j][0]
      if total_spin[i][j][1] > N**2/2:
        priority_total[i*N+j][1] = 1
      else:
        priority_total[i*N+j][1] = -1

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i][j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
        total_spin[i][j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] -= total_spin[i][j][0]
        priority_total[i*N+j][1] -= total_spin[i][j][1]
      else:
        priority_total[i*N+j][0] += total_spin[i][j][0]
        priority_total[i*N+j][1] += total_spin[i][j][1]

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': 0.3185220679012338}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  for i in range(N**2):
    if total_spin[i][0] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    elif total_spin[i][0] < 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1

  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%2 - 1) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
    else:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.17288996913580196}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N**2, 2), dtype=int)
  for k in range(N):
    for j in range(N):
      site_nbr = (k + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[k*N+j][0] += 1
        total_spin[k*N+j][1] -= 1
      else:
        total_spin[k*N+j][0] -= 1
        total_spin[k*N+j][1] += 1

  return total_spin.tolist()




#score: {'data2D.txt': 0.07261929012345687}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  for k in range(2):
    for i in range(N**2):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1

  return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
      for k in range(3):
        site = (i + ((k - 1) % 2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i * N + j][0] -= 1
          total_spin[i * N + j][1] += 1
        else:
          total_spin[i * N + j][0] += 1
          total_spin[i * N + j][1] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1
      else:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
  
  return ([list(x) for x in total_spin])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
      for k in range(3):
        site = (i + ((k - 1) % 2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i * N + j][0] -= 1
          total_spin[i * N + j][1] += 1
        else:
          total_spin[i * N + j][0] += 1
          total_spin[i * N + j][1] -= 1
      
      for k in range(N):
        site = (i + ((k - 1) % 2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i * N + j][0] -= 1
          total_spin[i * N + j][1] += 1
        else:
          total_spin[i * N + j][0] += 1
          total_spin[i * N + j][1] -= 1
        
  return([list(x) for x in total_spin])




#score: {'data2D.txt': 0.026790895061728406}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) for i in range(N)]
  for i in range(N):
    for j in range(N):
      for site_nbr in [(i, j), (j, i)]:
        total_spin[i*N+j][0] += h[site_nbr[0]][site_nbr[1]]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if abs(total_spin[i*N+j][1]) > N//2:
        priority_total[i*N+j][1] = -np.sign(total_spin[i*N+j][1])
      else:
        priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]

  return [list(p) for p in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([p_pos, p_neg])
    elif p_pos < p_neg:
      site_priors.append([-p_neg, -p_pos])
    else:
      site_priors.append([p_pos, p_neg])
      
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
        
  site_priors = []
  for i in range(N**2):
    p_pos = -total_spin[i][0]
    p_neg = -total_spin[i][1]
    if p_pos > p_neg:
      site_priors.append([p_pos, p_neg])
    elif p_pos < p_neg:
      site_priors.append([-p_neg, -p_pos])
    else:
      site_priors.append([p_pos, p_neg])
      
  return site_priors




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
      for k in range(3):
        site = (i + ((k - 1) % 2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i * N + j][0] -= 1
          total_spin[i * N + j][1] += 1
        else:
          total_spin[i * N + j][0] += 1
          total_spin[i * N + j][1] -= 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1
      else:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      
  # Compute priorities for each site based on the current spin configuration
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i * N + j][0] += 1
        priority_total[i * N + j][1] -= 1
      else:
        priority_total[i * N + j][0] -= 1
        priority_total[i * N + j][1] += 1
      
  return ([list(x) for x in total_spin])




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = np.zeros((N2, 2), dtype=int)

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i * N + j][0] += 1
        priority_total[i * N + j][1] -= 1
      else:
        priority_total[i * N + j][0] -= 1
        priority_total[i * N + j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i * N + j][0] -= 1
        priority_total[i * N + j][1] += 1
      else:
        priority_total[i * N + j][0] += 1
        priority_total[i * N + j][1] -= 1

  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr1][j] + h[site_nbr2][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 2
      else:
        total_spin[i*N+j][1] += 2

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 2
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 2
        priority_total[i*N+j][1] -= 1

  return total_spin.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.17142885802469163}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N -1) % 2 - 1)) % N
    total_spin[i][0] += h[site_nbr][i%N]
    if h[i//N][i%N] > 0:
      total_spin[i][1] += 1
    else:
      total_spin[i][1] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      if h[i][site_nbr] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = np.zeros((N2, 2))

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1

  return [list(x) for x in total_spin]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1
      else:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((j - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1
      else:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1
      else:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1

  # Compute priorities for each site based on the current spin configuration
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i * N + j][0] += 1
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][0] -= 1
        total_spin[i * N + j][1] += 1

  return ([list(x) for x in total_spin])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % 2 - 1)) % N
      total_spin[i * N + j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i * N + j][1] -= 1
      else:
        total_spin[i * N + j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  # Compute priorities for each site based on the current spin configuration
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  return ([list(x) for x in total_spin])




#score: {'data2D.txt': 0.006010339506172841}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    total_spin = [0, 0]
    
    for j in range(4):
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      if h[site_nbr][i//N] > 0:
        total_spin[0] -= 1
        total_spin[1] += 1
      else:
        total_spin[0] += 1
        total_spin[1] -= 1
    
    for j in range(2):
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      if h[i//N][site_nbr] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
        total_spin[1] += 1
    
    priority_total[i][0] = total_spin[0]
    priority_total[i][1] = total_spin[1]
  
  return ([list(x) for x in priority_total])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N * N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
        else:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((i // N - 1) % 2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (j % N + ((i - 1) % 2 - 1)) % N
      if h[i][site_nbr] > 0:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      
  # Compute priorities for each site based on the current spin configuration
  priority_total = [[0, 0] for _ in range(N * N)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i % N + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      
  return ([list(x) for x in total_spin])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr1][j] + h[site_nbr2][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': -0.00014027777777777826}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr1][j] + h[site_nbr2][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 2
      else:
        total_spin[i*N+j][1] += 2

  priority_total = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] -= 2
        priority_total[i*N+j][1] += 1
      else:
        priority_total[i*N+j][0] += 2
        priority_total[i*N+j][1] -= 1

  return np.fliplr(np.flipud(priority_total)).flatten().reshape(-1,2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      total = total_spin[i*N+j][0]
      if abs(total_spin[i*N+j][1]) > N//2:
        priority_total[i*N+j][1] = -np.sign(total_spin[i*N+j][1])
      else:
        priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])

  return [list(p) for p in priority_total]




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      if abs(total_spin[i*N+j][1]) > N//2:
        priority_total[i*N+j][1] = -np.sign(total_spin[i*N+j][1])
      else:
        priority_total[i*N+j][1] = 1 - np.abs(total_spin[i*N+j][1])

  return [list(p) for p in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = np.zeros((N**2, 2), dtype=float)
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    if abs(total_spin[i][1]) > N//2:
      priority_total[i][1] = -np.sign(total_spin[i][1])
    else:
      priority_total[i][1] = 1 - np.abs(total_spin[i][1])

  return [list(p) for p in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
    
    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  
  for i in range(N2):
    site = (i//N, i%N)
    neighbor = ((site[0]+((site[1]-1)%2 - 1)) % N, i%N)
    if np.abs(total_spin[i][0]) > np.abs(total_spin[i][1]):
      total_spin[i][0] += J[neighbor][i]
      if h[neighbor[0]][neighbor[1]] > 0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
    
  priorities = [[x[0], -x[1]] for x in total_spin]
  
  return priorities




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.003827006172839506}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      for k in range(4):
        if J[k,i,j] > 0:
          total_spin += J[k,i,j]
        else:
          total_spin -= J[k,i,j]
      
      total_spin += h[site_nbr][j]
      
      if total_spin > 0:
        priorities[i*N+j,0] += 1
        priorities[i*N+j,1] -= 1
      else:
        priorities[i*N+j,0] -= 1
        
  return(priorities)




#score: {'data2D.txt': -0.23316527777777776}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  interacting_spins = np.zeros((4,N,N))  
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin += J[k, i, j]
        else:
          total_spin -= J[k, i, j]
      priorities[i*N+j][0] += total_spin
  return(priorities)




#score: {'data2D.txt': -0.3365279320987644}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2,2))
  for i in range(2):
    interacting_spins = np.roll(h, -1, axis=i)
    interacting_spins += np.roll(h, 1, axis=i)
    for j in range(N):
      site_nbr = (j + ((i-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[j*N+j][0] += 1
        priorities[j*N+j][1] -= 1
      else:
        priorities[j*N+j][0] -= 1
  for i in range(N):
    interacting_spins = np.roll(h, -1, axis=1)
    interacting_spins += np.roll(h, 1, axis=1)
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[i][site_nbr]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return(priorities)




#score: {'data2D.txt': -0.11524583333333345}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      for k in range(4):
        if J[k,i,j] > 0:
          total_spin += J[k,i,j]
        else:
          total_spin -= J[k,i,j]
      
      total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priorities[i*N+j,0] += 1
        priorities[i*N+j,1] -= 1
      else:
        priorities[i*N+j,0] -= 1
        
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    
    for j in range(N):
      total_spin = 0
      
      if J[3,i,j] > 0:
        total_spin += J[3,i,j]
      else:
        total_spin -= J[3,i,j]
      
      total_spin += h[site_nbr][j]
      
      if total_spin > 0:
        priorities[i*N+j,0] += 1
        priorities[i*N+j,1] -= 1
      else:
        priorities[i*N+j,0] -= 1
        
  return(priorities)




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    if h[site_nbr][i%N] > 0:
      priorities[i,0] += 1
      priorities[i,1] -= 1
    else:
      priorities[i,0] -= 1
      
  return(priorities)




#score: {'data2D.txt': -0.055820524691358044}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      total_spin = np.sum(J[:,i,j])
      total_spin += h[site_nbr][j]
      
      if total_spin > 0:
        priorities[i*N+j,0] += 1
        priorities[i*N+j,1] -= 1
      else:
        priorities[i*N+j,0] -= 1
        
  return(priorities)




#score: {'data2D.txt': -0.004284722222222223}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    
    total_spin = h[site_nbr][i%N]
    
    for k in range(4):
      if J[k,i%N,i//N]:
        total_spin += J[k,i%N,i//N]
      else:
        total_spin -= J[k,i%N,i//N]
    
    if total_spin > 0:
      priorities[i,0] += 1
      priorities[i,1] -= 1
    else:
      priorities[i,0] -= 1
    
  return(priorities)




#score: {'data2D.txt': -0.20149521604938292}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N, 2))
  interacting_spins = np.zeros((4, N, N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis=i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis=i)

  for i in range(N):
    for j in range(N):
      total_spin = h[(i + ((j-1)%2 - 1)) % N][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1

  return(priorities)




#score: {'data2D.txt': -0.0012121913580246915}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  interacting_spins = np.zeros((4, N, N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis=i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis=i)

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1
      else:
        priorities[i*N+j][0] += 1

  for k in range(4):
    site = (i + ((k-1)%2 - 1)) % N
    if h[site][j] > 0:
      priorities[i*N+j][0] -= 1
    else:
      priorities[i*N+j][0] += 1

  return(priorities)




#score: {'data2D.txt': 0.03237515432098765}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = -h.copy()
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+1)%N, (j+1)%N, (i-1+N)%N, (j-1+N)%N]
      site_nbrs.sort()
      for k in site_nbrs:
        if J[0,i,j] + h[k,j] > 0:
          priorities[i,j] += 1
        elif J[0,i,j] + h[k,j] < 0:
          priorities[i,j] -= 1
  return np.array([priorities.flatten(), np.zeros(N**2)]).T




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%2 - 1)) % N
      site_nbr2 = (i + ((j+1)%2 - 1)) % N
      
      total_spin = h[site_nbr1][j] + h[i][site_nbr2]
      
      if J[0,i,j] > 0:
        total_spin += J[0,i,j]
      else:
        total_spin -= J[0,i,j]
      
      if J[1,i,j] > 0:
        total_spin += J[1,i,(i+(j+1)%2 - 1)] % N
      else:
        total_spin -= J[1,i,(i+(j+1)%2 - 1)] % N
      
      if J[2,i,j] > 0:
        total_spin += J[2,i,(i+(j-1)%2 - 1)] % N
      else:
        total_spin -= J[2,i,(i+(j-1)%2 - 1)] % N
      
      if J[3,i,j] > 0:
        total_spin += J[3,i,j]
      else:
        total_spin -= J[3,i,j]
      
      if h[i][j] > 0:
        priorities[i*N+j,0] += 1
        priorities[i*N+j,1] -= 1
      else:
        priorities[i*N+j,0] -= 1
        
  return(priorities)




#score: {'data2D.txt': -0.016941512345679012}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      for k in range(4):
        if J[k,i,j] > 0:
          total_spin += J[k,i,j]
        else:
          total_spin -= J[k,i,j]
      
      total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priorities[i*N+j,0] += 1
        priorities[i*N+j,1] -= 1
      else:
        priorities[i*N+j,0] -= 1
      
      # Calculate the priority based on the total spin
      if total_spin > 0:
        priorities[i*N+j,0] += total_spin
        priorities[i*N+j,1] -= total_spin
      else:
        priorities[i*N+j,0] -= total_spin
        
  return(priorities)




#score: {'data2D.txt': -0.004144598765432098}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      for k in range(4):
        if J[k,i,j] > 0:
          total_spin += J[k,i,j]
        else:
          total_spin -= J[k,i,j]
      
      total_spin += h[site_nbr][j]
      
      if total_spin > 0:
        priorities[i*N+j,0] += 1
        priorities[i*N+j,1] -= 1
      elif total_spin < 0:
        priorities[i*N+j,0] -= 1
      else:
        if h[i][j] > 0:
          priorities[i*N+j,0] += 1
          priorities[i*N+j,1] -= 1
        else:
          priorities[i*N+j,0] -= 1
  
  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+1)%N, (j+1)%N, (i-1+N)%N, (j-1+N)%N]
      site_nbrs.sort()
      total_spin = np.sum([h[site_nbr][j] for site_nbr in site_nbrs])
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1 * (np.any(h[site_nbrs] > 0) or total_spin > 0)
      else:
        priorities[i*N+j][0] -= 1
        priorities[i*N+j][1] += 1 * (np.any(h[site_nbrs] < 0) or total_spin < 0)
  return priorities




#score: {'data2D.txt': -0.29449891975308595}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.array([[0.0 for _ in range(2)] for _ in range(N**2)])
  interacting_spins = [np.zeros((N)) for _ in range(N)]
  
  # Calculate the magnetism sum for each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  
  # Calculate the interaction term for each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priorities[i*N+j][0] -= J[0,i,j]*h[site_nbr][j]
        priorities[i*N+j][1] += J[0,i,j]*h[site_nbr][j]
      else:
        priorities[i*N+j][0] += J[0,i,j]*h[site_nbr][j]
        priorities[i*N+j][1] -= J[0,i,j]*h[site_nbr][j]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i]
    
    if h[i][i] > 0:
      priorities[i*N+i][0] -= J[3,i,i]*h[site_nbr][i]
      priorities[i*N+i][1] += J[3,i,i]*h[site_nbr][i]
    else:
      priorities[i*N+i][0] += J[3,i,i]*h[site_nbr][i]
      priorities[i*N+i][1] -= J[3,i,i]*h[site_nbr][i]
  
  return priorities




#score: {'data2D.txt': -0.31254922839506194}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  interacting_spins = np.zeros((4, N, N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis=i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis=i)

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1

  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if J[k,i,j] > 0:
          priorities[i*N+j][0] += -0.5*J[k,i,j]*interacting_spins[k,site_nbr,j]
          priorities[i*N+j][1] -= 1
        else:
          priorities[i*N+j][0] -= 1

  return(priorities)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0 for _ in range(2)] for _ in range(N**2)]
  
  # Calculate the magnetism sum for each site
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for x in range(-1, 2):
        for y in range(-1, 2):
          if (x == 0 and y == 0) or not ((i + x) % N == j + y) % N:
            continue
          site_nbr = (i + x + ((j+y-1)%2 - 1)) % N
          total_spin += J[(x+1)//2, i, j]*h[site_nbr][j+y]
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      total_spin = sum(h[site_nbr][j] for site_nbr in site_nbrs)
      if h[i][j] > 0:
        priorities[i*N+j][0] += 3
        priorities[i*N+j][1] -= 2
      else:
        priorities[i*N+j][0] -= 2
        priorities[i*N+j][1] += 3
  return priorities




#score: {'data2D.txt': -0.28308811728395034}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
      
      site_nbr = (i + ((N-1)%2 - 1)) % N
      total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priorities[i*N+j][0] -= J[3,i,j]*h[site_nbr][j]
        priorities[i*N+j][1] += J[3,i,j]*h[site_nbr][j]
      else:
        priorities[i*N+j][0] += J[3,i,j]*h[site_nbr][j]
        priorities[i*N+j][1] -= J[3,i,j]*h[site_nbr][j]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i]
    
    if h[i][i] > 0:
      priorities[i*N+i][0] -= J[3,i,i]*h[site_nbr][i]
      priorities[i*N+i][1] += J[3,i,i]*h[site_nbr][i]
    else:
      priorities[i*N+i][0] += J[3,i,i]*h[site_nbr][i]
      priorities[i*N+i][1] -= J[3,i,i]*h[site_nbr][i]
  
  return priorities




#score: {'data2D.txt': -0.28881250000000014}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  interacting_spins = np.zeros((4, N, N))  
  for i in range(4):
    interacting_spins[i] = np.roll(h, -i%2, axis=i%2)

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1

  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if J[k,i,j] > 0:
          priorities[i*N+j][0] += -0.5*J[k,i,j]*(interacting_spins[k,site_nbr,j]+h[site_nbr][j])
          priorities[i*N+j][1] -= 1
        else:
          priorities[i*N+j][0] -= 1

  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if J[k,i,j] > 0:
          priorities[i*N+j][1] -= 0.5*J[k,i,j]*(interacting_spins[k,site_nbr,j]+h[site_nbr][j])
        else:
          priorities[i*N+j][1] += 0.5

  return(priorities)




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




#score: {'data2D.txt': -0.10279027777777795}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[0, i, j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[1, i, j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[2, i, j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if J[3, i, j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0 for _ in range(2)] for _ in range(N**2)]
  
  # Calculate the magnetism sum for each site
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0 for _ in range(2)] for _ in range(N**2)]
  
  # Calculate the magnetism sum for each site
  total_spin = [0]*N*N
  for i in range(N):
    for j in range(N):
      for x in range(-1, 2):
        for y in range(-1, 2):
          if (x == 0 and y == 0) or not ((i + x) % N == j + y) % N:
            continue
          site_nbr = (i + x + ((j+y-1)%2 - 1)) % N
          total_spin[i*N+j] += J[(x+1)//2, i, j]*h[site_nbr][j+y]
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
        
  return priorities




#score: {'data2D.txt': -0.004354475308641975}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0 for _ in range(2)] for _ in range(N**2)]
  
  # Calculate the magnetism sum for each site
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for x in range(-1, 2):
        for y in range(-1, 2):
          if (x == 0 and y == 0) or not ((i + x) % N == j + y) % N:
            continue
          site_nbr = (i + ((j+y-1)%2 - 1)) % N
          total_spin += J[(x+1)//2, i, j]*h[site_nbr][j+y]
      
      if h[i][j] > 0:
        priorities[i*N+j][0] -= total_spin
        priorities[i*N+j][1] += total_spin
      else:
        priorities[i*N+j][0] += total_spin
        priorities[i*N+j][1] -= total_spin
  
  return priorities




#score: {'data2D.txt': -0.0031433641975308645}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0 for _ in range(2)] for _ in range(N**2)]
  
  # Calculate the magnetism sum for each site
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for x in range(-1, 2):
        for y in range(-1, 2):
          if (x == 0 and y == 0) or not ((i + x) % N == j + y) % N:
            continue
          site_nbr = (i + ((j+y-1)%2 - 1)) % N
          total_spin += J[(x+1)//2, i, j]*h[site_nbr][j+y]
      
      # Assign higher priority to sites with more favorable interactions
      if h[i][j] > 0:
        priorities[i*N+j][0] -= total_spin * (1 + abs(total_spin))
        priorities[i*N+j][1] += total_spin * (1 + abs(total_spin))
      else:
        priorities[i*N+j][0] += total_spin * (1 - abs(total_spin))
        priorities[i*N+j][1] -= total_spin * (1 - abs(total_spin))
  
  return priorities




#score: {'data2D.txt': -0.2207300925925926}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0 for _ in range(2)] for _ in range(N**2)]

  for i in range(N**2):
    site_nbr = (i % N + ((i//N-1)%2 - 1)) % N
    total_spin = h[site_nbr][i%N]
    if J[0, i//N, i%N] > 0:
      total_spin += 1
    else:
      total_spin -= 1

    priorities[i][0] = -total_spin
    priorities[i][1] = total_spin

  return priorities




#score: {'data2D.txt': -0.3352223765432089}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0.0 for _ in range(2)] for _ in range(N**2)]
  
  # Calculate the magnetism sum for each site
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for x in range(-1, 2):
        for y in range(-1, 2):
          if (x == 0 and y == 0) or not ((i + x) % N == j + y) % N:
            continue
          site_nbr = (i + ((j+y-1)%2 - 1)) % N
          total_spin += J[(x+1)//2, i, j]*h[site_nbr][j+y]
      
      if h[i][j] > 0:
        priorities[i*N+j][0] -= total_spin
        priorities[i*N+j][1] += total_spin
      else:
        priorities[i*N+j][0] += total_spin
        priorities[i*N+j][1] -= total_spin
  
  # Calculate the priority for each site
  for i in range(N**2):
    if h[(i//N)%N][(i%N)] > 0:
      priorities[i][0] += 1
      priorities[i][1] -= 1
    else:
      priorities[i][0] -= 1
  
  return priorities




#score: {'data2D.txt': -0.2911662037037038}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
      for k in range(4):
        site = (i + ((k-1)%2 - 1)) % N
        if J[k, i, j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priorities[i*N+j][0] += total_spin
  return priorities




#score: {'data2D.txt': -0.10279027777777795}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  
  # Iterate over each site and add contributions from magnetism and nearest neighbors
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
      
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if J[k, i, j] > 0:
          priorities[i*N+j][0] += 1
          priorities[i*N+j][1] -= 1
        else:
          priorities[i*N+j][0] -= 1
      
  return priorities




#score: {'data2D.txt': -0.10279027777777795}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
      for k in range(4):
        neighbor_i = (i + ((k-1)%2 - 1)) % N
        if J[k, i, j] > 0:
          priorities[i*N+j][0] += 1
          priorities[i*N+j][1] -= 1
        else:
          priorities[i*N+j][0] -= 1
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      total_spin = 0
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if J[k, i, j] > 0:
          total_spin += h[site_nbr][j]
        else:
          total_spin -= h[site_nbr][j]
      priorities[i*N+j][0] += np.sum(h.flatten() == h[site_nbr][j])
      priorities[i*N+j][1] -= (2 if total_spin > 0 else -2)
  return priorities




#score: {'data2D.txt': -0.14831990740740747}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
      for k in range(4):
        neighbor_i = (i + ((k-1)%2 - 1)) % N
        if J[k, i, j] > 0 and h[neighbor_i][j] > 0:
          priorities[i*N+j][0] += 2
          priorities[i*N+j][1] -= 2
        elif J[k, i, j] < 0 and h[neighbor_i][j] < 0:
          priorities[i*N+j][0] += 2
          priorities[i*N+j][1] -= 2
  return priorities




#score: {'data2D.txt': 0.07880972222222221}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site_nbr][j]
      if h[i][j] > 0:
        priorities[i*N+j][0] += 1
        priorities[i*N+j][1] -= 1
      else:
        priorities[i*N+j][0] -= 1
      for k in range(4):
        neighbor_i = (i + ((k-1)%2 - 1)) % N
        if J[k, i, j] > 0 and abs(total_spin) < N**2/2:
          priorities[i*N+j][0] += 1
          priorities[i*N+j][1] -= 1
        elif J[k, i, j] < 0 and total_spin > N**2/2:
          priorities[i*N+j][0] -= 1
          priorities[i*N+j][1] += 1
  return priorities




#score: {'data2D.txt': -0.53650787037037}
#island_id: None
#version_generated: None
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = h
  interacting_spins = np.zeros((4,N,N))  # D X N^D matrix of neighboring spins along each axis
  for i in range(2):
    interacting_spins[i] = np.roll(h, -1, axis = i)
  for i in range(2):
    interacting_spins[i+2] = np.roll(h, 1, axis = i)
  for i in range(N):
    for j in range(N):
      for k in range(4):
        priorities[i,j] += -0.5*J[k,i,j]*interacting_spins[k,i,j]
  priorities = np.array([priorities.flatten(), np.zeros(N**2)]).T
  return(priorities)




