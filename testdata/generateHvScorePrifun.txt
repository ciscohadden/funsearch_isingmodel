#score: {'data2D.txt': -7.731481481481539e-05}
def priority(N,h,J):  # random generator
    priority = np.random.rand(N**2,2)
    return(priority)


#score: {'data2D.txt': -0.3420791666666656}
def priority(N, h,J):
    priority = np.zeros((N**2,2))
    for i in range(N):
      for j in range(N):
        if h[i,j] > 0:
            priority[(i*N+j),0] = h[i,j]
        else:
            priority[(i*N+j),1] = -1*h[i,j]
    return(priority)


#score: {'data2D.txt': -0.001367438271604938}
def priority(N, h,J):  # priorities are all 0 - sets all spins to -1
    priority = np.zeros((N**2,2))
    return(priority)


#score: {'data2D.txt': 0.34290787037036935}
def priority(N,h,J):  #LLM written function - only one that actually works, no modification: 1.715
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities


#score: {'data2D.txt': 0.0005881172839506174}
def priority(N, h, J):  # llm written function -  works with 3 characters of modification (score of -0.002)
    spin_config = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        for j in range(N):
            interaction = -2 * J[0][i][j] * spin_config[i][j]
            magnetism = h[i][j]
            priority = interaction + magnetism
            priorities.append([spin_config[i][j], -priority])
    
    return sorted(priorities, key=lambda x: x[1])


#score: {'data2D.txt': -0.02209552469135802}
def priority(N,h,J): ## needs slight modification to work (J indexed wrong). Score -0.002
    spins = [[0 for _ in range(2)] for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            total_J = 0
            if i > 0:
                total_J += J[0][i-1][j]
            if i < N - 1:
                total_J += J[0][i+1][j]
            if j > 0:
                total_J += J[1][i][j-1]
            if j < N - 1:
                total_J += J[1][i][j+1]
            
            if h[i][j] > 0:
                spins[N*i+j][0] = np.exp(total_J) / (np.exp(total_J) + np.exp(-total_J))
                spins[N*i+j][1] = 1 - spins[N*i+j][0]
            else:
                spins[N*i+j][0] = 1 - np.exp(total_J) / (np.exp(total_J) + np.exp(-total_J))
                spins[N*i+j][1] = np.exp(total_J) / (np.exp(total_J) + np.exp(-total_J))
    
    return spins


#score: {'data2D.txt': -0.09313379629629634}
def priority(N, h, J):  # with some modifications it gets to -0.461
    priorities = [[0.0, 0.0] for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            site_energy = -h[i][j]
            for dx in [-1, 0, 1]:
                for dy in [-1, 0, 1]:
                    if abs(dx) + abs(dy) == 1:
                        x, y = i + dx, j + dy
                        if 0 <= x < N and 0 <= y < N:
                            site_energy += J[int(h[i][j] * (h[x][y] - 2 * h[i][j])%2)][x][y]
            priorities[i*N+j][1] = site_energy
    return priorities


#score: {'data2D.txt': 0.22561188271604923}
def priority(N, h, J):  # wrong dimensions for J, but other than that its 0.4209
    priorities = [[0 for _ in range(2)] for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            site_energy = -h[i][j]
            if i < N-1:
                site_energy += J[0][i+1][j] * h[i+1][j]
            if j < N-1:
                site_energy += J[1][i][j+1] * h[i][j+1]
            priorities[i*N+j][0] = site_energy
            priorities[i*N+j][1] = -site_energy
    
    return priorities


#score: {'data2D.txt': -0.0013427469135802472}
def priority(N,h,J):  ## score -1.0365
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(2):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if sum(h[i]) > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities


#score: {'data2D.txt': -0.17881558641975334}
def priority(N,h,J): ## score = 1.472
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = sum([state[k][j] for k in range(max(0,i-1),min(i+2,N))]) + sum([state[i][k] for k in range(max(0,j-1),min(j+2,N))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities

#-0.87823486328125}
def priority(N,h,J):
    priorities = np.zeros((N**2, 2))

    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priorities[(i*N+j), 0] = np.sin(i*j)  # Unknown rule: sine product of site indices
            else:
                priorities[(i*N+j), 1] = -h[i][j]

    return priorities


#score: {'data2D.txt': -0.3420791666666656}
def priority(N,h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities

#-1.717979248046875}
def priority(N, h, J):
    priorities = np.zeros((N*N, 2))
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priorities[(i*N)+j, 0] = h[i][j]
            else:
                priorities[(i*N)+j, 1] = -1*h[i][j]
    
    return priorities


#score: {'data2D.txt': 0.043174845679012364}
def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                total_spin = sum([J[1][(i+k)%N][(j+l)%N] if k % 2 == 1 and l % 2 == 1 else J[1][(i-k-1)%N][(j-l-1)%N] for k in range(-3,4) for l in range(-3,4)])
                priority[i*N+j] = [total_spin, 1]
            else:
                total_spin = sum([J[0][(i+k)%N][(j+l)%N] if k % 2 == 1 and l % 2 == 1 else J[0][(i-k-1)%N][(j-l-1)%N] for k in range(-3,4) for l in range(-3,4)])
                priority[i*N+j] = [-total_spin, -1]
    
    return priority


#score: {'data2D.txt': 0.014596450617283952}
def priority(N, h, J):  # corrected algorithm
    priority = np.zeros((N**2,2)) 
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                total_spin = sum([h[(i+k)%N][j] if k % 2 == 1 else h[(i-k-1)%N][j] for k in range(-3,4)])
                priority[(i*N+j),0] = total_spin
            else:
                total_spin = sum([h[(i+k)%N][j] if k % 2 == 1 else -h[(i-k-1)%N][j] for k in range(-3,4)])
                priority[(i*N+j),1] = -total_spin

    return priority


#score: {'data2D.txt': -0.0010979938271604935}
def priority(N,h,J):
    priority = np.zeros((N**2, 2))
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority[(i*3+j)%N,0] = h[i][j]
            else:
                priority[(i*3+j)%N,1] = -1*h[i][j]
    
    return priority


#score: {'data2D.txt': 1.0648148148148184e-05}
def priority(N,h, J):
    priorities = []
    
    for i in range(N):
        total_spin = np.zeros((N,2), dtype=int)
        
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += spin
                
        for j in range(N):
            priority = np.sign(total_spin[j][0])
            
            if h[i][j] > 0:
                priorities.append((total_spin[j][0], priority))
            else:
                priorities.append((total_spin[j][0], -priority))
    
    return priorities


#score: {'data2D.txt': 0.32948287037036944}
def priority(N,h,J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        total_spin = np.zeros((N,2), dtype=int)
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += spin
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]
        for j in range(N):
            priority[(i*N+j),0] = np.sign(priority_total[j][0])
            if h[i][j] > 0:
                priority[(i*N+j),1] = 1
            else:
                priority[(i*N+j),1] = -1
    return(priority)


#score: {'data2D.txt': 0.05238996913580249}
def priority(N, h, J):
    priorities = []
    for i in range(N**2):
        total_spin = 0
        site1 = (i // N + ((i % N) - 1) // 2 - 1) % N
        site2 = (site1 + (i % N) % 2)
        total_spin += sum(h[site1][j] for j in range(N)) * 2
        if h[i//N, i%N] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return(priorities)


#score: {'data2D.txt': 0.14675354938271623}
def priority(N, h,J):
    state = [[1 if h[i][j] > 0 else -1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((-1*total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities


#score: {'data2D.txt': -0.31878348765432046}
def priority(N,h,J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority[(i*N+j), 0] = total_spin
            else:
                priority[(i*N+j), 1] = -total_spin
    return priority


#score: {'data2D.txt': 0.0622510802469136}
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities


#score: {'data2D.txt': 0.34290787037036935}
def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, h[i][j]))
            else:
                priorities.append((total_spin, -h[i][j]))
    return priorities


#score: {'data2D.txt': 0.34290787037036935}
def priority(N, h,J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):  # iterate over each site in the neighborhood
                site = ((i + (k-1)%2 - 1)) % N  # calculate the site using integer arithmetic operations
                total_spin += state[site][j]  # accumulate the spin values
            if h[i][j] > 0:
                priorities.append((total_spin, 1))  # add the priority to the list
            else:
                priorities.append((total_spin, -1))
    return priorities


#score: {'data2D.txt': 0.20482700617283975}
def priority(N,h,J):
    priority = np.zeros((N**2,2))
    for i in range(N):
        for j in range(N):
            if h[i,j] > 0:
                priority[(i*N+j),1] = h[i,j]
            else:
                priority[(i*N+j),0] = -1*h[i,3-1-j]
    return(priority)


#score: {'data2D.txt': 0.34290787037036935}
def priority(N, h, J):
    priority = []
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priority.append((h[i//N][i%N], 1))
        else:
            priority.append((h[N-1-i%N][i//N], -1))
    return priority


#score: {'data2D.txt': -0.001367438271604938}
def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    return(priority)


#score: {'data2D.txt': -0.0005726851851851857}
def priority(N, h, J):
    J_new = np.sum(J, axis=0)
    sum = (np.prod(J_new, 0) + h).T
    priority = [sum, -sum]
    return(np.array(priority).reshape(N**2, 2))


#score: {'data2D.txt': -0.3420791666666656}
def priority(N, h, J):
    J_new = J.flatten()
    sum = (np.prod(J_new[0::2], 0) + h).flatten()
    priority = np.column_stack((sum, -sum))
    return(priority)


#score: {'data2D.txt': -0.0011794753086419752}
def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    
    for i in range(N**2):
        sum_1 = np.sum(J[0][i:i+2])
        sum_2 = np.sum(J[1][i-N:i+1]) + np.sum(J[3][i-N:i+1])
        
        if h[i//N][i%N] > 0:
            priority[i] = [sum_1 - sum_2, sum_1 + sum_2]
        else:
            priority[i] = [-sum_1 + sum_2, -sum_1 - sum_2]
    
    return(priority)


#score: {'data2D.txt': -0.1729421296296299}
def priority(N, h, J):
    priority_matrix = [[0, 1] for _ in range(N**2)]  
    for i in range(N**2):
        if i % N < N//2:
            if h[i//N][i%N] > 0:
                priority_matrix[i][0] += 1
            else:
                priority_matrix[i][1] += 1
        else:
            if h[N-1-i%N][i//N] > 0:
                priority_matrix[i][0] += 1
            else:
                priority_matrix[i][1] += 1
    return priority_matrix



#score: {'data2D.txt': -0.07410601851851865}
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch




def priority(N, h, J):
    J_new = np.sum(J[:2], axis=0)
    sum_spin = (J_new + h).flatten()
    priority = np.column_stack((sum_spin, -sum_spin))
    return priority.tolist()



#score: {'data2D.txt': -0.17024058641975306}
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch
def priority(N, h, J):
    J_new = J.reshape((4, N, N))
    priorities = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            left = J_new[0, i, (j-1)%N] * h[i, (j-1)%N]
            right = J_new[1, i, (j+1)%N] * h[i, (j+1)%N]
            up = J_new[2, (i-1)%N, j] * h[(i-1)%N, j]
            down = J_new[3, (i+1)%N, j] * h[(i+1)%N, j]
            total_spin = left + right + up + down
            priorities[i*N+j, 0] = total_spin + h[i, j]
            priorities[i*N+j, 1] = -total_spin - h[i, j]
    return priorities




#score: {'data2D.txt': -0.17090324074074073}
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch
def priority(N, h, J):
    priorities = np.zeros((N**2, 2))
    for i in range(N**2):
        x, y = i // N, i % N
        neighbors = [(x, (y+1)%N), ((x+1)%N, y), (x, (y-1)%N), ((x-1)%N, y)]
        interaction = sum(J[k, x, y] * h[neighbors[k][0], neighbors[k][1]] for k in range(4))
        priorities[i] = [interaction + h[x, y], -(interaction + h[x, y])]
    return priorities




#score: {'data2D.txt': -0.17512453703703704}
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch




def priority(N, h, J):
    J_new = J.reshape((4, N, N))
    priorities = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            left = J_new[0, i, (j-1)%N] * h[i, (j-1)%N]
            right = J_new[1, i, (j+1)%N] * h[i, (j+1)%N]
            up = J_new[2, (i-1)%N, j] * h[(i-1)%N, j]
            down = J_new[3, (i+1)%N, j] * h[(i+1)%N, j]
            total_spin = left + right + up + down
            priorities[i*N+j, 0] = np.exp(total_spin + h[i, j])
            priorities[i*N+j, 1] = np.exp(-total_spin - h[i, j])
    return priorities / np.sum(priorities, axis=1, keepdims=True)



#score: {'data2D.txt': -0.14179429012345682}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch




def priority(N, h, J):
    priorities = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            site_interactions = [J[0, i, j], J[1, i, (j-1)%N], J[2, (i-1)%N, j], J[3, i, (j+1)%N]]
            total_spin = np.sum([h[(i+k)%N][(j+l)%N] for k, l in [(-1, 0), (0, -1), (0, 1), (1, 0)]])
            priorities[i*N+j] = [total_spin + h[i][j], -(total_spin + h[i][j])]
    return priorities




#score: {'data2D.txt': 0.001167438271604938}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      idx = i * N + j
      total_spin_1 = sum([h[(i+k)%N][(j+l)%N] for k, l in [(-1, 0), (1, 0), (0, -1), (0, 1)]])
      total_spin_m1 = -total_spin_1
      priorities[idx][0] = total_spin_1 + h[i][j]
      priorities[idx][1] = total_spin_m1 + h[i][j]
  return priorities




#score: {'data2D.txt': 0.28013719135802434}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(4):
                site = (i + ((k-1)%2 - 1)) % N if k < 2 else i
                site_j = (j + ((k-1)%2 - 1)) % N if k >= 2 else j
                total_spin += J[k, i, j] * h[site][site_j]
            priorities.append((total_spin, 1) if h[i][j] > 0 else (total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.003388425925925917}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N**2):
        site1 = i // N
        site2 = (site1 + (i % N) % 2)
        total_spin = sum(h[site1][j] for j in range(N)) * 2
        if h[site1, i%N] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return [[priorities[i][0], priorities[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.003388425925925917}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N**2):
        site1 = i // N
        site2 = (site1 + (i % N) % 2)
        total_spin = sum(h[site1][j] for j in range(N)) * 2
        if h[site1, i%N] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.003388425925925917}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N**2):
        site1 = i // N
        site2 = (site1 + (i % N) % 2) % N
        total_spin = sum(h[site1][j] for j in range(N)) * 2
        if h[i//N, i%N] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities



#score: {'data2D.txt': 0.146027314814815}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if 0 <= k < N else 0 for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.0635152777777778}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((-total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.03890293209876543}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if k!=0 else 2*row_sum[0] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return [[p[0], p[1]] for p in sorted(priorities)]





#score: {'data2D.txt': 0.146027314814815}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.041807561728395067}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if abs(j-k) <= 1 else 0 for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.1564294753086422}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            row_sum = sum(state[i][:j]+state[i][j+1:])
            total_spin = sum([row_sum * state[i][k-j%N] for k in range(min(j+1,N))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.01753719135802469}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j-k%N]>0 else -row_sum[k]*state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities






#score: {'data2D.txt': -0.3074560185185178}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2,2), dtype=float)
    for i in range(N):
        for j in range(N):
            total_spin = sum(J[i:(i+1),j:(j+1)].flatten()) + h[i][j]
            if h[i][j] > 0:
                priority[i*N+j, 0] = total_spin
            else:
                priority[i*N+j, 1] = -total_spin
    return priority.tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.06987515432098769}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        for j in range(N):
            total_spin = sum([state[i][k] * state[i][(j+k)%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities





#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.005117129629629629}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if (i-k)%N != 0 and (j-k)%N != N-1 else row_sum[k] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.026169290123456788}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            row_sum = sum(state[i][:j]+state[i][j+1:])
            column_sum = sum([state[k][j] for k in range(N)])
            total_spin = row_sum + column_sum
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.07359120370370377}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[j] += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin[j], 1))
            else:
                priorities.append((-1*total_spin[j], -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
    priority = np.column_stack((sum1, -sum1))
    return priority.tolist()




#score: {'data2D.txt': 0.1461016975308644}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0]*N**2
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N) - N//2) % N
            total_spin[j*N+i] += state[site][j]
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priorities.append((total_spin[i], 1))
        else:
            priorities.append((total_spin[i], -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0,0] for _ in range(N2)]
    total_spin = [0]*N2
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i*N+j] += h[site][j]
            
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i*N+j]
            else:
                priority_total[i*N+j][1] = -total_spin[i*N+j]
                
    return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, -1))
            else:
                priority.append((total_spin, 1))
    return np.array(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum_0 = (np.prod(J_new[::2], 0) + h).flatten()
    sum_1 = (np.prod(J_new[1::2], 0) - h).flatten()
    priority = np.column_stack((sum_0, sum_1))
    return priority




#score: {'data2D.txt': -0.15429645061728445}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((-total_spin, 1))
    return np.array(priority)




#score: {'data2D.txt': 0.146027314814815}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return np.array(priorities).reshape(N**2,2)




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority[(i*N+j), 0] = total_spin
            else:
                priority[(i*N+j), 1] = -total_spin
    return priority.tolist()




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum_2 = (-1*np.prod(J_new[1::2], 0)).flatten()
    priority = np.column_stack((sum_1, -sum_1-sum_2))
    return priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        priority_total = np.zeros((N,2))
        for j in range(N):
            site_sum = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                site_sum += state[site][j]
            if h[i][j] > 0:
                priority_total[j][0] = site_sum
            else:
                priority_total[j][1] = -site_sum
        total_spin.append(priority_total)
    return np.concatenate([np.array(t).flatten() for t in total_spin]).reshape(N**2,2)




#score: {'data2D.txt': -0.15539830246913605}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        for j in range(N):
            total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][(j+((l-1)%2 - 1)) % N]*state[i][j-l%N] for k,l in itertools.product(range(3),range(3)) if ((k-1)%2 - 1) + (l-1)%2 == 0])
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
                
    return [[p[1],p[0]] for p in priorities]




#score: {'data2D.txt': 0.10389614197530864}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J = J.reshape(4,N*N)
    priority = [[0,0] for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                for k in range(4):
                    if k==0 and i+1<N:
                        priority[i*N+j][0] += J[0][i*N+j]
                    elif k==1 and i-1>=0:
                        priority[i*N+j][0] += J[1][i*N+j]
                    elif k==2 and j+1<N:
                        priority[i*N+j][0] += J[2][i*N+j]
                    elif k==3 and j-1>=0:
                        priority[i*N+j][0] += J[3][i*N+j]
                priority[i*N+j][1] = -priority[i*N+j][0]
            else:
                for k in range(4):
                    if k==0 and i+1<N:
                        priority[i*N+j][1] -= J[0][i*N+j]
                    elif k==1 and i-1>=0:
                        priority[i*N+j][1] -= J[1][i*N+j]
                    elif k==2 and j+1<N:
                        priority[i*N+j][1] -= J[2][i*N+j]
                    elif k==3 and j-1>=0:
                        priority[i*N+j][1] -= J[3][i*N+j]
                priority[i*N+j][0] = -priority[i*N+j][1]
    
    return priority




#score: {'data2D.txt': 0.29362299382716023}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    n = N**2
    J_flat = J.reshape((4,n))
    h_flat = h.flatten()
    priorities = []
    
    for i in range(n):
        site_neighbors = [J_flat[k][i] for k in range(4)]
        if h_flat[i] > 0:
            total_spin = sum([1 if neighbor > 0 else -1 for neighbor in site_neighbors])
            priorities.append((total_spin, 1))
        else:
            total_spin = sum([1 if neighbor < 0 else -1 for neighbor in site_neighbors])
            priorities.append((-total_spin, -1))
    
    return np.array(priorities).reshape((n,2))




#score: {'data2D.txt': 0.1647720679012351}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = []
    for j in range(N**2):
        total_spin = 0
        for k in range(3):
            site = (j // N + ((k-1)%2 - 1)) % N
            total_spin += h[site][j % N]
        if h[j // N][j % N] > 0:
            priority_total.append((total_spin, 1))
        else:
            priority_total.append((-total_spin, -1))
    return np.array(priority_total).reshape(N**2, 2)




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return np.array(priorities).reshape(N*N, 2)




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return np.array(priorities).tolist()




#score: {'data2D.txt': 0.15533472222222247}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = sum([J[k][(i + ((k-1)%2 - 1)) % N][j] * state[(i + ((k-1)%2 - 1)) % N][j] for k in range(3)])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0451294753086421}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    J_tensor = J.reshape(4,N2)
    priorities = []
    
    for i in range(N):
        for j in range(N):
            site_spin_sum = 0
            for k in range(4):
                if k == 0:
                    site_spin_sum += J_tensor[0][i*N+j]
                elif k == 1:
                    site_spin_sum += J_tensor[1][(i+1)%N*N + j]
                elif k == 2:
                    site_spin_sum += J_tensor[2][i*N+(j+1)%N]
                else:
                    site_spin_sum += J_tensor[3][((i+1)%N)*N+j]
            if h[i][j] > 0:
                priorities.append((site_spin_sum, -1))
            else:
                priorities.append((site_spin_sum, 1))
    
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.04444305555555559}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            row_sum = sum(state[i][:j]+state[i][j+1:])
            total_spin = sum([row_sum * state[k][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if 0 <= j-k%N < N else 0 for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            
            # Calculate total spin based on site interactions and magnetism
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            
            if h[i][j] > 0:
                priority[(i*N+j), 0] = total_spin
            else:
                priority[(i*N+j), 1] = -total_spin
    
    return priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2,2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority[i*N+j, 0] = total_spin
            else:
                priority[i*N+j, 1] = -total_spin
    return priority.tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2, 2))
    for i in range(N**2):
        site_row = int(i/N)
        site_col = i % N
        total_spin = 0
        for k in range(3):
            site = (site_row + ((k-1)%2 - 1)) % N
            total_spin += state[site][site_col]
        if h[site_row][site_col] > 0:
            priority_total[i][0] = total_spin
        else:
            priority_total[i][1] = -1*total_spin
    return priority_total.tolist()




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((-total_spin, 1))
    return np.array(priority)




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority[(i*N+j), 0] = total_spin
            else:
                priority[(i*N+j), 1] = -total_spin
    return priority.tolist()




#score: {'data2D.txt': -0.0005408950617283944}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[j][0] = total_spin
            else:
                priority_total[j][1] = -total_spin
    for j in range(N):
        if h[i][j] > 0:
            priority_total[j][0] = priority_total[j][0]
        else:
            priority_total[j][1] = -priority_total[j][1]
    return [row for row in priority_total]




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return np.array(priorities).reshape(N**2, 2)




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority[(i*N+j), 0] = total_spin
            else:
                priority[(i*N+j), 1] = -total_spin
    return priority.astype(int)




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.01437175925925926}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J = J.reshape((4, N*N))
    priority_matrix = np.zeros((N*N, 2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(4):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += J[k][i*N+j]
            
            if h[i][j] > 0:
                priority_matrix[i*N+j, 0] = total_spin
                priority_matrix[i*N+j, 1] = -total_spin
            else:
                priority_matrix[i*N+j, 0] = -total_spin
                priority_matrix[i*N+j, 1] = total_spin
    
    return priority_matrix.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum_2 = (-np.prod(J_new[1::2], 0)).flatten()
    priority = np.column_stack((sum_1, -sum_1))
    return [list(i) for i in priority]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
    return [row.tolist() for row in priority_total]




#score: {'data2D.txt': -0.003459722222222222}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0,0]
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[spin] += state[site][j]
            priorities.append((total_spin[0], total_spin[1]))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j, 0] = total_spin
            else:
                priority_total[i*N+j, 1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return [p for p in priorities]




#score: {'data2D.txt': -0.17729830246913594}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spins = np.zeros((N,2))
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spins[site][0] += state[i][j]
    
    for j in range(N*N):
        if h[j//N][j%N] > 0:
            priorities.append((total_spins[j//N][0], 1))
        else:
            priorities.append((-total_spins[j//N][0], -1))
    
    return priorities




#score: {'data2D.txt': 0.07764182098765438}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            priority_total = [0, 0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[0] = total_spin
            else:
                priority_total[1] = -total_spin
            priorities.append(priority_total)
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N))
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin_site = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin_site += site_spin * state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin_site, 1))
            else:
                priorities.append((total_spin_site, -1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority = np.zeros((N**2, 2))

    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority[i*N+j, 0] = total_spin
            else:
                priority[i*N+j, 1] = -total_spin

    return priority.tolist()




#score: {'data2D.txt': -0.2136520061728395}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2,2))
    total_spin = np.zeros((N,N))
    priorities = []
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i][j] += state[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j),0] = total_spin[i][j]
            else:
                priority_total[(i*N+j),1] = -total_spin[i][j]
    
    for j in range(N**2):
        sum_1 = 0
        sum_2 = 0
        for i in range(N):
            site = (i + ((j-1)%N - N) % N)
            if h[i][site%N] > 0:
                sum_1 += priority_total[j][0]
                sum_2 += priority_total[j][1]
            else:
                sum_1 -= priority_total[j][0]
                sum_2 -= priority_total[j][1]
        priorities.append((sum_1 - sum_2, sum_1 + sum_2))
    
    return [x for x in priorities]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((total_spin, 1))
    return priority




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((-total_spin, 1))
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin_site = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin_site += site_spin * state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin_site, 1))
            else:
                priorities.append((total_spin_site, -1))
    return priorities




#score: {'data2D.txt': 0.005746141975308629}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [0,0]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[0] += h[site][j]
            total_spin[1] -= h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[0]
            else:
                priority_total[i*N+j][1] = -total_spin[1]
    return priority_total




#score: {'data2D.txt': -0.0006125000000000001}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((-total_spin, 1))
    return np.array(priority).T.reshape(N**2, 2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum2 = (-1 * np.prod(J_new[1::2], 0)).flatten()
    priority = np.column_stack((sum1, -sum1-sum2))
    return(priority.astype(int))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0.5 for _ in range(2)] for _ in range(N**2)]
    return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum2 = (-np.prod(J_new[1::2], 0) + h).flatten()
    priority = np.column_stack((sum1, -sum2))
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.reshape(4,-1).T.flatten()
    sum_1 = (np.prod(J_new[::2], 0) + h.flatten()).flatten()
    sum_2 = (np.prod(J_new[1::2], 0) - h.flatten()).flatten()
    priority = np.column_stack((sum_1, -sum_2))
    return(priority)




#score: {'data2D.txt': -0.33340694444444346}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    
    for i in range(N):
        for j in range(N):
            total_spin = sum(J[(i+1)%N*N:(i+2)%N, (j+1)%N:(j+2)%N].flatten()) + h[i][j]
            if h[i][j] > 0:
                priority[i*N+j, 0] = total_spin
            else:
                priority[i*N+j, 1] = -total_spin
    
    return priority.tolist()




#score: {'data2D.txt': -0.09667175925925932}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[site]
            else:
                priority_total[i*N+j][1] = -total_spin[site]
    return priority_total




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    return priority_total




#score: {'data2D.txt': -0.2684050925925922}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j%2) - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((-total_spin, 1))
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j % N) - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority = total_spin
            else:
                priority = -total_spin
            priorities.append((priority, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    J_reshaped = J.reshape(4, -1).T.flatten()
    sum_ones = (np.prod(J_reshaped[::2], 0) + h.flatten()).flatten()
    sum_negones = (np.prod(J_reshaped[1::2], 0) - h.flatten()).flatten()
    priority = np.column_stack((sum_ones, -sum_negones))
    return priority




#score: {'data2D.txt': 0.009663734567901214}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [[0,0] for _ in range(N**2)]
    for k in range(4):
        for i in range(N):
            for j in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                if h[i][j] > 0:
                    total_spin[i*N+j][1] += state[site][j]
                else:
                    total_spin[i*N+j][0] += state[site][j]
    return total_spin




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return np.array(priorities)




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0]for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N))
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin_site = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin_site += site_spin * state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin_site, 1))
            else:
                priorities.append((total_spin_site, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N))
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin_site = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin_site += site_spin * state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin_site, 1))
            else:
                priorities.append((total_spin_site, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    J_reshaped = J.reshape(4, -1).T.flatten()
    sum_ones = (np.prod(J_reshaped[::2], 0) + h.flatten()).flatten()
    sum_negones = (np.prod(J_reshaped[1::2], 0) - h.flatten()).flatten()
    priority = np.column_stack((sum_ones, -sum_negones))
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            site_spin = -1 if h[i][j] > 0 else 1
            total_spin = 0
            for k in [(i-1)%N, (i+1)%N]:
                for l in [(j-1)%N, (j+1)%N]:
                    if i == k and j != l:
                        total_spin += J[k*N+l][1] * site_spin
                    elif i != k and j == l:
                        total_spin += J[i*N+j][3] * site_spin
            priority.append([total_spin, -total_spin])
    return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return np.array(priorities).reshape(N**2, 2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    J_reshaped = J.reshape(4, -1).T.flatten()
    sum_ones = (np.prod(J_reshaped[::2], 0) + h.flatten()).flatten()
    sum_negones = (np.prod(J_reshaped[1::2], 0) - h.flatten()).flatten()
    priority = np.column_stack((sum_ones, -sum_negones))
    return priority




#score: {'data2D.txt': -0.010160339506172839}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = [[0 for _ in range(2)] for _ in range(m)]
    for i in range(m):
        site = (i // N, i % N)
        total_spin = h[site[1]][site[0]]
        if h[site[0]][site[1]] > 0:
            priorities[i][0] = total_spin
        else:
            priorities[i][1] = -total_spin
    for k in range(3):
        site = ((k-1) % N, i // N)
        total_spin += J[(((k-1) % 2) + 1)][site[0]][site[1]]
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    J_reshaped = J.reshape(4, -1).T.flatten()
    sum_ones = (np.prod(J_reshaped[::2], 0) + h.flatten()).flatten()
    sum_negones = (np.prod(J_reshaped[1::2], 0) - h.flatten()).flatten()
    priority = np.column_stack((sum_ones, -sum_negones))
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N**2, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = h[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N,N,2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i][j][0] = total_spin
            else:
                priority_total[i][j][1] = -total_spin
    return priority_total.reshape(N*N,2)




#score: {'data2D.txt': 0.009663734567901214}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.22532145061728423}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = []
    for i in range(m):
        site = (i // N, i % N)
        total_spin = h[site[1]][site[0]]
        if h[site[0]][site[1]] > 0:
            priority_minus_one = total_spin + np.sum([J[(k+2)%4][site[0]][site[1]] for k in range(3) if ((i//N + (k-1)%2 - 1)) % N == site[0]])
            priorities.append((priority_minus_one, 1))
        else:
            priority_plus_one = total_spin + np.sum([J[(k+2)%4][site[0]][site[1]] for k in range(3) if ((i//N + (k-1)%2 - 1)) % N == site[0]])
            priorities.append((priority_plus_one, -1))
    return priorities




#score: {'data2D.txt': -0.0015356481481481486}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = [[0 for _ in range(2)] for _ in range(m)]
    for i in range(m):
        site = (i // N, i % N)
        total_spin = h[site[1]][site[0]]
        if h[site[0]][site[1]] > 0:
            priorities[i][0] = total_spin
        else:
            priorities[i][1] = -total_spin
    for k in range(3):
        site = ((k-1) % N, i // N)
        total_spin += J[(((k-1) % 2) + 1)][site[0]][site[1]]
    for i in range(m):
        for j in range(i+1,m):
            site1 = (i // N, i % N)
            site2 = (j // N, j % N)
            total_spin += -J[(((site1[0]-site2[0])%2) + 1)][site1[0]][site1[1]]-J[(((site1[0]-site2[0])%2) + 1)][site2[0]][site2[1]]
    for i in range(m):
        if h[i//N][i%N] > 0:
            priorities[i][0] = total_spin
        else:
            priorities[i][1] = -total_spin
    return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N**2):
        total_spin = sum([state[(i//N)][(i%N)+(k-(k+1)%2 - 1)] % N for k in range(3)])
        if h[i//N][i%N] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    result = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site1 = (i + ((j-1)%N - 1)) % N
            site2 = (i + ((j+1)%N - 1)) % N
            if h[i][j] > 0:
                result[i*N+j][0] = total_spin
            else:
                result[i*N+j][1] = -total_spin
                
    return result




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N * N
    priorities = np.zeros((N2, 2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities[i*N+j, 0] = total_spin
            else:
                priorities[i*N+j, 1] = -total_spin
    
    return priorities




#score: {'data2D.txt': -0.144194290123457}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j % N) - 1)) % N
            total_spin[site] += state[i][j]
            if h[i][j] > 0:
                priority = total_spin[site]
            else:
                priority = -total_spin[site]
            priorities.append((priority, -1))
    return priorities




#score: {'data2D.txt': -0.3302288580246904}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0,0]
    for i in range(N):
        for j in range(N):
            site = (i + ((j % N) - 1)) % N
            total_spin[0] += state[i][j]
            if h[i][j] > 0:
                priority = total_spin[0]
            else:
                priority = -total_spin[0]
            priorities.append((priority, -1))
    return priorities




#score: {'data2D.txt': -0.20612422839506192}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((-total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.14991867283950638}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J = J.reshape(4*N**2)
    priority_list = []
    for i in range(N):
        for j in range(N):
            site_spin = 0
            for k in range(4):
                if k == 0:
                    site_spin += J[i*k + (j-1)%N]
                elif k == 1:
                    site_spin += J[i*k + N*(i+1)%N - i*N]
                elif k == 2:
                    site_spin += J[i*k + N**2 - i*N - j]
                else:
                    site_spin += J[i*k + (j-1)%N + i*N]
            priority_list.append((site_spin, -1 if h[i][j] > 0 else 1))
    return priority_list




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.009663734567901214}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return np.array(priorities)




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = [0]*N
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site] += state[i][j]
            if h[i][j] > 0:
                priority = sum(total_spin)
            else:
                priority = -sum(total_spin)
            priorities.append((priority, 1))
    return priorities




#score: {'data2D.txt': -0.144194290123457}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j % N) - 1)) % N
            total_spin[site] += state[i][j]
            if h[i][j] > 0:
                priority = total_spin[site]
            else:
                priority = -total_spin[site]
            priorities.append((priority, -1))
    return priorities




#score: {'data2D.txt': -0.13395077160493843}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j % N) - 1)) % N
            total_spin[site] += state[i][j]
            if h[i][j] > 0:
                priority = total_spin[site]
            else:
                priority = -total_spin[site]
            priorities.append((priority, 1))
    return priorities




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return np.array(priorities)




#score: {'data2D.txt': 0.03464922839506175}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N), dtype=int)
    for k in range(3):
        site = ((k-1)%2 - 1) % N
        for i in range(N):
            for j in range(N):
                total_spin[i][j] += state[(i + (k-1)%2 - 1) % N][site]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priorities.append((total_spin[i][j], 1))
            else:
                priorities.append((-1*total_spin[i][j], -1))
    return priorities




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return [(a,b) for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = np.ones((N,N))
    priorities = np.zeros((N*N,2))

    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                total_spin = sum([state[i][k] if (i+k)%2 == (j+1)%2 else -state[i][k] for k in range(N)])
                priorities[i*N+j,0] = total_spin
                priorities[i*N+j,1] = 0
            else:
                total_spin = sum([state[i][k] if (i+k)%2 != (j+1)%2 else -state[i][k] for k in range(N)])
                priorities[i*N+j,0] = -total_spin
                priorities[i*N+j,1] = 1

    return priorities.astype(int)




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin
            else:
                priority[i*N+j][1] = -total_spin
    return priority




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N * N
    priority_list = [[0, 0] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            
            if h[i][j] > 0:
                priority_list[i*N+j][0] = total_spin
            else:
                priority_list[i*N+j][1] = -total_spin
                
    return priority_list




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = np.zeros((N2,2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j),0] = total_spin
            else:
                priority_total[(i*N+j),1] = -total_spin
    
    return priority_total.tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0006125000000000001}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 0))
            else:
                priorities.append((-total_spin, 1))
    return np.array(priorities).T.reshape(N**2, 2)




#score: {'data2D.txt': -0.19697546296296325}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0,0]
    for i in range(N**2):
        site = (i // N, i % N)
        spin = state[site[0]][site[1]]
        for k in range(3):
            neighbor_site = ((site[0] + ((k-1)%2 - 1)) % N, site[1])
            total_spin[0] += spin * state[neighbor_site[0]][neighbor_site[1]]
        if h[i // N][i % N] > 0:
            priorities.append((total_spin[0], 1))
        else:
            priorities.append((-total_spin[0], -1))
        total_spin = [0,0]
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    result = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site1 = (i + ((j-1)%N - 1)) % N
            site2 = (i + ((j+1)%N - 1)) % N
            if h[i][j] > 0:
                result[i*N+j][0] = total_spin
            else:
                result[i*N+j][1] = -total_spin
                
    return result




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    result = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site1 = (i + ((j-1)%N - 1)) % N
            site2 = (i + ((j+1)%N - 1)) % N
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                result[i*N+j][0] = total_spin
            else:
                result[i*N+j][1] = -total_spin
                
    return result




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            priorities.append((total_spin, spin))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.14721064814814835}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N**2):
        total_spin = sum([state[(i//N)%N][(i%N)+k-N] * state[i//N][k%N] for k in range(3) if (i//N)%N != ((i//N)//N*(k-1))%N])
        if h[i//N][i%N] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.11668225308641988}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][max(0, min(j+k, N)-1)] * site_spin for k in range(4)])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin_site = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin_site += site_spin * state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin_site, 1))
            else:
                priorities.append((total_spin_site, -1))
    return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.2852337962962958}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = sum([h[k][site-k%N] if k < N else h[N+k-(2*N),site-k%N] for k in range(3)])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.20332700617283966}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i*N+j][0]
            else:
                priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
    return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2,2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority[i*N+j, 0] = total_spin
            else:
                priority[i*N+j, 1] = -total_spin
    return priority.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 1))
            else:
                priority.append((-total_spin, -1))
    return np.array(priority)




#score: {'data2D.txt': -0.06364182098765434}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[spin] += state[site][j]
            priorities.append((total_spin[0], total_spin[1]))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return np.array(priorities)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum2 = (-np.prod(J_new[1::2], 0)).flatten()
    priority = np.column_stack((sum1, -sum1))
    return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            priority_total = np.zeros(2)
            for l in range(N):
                site = (i + ((l)%2 - 1)) % N
                if h[site][j] > 0:
                    priority_total[0] += state[site][j]
                else:
                    priority_total[1] -= state[site][j]
            if h[i][j] > 0:
                priorities.append((priority_total[0], 1))
            else:
                priorities.append((-1*priority_total[0], -1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities[i*N+j, 0] = total_spin
                priorities[i*N+j, 1] = -total_spin
    return priorities.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,2))
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][spin] += state[i][j]
            priority_total = np.zeros((N,2), dtype=int)
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += spin
            priorities.append(total_spin.sum(axis=0))
    return priorities




#score: {'data2D.txt': -0.003180092592592593}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0,0]
    for i in range(N):
        for j in range(N):
            total_spin[0] = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][k%N-j+N-1] > 0 else - state[(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(min(j,N-1))])
            total_spin[1] = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][k%N-j+N-1] < 0 else - state[(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(min(j,N-1))])
            priorities.append((total_spin[0], total_spin[1]))
    return priorities




#score: {'data2D.txt': -0.35241188271604973}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flat = J.reshape(-1)
    H = np.zeros((N**2, 2))
    
    for i in range(N):
        for j in range(N):
            site = (i * N + j) % (N ** 2)
            total_spin = 0
            for k in range(3):
                neighbor_site = ((i + ((k - 1) % 2) - 1) % N * N + j) % (N ** 2)
                if J_flat[neighbor_site] > 0:
                    total_spin += h[i][j]
            H[site, 0] = total_spin
            H[site, 1] = -total_spin
    
    return H.tolist()




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.1647720679012351}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0008853395061728396}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return [[x[1], -x[0]] for x in sorted(priorities)]




#score: {'data2D.txt': -0.0044970679012345674}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = [[0 for _ in range(2)] for _ in range(m)]
    
    for i in range(m):
        site = (i // N, i % N)
        total_spin = h[site[1]][site[0]]
        
        for k in range(3):
            neighbor_site = ((k-1) % N, site[1])
            if 0 <= neighbor_site[0] < N:
                total_spin += J[k][neighbor_site[0]][site[1]]
        
        for j in range(N):
            if h[i//N][j] > 0:
                priorities[i][0] = total_spin
            else:
                priorities[i][1] = -total_spin
        
    return priorities




#score: {'data2D.txt': 0.18487731481481504}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = np.zeros((N, 2), dtype=int)
    priorities = []
    for i in range(m):
        spin = -1 if h[i//N][i%N] > 0 else 1
        site = (i // N, i % N)
        for k in range(3):
            site_ = ((k-1) % N, i // N)
            total_spin[site_[1]][spin] += spin * state[site_[0]][site_[1]]
        if h[i//N][i%N] > 0:
            priorities.append((total_spin[i//N][0], 1))
        else:
            priorities.append((-total_spin[i//N][1], -1))
    return priorities




#score: {'data2D.txt': -0.004311574074074075}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = [[0 for _ in range(2)] for _ in range(m)]
    total_spin = [0 for _ in range(m)]
    for i in range(m):
        site = (i // N, i % N)
        total_spin[i] += h[site[1]][site[0]]
        for k in range(3):
            spin = -1 if h[site[0]][site[1]] > 0 else 1
            site = ((k-1) % N, i // N)
            total_spin[i] += spin * J[(((k-1) % 2) + 1)][site[0]][site[1]]
    for i in range(m):
        if h[i//N][i%N] > 0:
            priorities[i][0] = total_spin[i]
        else:
            priorities[i][1] = -total_spin[i]
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i][j][0] += h[site][j]
            if h[i][j] > 0:
                total_spin[i][j][1] = total_spin[i][j][0]
            else:
                total_spin[i][j][1] = -total_spin[i][j][0]
    priorities = []
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priorities.append((total_spin[i][j][0], 1))
            else:
                priorities.append((-total_spin[i][j][0], -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.012347993827160468}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [np.zeros(2) for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            row_sum = sum([state[i-((i+1)%N)][k] + state[(i+1)%N][k] for k in range(N)])
            col_sum = sum([state[k][j-((j+1)%N)] + state[k][(j+1)%N] for k in range(N)])
            
            if h[i][j] > 0:
                total_spin[i*N+j][0] += row_sum
                total_spin[i*N+j][1] += col_sum
            else:
                total_spin[i*N+j][0] -= row_sum
                total_spin[i*N+j][1] -= col_sum
    
    return [(x, y) for x, y in total_spin]




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.06433626543209879}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin_ones = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][k%N-j+N-1] > 0 else 0 for k in range(min(j,N-1))])
            total_spin_minusones = sum([-state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][k%N-j+N-1] < 0 else 0 for k in range(min(j,N-1))])
            priorities.append((total_spin_ones, total_spin_minusones))
    return priorities




#score: {'data2D.txt': -0.003180092592592593}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin_0 = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][k%N-j+N-1] > 0 else - state[(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(min(j,N-1))])
            total_spin_1 = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][k%N-j+N-1] < 0 else - state[(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(min(j,N-1))])
            priorities.append((total_spin_0, total_spin_1))
    return priorities




#score: {'data2D.txt': -0.20612422839506192}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((-total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.001152314814814816}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = np.zeros((m, 2), dtype=int)
    
    for i in range(m):
        site = (i // N, i % N)
        total_spin = h[site[1]][site[0]]
        
        if h[site[0]][site[1]] > 0:
            for k in range(3):
                site1 = ((k-1) % N, site[0])
                total_spin += J[(((k-1) % 2) + 1)][site1[0]][site1[1]]
            priorities[i][0] = int(total_spin)
        else:
            for k in range(3):
                site1 = ((k-1) % N, site[0])
                total_spin -= J[(((k-1) % 2) + 1)][site1[0]][site1[1]]
            priorities[i][1] = -int(total_spin)
    
    return priorities




#score: {'data2D.txt': 0.0002902777777777774}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = [[0 for _ in range(2)] for _ in range(m)]
    total_spin = [0]*m
    for i in range(m):
        site = (i // N, i % N)
        total_spin[i] += h[site[1]][site[0]]
        if J[0][site[0]][site[1]] > 0:
            total_spin[i] += J[0][site[0]][site[1]]
        else:
            total_spin[i] -= J[0][site[0]][site[1]]
        for k in range(3):
            site = ((k-1) % N, i // N)
            total_spin[i] += J[(k%2 + 1)][site[0]][site[1]]
    for j in range(m):
        if h[j//N][j%N] > 0:
            priorities[j][0] = -total_spin[j]
        else:
            priorities[j][1] = total_spin[j]
    return priorities




#score: {'data2D.txt': -0.3153939814814807}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            site = (i + ((j%2) - 1)) % N
            total_spin[h[i][j] > 0] += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin[0], total_spin[1]))
            else:
                priorities.append((-total_spin[0], -total_spin[1]))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = [0,0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[0] += state[site][j]
            priorities.append((total_spin[0], total_spin[1]))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    
    return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            total_spin = [0,0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[spin] += state[site][j]
            priorities[i*N+j] = total_spin
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0635152777777778}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
            priorities.append((-total_spin, -1))
        else:
            priorities.append((-total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
     state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
     priorities = []
     for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
           total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
           if h[i][j] > 0:
              priorities.append((total_spin, 1))
           else:
              priorities.append((total_spin, -1))
     return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((total_spin, 1))
          else:
            priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0635152777777778}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((-total_spin, -1))
          else:
            priorities.append((-total_spin, 1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        spin_config = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(spin_config[i][:k]+spin_config[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * spin_config[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum_2 = (np.prod(np.flip(J_new[1::2], 0), 0) - h).flatten()
        priority = np.column_stack((sum_1, -sum_2))
        return(priority)




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]  
        priorities = []  
        for i in range(N):  
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]  
            for j in range(N):  
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])  
                if h[i][j] > 0:  
                    priorities.append((total_spin, -1))  
                else:  
                    priorities.append((total_spin, 1))  
        return priorities




#score: {'data2D.txt': 0.20332700617283966}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0635152777777778}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((-total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0022912037037037037}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[float('inf'),float('-inf')] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin, -total_spin]
                else:
                    priority[i*N+j] = [-total_spin, total_spin]
        return priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.005835648148148147}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((-total_spin, 1))
        else:
          priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.32509459876543123}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2))
        for i in range(N):
            for j in range(N):
                row_sum = sum(J[i*N:(i+1)*N,j].flatten())
                col_sum = sum(J[:,j*N:(j+1)*N].flatten())
                total_spin = row_sum + col_sum
                if h[i][j] > 0:
                    priority[(i*N+j),:] = [total_spin, -1]
                else:
                    priority[(i*N+j),:] = [-total_spin, 1]
        return(priority)




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
     state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
     priorities = []
     for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
           total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
           if h[i][j] > 0:
              priorities.append((total_spin, 1))
           else:
              priorities.append((total_spin, -1))
     return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((-total_spin, -1))
        else:
          priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, -1))
        else:
          priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.20548379629629648}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
              priority_total = [(total_spin, -1), (total_spin+2*h[i][j], 1)]
              priorities.append(sorted(priority_total)[0])
            else:
              priority_total = [(-total_spin, 1), (-total_spin-2*h[i][j], -1)]
              priorities.append(sorted(priority_total)[0])
        return priorities




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return(priority_total)




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            for i in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[site][0]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[site][0]
        return priority_total




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0003754629629629633}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0]*2 for _ in range(N**2)]
        priority_total = [[0]*2 for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N) % N
                total_spin[(i*N)+j][0] += state[site][j]
                
        for j in range(N):
            if h[j][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]

        return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.24194027777777763}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = np.zeros((N,2), dtype=int)
    for k in range(3):
        for i in range(N):
            site = (i + ((k-1)%2 - 1)) % N
            for j in range(N):
                total_spin[site][0] += state[i][j]
    priorities = []
    for i in range(N*N):
        if h[i//N][i%N] > 0:
            priorities.append((total_spin[i//N][0], 1))
        else:
            priorities.append((-total_spin[i//N][0], -1))
    return priorities




#score: {'data2D.txt': -0.13588317901234587}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N): 
            for j in range(N): 
                site = (i + ((0)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0: 
                    priorities.append((total_spin[site][0], 1))
                else: 
                    priorities.append((-total_spin[site][0], 1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = priority_total[j][0]
            else:
                priority_total[j][1] = -priority_total[j][0]
        
        return [[row[0], row[1]] for row in priority_total]




#score: {'data2D.txt': -0.005166512345679013}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i]
                else:
                    priority_total[i*N+j][1] = -total_spin[i]
        for i in range(N):
            if h[i][N-1] > 0:
                priority_total[i*N+N-1][0] += total_spin[i]
            else:
                priority_total[i*N+N-1][1] = -total_spin[i]
        return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0.0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.00045015432098765386}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [[0,0] for _ in range(N**2)]
    priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[j][0] += state[site][j]
                priority_total[j][0] = total_spin[j][0]
            else:
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[j][0] -= state[site][j]
                priority_total[j][1] = -1*total_spin[j][0]
    return priority_total




#score: {'data2D.txt': 0.1909066358024694}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += state[site][j]
                if h[i][j] > 0:
                    total_spin[i*N+j][1] = total_spin[i*N+j][0]
                else:
                    total_spin[i*N+j][1] = -total_spin[i*N+j][0]
        priority_total = [[-total_spin[i][0], total_spin[i][1]] for i in range(N**2)]
        return priority_total




#score: {'data2D.txt': -0.0008754629629629627}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return [[p[0], p[1]] for p in sorted(priorities)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[j]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[j]
        return priority_total




#score: {'data2D.txt': 0.17659120370370396}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([h[k][min((i+k)%N,N-1)]*state[(i+k)%N][(j+1)%N] for k in range(min(i,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [[0,0] for _ in range(N**2)]
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    total_spin[i*N+j][0] += state[site][j]
        for i in range(N**2):
            if h[int(i/N)][i%N] > 0:
                priorities.append((total_spin[i][0], 1))
            else:
                priorities.append((-1*total_spin[i][0], -1))
        return priorities




#score: {'data2D.txt': -0.0018550925925925922}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N:(i+1)*N][0] = total_spin[i]
            else:
                priority_total[i*N:(i+1)*N][1] = -total_spin[i]
        for i in range(N**2):
            if h[(i//N)%N][(i%N)] > 0:
                priority_total[i][0] += total_spin[(i//N)%N]
            else:
                priority_total[i][1] -= total_spin[(i//N)%N]
        return priority_total




#score: {'data2D.txt': 0.2401625}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0.5 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += h[site][0]
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[i][j]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[i][j]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            for i in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[site][0]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[site][0]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin[site][0] += h[i][j]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          site = (i + ((j-1)%N - 1)) % N
          total_spin[site][0] += h[i][j]
          priority_total[(i*N+j), 0] = total_spin[site][0]
        else:
          site = (i + ((j+1)%N - 1)) % N
          total_spin[site][0] -= h[i][j]
          priority_total[(i*N+j), 1] = -total_spin[site][0]
    return priority_total




#score: {'data2D.txt': 0.161848302469136}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], 1))
                else:
                    priorities.append((-total_spin[site][0], -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2))
        for i in range(N):
            for j in range(N):
                row_sum = J[i*N:i*(N+1),j].sum()
                if h[i][j] > 0:
                    priority[(i*N+j),0] = -row_sum
                    priority[(i*N+j),1] = 1
                else:
                    priority[(i*N+j),0] = row_sum
                    priority[(i*N+j),1] = -1
        return priority




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += h[site][j]
                total_spin[i*N+j][1] -= h[site][j]
        return total_spin




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):  
        for j in range(N):  
            site = (i + ((j-1)%N - 1)) % N
            for k in range(3):
                if k == 0:  
                    total_spin[i*N+j][0] += h[site][j]
                else:
                    total_spin[i*N+j][1] -= h[site][j]
    return total_spin




#score: {'data2D.txt': -0.24194027777777763}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    total_spin[site][0] += state[i][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority = (total_spin[i][0], 1)
                else:
                    priority = (-total_spin[i][0], -1)
                priorities.append(priority)
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.005166512345679013}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
    total_spin = [0 for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i]
            else:
                priority_total[i*N+j][1] = -total_spin[i]
    for i in range(N):
        if h[i][N-1] > 0:
            priority_total[i*N+N-1][0] += total_spin[i]
        else:
            priority_total[i*N+N-1][1] = -total_spin[i]
    return priority_total




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = [0, 0]
                
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[1] += state[site][j]
                    else:
                        total_spin[0] -= state[site][j]
                
                if h[i][j] > 0:
                    priorities.append((total_spin[1], total_spin[1]))
                else:
                    priorities.append((-total_spin[0], -total_spin[0]))
        
        return priorities




#score: {'data2D.txt': -0.17246496913580261}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          for j in range(N):
              site = (i + ((j)%2 - 1)) % N
              total_spin = sum([state[site][k] for k in range(N)])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((-total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):  
            for j in range(N):  
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    if k == 0:  
                        total_spin[i*N+j][0] += h[site][j]
                    else:
                        total_spin[i*N+j][1] -= h[site][j]
        return total_spin




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):  
            for j in range(N):  
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    if k == 0:  
                        total_spin[i*N+j][0] += h[site][j]
                    else:
                        total_spin[i*N+j][1] -= h[site][j]
        return total_spin




#score: {'data2D.txt': -0.03459953703703704}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0.0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0.0 for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[j] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[j]
                else:
                    priority_total[i*N+j][1] = -total_spin[j]
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] += total_spin[0]
            else:
                priority_total[j][1] -= total_spin[0]
        return [list(row) for row in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        total_spin = 0
        site = (i + ((j-1)%2 - 1)) % N
        total_spin += h[site][j]
        if h[i][j] > 0:
          priority[(i*N+j), 0] = total_spin
        else:
          priority[(i*N+j), 1] = -total_spin
    return priority.tolist()




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_priority[i*N+j][0] = total_spin
                else:
                    total_priority[i*N+j][1] = -total_spin
        return total_priority




#score: {'data2D.txt': -0.0034226851851851853}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = total_spin[i]
                else:
                    priority_list[i*N+j][1] = -total_spin[i]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_list[i*N+j][0] += total_spin[i]
                else:
                    priority_list[i*N+j][1] -= total_spin[i]
        return priority_list




#score: {'data2D.txt': -0.0008199074074074073}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if J_flatten[(i+1)*N+j] > 0:
                    site = (i + ((j-1)%N - 1)) % N
                else:
                    site = (i + ((j-1)%N - 1)) % N
                sum_1[i*N+j,0] += J_flatten[(i+1)*N+j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (j + ((k-1)%N - 1)) % N
                total_spin += J_flatten[(i+site)*N+j]
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin
            else:
                priority_total[i*N+j,1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N) - N//2) % N
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': -0.33023472222222133}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((2)%2 - 1)) % N
                total_spin[0] += state[i][j]
                if h[i][j] > 0:
                    priorities.append([total_spin[0],-total_spin[0]])
                else:
                    priorities.append([-total_spin[0],total_spin[0]])
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0012285493827160494}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                if h[i][j] > 0:
                    total_spin += J_flatten[(i+1)*N+j]
                else:
                    total_spin -= J_flatten[(i+1)*N+j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin += J_flatten[site*N+j]
                    else:
                        total_spin -= J_flatten[site*N+j]
                priority_total = np.zeros((N**2,2), dtype=int)
                for j in range(N):
                    priority_total[j][1] = -total_spin
                    priority_total[j][0] = total_spin
                return priority_total




#score: {'data2D.txt': -0.0006054012345679012}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                if h[i][j] > 0:
                    sum_1[i*N+j,0] += J_flatten[(i+1)*N+j]
                else:
                    sum_1[i*N+j,1] = -J_flatten[(i+1)*N+j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += J_flatten[(i+site)*N+j]
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin
            else:
                priority_total[i*N+j,1] = -total_spin
        return sum_1




#score: {'data2D.txt': 0.004560956790123458}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = sum([J_flatten[(k+1)*N+j] * state[max(0,i-k)][j-(i-k)%N] for k in range(min(i+1,N))])
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin
            else:
                priority_total[i*N+j,1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': 0.146027314814815}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0034226851851851853}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = total_spin[i]
                else:
                    priority_list[i*N+j][1] = -total_spin[i]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_list[i*N+j][0] += total_spin[i]
                else:
                    priority_list[i*N+j][1] -= total_spin[i]
        return priority_list




#score: {'data2D.txt': -0.0034226851851851853}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
    total_spin = [0 for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i] += h[site][j]
            if h[i][j] > 0:
                priority_list[i*N+j][0] = total_spin[i]
            else:
                priority_list[i*N+j][1] = -total_spin[i]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            if h[i][j] > 0:
                priority_list[i*N+j][0] += total_spin[i]
            else:
                priority_list[i*N+j][1] -= total_spin[i]
    return priority_list




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        site_interactions = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    site_interactions[i][j] = total_spin
                else:
                    site_interactions[i][j] = -total_spin
        priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = site_interactions[i][j]
                else:
                    priority_list[i*N+j][1] = -site_interactions[i][j]
        return priority_list




#score: {'data2D.txt': -0.0006054012345679012}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[i][j]
                if h[i][j] > 0:
                    sum_1[i*N+j,0] += J_flatten[(i+1)*N+j]
                else:
                    sum_1[i*N+j,1] = -J_flatten[(i+1)*N+j]
        return sum_1




#score: {'data2D.txt': -0.0006054012345679012}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                if h[i][j] > 0:
                    sum_1[i*N+j,0] += J_flatten[(i+1)*N+j]
                else:
                    sum_1[i*N+j,1] = -J_flatten[(i+1)*N+j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += J_flatten[(i+site)*N+j]
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin
            else:
                priority_total[i*N+j,1] = -total_spin
        return sum_1




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((2)%2 - 1)) % N
                for k in range(3):
                    if k == 0:
                        site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0013794753086419753}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N,2))
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][j] += state[site][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[i][j][0]
            else:
                priority_total[j][1] = -1*total_spin[i][j][0]
        return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': 0.0003560185185185191}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                if h[i][j] > 0:
                    for k in range(3):
                        site_neighbor = (i + ((k-1)%2 - 1)) % N
                        total_spin += J_flatten[(site_neighbor*N+j)]
                else:
                    for k in range(3):
                        site_neighbor = (i + ((k-1)%2 - 1)) % N
                        total_spin -= J_flatten[(site_neighbor*N+j)]
                if h[i][j] > 0:
                    priority_total[i*N+j,0] = total_spin
                else:
                    priority_total[i*N+j,1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0025399691358024682}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      J_flatten = J.flatten()
      sum_1 = np.zeros((N**2,2), dtype=int)
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - 1)) % N
              total_spin = 0
              if h[i][j] > 0:
                  total_spin += J_flatten[(i+1)*N+j]
              else:
                  total_spin -= J_flatten[(i+1)*N+j]
              sum_1[i*N+j,0] = total_spin
              sum_1[i*N+j,1] = -total_spin
      return sum_1




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        prior = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    prior[(i*N+j), 0] = total_spin
                else:
                    prior[(i*N+j), 1] = -total_spin
        return prior




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+(k-1)%2-1)%N][j] if k%2==0 else -state[(i+(k-1)%2-1)%N][j] for k in range(3)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': 0.026356018518518518}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if ((i-k)%2==(j-k)%2) else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.00042453703703703734}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x[1], x[0]] for x in sorted(priorities)]




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j,0] = total_spin
                else:
                    priority_total[i*N+j,1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0018186728395061728}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0025399691358024682}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        J_flatten = J.flatten()
        total_spin = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j,0] += h[site][j]
                if h[i][j] > 0:
                    total_spin[i*N+j,0] += J_flatten[(i+1)*N+j]
                else:
                    total_spin[i*N+j,0] -= J_flatten[(i+1)*N+j]
        for j in range(N):
            priority_total = np.zeros((2), dtype=int)
            for i in range(N):
                if h[i][j] > 0:
                    priority_total[0] = total_spin[i*N+j,0]
                else:
                    priority_total[1] = -total_spin[i*N+j,0]
            return total_spin




#score: {'data2D.txt': -0.0024405864197530867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
            
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    
    return priority_total




#score: {'data2D.txt': -0.0018186728395061728}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0024405864197530867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.10440200617283958}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if J_flatten[(site)*N+(j)] > 0:
                        total_spin += J_flatten[(site)*N+(j)]
                    else:
                        total_spin -= J_flatten[(site)*N+(j)]
                priority[i*N+j,0] = total_spin
        return priority




#score: {'data2D.txt': -0.0010637345679012338}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                for k in range(3):
                    if J_flatten[(site+1)*N+k] > 0:
                        total_spin += 1
                    else:
                        total_spin -= 1
                sum_1[i*N+j,0] = total_spin
        priority_total = np.zeros((N**2,2), dtype=int)
        for j in range(N):
            if h[j//N][j%N] > 0:
                priority_total[(j)//N*(N) + (j)%N,0] = sum_1[(j)//N*(N) + (j)%N,0]
            else:
                priority_total[(j)//N*(N) + (j)%N,1] = -sum_1[(j)//N*(N) + (j)%N,0]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin
                    priority_total[i][j][1] = -total_spin
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': -0.0635152777777778}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((-total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [(p,1) if p>0 else ((-p),-1) for p,_ in sorted(priorities,reverse=True)]




#score: {'data2D.txt': -0.20612422839506192}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, -1))
        else:
          priorities.append((-total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.20332700617283966}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
                    
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, h[i][j]))
                else:
                    priorities.append((-total_spin, -h[i][j]))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[(i*N)+j][0] = total_spin
                else:
                    priorities[(i*N)+j][1] = -total_spin
        
        return [priorities[i] for i in range(N**2)]




#score: {'data2D.txt': 0.15212052469135823}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N) % N
                total_spin = state[site][j]
                
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
                    
        return [p for p in priorities]




#score: {'data2D.txt': -0.005665277777777779}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        J_flatten = J.flatten()
        priority_total = np.zeros((N2,2), dtype=int)
        total_spin = 0
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': 2.3611111111110474e-05}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        total_spin = np.zeros(2)
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[0] += h[site][j]
            total_spin[1] += J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
            if h[i][j] > 0:
                priority_total[i*N+j, 0] = total_spin[0]
                priority_total[i*N+j, 1] = total_spin[1]
            else:
                priority_total[i*N+j, 0] = -total_spin[0]
                priority_total[i*N+j, 1] = -total_spin[1]
    return priority_total




#score: {'data2D.txt': -0.064729475308642}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        total_spin = [0]*N
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j, 0] = sum(total_spin)
            else:
                priority_total[i*N+j, 1] = -sum(total_spin)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            if h[i][j] > 0:
                total_spin[site] += J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
    return priority_total




#score: {'data2D.txt': -0.07931435185185191}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = []
    for i in range(N):
        total_spin = 0
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total.append((total_spin, 1))
            else:
                priority_total.append((-total_spin, -1))
    return priority_total




#score: {'data2D.txt': -0.012068672839506174}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(4)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site2 = (site + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][k] += h[site2][j]
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = sum(total_spin[i*N+j][:])
                else:
                    priority_total[i*N+j][1] = -sum(total_spin[i*N+j][:])
        return priority_total




#score: {'data2D.txt': -0.14845848765432118}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        sum_1 = np.zeros((N**2,2), dtype=int)
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += state[site][j]
                total_spin[i][1] = -total_spin[i][0]
                if h[i][j] > 0:
                    sum_1[i*N+j,0] = total_spin[i][0]
                    sum_1[i*N+j,1] = -total_spin[i][0]
                else:
                    sum_1[i*N+j,0] = -total_spin[i][0]
                    sum_1[i*N+j,1] = total_spin[i][0]
        return sum_1




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_priority[i*N+j][0] = total_spin
                else:
                    total_priority[i*N+j][1] = -total_spin
        return total_priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.00014953703703703735}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin[i][j][0] += J[0][site][0]
                total_spin[i][j][1] += J[1][site][1]
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin[i][j][0]
                else:
                    priority_total[i][j][1] = -1*total_spin[i][j][0]
        return priority_total.reshape((N*N,2)).tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2,2))
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': 0.08955200617283958}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0.5 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    total_spin += J[k][site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': 0.0022603395061728407}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
    total_spin = [0 for _ in range(N)]
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site] += spin
            if h[i][j] > 0:
                priority_total[i*N+j][0] = sum(total_spin)
            else:
                priority_total[i*N+j][1] = -sum(total_spin)
    return [[a, b] for a, b in priority_total]




#score: {'data2D.txt': -0.0019427469135802468}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if k==0:
                        total_spin[i*N+j][0] += J[0][site][0]
                        total_spin[i*N+j][1] -= J[1][site][1]
                    elif k==1:
                        total_spin[i*N+j][0] -= J[0][site][0]
                        total_spin[i*N+j][1] += J[1][site][1]
                    else:
                        site = (i + ((j-1)%N - N//2)) % N
                        if h[i][j] > 0:
                            total_spin[i*N+j][0] -= h[i][j]
                            total_spin[i*N+j][1] += h[i][j]
                        else:
                            total_spin[i*N+j][0] += h[i][j]
                            total_spin[i*N+j][1] -= h[i][j]
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': 0.022686265432098764}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[j] += state[site][j]
                if h[i][j] > 0:
                    priority_total[N*i+j][0] = total_spin[j]
                else:
                    priority_total[N*i+j][1] = -1*total_spin[j]
        return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum_2 = (-np.prod(J_new[1::2], 0) - h).flatten()
        return np.column_stack((sum_1, sum_2))




#score: {'data2D.txt': -0.0009766975308641975}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] += sum(J[0][site][(k-1)%N] for k in range(3))
                total_spin[i*N+j][1] -= sum(J[1][site][(k-1)%N] for k in range(3))
                if h[i][j] > 0:
                    total_spin[i*N+j][0] -= h[i][j]
                    total_spin[i*N+j][1] += h[i][j]
                else:
                    total_spin[i*N+j][0] += h[i][j]
                    total_spin[i*N+j][1] -= h[i][j]
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return [[p[0], p[1]] for p in priority]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        for j in range(N):
            priority_total = []
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = 0
                for k in range(3):
                    total_spin += h[site][k]
                if h[i][j] > 0:
                    priority_total.append((total_spin, 1))
                else:
                    priority_total.append((-total_spin, -1))
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum(h[site][k] for k in range(min(i,N-1)))
                if h[i][j] > 0:
                    priority_total.append((total_spin, 1))
                else:
                    priority_total.append((-total_spin, -1))
        return priority




#score: {'data2D.txt': -0.0012591049382716052}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = [-1 if h[site][j] > 0 else 1 for _ in range(3)]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += state[k]
                if h[i][j] > 0:
                    priority_total = [total_spin[i*N+j][0], 1]
                else:
                    priority_total = [-total_spin[i*N+j][0], -1]
        return [priority_total for _ in range(N**2)]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    total_spin[i*N+j][0] += h[site][j]
                if h[i][j] > 0:
                    total_spin[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    total_spin[i*N+j][1] = -total_spin[i*N+j][0]
        return [total_spin[i] for i in range(N**2)]




#score: {'data2D.txt': -0.1864680555555557}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            site1 = (i + ((j-1)%N - 1)) % N
            site2 = (i + ((j+1)%N - 1)) % N
            if h[i][j] > 0:
                priorities.append([(row_sum[site1] + row_sum[site2]), 1])
            else:
                priorities.append([-row_sum[site1] - row_sum[site2], -1])
    return [[a, b] for a, b in priorities]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[a, b] for a, b in priorities]




#score: {'data2D.txt': -0.20612422839506192}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j] > 0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                priorities.append((total_spin, -1) if h[i][j] > 0 else (total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0016535493827160494}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [sum([state[i][j]*(-1)**((i+j)%2) for j in range(N)]) for i in range(N)]
        priorities = [(total_spin[i], -1) if h[i][j] > 0 else (total_spin[i], 1) for i in range(N) for j in range(N)]
        return [[x, y] for x,y in sorted(priorities)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        total_spin = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j,0] += h[site][j]
                if h[i][j] > 0:
                    total_spin[i*N+j,0] -= J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                    total_spin[i*N+j,1] = total_spin[i*N+j,0]
                else:
                    total_spin[i*N+j,1] = -total_spin[i*N+j,0]
        return total_spin




#score: {'data2D.txt': -0.057249537037037064}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0035495370370370372}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin + J_flatten[(i+1)*N+j]
                else:
                    priority_total[i*N+j, 1] = total_spin - J_flatten[i*N+(j-1)%N]
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j, 0] += h[0][j]
            else:
                priority_total[j, 1] -= h[0][j]
        return priority_total




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    site = (i + ((j-1)%N - N//2)) % N
                    for k in [(-1, 0), (0, -1), (1, 0)]:
                        total_spin[i*N+j][0] += J[k[0]][site][k[1]]
                else:
                    site = (i + ((j-1)%N - N//2)) % N
                    for k in [(-1, 0), (0, -1), (1, 0)]:
                        total_spin[i*N+j][1] += J[k[0]][site][k[1]]
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin
                else:
                    priority_total[i][j][1] = -total_spin
        return priority_total.reshape(N*N,2)




#score: {'data2D.txt': -0.12631280864197547}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in [(-1, 0), (0, -1), (1, 0)]:
                site = (i + ((k[1]-1)%N - N//2)) % N
                if h[i][j] > 0:
                    priority[i*N+j][0] += J[k[0]][site][k[1]]
                else:
                    total_spin -= J[k[0]][site][k[1]]
            if h[i][j] > 0:
                priority[i*N+j] = [total_spin, -1*total_spin]
            else:
                priority[i*N+j] = [-1*total_spin, total_spin]
    return priority




#score: {'data2D.txt': -0.0028631172839506096}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0]*2
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(0,1),(-1,0),(1,0)]:
                    if J[k[0]][site][k[1]] > 0:
                        total_spin[0] += J[k[0]][site][k[1]]
                    else:
                        total_spin[1] += -J[k[0]][site][k[1]]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = total_spin
                else:
                    priority_total[i*N+j] = [-x for x in total_spin]
        return priority_total




#score: {'data2D.txt': -0.004367438271604928}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J = J.flatten()
    sum1 = np.sum(J[0::2], 0).flatten()
    sum2 = np.sum(J[1::2], 0).flatten()
    h = h.flatten()
    priority = np.column_stack((np.sign(sum1 + h), -np.sign(sum1 + h)))
    return priority




#score: {'data2D.txt': 0.004709722222222222}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2,2), dtype=int)
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += state[site][j]
                if h[i][j] > 0:
                    priority_total[N*i+j][0] = total_spin[i][0]
                else:
                    priority_total[N*i+j][1] = -total_spin[i][0]
        for j in range(N):
            if h[j][0] > 0:
                priority_total[N*j+0][0] = total_spin[0][0]
            else:
                priority_total[N*j+0][1] = -total_spin[0][0]
        return priority_total




#score: {'data2D.txt': -0.0009662037037037034}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum([state[site][k] for k in range(N)])
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin[i][0]
            else:
                priority_total[(i*N+j), 1] = -total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin[i*N+j][0] += h[site][j]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          priority_total[i*N+j][0] = total_spin[i*N+j][0]
        else:
          priority_total[i*N+j][1] = -total_spin[i*N+j][0]
    return priority_total




#score: {'data2D.txt': -0.0020412037037037035}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += state[site][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = -total_spin[i][0]
            else:
                priority_total[(i*N+j), 1] = total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.0010637345679012338}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    sum_1 = np.zeros((N**2,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = 0
            for k in range(3):
                if J_flatten[(site+1)*N+k] > 0:
                    total_spin += 1
                else:
                    total_spin -= 1
            sum_1[i*N+j,0] = total_spin
    priority_total = np.zeros((N**2,2), dtype=int)
    for j in range(N):
        if h[j//N][j%N] > 0:
            priority_total[(j)//N*(N) + (j)%N,0] = sum_1[(j)//N*(N) + (j)%N,0]
        else:
            priority_total[(j)//N*(N) + (j)%N,1] = -sum_1[(j)//N*(N) + (j)%N,0]
    return priority_total




#score: {'data2D.txt': -0.0010637345679012338}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    sum_1 = np.zeros((N**2,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = 0
            for k in range(3):
                if J_flatten[(site+1)*N+k] > 0:
                    total_spin += 1
                else:
                    total_spin -= 1
            sum_1[i*N+j,0] = total_spin
    priority_total = np.zeros((N**2,2), dtype=int)
    for j in range(N):
        if h[j//N][j%N] > 0:
            priority_total[(j)//N*(N) + (j)%N,0] = sum_1[(j)//N*(N) + (j)%N,0]
        else:
            priority_total[(j)//N*(N) + (j)%N,1] = -sum_1[(j)//N*(N) + (j)%N,0]
    return priority_total




#score: {'data2D.txt': -0.0010637345679012338}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    sum_1 = np.zeros((N**2,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = 0
            for k in range(3):
                if J_flatten[(site+1)*N+k] > 0:
                    total_spin += 1
                else:
                    total_spin -= 1
            sum_1[i*N+j,0] = total_spin
    priority_total = np.zeros((N**2,2), dtype=int)
    for j in range(N):
        if h[j//N][j%N] > 0:
            priority_total[(j)//N*(N) + (j)%N,0] = sum_1[(j)//N*(N) + (j)%N,0]
        else:
            priority_total[(j)//N*(N) + (j)%N,1] = -sum_1[(j)//N*(N) + (j)%N,0]
    return priority_total




#score: {'data2D.txt': -0.010386882716049383}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros(2)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                total_spin[1] -= h[i][j]
        return [[total_spin[0], -total_spin[0]] for _ in range(N**2)]




#score: {'data2D.txt': 0.0010171296296296298}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in [(i-1)%N, (i+1)%N]:
                    if k == i:
                        continue
                    site = (k + ((j-1)%2 - 1)) % N
                    total_spin += J[0][site][j] * h[k][j]
                priority_list.append([total_spin, -total_spin])
        return priority_list




#score: {'data2D.txt': -0.3284013888888879}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][j] += spin
            if h[i][j] > 0:
                priorities.append((np.sum(total_spin), 1))
            else:
                priorities.append((-np.sum(total_spin), -1))
    return priorities




#score: {'data2D.txt': 0.059308487654321014}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if h[site][j] > 0:
                        total_spin += state[i//N][j]
                    else:
                        total_spin -= state[i//N][j]
            if h[i//N][i%N] > 0:
                priorities.append([total_spin, -total_spin])
            else:
                priorities.append([-total_spin, total_spin])
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0015714506172839506}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[p[1], p[0]] for p in sorted(priorities)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N_squared = N*N
    priority_total = [[0,0] for _ in range(N_squared)]
    
    for i in range(N):
      for j in range(N):
        total_spin = 0
        site = (i + ((j%N-1)%N)) % N
        total_spin += h[site][j]
        
        if h[i][j] > 0:
          priority_total[i*N+j][0] = total_spin
        else:
          priority_total[i*N+j][1] = -total_spin
    
    return priority_total




#score: {'data2D.txt': -0.0002770061728395061}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
      for j in range(N):
        for k in [(-1, 0), (0, -1), (1, 0)]:
          site = (i + ((k[0]%N) - N//2)) % N
          total_spin[i*N+j][0] += J[k[0]][site][k[1]]
    priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
        else:
          priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
    return priority_total




#score: {'data2D.txt': 0.003982253086419753}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    site_ = (site + k[0]) % N
                    j_ = (j + k[1]) % N
                    if h[i][j_] > 0:
                        total_spin += J[0][site_][j_]
                    else:
                        total_spin -= J[2][site_][j_]
                if h[i][j] > 0:
                    priority_list[i*N+j] = [total_spin, -1*total_spin]
                else:
                    priority_list[i*N+j] = [-1*total_spin, total_spin]
        return priority_list




#score: {'data2D.txt': -0.0017128086419753088}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
            else:
                priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[i*N+j][0] += 1
                    else:
                        total_spin[i*N+j][1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for j in range(N):
            for i in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j][1]
        return priority_total




#score: {'data2D.txt': -0.09538009259259264}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0,0] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[site]
                else:
                    priorities[i*N+j][1] = -total_spin[site]
        return priorities




#score: {'data2D.txt': 0.0011862654320987673}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin += J[k[0]][site][k[1]]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, -1*total_spin]
                else:
                    priority_total[i*N+j] = [-1*total_spin, total_spin]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
                    total_spin[i*N+j][1] -= J[k[0]][site][k[1]]
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_list = []
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = h[site][j]
            if h[i][j] > 0:
                priority_list.append((total_spin, 1))
            else:
                priority_list.append((-total_spin, -1))
    return priority_list




#score: {'data2D.txt': 0.02931682098765433}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    total_spin[i][0] += state[site][j]
                else:
                    total_spin[i][1] += state[site][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[i][0]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[i][1]
        return priority_total




#score: {'data2D.txt': -0.0035075617283950615}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin[site][0] += J[0][site][j]
                total_spin[site][1] -= J[2][site][j]
        priority_list = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_list[i*N+j] = [total_spin[i][0], -1*total_spin[i][0]]
                else:
                    priority_list[i*N+j] = [-1*total_spin[i][0], total_spin[i][0]]
        return priority_list.tolist()




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.0007733024691358028}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    spin = 1
                else:
                    spin = -1
                site = (i + ((2)%2 - 1)) % N*N
                total_spin[site//N] += spin
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    priority_total[site*N+j][spin] += total_spin[site]
        return priority_total




#score: {'data2D.txt': -0.32947330246913487}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = 0
    priorities = []
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin += state[site][j]
            if h[i][j] > 0:
                priority = total_spin
            else:
                priority = -total_spin
            priorities.append((priority, 1))
    return priorities




#score: {'data2D.txt': 0.0008794753086419755}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in range(3):
                state = 1 if h[i][j] > 0 else -1
                total_spin[i*N+j][0] += state * sum(J[0][site][(k-1)%N] for _ in range(N))
                total_spin[i*N+j][1] -= state * sum(J[1][site][(k-1)%N] for _ in range(N))
            if h[i][j] > 0:
                total_spin[i*N+j][0] -= h[i][j]
                total_spin[i*N+j][1] += h[i][j]
            else:
                total_spin[i*N+j][0] += h[i][j]
                total_spin[i*N+j][1] -= h[i][j]
    return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = [0]*N*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j]
        return priority_total




#score: {'data2D.txt': 0.0001871913580246911}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if k == 0:
                        total_spin[i*N+j][0] += J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] -= J[1][site][(k-1)%N]
                    elif k == 1:
                        site = (i + ((j+1)%N - N//2)) % N
                        total_spin[i*N+j][0] += J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] -= J[1][site][(k-1)%N]
                    else:
                        site = (i + ((j-1)%N - N//2)) % N
                        total_spin[i*N+j][0] += J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] -= J[1][site][(k-1)%N]
                if h[i][j] > 0:
                    priority_total = [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]
                else:
                    priority_total = [[-total_spin[j][0], total_spin[j][1]] for j in range(N*N)]
        return priority_total




#score: {'data2D.txt': 0.198685339506173}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in range(3):
                if J[0][site][(k-1)%N] > 0:
                    total_spin[i*N+j][0] += 1
                else:
                    total_spin[i*N+j][0] -= 1
                if J[1][site][(k-1)%N] < 0:
                    total_spin[i*N+j][1] += 1
                else:
                    total_spin[i*N+j][1] -= 1
            if h[i][j] > 0:
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
            else:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
    return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.0012199074074074076}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if J[0][site][(k-1)%N] > 0:
                        total_spin[i*N+j][0] += 1
                    else:
                        total_spin[i*N+j][0] -= 1
                    if J[1][site][(k-1)%N] > 0:
                        total_spin[i*N+j][1] -= 1
                    else:
                        total_spin[i*N+j][1] += 1
                if h[i][j] > 0:
                    priority_total = [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]
                else:
                    priority_total = [[-total_spin[j][0], total_spin[j][1]] for j in range(N*N)]
        return priority_total




#score: {'data2D.txt': -0.0009766975308641975}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                state = 1 if h[i][j] > 0 else -1
                total_spin[i*N+j][0] += sum(J[0][site][(k-1)%N] for k in range(3))
                total_spin[i*N+j][1] -= sum(J[1][site][(k-1)%N] for k in range(3))
                if h[i][j] > 0:
                    total_spin[i*N+j][0] -= h[i][j]
                    total_spin[i*N+j][1] += h[i][j]
                else:
                    total_spin[i*N+j][0] += h[i][j]
                    total_spin[i*N+j][1] -= h[i][j]
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[float('inf'), float('-inf')] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum(state[i][k] for k in range(N))
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin, float('-inf')]
                else:
                    priority[i*N+j] = [-total_spin, float('inf')]
        return priority




#score: {'data2D.txt': -0.0018186728395061728}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0018186728395061728}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.16530478395061743}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    site = (i + ((k[0]%N) - N//2)) % N
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((total_spin[i*N+j][0], 1))
                else:
                    priorities.append((-1*total_spin[i*N+j][0], -1))
        return priorities




#score: {'data2D.txt': -0.0022912037037037037}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[0], 1]
                else:
                    priority_total[i*N+j] = [-total_spin[0], -1]
        return [[p[0], 0] for p in priority_total]




#score: {'data2D.txt': -0.0024405864197530867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.0024405864197530867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [(p,1) if p>0 else ((-p),-1) for p,_ in sorted(priorities,reverse=True)]




#score: {'data2D.txt': -0.006294290123456792}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        J_flatten = J.flatten()
        priority_total = np.zeros((N2,2), dtype=int)
        total_spin = 0
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = np.sign(total_spin)
                else:
                    priority_total[i*N+j, 1] = -np.sign(total_spin)
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j,0] = total_spin[i][0]
                else:
                    priority_total[i*N+j,1] = -total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N, N, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[i][j][0] += (-1 if h[site][j]>0 else 1)
                total_spin[i][j][1] -= (-1 if h[site][j]>0 else 1)
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin[i][j][0]
            else:
                priority_total[i*N+j,1] = -total_spin[i][j][1]
    return priority_total




#score: {'data2D.txt': -0.10440200617283958}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.0024405864197530867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.005665277777777779}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        J_flatten = J.flatten()
        priority_total = np.zeros((N2,2), dtype=int)
        total_spin = 0
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.000916820987654321}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    J_flatten = J.flatten()
    priority_total = np.zeros((N2,2), dtype=int)
    total_spin = np.zeros((N,2))
    
    for j in range(N):
        if h[0][j] > 0:
            priority_total[j*2, 0] = 1
            priority_total[j*2+1, 1] = -1
        else:
            priority_total[j*2, 1] = 1
            priority_total[j*2+1, 0] = -1

    for i in range(1,N):
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin[i][0] += h[site][j]
        total_spin[i][1] -= h[site][j]
        if h[i][j] > 0:
          priority_total[(i*N+j), 0] = total_spin[i][0]
        else:
          priority_total[(i*N+j), 1] = -total_spin[i][1]

    return priority_total




#score: {'data2D.txt': -0.0008199074074074073}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if J_flatten[(i+1)*N+j] > 0:
                    site = (i + ((j-1)%N - 1)) % N
                else:
                    site = (i + ((j-1)%N - 1)) % N
                sum_1[i*N+j,0] += J_flatten[(i+1)*N+j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (j + ((k-1)%N - 1)) % N
                total_spin += J_flatten[(i+site)*N+j]
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin
            else:
                priority_total[i*N+j,1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.003996450617283951}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (j + ((k-1)%N - 1)) % N
                    if J_flatten[(i+site)*N+j] > 0:
                        total_spin += h[site][j]
                priority_total[i*N+j, 0] = total_spin
                if h[i][j] > 0:
                    priority_total[i*N+j, 1] = -total_spin
                else:
                    priority_total[i*N+j, 1] = total_spin
        return priority_total




#score: {'data2D.txt': 0.0003560185185185191}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flatten[site*N+j]
                if h[i][j] > 0:
                    priority_total = [total_spin, -total_spin]
                else:
                    priority_total = [-total_spin, total_spin]
                sum_1[i*N+j] = priority_total
        return sum_1




#score: {'data2D.txt': -0.064729475308642}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0]*N
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = sum(total_spin)
                else:
                    priority_total[i*N+j, 1] = -sum(total_spin)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    total_spin[site] += J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0 if h[site][j]>0 else 1] += (-1 if h[site][j]>0 else 1)
        priority_total = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j][1]
        return [list(row) for row in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return priority




#score: {'data2D.txt': -0.0016702160493827158}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_spin += J_flatten[(i+1)*N+j]
                else:
                    total_spin -= J_flatten[(i+1)*N+j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin += J_flatten[site*N+j]
                    else:
                        total_spin -= J_flatten[site*N+j]
                priority_total = np.zeros((N**2,2), dtype=int)
                for j in range(N):
                    if h[i][j] > 0:
                        priority_total[(i*N+j),0] = total_spin
                    else:
                        priority_total[(i*N+j),1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0012285493827160494}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = 0
            if h[i][j] > 0:
                total_spin += J_flatten[(i+1)*N+j]
            else:
                total_spin -= J_flatten[(i+1)*N+j]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                if h[i][j] > 0:
                    total_spin += J_flatten[site*N+j]
                else:
                    total_spin -= J_flatten[site*N+j]
            priority_total = np.zeros((N**2,2), dtype=int)
            for j in range(N):
                priority_total[j][1] = -total_spin
                priority_total[j][0] = total_spin
            return [priority_total[j] for j in range(N**2)]




#score: {'data2D.txt': -0.0007733024691358028}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    spin = 1
                else:
                    spin = -1
                site = (i + ((2)%2 - 1)) % N*N
                total_spin[site//N] += spin
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    priority_total[site*N+j][spin] += total_spin[site]
        return priority_total




#score: {'data2D.txt': -0.0014476851851851836}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if J[0][site][(k-1)%N] > 0:
                        total_spin += 1
                    else:
                        total_spin -= 1
                    if J[1][site][(k-1)%N] > 0:
                        total_spin -= 1
                    else:
                        total_spin += 1
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, -total_spin]
                else:
                    priority_total[i*N+j] = [-total_spin, total_spin]
        return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
      for i in range(N):
          for j in range(N):
              if h[i][j] > 0:
                  site = (i + ((j-1)%N - N//2)) % N
                  total_spin[i*N+j][0] += 1
                  total_spin[i*N+j][1] -= 1
              else:
                  site = (i + ((j-1)%N - N//2)) % N
                  total_spin[i*N+j][0] -= 1
                  total_spin[i*N+j][1] += 1
      return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.0035075617283950615}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                state = 1 if h[i][j] > 0 else -1
                total_spin[site][0] += J[0][site][j]
                total_spin[site][1] -= J[2][site][j]
        priority_list = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_list[i*N+j] = [total_spin[i][0], -1*total_spin[i][0]]
                else:
                    priority_list[i*N+j] = [-1*total_spin[i][0], total_spin[i][0]]
        return [[x[0], x[1]] for x in priority_list]




#score: {'data2D.txt': -0.000402623456790124}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                state = (-1 if h[i][j] > 0 else 1)
                total_spin[site][0] += J[0][site][j] * state
                total_spin[site][1] -= J[2][site][j] * state
        priority_list = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_list[i*N+j] = [total_spin[i][0], -1*total_spin[i][0]]
                else:
                    priority_list[i*N+j] = [-1*total_spin[i][0], total_spin[i][0]]
        return priority_list.tolist()




#score: {'data2D.txt': 0.0011862654320987673}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin += J[k[0]][site][k[1]]
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, -1*total_spin]
                else:
                    priorities[i*N+j] = [-1*total_spin, total_spin]
        return priorities




#score: {'data2D.txt': 0.12694583333333348}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - N//2)) % N
              for k in [(0,-1),(1,0),(0,1)]:
                  total_spin[i*N+j][0] += J[k[0]][site][k[1]]
              if h[i][j] > 0:
                  total_spin[i*N+j][0] = total_spin[i*N+j][0]
                  total_spin[i*N+j][1] = -total_spin[i*N+j][0]
              else:
                  total_spin[i*N+j][0] = -total_spin[i*N+j][0]
                  total_spin[i*N+j][1] = total_spin[i*N+j][0]
      return total_spin




#score: {'data2D.txt': 0.0022603395061728407}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [0]*N
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin[site] += state[i][j]
        if h[i][j] > 0:
          priority_total[i*N+j, 0] = sum(total_spin)
        else:
          priority_total[i*N+j, 1] = -sum(total_spin)
    return priority_total




#score: {'data2D.txt': 0.0036072530864197532}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0]*N for _ in range(N)]
        priority_total = [[0, 0] for _ in range(N*N)]

        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin[i][j] += 1
                else:
                    total_spin[i][j] -= 1

                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += total_spin[i][j]

                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i][j], 1]
                else:
                    priority_total[i*N+j] = [-total_spin[i][j], -1]

        return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2, 2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                priority_total[i*N+j, 0] = total_spin
            else:
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin -= state[site][j]
                priority_total[i*N+j, 1] = -total_spin
    
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
                    total_spin[i*N+j][1] -= J[k[0]][site][k[1]]
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
                    total_spin[i*N+j][1] -= J[k[0]][site][k[1]]
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
                    total_spin[i*N+j][1] -= J[k[0]][site][k[1]]
        priority_total = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in [(0,-1),(1,0),(0,1)]:
                total_spin[i*N+j][0] += J[k[0]][site][k[1]]
                total_spin[i*N+j][1] -= J[k[0]][site][k[1]]
    priority_total = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
            else:
                priority_total[i*N+j] = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
    return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    if k==0:
                        total_spin[i*N+j][0] += h[site][j]
                    else:
                        total_spin[i*N+j][1] -= h[site][j]
        return total_spin




#score: {'data2D.txt': -0.0756412037037037}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i*N+j][0] += J[0][site][j]
                        total_spin[i*N+j][1] -= J[1][site][j]
                else:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i*N+j][0] += -J[0][site][j]
                        total_spin[i*N+j][1] -= J[1][site][j]
        priority_total = [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]
        return priority_total




#score: {'data2D.txt': 0.00030540123456790027}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in range(3):
                    if k == 0:
                        total_spin += J[0][site][(k-1)%N]
                    elif k == 1:
                        site = (i + ((j+1)%N - N//2)) % N
                        total_spin -= J[1][site][(k-1)%N]
                    else:
                        site = (i + ((j-1)%N - N//2)) % N
                        total_spin += J[0][site][(k-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, -total_spin]
                else:
                    priority_total[i*N+j] = [-total_spin, total_spin]
        return priority_total




#score: {'data2D.txt': -9.706790123456726e-05}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if k == 0:
                        total_spin += J[0][site][(j-1)%N]
                    elif k == 1:
                        site = (i + ((j+1)%N - N//2)) % N
                        total_spin += J[0][site][((j+1)-1)%N]
                    else:
                        site = (i + ((j-1)%N - N//2)) % N
                        total_spin += J[0][site][(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                    priority_total[i*N+j][1] = -total_spin
                else:
                    priority_total[i*N+j][0] = -total_spin
                    priority_total[i*N+j][1] = total_spin
        return priority_total




#score: {'data2D.txt': -0.036738734567901235}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in range(3):
                    if k == 0:
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin += J[0][site][j]
                    elif k == 1:
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin -= J[1][site][j]
                    else:
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin += J[0][site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, 0]
                else:
                    priority_total[i*N+j] = [-total_spin, 1]
        return priority_total




#score: {'data2D.txt': -0.0014476851851851836}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - N//2)) % N
            for k in range(3):
                if J[0][site][(k-1)%N] > 0:
                    total_spin += 1
                else:
                    total_spin -= 1
                if J[1][site][(k-1)%N] > 0:
                    total_spin -= 1
                else:
                    total_spin += 1
            if h[i][j] > 0:
                priority_total[i*N+j] = [total_spin, -total_spin]
            else:
                priority_total[i*N+j] = [-total_spin, total_spin]
    return priority_total




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N_squared = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N_squared)]
        
        for i in range(N):
          for j in range(N):
            total_spin = 0
            site = (i + ((j%N-1)%N)) % N
            total_spin += h[site][j]
            
            if h[i][j] > 0:
              priorities[i*N+j][0] = total_spin
            else:
              priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N_squared = N*N
        priority_total = [[0,0] for _ in range(N_squared)]
        
        for i in range(N):
          for j in range(N):
            total_spin = 0
            site = (i + ((j%N-1)%N)) % N
            total_spin += h[site][j]
            
            if h[i][j] > 0:
              priority_total[i*N+j][0] = total_spin
            else:
              priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N_squared = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N_squared)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j%N-1)%N)) % N
                total_spin += h[site][j]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
                
        return priority_total




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.09679552469135812}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            total_spin = sum([state[(i//N)%N][max(0, (i%N)-k)%N] * state[(i//N)%N][(i%N+k)%N] if 0<=k<N else 0 for k in range(max(0,N-1-i%N))])
            if h[i//N][i%N] > 0:
                priorities.append([total_spin, -total_spin])
            else:
                priorities.append([-total_spin, total_spin])
        return [[p[0], p[1]] for p in priorities]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.20963935185185192}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j-k%N] > 0 else -state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2,2), dtype=float)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority.astype(int)




#score: {'data2D.txt': -0.0028631172839506096}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            total_spin = [0]*2
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(0,1),(-1,0),(1,0)]:
                    if J[k[0]][site][k[1]] > 0:
                        total_spin[0] += J[k[0]][site][k[1]]
                    else:
                        total_spin[1] += -J[k[0]][site][k[1]]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = total_spin
                else:
                    priority_total[i*N+j] = [-x for x in total_spin]
        return priority_total




#score: {'data2D.txt': -0.33919861111111016}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in [(0,-1),(0,1),(-1,0),(1,0)]:
                    if J[k[0]][site][k[1]] > 0:
                        total_spin += J[k[0]][site][k[1]]
                    else:
                        total_spin -= J[k[0]][site][k[1]]
                if h[i][j] > 0:
                    total_priority[i*N+j] = [total_spin, -total_spin]
                else:
                    total_priority[i*N+j] = [-total_spin, total_spin]
        return total_priority




#score: {'data2D.txt': 2.237654320987681e-05}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = sum([J[0][(site+((k-1)%2-N//2))%N][j] * state[(site+((k-1)%2-N//2))%N][min(j,k)] 
                                  for k in range(3)])
                priority[i*N+j] = [total_spin, -total_spin]
        return priority




#score: {'data2D.txt': 0.0919671296296297}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N) % N)
                for k in range(3):
                    neighbor = (site + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += state[neighbor][j]
                    if h[i][j] > 0:
                        total_spin[i*N+j][1] += 1
                    else:
                        total_spin[i*N+j][1] -= 1
        return [(t[0], -1) if t[1] < 0 else (t[0], 1) for t in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0010637345679012338}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                for k in range(3):
                    if J_flatten[(site+1)*N+k] > 0:
                        total_spin += 1
                    else:
                        total_spin -= 1
                sum_1[i*N+j,0] = total_spin
        priority_total = np.zeros((N**2,2), dtype=int)
        for j in range(N):
            if h[j//N][j%N] > 0:
                priority_total[(j)//N*(N) + (j)%N,0] = sum_1[(j)//N*(N) + (j)%N,0]
            else:
                priority_total[(j)//N*(N) + (j)%N,1] = -sum_1[(j)//N*(N) + (j)%N,0]
        return priority_total




#score: {'data2D.txt': 0.10980231481481495}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                if h[i][j] > 0:
                    total_spin += J[0][i][j]
                else:
                    total_spin -= J[1][i][j]
                priority_total[i*N+j] = [total_spin, 1 if h[i][j] > 0 else 0]
        return priority_total




#score: {'data2D.txt': -0.03746466049382716}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[(k%2)][site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, 0]
                else:
                    priority_total[i*N+j] = [-total_spin, 1]
        return priority_total




#score: {'data2D.txt': 0.10653935185185198}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = sum([h[site][k] for k in range(N)]) if h[i][j] > 0 else -sum([h[site][k] for k in range(N)])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0006023148148148145}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [0 for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site_neighbor = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j] += state[site][j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j]
            else:
                priority_total[j][1] = -total_spin[j]
        return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N,2))
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][site][:] += state[i][j]
        priority_total = np.zeros((N*N,2))
        for j in range(N**2):
            if h[j//N][j%N] > 0:
                priority_total[j][:] = total_spin[j//N][j%N]
            else:
                priority_total[j][:] = -1 * total_spin[j//N][j%N]
        return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N**2
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if k%2 == 0:
                        total_spin[i*N+j] += state[site][j]
                    else:
                        total_spin[i*N+j] -= state[site][j]
        for i in range(N**2):
            if h[int(i//N)][i%N] > 0:
                priorities.append((total_spin[i], 1))
            else:
                priorities.append((total_spin[i], -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N**2
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    total_spin[i*N+j] += state[site][j]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i]
            else:
                priority_total[i][1] = -1*total_spin[i]
        return priority_total




#score: {'data2D.txt': -0.0028939814814814813}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += h[i][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i][0], 1]
                else:
                    priority_total[i*N+j] = [-total_spin[i][0], -1]
        return [[p[0], 0] for p in priority_total]




#score: {'data2D.txt': 0.161848302469136}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        priority_total = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority_total.append([total_spin[site][0], 1])
                else:
                    priority_total.append([-total_spin[site][0], -1])
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum_2 = (np.prod(J_new[1::2], 0) - h).flatten()
    priority = np.column_stack((sum_1, -sum_2))
    return priority




#score: {'data2D.txt': 0.1647720679012351}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append([total_spin[0], 1])
                else:
                    priorities.append([-total_spin[0], -1])
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0020412037037037035}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += state[site][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = -total_spin[i][0]
            else:
                priority_total[(i*N+j), 1] = total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -8.780864197530791e-05}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_list = [[0 for _ in range(2)] for _ in range(N*N)]
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += spin
            priority_total = np.zeros((N,2), dtype=int)
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[j][0]
                else:
                    priority_total[j][1] = -1*total_spin[j][0]
            for j in range(N):
                if h[i][j] > 0:
                    priority_list[i*N+j] = [priority_total[j][0], -1*priority_total[j][1]]
                else:
                    priority_list[i*N+j] = [-1*priority_total[j][0], priority_total[j][1]]
    return priority_list




#score: {'data2D.txt': -0.0006412037037037035}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return [[p[0], 0] for p in sorted(priorities, reverse=True)]




#score: {'data2D.txt': -0.00902453703703704}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = (-1 if h[i][j] > 0 else 1)
                total_spin[site][0] += state
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    total_spin[site][0]
                else:
                    total_spin[site][0] = -total_spin[site][0]
                priority_total[i*N+j] = [total_spin[site][0], 0]
        return priority_total




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    total_spin += J[k[0]][site][k[1]]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin, -1*total_spin]
                else:
                    priority[i*N+j] = [-1*total_spin, total_spin]
        return priority




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - N//2)) % N
        for k in [(-1,0),(0,-1),(1,0)]:
          total_spin[i*N+j][0] += J[k[0]][site][k[1]]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          priority_total[i*N+j] = [total_spin[i*N+j][0],-1*total_spin[i*N+j][1]]
        else:
          priority_total[i*N+j] = [-1*total_spin[i*N+j][0],total_spin[i*N+j][1]]
    return priority_total




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += h[site][j]
                if h[i][j] > 0:
                    priority_total = [total_spin[i*N+j][0], 1]
                else:
                    priority_total = [-total_spin[i*N+j][0], -1]
        return [[p[0], 0] for p in total_spin]




#score: {'data2D.txt': 0.1647720679012351}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append([total_spin[0], 1])
                else:
                    priorities.append([-total_spin[0], -1])
        return priorities




#score: {'data2D.txt': 0.0029705246913580246}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0 for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site*N+j] += spin
                if h[i][j] > 0:
                    priorities.append((total_spin[i*N+j], 1))
                else:
                    priorities.append((-total_spin[i*N+j], -1))
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[a,b] for a,b in priorities]




#score: {'data2D.txt': -0.08998441358024678}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                if h[i][j] > 0:
                    total_spin += sum(1 - int(J_flatten[(i+x)*N+j]) for x in (-1,0,1) if (i+x)%N==i)
                    priorities.append((total_spin, 1))
                else:
                    total_spin -= sum(-int(J_flatten[(i+x)*N+j]) for x in (-1,0,1) if (i+x)%N==i)
                    priorities.append((total_spin, -1))
        return [p for p in priorities]




#score: {'data2D.txt': -0.01565138888888889}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_spin += J_flatten[(i+1)*N+j]
                else:
                    total_spin -= J_flatten[(i+1)*N+j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin += J_flatten[site*N+j]
                    else:
                        total_spin -= J_flatten[site*N+j]
                priority_total[(i*N+j),0] = total_spin
                priority_total[(i*N+j),1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0012399691358024687}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        total_spins = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = -1 if h[i][j] > 0 else 1
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flatten[site*N+j] * state
                priority_total = np.zeros((N**2,2), dtype=int)
                if h[i][j] > 0:
                    priority_total[(i*N+j),0] = total_spin
                else:
                    priority_total[(i*N+j),1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.0008794753086419755}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    state = 1 if h[i][j] > 0 else -1
                    total_spin[i*N+j][0] += state * sum(J[0][site][(k-1)%N] for _ in range(N))
                    total_spin[i*N+j][1] -= state * sum(J[1][site][(k-1)%N] for _ in range(N))
                if h[i][j] > 0:
                    total_spin[i*N+j][0] -= h[i][j]
                    total_spin[i*N+j][1] += h[i][j]
                else:
                    total_spin[i*N+j][0] += h[i][j]
                    total_spin[i*N+j][1] -= h[i][j]
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.001056327160493827}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in range(3):
                    state = 1 if h[i][j] > 0 else -1
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state
                    priority_total[i*N+j][0] += state * sum(J[0][site][(k-1)%N] for _ in range(N))
                    priority_total[i*N+j][1] -= state * sum(J[1][site][(k-1)%N] for _ in range(N))
                if h[i][j] > 0:
                    priority_total[i*N+j][0] -= h[i][j]
                    priority_total[i*N+j][1] += h[i][j]
                else:
                    priority_total[i*N+j][0] += h[i][j]
                    priority_total[i*N+j][1] -= h[i][j]
        return priority_total




#score: {'data2D.txt': 0.00021280864197530924}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                state = 1 if h[i][j] > 0 else -1
                total_spin[i*N+j][0] += state * sum(J[0][site][(k-1)%N] for k in range(3))
                total_spin[i*N+j][1] -= state * sum(J[1][site][(k-1)%N] for k in range(3))
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.12300046296296295}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i*N+j][0] += J[0][site][j]
                        total_spin[i*N+j][1] -= J[1][site][j]
                else:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i*N+j][0] += J[1][site][j]
                        total_spin[i*N+j][1] -= J[0][site][j]
        priority_total = [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]
        return priority_total




#score: {'data2D.txt': -0.30461249999999934}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if J[0][site][j] > 0:
                        site_sum += J[0][site][j]
                    else:
                        site_sum -= J[0][site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [site_sum, -1*site_sum]
                else:
                    priority_total[i*N+j] = [-1*site_sum, site_sum]
        return priority_total




#score: {'data2D.txt': -0.0756412037037037}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin[i*N+j][0] += J[0][site][j]
            total_spin[i*N+j][1] -= J[1][site][j]
        else:
          for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin[i*N+j][0] += -J[0][site][j]
            total_spin[i*N+j][1] -= J[1][site][j]
    priority_total = [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]
    return priority_total




#score: {'data2D.txt': -0.05119768518518522}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum([row_sum[k] * state[site][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0018550925925925922}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i] += h[site][j]
        if h[i][0] > 0:
            priority_total[i*N:(i+1)*N][0] = total_spin[i]
        else:
            priority_total[i*N:(i+1)*N][1] = -total_spin[i]
    for i in range(N**2):
        if h[(i//N)%N][(i%N)] > 0:
            priority_total[i][0] += total_spin[(i//N)%N]
        else:
            priority_total[i][1] -= total_spin[(i//N)%N]
    return priority_total




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [0]*N**2
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site_nbr = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j] += h[site_nbr][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[(i//N)%N][(i%N)] > 0:
                priority_total[i][0] = total_spin[i]
            else:
                priority_total[i][1] = -total_spin[i]
        return priority_total




#score: {'data2D.txt': -0.0018550925925925922}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N:(i+1)*N][0] = total_spin[i]
            else:
                priority_total[i*N:(i+1)*N][1] = -total_spin[i]
        for i in range(N**2):
            if h[(i//N)%N][(i%N)] > 0:
                priority_total[i][0] += total_spin[(i//N)%N]
            else:
                priority_total[i][1] -= total_spin[(i//N)%N]
        return priority_total




#score: {'data2D.txt': 0.014753858024691358}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2,2), dtype=int)
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum([row_sum[k] * state[site][j-k%N] for k in range(min(j,N-1))])
                
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
                    
        return priority_total.tolist()




#score: {'data2D.txt': -0.009958796296296268}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = np.sum(J_new[0::2], axis=0)
        sum_2 = np.sum(J_new[1::2], axis=0)
        
        priority = np.zeros((N**2, 2))
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority[i] = [sum_1 - sum_2, sum_1 + sum_2]
            else:
                priority[i] = [-sum_1 + sum_2, -sum_1 - sum_2]
        
        return(priority)




#score: {'data2D.txt': -0.07973935185185192}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[i], 1))
                else:
                    priorities.append((-total_spin[i], -1))
        return priorities




#score: {'data2D.txt': -0.05084120370370372}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[(i + ((j-1)%2 - 1)) % N]
                else:
                    priorities[i*N+j][1] = -total_spin[(i + ((j-1)%2 - 1)) % N]
        return priorities




#score: {'data2D.txt': -0.0029955246913580245}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += 1 if h[i][j] > 0 else -1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[j][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[j][0]
        return [list(x) for x in priority_total]




#score: {'data2D.txt': -6.527777777777887e-05}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if h[i][j] > 0:
                        total_spin[i*N+j][0] += J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] -= J[1][site][(k-1)%N]
                    else:
                        total_spin[i*N+j][0] -= J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] += J[1][site][(k-1)%N]
                if h[i][j] > 0:
                    total_spin[i*N+j][0] -= h[i][j]
                    total_spin[i*N+j][1] += h[i][j]
                else:
                    total_spin[i*N+j][0] += h[i][j]
                    total_spin[i*N+j][1] -= h[i][j]
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 4.0277777777777636e-05}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if k == 0:
                        total_spin[i*N+j][0] += J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] -= J[1][site][(k-1)%N]
                    elif k == 2:
                        total_spin[i*N+j][0] -= J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] += J[1][site][(k-1)%N]
                if h[i][j] > 0:
                    total_spin[i*N+j][0] -= h[i][j]
                    total_spin[i*N+j][1] += h[i][j]
                else:
                    total_spin[i*N+j][0] += h[i][j]
                    total_spin[i*N+j][1] -= h[i][j]
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.002587191358024691}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in range(3):
                if J[0][site][(k-1)%N] > 0:
                    total_spin[i*N+j][0] += 1
                else:
                    total_spin[i*N+j][0] -= 1
                if J[1][site][(k-1)%N] > 0:
                    total_spin[i*N+j][1] += 1
                else:
                    total_spin[i*N+j][1] -= 1
            if h[i][j] > 0:
                total_spin[i*N+j][0] -= h[i][j]
                total_spin[i*N+j][1] += h[i][j]
            else:
                total_spin[i*N+j][0] += h[i][j]
                total_spin[i*N+j][1] -= h[i][j]
    return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum2 = (-np.prod(J_new[1::2], 0)).flatten()
        priority = np.column_stack((sum1, -sum1))
        return(priority)




#score: {'data2D.txt': 0.0010313271604938277}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            total_spin = 0
            for k in range(3):
                if J[0][site][(k-1)%N] > 0:
                    total_spin += 1
                else:
                    total_spin -= 1
                if J[1][site][(k-1)%N] > 0:
                    total_spin -= 1
                else:
                    total_spin += 1
            if h[i][j] > 0:
                priority_total[i*N+j, 0] = total_spin
            else:
                priority_total[i*N+j, 1] = -total_spin
    return priority_total




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [p[:2] for p in priorities]




#score: {'data2D.txt': -0.1744359567901236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = (-1 if h[i][j] > 0 else 1)
                total_spin[site][0] += state
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[site][0], 1]
                else:
                    priority_total[i*N+j] = [-total_spin[site][0], -1]
        return priority_total




#score: {'data2D.txt': -0.0010205246913580245}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    state = (i + ((k-1)%2 - 1)) % N
                    total_spin[state*N+j][0] += spin
                priority_total = np.zeros((N**2,2), dtype=int)
                if h[i][j] > 0:
                    priority_total[j*N+i][0] = total_spin[j*N+i][0]
                else:
                    priority_total[j*N+i][1] = -1*total_spin[j*N+i][0]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = [0,0]
                for k in range(3):
                    spin = -1 if h[i][j] > 0 else 1
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += spin
                if h[i][j] > 0:
                    priority_list[i*N+j] = [total_spin[0], 0]
                else:
                    priority_list[i*N+j] = [0, -total_spin[0]]
        return priority_list




#score: {'data2D.txt': -0.09349027777777788}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in range(3):
                spin = 1 if h[i][j] > 0 else -1
                total_spin[i*N+j][0] += spin
                total_spin[i*N+j][1] -= spin * sum(J[0][site][(k-1)%N] for _ in range(N))
            if h[i][j] > 0:
                total_spin[i*N+j][0] -= h[i][j]
                total_spin[i*N+j][1] += h[i][j]
            else:
                total_spin[i*N+j][0] += h[i][j]
                total_spin[i*N+j][1] -= h[i][j]
    for j in range(N):
        if h[0][j] > 0:
            total_spin[j][0] = total_spin[j][0]
        else:
            total_spin[j][1] = -total_spin[j][0]
    return total_spin




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            site = (i // N) % N
            total_spin = 0
            for k in range(3):
                site_n = (site + ((k-1)%2 - 1)) % N
                total_spin += state[site_n][(i%N)]
            if h[i//N][i%N] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.018609413580246908}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            total_spin = [0,0]
            for k in range(3):
                site = (i // N + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if h[site][j] > 0:
                        total_spin[0] += state[site][j]
                    else:
                        total_spin[1] -= state[site][j]
            priorities.append(total_spin)
        return priorities




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            total_spin = 0
            for k in range(3):
                site = (i // N + ((k - 1) % 2 - 1)) % N
                total_spin += state[site][i % N]
            if h[i // N][i % N] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N) + (i+N)*(j//N)) % N
            if h[i][j] > 0:
                total_spin[site][0] += 1
            else:
                total_spin[site][1] += 1
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[j][0]
            else:
                priority_total[i*N+j][1] = -total_spin[j][0]
    return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0018912037037037035}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = np.zeros((N2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                for k in range(3):
                    spin = -1 if h[site][j] > 0 else 1
                    site = (site + ((k-1)%2 - 1)) % N
                    total_spin += spin * h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N**2, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin
                else:
                    priorities[(i*N+j), 1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.0034226851851851853}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = total_spin[i]
                else:
                    priority_list[i*N+j][1] = -total_spin[i]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_list[i*N+j][0] += total_spin[i]
                else:
                    priority_list[i*N+j][1] -= total_spin[i]
        return priority_list




#score: {'data2D.txt': 0.010939660493827158}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.15176033950617307}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin = state[site1][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin += state[site][j]
                    else:
                        total_spin -= state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0008072530864197533}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = [J[0][site][k-1] for k in range(3)]
                priority_total[i*N+j][0] = sum(total_spin)
                priority_total[i*N+j][1] = 0
            else:
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = [-J[1][site][k-1] for k in range(3)]
                priority_total[i*N+j][1] = sum(total_spin)
    return priority_total




#score: {'data2D.txt': -0.08785756172839512}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[k][site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, 0]
                else:
                    priority_total[i*N+j] = [-total_spin, 1]
        return priority_total




#score: {'data2D.txt': -0.03811435185185185}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = sum([J[0][(i + ((k-1)%2 - 1)) % N][j] * (-1 if h[i][j] > 0 else 1) 
                              for k in range(3)])
            if h[i][j] > 0:
                priority_total[i*N+j] = [total_spin, 0]
            else:
                priority_total[i*N+j] = [-total_spin, 1]
    return priority_total




#score: {'data2D.txt': -0.13586311728395065}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site_sum = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[(k%2)][site][j]
                    if h[site][j] > 0:
                        site_sum -= 1
                    else:
                        site_sum += 1
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin + site_sum, 0]
                else:
                    priority_total[i*N+j] = [-total_spin - site_sum, 1]
        return priority_total




#score: {'data2D.txt': -0.003251697530864198}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0, 0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N:(i+1)*N][0] = total_spin[i]
            else:
                priority_total[i*N:(i+1)*N][1] = -total_spin[i]
        for i in range(N**2):
            site = (i // N + ((i % N-1) % N - 1)) % N
            if h[site//N][site%N] > 0:
                priority_total[i][0] += total_spin[site//N]
            else:
                priority_total[i][1] -= total_spin[site//N]
        return priority_total




#score: {'data2D.txt': 0.022993981481481476}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            for k in range(3):
                total_spin[site][0] += -1 if h[i][j] > 0 else 1
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][0] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[site][0]
            else:
                priority_total[i*N+j][1] = -total_spin[site][0]
    for j in range(N):
        if h[i][j] > 0:
            priority_total[j][0] = total_spin[j][0]
        else:
            priority_total[j][1] = -total_spin[j][0]
    return priority_total




#score: {'data2D.txt': 0.0336807098765432}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_total = [total_spin, 0]
                else:
                    priority_total = [0, -1*total_spin]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.002946141975308642}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        total_spin = np.zeros((N,N), dtype=int)
        priority = np.zeros((N*N, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][j] = h[site][j]
                
                if h[i][j] > 0:
                    total_spin[i][j] += J_flatten[(i+1)*N+j]
                else:
                    total_spin[i][j] -= J_flatten[(i+1)*N+j]
                    
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[i][site] += J_flatten[site*N+j]
                    else:
                        total_spin[i][site] -= J_flatten[site*N+j]
                        
                priority[(i*N+j),0] = total_spin[i][j]
                priority[(i*N+j),1] = -total_spin[i][j]
        
        return priority




#score: {'data2D.txt': 0.16715077160493827}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_spin += J_flatten[(i+1)*N+j]
                else:
                    total_spin -= J_flatten[(i+1)*N+j]
                for k in range(2):
                    site = (i + ((k)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin += J_flatten[site*N+j]
                    else:
                        total_spin -= J_flatten[site*N+j]
                if h[i][j] > 0:
                    priority_total[(i*N+j),0] = total_spin
                    priority_total[(i*N+j),1] = -total_spin
                else:
                    priority_total[(i*N+j),0] = -total_spin
                    priority_total[(i*N+j),1] = total_spin
        return priority_total




#score: {'data2D.txt': -0.01565138888888889}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_spin += J_flatten[(i+1)*N+j]
                else:
                    total_spin -= J_flatten[(i+1)*N+j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin += J_flatten[site*N+j]
                    else:
                        total_spin -= J_flatten[site*N+j]
                priority_total[(i*N+j),0] = total_spin
                priority_total[(i*N+j),1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.20548379629629648}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_total = [(total_spin, -1), (total_spin+2*h[i][j], 1)]
                    priorities.append(sorted(priority_total)[0])
                else:
                    priority_total = [(-total_spin, 1), (-total_spin-2*h[i][j], -1)]
                    priorities.append(sorted(priority_total)[0])
        return priorities




#score: {'data2D.txt': -0.013887191358024692}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - N//2)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
                for k in [(0,-1),(1,0),(0,1)]:
                    site = (i + ((k[1]-1)%2 - 1)) % N
                    if h[site][j] > 0:
                        total_spin += J[k[0]][site][j]
                    else:
                        total_spin -= J[k[0]][site][j]
                priority_total[i*N+j][0] = total_spin
                priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin[0] += J[k[0]][site][k[1]]
                    total_spin[1] -= J[k[0]][site][k[1]]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin[0], -total_spin[1]]
                else:
                    priority[i*N+j] = [-total_spin[0], total_spin[1]]
        return priority




#score: {'data2D.txt': 0.0011862654320987673}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin += J[k[0]][site][k[1]]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin, -1*total_spin]
                else:
                    priority[i*N+j] = [-1*total_spin, total_spin]
        return priority




#score: {'data2D.txt': 0.00829706790123457}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N*N,2), dtype=int)
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site*N+j][0] += spin
                priority_total[j][0] = total_spin[j][0]
                priority_total[j][1] = -1*total_spin[j][0]
        
        return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in [(0,-1),(0,1),(-1,0),(1,0)]:
                if J[k[0]][site][k[1]] > 0:
                    total_spin[0] += J[k[0]][site][k[1]]
                else:
                    total_spin[1] += -J[k[0]][site][k[1]]
        for j in range(N):
            if h[i][j] > 0:
                priorities.append((total_spin[0],1))
            else:
                priorities.append((-total_spin[1],-1))
    return priorities




#score: {'data2D.txt': 0.00021682098765431147}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N, 2), dtype=int)
    for i in range(N):
        total_spin = [0]*2
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in [(0,-1),(0,1),(-1,0),(1,0)]:
                if J[k[0]][site][k[1]] > 0:
                    total_spin[0] += J[k[0]][site][k[1]]
                else:
                    total_spin[1] += -J[k[0]][site][k[1]]
            if h[i][j] > 0:
                priority_total[i*N+j] = total_spin
            else:
                priority_total[i*N+j] = [-x for x in total_spin]
    return priority_total




#score: {'data2D.txt': -0.0028631172839506096}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0]*2
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(0,1),(-1,0),(1,0)]:
                    if J[k[0]][site][k[1]] > 0:
                        total_spin[0] += J[k[0]][site][k[1]]
                    else:
                        total_spin[1] += -J[k[0]][site][k[1]]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = total_spin
                else:
                    priority_total[i*N+j] = [-x for x in total_spin]
        return priority_total




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.06060324074074076}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += -1 if h[i][j] > 0 else 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[site][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[site][0]
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[sum(state[(i + ((k-1)%2 - 1)) % N][j] for k in range(3)) for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i][j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i][j]
        return [list(row) for row in priority_total]




#score: {'data2D.txt': 0.1724029320987649}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + (j % 2) - 1) % N
                total_spin[i*N+j][0] += state[site][j]
                total_spin[i*N+j][1] -= state[i][j]
        for j in range(N**2):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]
        return priority_total




#score: {'data2D.txt': -0.12707237654321002}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N) % N
                total_spin = sum([state[i][k] if k == j else state[site][min(abs(k-j), N-abs(k-j))] for k in range(N)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        
        return [priorities[i] for i in range(N**2)]




#score: {'data2D.txt': 0.007843981481481481}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N) % N
                total_spin = state[site][j]
                if h[i][j] > 0:
                    priority_total = total_spin
                else:
                    priority_total = -total_spin
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((priority_total, h[i][j]))
                else:
                    priorities.append((-priority_total, -h[i][j]))
        return [i for i in priorities]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if 0 <= j-k%N < N else J[0][i*N+j] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((total_spin, 1))
          else:
            priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.07623287037037042}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum1 = np.zeros((N*N,2))
    sum2 = np.zeros((N*N,2))
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin_1 = 0
            for k in range(min(j,N-1)):
                if i==0:
                    total_spin_1 += J_new[(i+1)*N+(j-k)%N]
                elif i==N-1:
                    total_spin_1 -= J_new[(i-1)*N+(j-k)%N]
                else:
                    total_spin_1 += J_new[(i+1)*N+(j-k)%N] - J_new[(i-1)*N+(j-k)%N]
            if h[i][j] > 0:
                priorities.append((total_spin_1 + h[i][j], 1))
            else:
                priorities.append((-total_spin_1 - h[i][j], -1))
    return np.array(priorities)




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((total_spin, 1))
          else:
            priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
         state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
         priorities = []
         for i in range(N):
             row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
             for j in range(N):
                 total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                 if h[i][j] > 0:
                     priorities.append((total_spin, 1))
                 else:
                     priorities.append((total_spin, -1))
         return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
     state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
     priorities = []
     for i in range(N):
       row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
       for j in range(N):
         total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
         if h[i][j] > 0:
           priorities.append((total_spin, 1))
         else:
           priorities.append((total_spin, -1))
     return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((total_spin, 1))
          else:
            priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.005835648148148147}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
     state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
     priorities = []
     for i in range(N):
       for j in range(N):
         total_spin = sum([J[i][k][max(0,j-k)%N] * state[max(0,i-k)][min(N-1,j-k)%N] for k in range(max(0,j-N))])
         if h[i][j] > 0:
             priorities.append((total_spin, -1))
         else:
             priorities.append((total_spin, 1))
     return priorities  




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((total_spin, 1))
          else:
            priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0012149691358024689}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][j] = sum([J[k][(i-site)%N][(j-k%N)]*h[(site//N)][(k%N)] for k in range(3)])
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j//N][j%N]
            else:
                priority_total[j][1] = -1*total_spin[j//N][j%N]
        return priority_total.tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.00028780864197530833}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, 1))
        return priority




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.20332700617283966}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((total_spin, 1))
          else:
            priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.0032038580246913626}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        priority_total = [[float('inf') for _ in range(2)] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] = [total_spin[site][0]+h[i][j], total_spin[site][1]-h[i][j]]
                
                if h[i][j] > 0:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], total_spin[i*N+j][1]]
                    
        return priority_total




#score: {'data2D.txt': 0.013181327160493826}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[3*k%4][(i+((k-1)%2 - 1)) % N][j-k%N] * state[(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(3)])
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((total_spin, 1))
          else:
            priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((total_spin, 1))
          else:
            priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      J_new = J.flatten()
      h_flatten = h.flatten()
      sum_1 = (np.prod(J_new[0::2], 0) + h_flatten).flatten()
      sum_2 = (np.prod(J_new[1::2], 0) + h_flatten).flatten()
      priority = np.column_stack((sum_1, -sum_2))
      return(priority)




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.09399151234567905}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[site] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[site]
            else:
                priority_total[i*N+j][1] = -total_spin[site]
    for i in range(N):
        if h[i][N-1] > 0:
            priority_total[i*N+N-1][0] = sum(total_spin)
        else:
            priority_total[i*N+N-1][1] = -sum(total_spin)
    return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.16427083333333298}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2,2), dtype=float)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin = h[site][j]
            if h[i][j] > 0:
                priority[(i*N+j), 0] = total_spin
            else:
                priority[(i*N+j), 1] = -total_spin
    for j in range(N):
        if h[0][j] > 0:
            priority_total = np.zeros((N,2), dtype=float)
            total_spin = 0
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[i][j]
                if h[i][j] > 0:
                    priority_total[i,0] = total_spin
                else:
                    priority_total[i,1] = -total_spin
            for i in range(N):
                if h[0][j] > 0:
                    priority[(i*N+j), 0] = priority_total[i,0]
                else:
                    priority[(i*N+j), 1] = -priority_total[i,1]
    return priority




#score: {'data2D.txt': 0.013181327160493826}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[3*k%4][(i+((k-1)%2 - 1)) % N][j-k%N] * state[(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(3)])
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin[site][0] += state[i][site]
    priority_total = np.zeros((N**2,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': 0.146027314814815}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        priority_total = [[float('inf') for _ in range(2)] for _ in range(N**2)]

        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += h[i][j]
                total_spin[i*N+j][1] -= h[i][j]

                if h[i][j] > 0:
                    priority_total[i*N+j][0] = -total_spin[i*N+j][0]
                    priority_total[i*N+j][1] = total_spin[i*N+j][1]
                else:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                    priority_total[i*N+j][1] = -total_spin[i*N+j][1]

        return priority_total




#score: {'data2D.txt': -0.015585648148148154}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] = [total_spin[site][0]+h[i][j], total_spin[site][1]-h[i][j]]
                
                if h[i][j] > 0:
                    priority_total = [[-1*total_spin[k][0], -1*total_spin[k][1]] for k in range(N**2)]
                else:
                    priority_total = [total_spin[k][0:2] for k in range(N**2)]
                    
        return priority_total




#score: {'data2D.txt': -0.0503436728395062}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0.0 for _ in range(2)] for _ in range(N*N)]
    total_spin = [[0.0 for _ in range(2)] for _ in range(N)]
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[i][0] += h[site][j]
        if h[i][j] > 0:
          priority[i*N+j][0] = total_spin[i][0]
        else:
          priority[i*N+j][1] = -total_spin[i][0]
    for i in range(N):
      if h[0][i] > 0:
        for j in range(N):
          total_spin[j][0] += h[i][j]
          if h[i][j] > 0:
            priority[i*N+j][0] = total_spin[j][0]
          else:
            priority[i*N+j][1] = -total_spin[j][0]
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            for k in range(3):
                if k == 0:
                    total_spin[i][j] += J[0][(i-site)%N][(j-k%N)]*h[(site//N)][(k%N)]
                elif k == 1:
                    total_spin[i][j] += J[1][(i-site)%N][(j-k%N)]*h[(site//N)][(k%N)]
                else:
                    total_spin[i][j] += J[2][(i-site)%N][(j-k%N)]*h[(site//N)][(k%N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    for j in range(N):
        if h[j//N][j%N] > 0:
            priority_total[j][0] = total_spin[j//N][j%N]
        else:
            priority_total[j][1] = -1*total_spin[j//N][j%N]
    return priority_total.tolist()




#score: {'data2D.txt': -0.0012149691358024689}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][j] = sum([J[k][(i-site)%N][(j-k%N)]*h[(site//N)][(k%N)] for k in range(3)])
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j//N][j%N]
            else:
                priority_total[j][1] = -1*total_spin[j//N][j%N]
        return priority_total.tolist()




#score: {'data2D.txt': -0.005822993827160493}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i]
                else:
                    priority_total[i*N+j][1] = -total_spin[i]
        for i in range(N):
            if total_spin[i] > 0:
                priority_total[i*N:N*(i+1)][0][0] += total_spin[i]
                priority_total[i*N:N*(i+1)][1][0] -= total_spin[i]
            else:
                priority_total[i*N:N*(i+1)][0][1] += -total_spin[i]
                priority_total[i*N:N*(i+1)][1][1] -= -total_spin[i]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': 0.0032038580246913626}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        priority_total = [[float('inf') for _ in range(2)] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] = [total_spin[site][0]+h[i][j], total_spin[site][1]-h[i][j]]
                
                if h[i][j] > 0:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], total_spin[i*N+j][1]]
                    
        return priority_total




#score: {'data2D.txt': 0.229641512345679}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = state[site][0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2))
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin_1 = sum([J[(i*N+j),(m*N+n)] for n,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y<0) or (y==0 and x<0)])
                    total_spin_2 = sum([J[(i*N+j),(m*N+n)] for m,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y>0) or (y==0 and x>0)])
                    priority[i*N+j] = [total_spin_1 - total_spin_2, total_spin_1 + total_spin_2]
                else:
                    total_spin_1 = sum([J[(i*N+j),(m*N+n)] for n,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y<0) or (y==0 and x<0)])
                    total_spin_2 = sum([J[(i*N+j),(m*N+n)] for m,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y>0) or (y==0 and x>0)])
                    priority[i*N+j] = [-total_spin_1 + total_spin_2, -total_spin_1 - total_spin_2]
        return priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        for j in range(N):
            if h[j][0] > 0:
                priority_total = [(i, i) for i in range(N)]
            else:
                priority_total = [(-i, i) for i in range(N)]
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += h[i][j]
                
                if h[i][j] > 0:
                    total_spin[i*N+j][1] = -total_spin[i*N+j][0]
                else:
                    total_spin[i*N+j][1] = total_spin[i*N+j][0]
                    
        return total_spin




#score: {'data2D.txt': -0.00010509259259259262}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        priority = np.zeros((N**2,2))
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum(Jflat[site*N+j:i*N+j] * hflat[i*N+j]) 
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
                    
        return priority




#score: {'data2D.txt': 0.001134104938271605}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2))
        J_new = J.flatten()
        for i in range(N**2):
            site_interactions = J_new[4*i:4*i+4]
            sum_1 = np.sum(site_interactions[[0,3]]) 
            sum_2 = np.sum(site_interactions[[1,2]])
            if h[i//N][i%N] > 0:
                priority[i] = [sum_1 - sum_2, sum_1 + sum_2]
            else:
                priority[i] = [-sum_1 + sum_2, -sum_1 - sum_2]
        return(priority)




#score: {'data2D.txt': -0.014811265432098765}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if i==0:
                    site = (i + ((N-1)%2 - 1)) % N
                    total_spin = 0
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin += h[site][j]
                    if h[i][j] > 0:
                        priority_total[(i*N+j)][0] = total_spin
                    else:
                        priority_total[(i*N+j)][1] = -total_spin
                elif i==N-1:
                    site = (i + ((0)%2 - 1)) % N
                    total_spin = 0
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin += h[site][j]
                    if h[i][j] > 0:
                        priority_total[(i*N+j)][0] = total_spin
                    else:
                        priority_total[(i*N+j)][1] = -total_spin
                else:
                    for j in range(N):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin += h[site][j]
                    if h[i][j] > 0:
                        priority_total[(i*N+j)][0] = total_spin
                    else:
                        priority_total[(i*N+j)][1] = -total_spin
        for j in range(N):
            if h[j][N-1] > 0:
                priority_total[j][0] = 0
            else:
                priority_total[j][1] = 0
        return [[priority_total[i][0],priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum(J[site][k] * state[k][min(j,k)] for k in range(max(0,j-N+1)))
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return priority




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            total_spin = [0, 0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] = total_spin[0]
            else:
                priority_total[j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    if J[k][(i-site)%N][(j-k%N)]*h[(site//N)][(k%N)] > 0:
                        total_spin[i][0] += J[k][(i-site)%N][(j-k%N)]*h[(site//N)][(k%N)]
                    else:
                        total_spin[i][1] -= J[k][(i-site)%N][(j-k%N)]*h[(site//N)][(k%N)]
        priority_total = [[0, 0] for _ in range(N*N)]
        for j in range(N):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j//N][0]
            else:
                priority_total[j][1] = -total_spin[j//N][1]
        return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0012149691358024689}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i][j] = sum([J[k][(i-site)%N][(j-k%N)]*h[(site//N)][(k%N)] for k in range(3)])
    priority_total = np.zeros((N*N,2), dtype=int)
    for j in range(N):
        if h[j//N][j%N] > 0:
            priority_total[j][0] = total_spin[j//N][j%N]
        else:
            priority_total[j][1] = -1*total_spin[j//N][j%N]
    return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            for k in range(3):
                site2 = (site + ((k-1)%2 - 1)) % N
                total_spin[i][j] += J[k][(i-site2)%N][(j-k%N)]*h[site2//N][k%N]
    priority_total = np.zeros((N*N,2), dtype=int)
    for j in range(N):
        if h[j//N][j%N] > 0:
            priority_total[(j//N)*N+j][0] = total_spin[j//N][j%N]
        else:
            priority_total[(j//N)*N+j][1] = -total_spin[j//N][j%N]
    return priority_total.tolist()




#score: {'data2D.txt': -0.0012149691358024689}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin[i][j] = sum([J[k][(i-site)%N][(j-k%N)]*h[(site//N)][(k%N)] for k in range(3)])
    priority_total = np.zeros((N*N,2), dtype=int)
    for j in range(N):
      if h[j//N][j%N] > 0:
        priority_total[j][0] = total_spin[j//N][j%N]
      else:
        priority_total[j][1] = -1*total_spin[j//N][j%N]
    return priority_total.tolist()




#score: {'data2D.txt': 0.0005695987654320985}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    total_spin[i*N+j][1 if h[site//N][site%N] > 0 else 0] += J[k][(i-site)%N][(j-k%N)]*h[site//N][k%N]
        priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
        return priority_total




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 0))
                else:
                    priority.append((total_spin, 1))
        return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][j] += h[i][j]
        for j in range(N):
            if h[j][0] > 0:
                priority_total = [(i, i) for i in range(N)]
            else:
                priority_total = [(-i, i) for i in range(N)]
        return priority




#score: {'data2D.txt': -0.09538009259259264}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site]
                else:
                    priority[i*N+j][1] = -total_spin[site]
        for i in range(N):
            priority_total = [(i, 0) if h[i][0] > 0 else (i, 1)]
        return priority




#score: {'data2D.txt': -0.00010509259259259262}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        priority = np.zeros((N**2,2))
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum(Jflat[site*N+j:i*N+j] * hflat[i*N+j]) 
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
                    
        return priority




#score: {'data2D.txt': -0.00010509259259259262}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        priority = np.zeros((N**2,2))
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum(Jflat[site*N+j:i*N+j] * hflat[i*N+j]) 
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
                    
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        total_spin=np.zeros((N,N),dtype=int)
        priority=np.zeros((N*N,2))
        
        for i in range(N):
            for j in range(N):
                site=(i + ((j-1)%2 - 1)) % N
                total_spin[site][j] += hflat[i*N+j]
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin[i][j]
                else:
                    priority[(i*N+j), 1] = -total_spin[i][j]
                    
        return priority




#score: {'data2D.txt': -0.00010509259259259262}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        priority = np.zeros((N**2,2))
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum(Jflat[site*N+j:i*N+j] * hflat[i*N+j]) 
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
                    
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][j] += h[i][j]
        if h[0][0] > 0:
            priority_total = [(i, 1) for i in range(N)]
        else:
            priority_total = [(-i, -1) for i in range(N)]
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][j] += h[i][j]
        for j in range(N):
            if h[j][0] > 0:
                priority_total = [(i, i) for i in range(N)]
            else:
                priority_total = [(-i, i) for i in range(N)]
        return priority




#score: {'data2D.txt': 0.0006350308641975305}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            for k in range(3):
                if h[site//N][site%N] > 0:
                    total_spin[i*N+j][0] += J[k][(i-site)%N][(j-k%N)]*h[site//N][k%N]
                else:
                    total_spin[i*N+j][1] += -J[k][(i-site)%N][(j-k%N)]*h[site//N][k%N]
    priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
    return priority_total




#score: {'data2D.txt': -0.001650462962962963}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site2 = (site + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += J[k][(i-site2)%N][(j-k%N)]*h[site2//N][site2%N]
                if h[i][j] > 0:
                    priority_total = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
                else:
                    priority_total = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return [priority_total for _ in range(N*N)]




#score: {'data2D.txt': 0.002765586419753089}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site_neighbor = (site + ((k-1)%2 - 1)) % N
                    if h[site//N][site%N] * h[site_neighbor//N][site_neighbor%N] > 0:
                        total_spin += J[k][(i-site)//N][(j-k)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, -1*total_spin]
                else:
                    priority_total[i*N+j] = [-1*total_spin, total_spin]
        return priority_total




#score: {'data2D.txt': 0.009663734567901214}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((total_spin, -1))
        return priority




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        total_spin=np.zeros((N,N),dtype=int)
        priority=np.zeros((N*N,2))
        
        for i in range(N):
            for j in range(N):
                site=(i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += hflat[i*N+j]
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin[i][j]
                else:
                    priority[(i*N+j), 1] = -total_spin[i][j]
                    
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        total_spin=np.zeros((N,N),dtype=int)
        priority=np.zeros((N*N,2))
        
        for i in range(N):
            for j in range(N):
                site=(i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += hflat[i*N+j]
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin[i][j]
                else:
                    priority[(i*N+j), 1] = -total_spin[i][j]
                    
        return priority




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin
            else:
                priority[i*N+j][1] = -total_spin
    return priority




#score: {'data2D.txt': -0.010894290123456787}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j%N+1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                    priority[i*N+j][1] = 0
                else:
                    priority[i*N+j][0] = 0
                    priority[i*N+j][1] = -total_spin
        return [[priority[i][0],priority[i][1]] for i in range(N*N)]




#score: {'data2D.txt': -0.001908487654320988}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if i == 0:
                site = (i + ((N-1)%2 - 1)) % N
                total_spin = sum(h[site][k] for k in range(min(j,N)))
                if h[i][j] > 0:
                    priority_total[(i*N+j)][0] = total_spin
                else:
                    priority_total[(i*N+j)][1] = -total_spin
            elif i == N-1:
                site = (i + ((0)%2 - 1)) % N
                total_spin = sum(h[site][k] for k in range(min(j,N)))
                if h[i][j] > 0:
                    priority_total[(i*N+j)][0] = total_spin
                else:
                    priority_total[(i*N+j)][1] = -total_spin
            else:
                site = (i + ((0)%2 - 1)) % N
                total_spin = sum(h[site][k] for k in range(min(j,N)))
                if h[i][j] > 0:
                    priority_total[(i*N+j)][0] = total_spin
                else:
                    priority_total[(i*N+j)][1] = -total_spin
    return [[priority_total[i][0],priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.00010509259259259262}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        priority = np.zeros((N**2,2))
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum(Jflat[site*N+j:i*N+j] * hflat[i*N+j]) 
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
                    
        return priority




#score: {'data2D.txt': -0.15429645061728445}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, 0]
                else:
                    priorities[i*N+j] = [-total_spin, 1]
        return priorities




#score: {'data2D.txt': 0.2373396604938268}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum(Jflat[site*N+j:i*N+j] * hflat[i*N+j]) 
                
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
                    
        return priorities




#score: {'data2D.txt': -0.00010509259259259262}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum(Jflat[site*N+j:i*N+j] * hflat[i*N+j]) 
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
                    
        return priority




#score: {'data2D.txt': -0.00010509259259259262}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        total_spins = np.zeros((N*N,2))
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum(Jflat[site*N+j:i*N+j] * hflat[i*N+j]) 
                
                if h[i][j] > 0:
                    total_spins[(i*N+j), 0] = total_spin
                else:
                    total_spins[(i*N+j), 1] = -total_spin
                    
        return total_spins




#score: {'data2D.txt': -0.1776118827160496}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[0.0,0.0] for _ in range(N2)]
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                    priority[i*N+j][1] = -total_spin
                else:
                    priority[i*N+j][0] = -total_spin
                    priority[i*N+j][1] = total_spin
        return priority




#score: {'data2D.txt': -0.20759459876543218}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority = [[float('inf') for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin = sum([state[site][k] for k in range(N)]) if h[i][j] > 0 else -sum([state[site][k] for k in range(N)])
        priority[i*N+j] = [total_spin, -total_spin]
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
      for j in range(N):
        total_spin_1 = sum([J[(i*N+j),(m*N+n)] for n,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y<0) or (y==0 and x<0)])
        total_spin_2 = sum([J[(i*N+j),(m*N+n)] for m,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y>0) or (y==0 and x>0)])
        if h[i][j] > 0:
          priority[i*N+j] = [total_spin_1 - total_spin_2, total_spin_1 + total_spin_2]
        else:
          priority[i*N+j] = [-total_spin_1 + total_spin_2, -total_spin_1 - total_spin_2]
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N*N, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin_1 = sum([J[(i*N+j),(m*N+n)] for n,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y<0) or (y==0 and x<0)])
            total_spin_2 = sum([J[(i*N+j),(m*N+n)] for m,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y>0) or (y==0 and x>0)])
            if h[i][j] > 0:
                priority[i*N+j] = [total_spin_1 - total_spin_2, total_spin_1 + total_spin_2]
            else:
                priority[i*N+j] = [-total_spin_1 + total_spin_2, -total_spin_1 - total_spin_2]
    return priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.015585648148148154}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] = [total_spin[site][0]+h[i][j], total_spin[site][1]-h[i][j]]
                
                if h[i][j] > 0:
                    priority_total = [[-1*total_spin[k][0], -1*total_spin[k][1]] for k in range(N**2)]
                else:
                    priority_total = [total_spin[k][0:2] for k in range(N**2)]
                    
        return priority_total




#score: {'data2D.txt': -0.015585648148148154}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] = [total_spin[site][0]+h[i][j], total_spin[site][1]-h[i][j]]
                
                if h[i][j] > 0:
                    priority_total = [[-1*total_spin[k][0], -1*total_spin[k][1]] for k in range(N*N)]
                else:
                    priority_total = [total_spin[k][0:2] for k in range(N*N)]
                    
        return priority_total




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum([J[(i*N+j),(m*N+n)] for m,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y<0) or (y==0 and x<0)])
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin - sum([J[(i*N+j),(m*N+n)] for n,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y>0) or (y==0 and x>0)]), total_spin + sum([J[(i*N+j),(m*N+n)] for n,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y>0) or (y==0 and x>0)])]
                else:
                    priority[i*N+j] = [-total_spin - sum([J[(i*N+j),(m*N+n)] for n,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y<0) or (y==0 and x<0)]), -total_spin + sum([J[(i*N+j),(m*N+n)] for n,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y>0) or (y==0 and x>0)])]
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin_1 = sum([J[(i*N+j),(m*N+n)] for n,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y<0) or (y==0 and x<0)])
                total_spin_2 = sum([J[(i*N+j),(m*N+n)] for m,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y>0) or (y==0 and x>0)])
                
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin_1 - total_spin_2, total_spin_1 + total_spin_2]
                else:
                    priorities[i*N+j] = [-total_spin_1 + total_spin_2, -total_spin_1 - total_spin_2]
        
        return priorities




#score: {'data2D.txt': -0.2436057098765428}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += h[site][j]
                if h[i][j] > 0:
                    total_spin[i*N+j][1] = total_spin[i*N+j][0]
                else:
                    total_spin[i*N+j][1] = -total_spin[i*N+j][0]
        return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        total_spin=np.zeros((N,2),dtype=int)
        for j in range(N):
            if h[0][j]>0:
                site=(0+((j-1)%2 - 1))%N
                total_spin[j][0]+=h[site][j]
                if h[0][j]>0:
                    priority=np.zeros((N2,2),dtype=int)
                    for i in range(N):
                        if h[i][j]>0:
                            site=(i+((j-1)%2 - 1))%N
                            total_spin[i][0]+=h[site][j]
                            if h[i][j]>0:
                                priority[(i*N+j),0]=total_spin[i][0]
                            else:
                                priority[(i*N+j),1]=-total_spin[i][0]
                    return priority




#score: {'data2D.txt': -0.09538009259259264}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0,0] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = total_spin[site]
                else:
                    priority_list[i*N+j][1] = -total_spin[site]
        return priority_list




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.09538009259259264}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site]
                else:
                    priority[i*N+j][1] = -total_spin[site]
        for i in range(N):
            if h[i][0] > 0:
                priority_total = [(i, 0) for _ in range(N)]
            else:
                priority_total = [(i, 1) for _ in range(N)]
        return priority




#score: {'data2D.txt': 0.02899799382716053}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if (k-j)%2 == 0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        total_spin=np.zeros((N,N),dtype=int)
        priority=np.zeros((N*N,2))
        
        for i in range(N):
            for j in range(N):
                site=(i + ((j-1)%2 - 1)) % N
                total_spin[site][j] += hflat[i*N+j]
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin[i][j]
                else:
                    priority[(i*N+j), 1] = -total_spin[i][j]
                    
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        total_spin=np.zeros((N,N),dtype=int)
        priority=np.zeros((N*N,2))
        
        for i in range(N):
            for j in range(N):
                site=(i + ((j-1)%2 - 1)) % N
                total_spin[site][j] += hflat[i*N+j]
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin[i][j]
                else:
                    priority[(i*N+j), 1] = -total_spin[i][j]
                    
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        total_spin=np.zeros((N,N),dtype=int)
        priority=np.zeros((N*N,2))
        
        for i in range(N):
            for j in range(N):
                site=(i + ((j-1)%2 - 1)) % N
                total_spin[site][j] += hflat[i*N+j]
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin[i][j]
                else:
                    priority[(i*N+j), 1] = -total_spin[i][j]
                    
        return priority




#score: {'data2D.txt': -0.0015498456790123453}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    if h[site//N][site%N] > 0:
                        total_spin[i*N+j][0] += J[k][(i-site)%N][(j-k%N)]
                    else:
                        total_spin[i*N+j][1] -= J[k][(i-site)%N][(j-k%N)]
                if h[i][j] > 0:
                    priority_total = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
                else:
                    priority_total = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return [priority_total for _ in range(N*N)]




#score: {'data2D.txt': 0.0016294753086419755}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    if h[site//N][k%N] > 0:
                        total_spin[i*N+j][1] += J[k][(i-site)%N][(j-k%N)]*h[site//N][k%N]
                    else:
                        total_spin[i*N+j][0] -= J[k][(i-site)%N][(j-k%N)]*h[site//N][k%N]
        priority_total = [[total_spin[i][1], -total_spin[i][0]] for i in range(N*N)]
        return priority_total




#score: {'data2D.txt': -0.0006958333333333336}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site1 = (site + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][1 if h[site//N][site%N] > 0 else 0] += J[k][(i-site1)%N][(j-k%N)]*h[site//N][k%N]
        priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
        return priority_total




#score: {'data2D.txt': -0.001108179012345679}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_sum = sum([J[0][(i-site)%N][(j-k%N)]*h[site//N][k%N] if h[i][j] > 0 else -J[0][(i-site)%N][(j-k%N)]*(-h[site//N][k%N]) for k in range(3)])
            total_spin[i*N+j][1 if h[i][j] > 0 else 0] = total_sum
    priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
    return priority_total




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.005835648148148147}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if 0 <= j-k%N < N else 0 for k in range(min(j,N-1))])
                priorities.append((total_spin, -1) if h[i][j] > 0 else (total_spin, 1))
        return [[x[1], x[0]] for x in priorities]




#score: {'data2D.txt': 0.24355478395061686}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 0))
                else:
                    priority.append((-total_spin, 1))
        return [[x[1], x[0]] for x in priority]




#score: {'data2D.txt': 0.009663734567901214}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 1))
            else:
                priority.append((total_spin, -1))
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Jflat = J.flatten()
        hflat = h.flatten()
        total_spin=np.zeros((N,N),dtype=int)
        priority=np.zeros((N*N,2))
        
        for i in range(N):
            for j in range(N):
                site=(i + ((j-1)%2 - 1)) % N
                total_spin[site][j] += hflat[i*N+j]
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin[i][j]
                else:
                    priority[(i*N+j), 1] = -total_spin[i][j]
                    
        return priority




#score: {'data2D.txt': -0.005166512345679013}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i]
                else:
                    priority_total[i*N+j][1] = -total_spin[i]
        for i in range(N):
            if h[i][N-1] > 0:
                priority_total[i*N+N-1][0] = total_spin[i]
            else:
                priority_total[i*N+N-1][1] = -total_spin[i]
        return priority_total




#score: {'data2D.txt': -0.00228966049382716}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N**2):
            priorities.append((-total_spin[i//N][state[i//N][i%N]%2], -total_spin[i//N][1-state[i//N][i%N]%2]))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        spin = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += spin[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin

        return priority_total.tolist()




#score: {'data2D.txt': -0.001316820987654321}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    for i in range(N):
        for j in range(N):
            total_spin = sum([J[3*k%4][(i+((k-1)%2 - 1)) % N][j-k%N] * state[(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(3)])
            if h[i][j] > 0:
                priorities.append((-total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return [(p[0], p[1]) for p in sorted(priorities)]




#score: {'data2D.txt': 0.0017983024691358024}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=float)
        for i in range(N):
            for j in range(N):
                if i > 0:
                    total_spin[i][j] += h[(i-1)%N][j]
                if j > 0:
                    total_spin[i][j] += h[i][(j-1)%N]
        priority = np.zeros((N*N,2), dtype=float)
        for i in range(N):
            for j in range(N):
                site = i*N + j
                if h[i][j] > 0:
                    priority[site,0] = total_spin[i][j]
                else:
                    priority[site,1] = -total_spin[i][j]
        return priority




#score: {'data2D.txt': -0.20821959876543217}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += row_sum[j]
                else:
                    priority_total[i*N+j][1] -= row_sum[j]
        return [[row[0], -row[1]] for row in priority_total]




#score: {'data2D.txt': -0.011453240740740741}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = [0 for _ in range(2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[0]
                else:
                    priority[i*N+j][1] = -total_spin[0]
        return priority




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0, 0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[0] += state[site][j]
                    else:
                        total_spin[1] += state[site][j]
                priorities.append(total_spin)
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.001108179012345679}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_sum = sum([J[0][(i-site)%N][(j-k%N)]*h[site//N][k%N] if h[i][j] > 0 else -J[0][(i-site)%N][(j-k%N)]*(-h[site//N][k%N]) for k in range(3)])
            total_spin[i*N+j][1 if h[i][j] > 0 else 0] = total_sum
    priority_total = [[total_spin[i][0], -total_spin[i][1]] for i in range(N*N)]
    return priority_total




#score: {'data2D.txt': 0.31292638888888813}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum([J[0][(i-site)%N][(j-k%N)]*h[site//N][k%N] if h[i][j] > 0 else -J[0][(i-site)%N][(j-k%N)]*(-h[site//N][k%N]) for k in range(3)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.24355478395061686}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 0))
                else:
                    priority.append((-total_spin, 1))
        return [[x[1], x[0]] for x in priority]




#score: {'data2D.txt': 0.010939660493827158}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [0]*N**2
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[(i*N)+j] += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N)+j][0] = total_spin[(i*N)+j]
                else:
                    priority_total[(i*N)+j][1] = -1*total_spin[(i*N)+j]
        for j in range(N**2):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j]
            else:
                priority_total[j][1] = -1*total_spin[j]
        return priority_total




#score: {'data2D.txt': 0.06512361111111113}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        priority_total = np.zeros((N,N,2))
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin[j][0] += 1
                else:
                    total_spin[j][0] -= 1
        for j in range(N):
            if h[0][j] > 0:
                priority_total[0][j][0] = total_spin[j][0]
            else:
                priority_total[0][j][1] = -1*total_spin[j][0]
        for i in range(1,N-1):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin[j][0] + priority_total[i-1][j][0] - priority_total[i+1][j][1]
                else:
                    priority_total[i][j][1] = -1*total_spin[j][0] - priority_total[i-1][j][1] + priority_total[i+1][j][0]
        for j in range(N):
            if h[N-1][j] > 0:
                priority_total[-1][j][0] = total_spin[j][0] + priority_total[-2][j][0]
            else:
                priority_total[-1][j][1] = -1*total_spin[j][0] - priority_total[-2][j][1]
        return priority_total.reshape((N*N, 2))




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((2-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append([total_spin, 1])
                else:
                    priority.append([-total_spin, -1])
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_sum = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin_1 = sum([J[(i*N+j),(m*N+n)] for n,(x,y) in enumerate(zip(range(-1,2),range(-1,2))) if (x==0 and y<0) or (y==0 and x<0)])
                J_sum[i][j] = total_spin_1
        priority_total = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i][j] = J_sum[i][j]
                else:
                    priority_total[i][j] = -J_sum[i][j]
        return [[priority_total[i][j],-priority_total[i][j]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, h[i][j]))
                else:
                    priorities.append((-total_spin, -h[i][j]))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    if h[i][j] > 0:
                        total_spin[site][0] += 1
                    else:
                        total_spin[site][1] += 1
        return [(total_spin[i][0], 1) if h[i][j] > 0 else (total_spin[i][1], -1) for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.010204166666666667}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[i*N+j][0] += 1
                    else:
                        total_spin[i*N+j][0] -= 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][1] += h[site][j]
        priority_total = [[0, 0] for _ in range(N*N)]
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
        return [[priority_total[i][0], priority_total[i][1]] for i in range(N*N)]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.005835648148148147}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0635152777777778}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
            priorities.append((-total_spin, -1))
        else:
            priorities.append((-total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        spin_config = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(spin_config[i][:k]+spin_config[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * spin_config[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0635152777777778}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((-total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0007618827160493824}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                row_sum = sum([state[i][k]+state[i][(k+1)%N] for k in range(N)])
                col_sum = sum([state[k][j]+state[(k+1)%N][j] for k in range(N)])
                total_spin = state[i][j]*row_sum + state[i][j]*col_sum
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return [[x[1],x[0]] for x in sorted(priorities,reverse=True)]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((-total_spin, -1))
          else:
            priorities.append((total_spin, 1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      spin_config = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(spin_config[i][:k]+spin_config[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * spin_config[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.20332700617283966}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+k)%N][(j+l)%N] for k,l in itertools.product([-1,1], repeat=2) if (k==0 and l==0)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.20332700617283966}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    spin_config = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(spin_config[i][:k]+spin_config[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * spin_config[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.05723626543209879}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                row_sum = sum(state[i][:j]+state[i][j+1:])
                total_spin = sum([row_sum * state[(i+k)%N][(j-k)%N] for k in range(min(i,j,N-i-1,N-j-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((total_spin, 1))
          else:
            priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((total_spin, -1))
          else:
            priorities.append((total_spin, 1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
              priorities.append((total_spin, 1))
            else:
              priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = np.zeros((N,N), dtype=int)
    priorities = []
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i][j] += h[site][j]
            
            if h[i][j] > 0:
                priority_total = -total_spin[i].sum()
            else:
                priority_total = total_spin[i].sum()
                
            priorities.append((priority_total, -1))
    return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.19093379629629656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N,2))
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin[i][j][0] = -1
                    total_spin[i][j][1] = 1
                else:
                    total_spin[i][j][0] = 1
                    total_spin[i][j][1] = -1
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][j] += total_spin[site][j]
        priority = []
        for i in range(N*N):
            if h[int(i/N)][i%N] > 0:
                priority.append((total_spin[int(i/N)][i%N][0], -1))
            else:
                priority.append((total_spin[int(i/N)][i%N][1], 1))
        return priority




#score: {'data2D.txt': 0.2892455246913582}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    total_spin += J[k][site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((total_spin, -1))
        return priority




#score: {'data2D.txt': -0.30988225308641926}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] = total_spin
            else:
                priority_total[j][1] = -total_spin
        return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = [0 for _ in range(N)]
        
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    site = (i + ((j-1)%N - 1)) % N
                    total_spin[site] += h[i][j]
                    priority[i*N+j][0] = total_spin[site]
                else:
                    site = (i + ((j-1)%N - 1)) % N
                    total_spin[site] -= h[i][j]
                    priority[i*N+j][1] = -total_spin[site]
                    
        return priority




#score: {'data2D.txt': -0.11493379629629635}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0. for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(-1, 2):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-1*total_spin, -1))
        return [[p[1], p[0]] for p in sorted(priorities)]




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0011368827160493824}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, h[i][j]))
                else:
                    priority.append((-total_spin, -h[i][j]))
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority.tolist()




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i,j,0] = total_spin
                else:
                    priority_total[i,j,1] = -total_spin
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        return priorities




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': 0.16028688271604957}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[site],1]
                else:
                    priority_total[i*N+j] = [-total_spin[site],-1]
        return priority_total




#score: {'data2D.txt': -0.09538009259259264}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N*N)]
    total_spin = [0]*N
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[site] += h[i][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] = total_spin[site]
        else:
          priority_total[i*N+j][1] = -total_spin[site]
    return priority_total




#score: {'data2D.txt': -0.09538009259259264}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[site]
                else:
                    priority_total[i*N+j][1] = -total_spin[site]
        return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total = np.zeros((N, N), dtype=int)
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if h[site][j] > 0:
                        total[i][j] += 1
                    else:
                        total[i][j] -= 1
        priorities = []
        for i in range(N*N):
            priority_total = [total[(i//N)][(i%N)], -total[(i//N)][(i%N)]]
            if h[i//N][i%N] > 0:
                priorities.append(priority_total)
            else:
                priorities.append([-x for x in priority_total])
        return priorities




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += h[site][j]
                if h[i][j] > 0:
                    priority_total = np.zeros((N,2), dtype=int)
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i][j] += state[site][j]
                    priorities.append((-total_spin[i][j], -h[i][j]))
                else:
                    priority_total = np.zeros((N,2), dtype=int)
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i][j] += state[site][j]
                    priorities.append((-total_spin[i][j], h[i][j]))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((-total_spin, 1))
    return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.0011368827160493824}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, h[i][j]))
                else:
                    priority.append((-total_spin, -h[i][j]))
        return priority




#score: {'data2D.txt': -0.0006692901234567905}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N//2) % N
                total_spin[site] += state[i][j]
        for j in range(N**2):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j//N]
            else:
                priority_total[j][1] = -1*total_spin[j//N]
        return priority_total




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%N) - N//2) % N
                total_spin1 = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin1 += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin1
                else:
                    priority[i*N+j][1] = -total_spin1
        return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N) - N//2) % N
        total_spin[i*N+j][0] += h[i][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] = total_spin[i*N+j][0]
        else:
          total_spin[i*N+j][1] = -total_spin[i*N+j][0]
    return total_spin




#score: {'data2D.txt': 0.0042529320987654325}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N,N,2), dtype=int)
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += state[site][j]
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin[i][0]
                else:
                    priority_total[i][j][1] = -total_spin[i][0]
        return priority_total.reshape(N*N,2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spins = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spins[i][site] += h[i][site]
        priorities = []
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((total_spins[i][j], 1))
                else:
                    priorities.append((-total_spins[i][j], -1))
        return priorities




#score: {'data2D.txt': 0.009474537037037038}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            row_sum = [sum(J[i*(N**2):(i+1)*(N**2),j*N+j-1:j*N+j+3].flatten()) for j in range(N)]
            for k in range(N):
                total_spin = sum([row_sum[j] * h[k][j] for j in range(min(k,N-1))])
                if h[k][k] > 0:
                    priority.append((total_spin, -1))
                else:
                    priority.append((total_spin, 1))
        return [[p[1], -p[0]] for p in priority]




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': 0.057156018518518543}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i+((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
                if h[i][j] > 0:
                    priority.append([total_spin, 1])
                else:
                    priority.append([-total_spin, -1])
        return priority




#score: {'data2D.txt': -0.0013581790123456793}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        priority_total = np.zeros((N**2,2), dtype=float)
        for i in range(N):
            for j in range(N):
                site_sum = sum([state[(i+((k-1)%2)-1)%N][j-k%N] for k in range(3)])
                total_spin[i][j] = site_sum
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[i][j]
                else:
                    priority_total[j][1] = -1*total_spin[i][j]
        return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N,N,2), dtype=int)
    for i in range(N):
        total_spin = np.zeros(2)
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[i][j][0] += 1
                priority_total[i][j][1] -= 1
            else:
                priority_total[i][j][0] -= 1
                priority_total[i][j][1] += 1
    return np.array(priority_total).reshape((N*N,2))




#score: {'data2D.txt': -0.0006692901234567905}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2,2), dtype=int)
    total_spin = [0]*N
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N) - N//2) % N
        total_spin[site] += state[i][j]
    for j in range(N**2):
      if h[j//N][j%N] > 0:
        priority_total[j][0] = total_spin[j//N]
      else:
        priority_total[j][1] = -1*total_spin[j//N]
    return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N**2):
            total_spin = 0
            for k in range(3):
                site = (i // N + ((k-1)%2 - 1)) % N
                total_spin += state[site][(i % N)]
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin
            else:
                priority_total[i][1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.007894907407407408}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    total_spin = [0]*N
    for i in range(N):
        for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin[site] += state[i][k]
    for j in range(N**2):
        if h[j//N][j%N] > 0:
            priority_total[j][0] = total_spin[j//N]
        else:
            priority_total[j][1] = -total_spin[j//N]
    return priority_total




#score: {'data2D.txt': 0.1952927469135805}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][j] if k%2 == 0 else state[i][(j + (k-1)%2 - 1)] % N for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))  
        return priorities




#score: {'data2D.txt': -0.0008251543209876545}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x[1], -x[0]] for x in sorted(priorities)]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if k >= 0 else J[(i+(k-1)%2)][(j+k)%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x[1], -x[0]] for x in priorities]




#score: {'data2D.txt': 0.057156018518518543}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]  
        priorities = []  
        for i in range(N):  
            for j in range(N):  
                total_spin = sum([J[(i+((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])  
                if h[i][j] > 0:  
                    priorities.append([total_spin, 1])  
                else:  
                    priorities.append([-total_spin, -1])  
        return priorities




#score: {'data2D.txt': -0.05791280864197533}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            total_spin = sum([J[(i + ((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
            if h[i][j] > 0:
                priority[i*N+j] = [total_spin, -1]
            else:
                priority[i*N+j] = [-total_spin, 1]
    return priority




#score: {'data2D.txt': -1.4043209876543283e-05}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total = [total_spin, -1*total_spin]
                else:
                    priority_total = [-total_spin, total_spin]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append([total_spin, 1])
                else:
                    priorities.append([-total_spin, -1])
        return priorities




#score: {'data2D.txt': 0.057156018518518543}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i+((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
                if h[i][j] > 0:
                    priorities.append([total_spin, 1])
                else:
                    priorities.append([-total_spin, -1])
        return priorities




#score: {'data2D.txt': 0.16911280864197556}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=float)
        for i in range(N):
            for j in range(N):
                site_sum = sum([state[(i+((k-1)%2)-1)%N][j-k%N] for k in range(3)])
                total_spin = site_sum
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.0003390432098765438}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], 1))
        return [[x,y] for x,y in sorted(priorities, reverse=True)]




#score: {'data2D.txt': 0.00016404320987654263}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], 1))
        return [[x,y] for x,y in sorted(priorities)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    site_sum += state[site][j]
                total_spin[i*N+j] = [site_sum, h[i][j]]
        for j in range(N**2):
            if total_spin[j][0] > 0:
                priorities.append([total_spin[j][0], 1])
            else:
                priorities.append([-1*total_spin[j][0], -1])
        return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i][0]
            else:
                priority_total[i][1] = -1*total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.005166512345679013}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[0,0] for _ in range(N*N)]
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[0] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[0]
            else:
                priority_total[i*N+j][1] = -total_spin[0]
    return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,N), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][site] += h[i][j]
                
                if h[i][j] > 0:
                    priority_total = -total_spin[i].sum()
                else:
                    priority_total = total_spin[i].sum()
                    
                priorities.append((priority_total, 1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return [p for p in priorities]




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': 0.009474537037037038}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(J[i*(N**2):(i+1)*(N**2),j*N+j-1:j*N+j+3].flatten()) for j in range(N)]
      for k in range(N):
        total_spin = sum([row_sum[j] * h[k][j] for j in range(min(k,N-1))])
        if h[k][k] > 0:
          priorities.append((total_spin, -1))
        else:
          priorities.append((total_spin, 1))
    return [[p[1], -p[0]] for p in priorities]




#score: {'data2D.txt': -0.012068672839506174}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site_neighbor = (site + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += h[site_neighbor][j]
        return [[p[1], -p[0]] for p in total_spin]




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0, 0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin
            else:
                priority[i*N+j][1] = -total_spin
    return priority




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin
            else:
                priority[i*N+j][1] = -total_spin
    return [row for row in priority]




#score: {'data2D.txt': -0.008826697530864198}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum([row_sum[k] * state[site][k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[p[1], -p[0]] for p in priorities]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
    for i in range(N**2):
        site = (i % N, i // N)
        for k in range(3):
            neighbor = ((k-1)%2 - 1) + site[0], site[1]
            total_spin[i][0] += -1 if h[neighbor[1]][neighbor[0]] > 0 else 1
    priority_total = [[0, 0] for _ in range(N**2)]
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priority_total[i][0] = total_spin[i][0]
        else:
            priority_total[i][1] = -1*total_spin[i][0]
    return priority_total




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.05197391975308645}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i]
            else:
                priority_total[i*N+j][1] = -total_spin[i]
    for i in range(N):
        if h[i][N-1] > 0:
            priority_total[i*N+N-1][0] += sum([h[i][j] for j in range(N)])
        else:
            priority_total[i*N+N-1][1] -= sum([h[i][j] for j in range(N)])
    for i in range(N):
        if h[0][i] > 0:
            priority_total[i][0] += sum([h[0][j] for j in range(N)])
        else:
            priority_total[i][1] -= sum([h[0][j] for j in range(N)])
    return priority_total




#score: {'data2D.txt': -0.0003390432098765438}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], 1))
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x,y] for x,y in sorted(priorities)]




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((-total_spin, -1))
      return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.01507577160493826}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
    priority_total = np.column_stack((sum_1, -sum_1))
    priority = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += priority_total[site*N+j][0]
            if h[i][j] > 0:
                priority[(i*N+j),0] = np.sign(total_spin)
                priority[(i*N+j),1] = 1
            else:
                priority[(i*N+j),0] = -np.sign(total_spin)
                priority[(i*N+j),1] = -1
    return(priority)




#score: {'data2D.txt': -0.057243981481481514}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i+((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
                priorities.append([-total_spin, -1] if total_spin > 0 else [total_spin, 1])
        return [[p[0], p[1]] for p in priorities]




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_interactions = []
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k-j+N < N and k-j-N >= 0:
                        site_interactions.append(J[site, j-k%N].flatten()[0])
                    else:
                        site_interactions.append(h[site][j])
                total_spin = sum(site_interactions)
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin
                else:
                    priorities[(i*N+j), 1] = -total_spin
        return priorities.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0.0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[i*k%N + min(k, N-1)][min(j+N-k%N,N-1)] if (k==j) or (k==(N-1)-abs(j-N)) else 0 for k in range(max(0,j-N+1))])
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                    priority[i*N+j][1] = -total_spin
                else:
                    priority[i*N+j][0] = -total_spin
                    priority[i*N+j][1] = total_spin
        return priority




#score: {'data2D.txt': 0.146027314814815}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0017600308641975307}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        for j in range(N):
            priority_total[j][0] = 0
            priority_total[j][1] = 0
        for i in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities = [(total_spin, h[i][j])]
            else:
                priorities = [(-total_spin, -h[i][j])]
        return priority_total




#score: {'data2D.txt': -0.05197391975308645}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i]
                else:
                    priority_total[i*N+j][1] = -total_spin[i]
        for i in range(N):
            if h[i][N-1] > 0:
                priority_total[i*N+N-1][0] += sum([h[i][j] for j in range(N)])
            else:
                priority_total[i*N+N-1][1] -= sum([h[i][j] for j in range(N)])
        for i in range(N):
            if h[0][i] > 0:
                priority_total[i][0] += sum([h[0][j] for j in range(N)])
            else:
                priority_total[i][1] -= sum([h[0][j] for j in range(N)])
        return priority_total




#score: {'data2D.txt': 0.16028688271604957}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        priority_total = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority_total.append((total_spin[site][0],1))
                else:
                    priority_total.append((-total_spin[site][0],-1))
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if i==0 or j==0 or i==N-1 or j==N-1:
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin[i][j] += h[site][j]
                    if h[i][j] > 0:
                        return [[total_spin[k][l], -total_spin[k][l]] for k in range(N) for l in range(N)]
                else:
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin[i][j] += h[site][j]
                    if h[i][j] > 0:
                        return [[total_spin[k][l], -total_spin[k][l]] for k in range(N) for l in range(N)]
        return [[0,0] for _ in range(N**2)]




#score: {'data2D.txt': -0.05155447530864201}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i]
            else:
                priority_total[i*N+j][1] = -total_spin[i]
    for i in range(N):
        site = (i + ((N-1)%2 - 1)) % N
        if h[i][site] > 0:
            priority_total[i*N+site][0] += sum([h[k][site] for k in range(N)])
        else:
            priority_total[i*N+site][1] -= sum([h[k][site] for k in range(N)])
    site = (N-1 + ((0)%2 - 1)) % N
    if h[site][j] > 0:
        priority_total[site][0] += sum([h[j][k] for k in range(N)])
    else:
        priority_total[site][1] -= sum([h[j][k] for k in range(N)])
    return priority_total




#score: {'data2D.txt': -0.05122145061728399}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i]
                else:
                    priority[i*N+j][1] = -total_spin[i]
        return priority




#score: {'data2D.txt': -0.008430092592592593}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        for j in range(N):
            if h[0][j] > 0:
                priority[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority[j][1] -= sum(h[k][j] for k in range(1,N))
        return priority




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0017165123456790118}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N,N,2), dtype=int)
        for j in range(N):
            if h[j].sum() > 0:
                priority_total[:,j,0] = total_spin.sum(axis=1)
            else:
                priority_total[:,j,1] = -1*total_spin.sum(axis=1)
        return priority_total.reshape((N*N,2))




#score: {'data2D.txt': -0.0013115740740740737}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [[sum(state[i][:k]+state[i][k+1:]) for k in range(N)] for i in range(N)]
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_sum = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                site_sum += total_spin[site][j]
            if h[i][j] > 0:
                priority_total[j][0] = site_sum
            else:
                priority_total[j][1] = -1*site_sum
    return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if i==0 or j==0 or i==N-1 or j==N-1:
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin[i][j] += h[site][j]
                    if h[i][j] > 0:
                        return [[total_spin[k][l], -total_spin[k][l]] for k in range(N) for l in range(N)]
                else:
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin[i][j] += h[site][j]
                    if h[i][j] > 0:
                        return [[total_spin[k][l], -total_spin[k][l]] for k in range(N) for l in range(N)]
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] = total_spin[0][j]
            else:
                priority_total[j][1] = -total_spin[0][j]
        for i in range(1,N-1):
            if h[i][0] > 0:
                priority_total[:,0] += total_spin[i,0]
            else:
                priority_total[:,1] -= total_spin[i,0]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if i==0 or j==0 or i==N-1 or j==N-1:
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin[i][j] += h[site][j]
                    if h[i][j] > 0:
                        priority_list = [[total_spin[k][l], -total_spin[k][l]] for k in range(N) for l in range(N)]
                else:
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin[i][j] += h[site][j]
        return priority_list




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': 0.0037236111111111116}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += J[0][site][0]
                if i > 0:
                    total_spin[i][j] += J[1][site][0]
                if j > 0:
                    total_spin[i][j] += J[2][site][0]
                if i < N-1:
                    total_spin[i][j] += J[3][site][0]
        priority_total = np.zeros((N,N,2), dtype=int)
        for j in range(N):
            if h[j][0] > 0:
                priority_total[j][0][0] = total_spin[j][0]
            else:
                priority_total[j][1][0] = -1*total_spin[j][0]
        return priority_total.reshape((N*N,2))




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [0]*N**2
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j] += h[site][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j], 1]
                else:
                    priority_total[i*N+j] = [-total_spin[i*N+j], -1]
        return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] = h[site][j]
                total_spin[i*N+j][1] = -total_spin[i*N+j][0]
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j][0]
        return priority_total




#score: {'data2D.txt': -0.001710339506172839}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        
        for i in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities = [(total_spin, 1)]
            else:
                priorities = [(-total_spin, -1)]
        
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += state[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin.sum()
                else:
                    priority_total[(i*N+j), 1] = -total_spin.sum()
        return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': 0.009816512345679013}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = 1 if h[i][j] > 0 else -1
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][spin==1] += 1
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
        for j in range(N):
            if spin == 1:
                priority[i*N+j] = [-x for x in priority_total[j]]
            else:
                priority[i*N+j] = [x for x in priority_total[j]]
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
        return priority




#score: {'data2D.txt': -0.05791280864197533}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i + ((k-1)%2) % N, (j-k)%N)].flatten()[0] if 0 <= k-j+N < N and 0 <= k-j-N < N else h[i][j] for k in range(3)])
                if h[i][j] > 0:
                    priorities.append([total_spin, -1])
                else:
                    priorities.append([-total_spin, 1])
        return priorities




#score: {'data2D.txt': -0.05791280864197533}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i + ((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
                if h[i][j] > 0:
                    priorities.append([total_spin, -1])
                else:
                    priorities.append([-total_spin, 1])
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
        return priority




#score: {'data2D.txt': -0.0024612654320987663}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[site][0]
                else:
                    priorities[i*N+j][1] = -total_spin[site][0]
        for i in range(N):
            site = (i + ((N-1)%2 - 1)) % N
            total_spin[site][0] += sum(h[k][i] for k in range(N))
            if h[i][0] > 0:
                priorities[i][0] = total_spin[site][0]
            else:
                priorities[i][1] = -total_spin[site][0]
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N,N,2), dtype=int)
        total_spin = 0
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        priority_total[i,j,0] += state[site][j]
                    else:
                        priority_total[i,j,1] += -state[site][j]
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N,N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i,j,0] = total_spin
                else:
                    priority_total[i,j,1] = -total_spin
                    
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin[(i+N-1)%N][0] += 1
                    priority[i*N+j] = [total_spin[(i+N-1)%N][0], -total_spin[(i+N-1)%N][0]]
                else:
                    total_spin[(i+N-1)%N][1] -= 1
                    priority[i*N+j] = [-total_spin[(i+N-1)%N][1], total_spin[(i+N-1)%N][1]]
        
        return priority




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0006634259259259271}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if i==0 or j==0 or i==N-1 or j==N-1:
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin = h[site][j]
                    if h[i][j] > 0:
                        priority[i*N+j] = [total_spin, -total_spin]
                    else:
                        priority[i*N+j] = [-total_spin, total_spin]
                else:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin += J[k][site][j]
                    if h[i][j] > 0:
                        priority[i*N+j] = [total_spin, -total_spin]
                    else:
                        priority[i*N+j] = [-total_spin, total_spin]
        return priority




#score: {'data2D.txt': -0.007382561728395061}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
                if h[site][j] > 0:
                    priority[i*N+j] = [total_spin[i][0], 0]
                else:
                    priority[i*N+j] = [-total_spin[i][0], 1]
        return priority




#score: {'data2D.txt': -0.0078060185185185186}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0 for _ in range(2)] for _ in range(N*N)]
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i][site] += spin
            priority[i*N+site] = [x for x in [-total_spin[i][site], total_spin[i][site]]]
    return priority




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0010942901234567905}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j] > 0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[p[1], 1-p[1]] for p in sorted(priorities)[::-1]]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': -0.0006180555555555562}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i][0]
                else:
                    priority[i*N+j][1] = -total_spin[i][0]
                    
        for j in range(N):
            if h[0][j] > 0:
                priority[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority[j][1] -= sum(h[k][j] for k in range(1,N))

        return priority




#score: {'data2D.txt': 0.0336807098765432}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][0] += state[i][j]
            if h[i][j] > 0:
                priority[i*N+j][0] = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            else:
                priority[i*N+j][1] = -sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i][0]
                else:
                    priority[i*N+j][1] = -total_spin[i][0]
        return priority




#score: {'data2D.txt': 0.15177731481481505}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_priority[site][j][0] += site_spin
                    if h[i][j] > 0:
                        total_priority[site][j][1] = total_priority[site][j][1] + 1
                    else:
                        total_priority[site][j][1] = -total_priority[site][j][1]
        return total_priority.reshape(N*N,2).tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin[i][0] += h[site][j]
        if h[i][j] > 0:
          priority[i*N+j][0] = total_spin[i][0]
        else:
          priority[i*N+j][1] = -total_spin[i][0]
    return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[float('inf') for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                    for k in range(3):
                        site2 = (i + ((k-1)%2 - 1)) % N
                        priority[i*N+j][0] += sum([J[(i*N+j):, (site2*k%N+j-1)%N, :]]).sum()
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
                    for k in range(3):
                        site2 = (i + ((k-1)%2 - 1)) % N
                        priority[i*N+j][1] += sum([J[(i*N+j):, (site2*k%N+j-1)%N, :]]).sum()
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][spin] += state[i][j]
                priority_total = np.zeros((N,2), dtype=int)
                for j in range(N):
                    if h[i][j] > 0:
                        priority_total[j][0] = total_spin[j][0]
                    else:
                        priority_total[j][1] = -1*total_spin[j][0]
                for j in range(N):
                    if h[i][j] > 0:
                        priority[i*N+j][0] = priority_total[j][0]
                    else:
                        priority[i*N+j][1] = -priority_total[j][0]
        return priority




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[float('inf') for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                    priority[i*N+j][1] = -float('inf')
                else:
                    priority[i*N+j][0] = -float('inf')
                    priority[i*N+j][1] = -total_spin[site][0]
                    
        return priority




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': -0.002099228395061728}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.0016973765432098762}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        
        for i in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities = [(total_spin, 1)]
            else:
                priorities = [(-total_spin, -1)]
        
        return priority_total




#score: {'data2D.txt': -0.06522577160493831}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], 1))
                else:
                    priorities.append((-total_spin[site][0], -1))
        return priorities




#score: {'data2D.txt': -0.005123611111111112}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] * state[i][(j+((k-1)%2 - 1)) % N] for k in range(3)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total = [[0 for _ in range(2)] for _ in range(N*N)]
    for k in range(4):
        for i in range(N):
            site = (i + ((k-1)%2 - 1)) % N
            for j in range(N):
                if h[site][j] > 0:
                    total[i*N+j][0] += 1
                else:
                    total[i*N+j][0] -= 1
    priorities = []
    for i in range(N*N):
        priority_total = [total[i][0], -total[i][0]]
        if h[i//N][i%N] > 0:
            priorities.append(priority_total)
        else:
            priorities.append([-x for x in priority_total])
    return priorities




#score: {'data2D.txt': -0.014965586419753084}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for k in range(3):
            site = (k%2) % N
            for i in range(N):
                total_spin[site][0] += state[i][k]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total = [total_spin[(i+j)%N][0], -total_spin[(i+j)%N][0]]
                else:
                    priority_total = [-x for x in [total_spin[(i+j)%N][0], -total_spin[(i+j)%N][0]]]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total = np.zeros((N,N), dtype=int)
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if h[site][j] > 0:
                        total[i][j] += 1
                    else:
                        total[i][j] -= 1
        priorities = []
        for i in range(N*N):
            if h[i//N][i%N] > 0:
                priorities.append([total[(i//N)][(i%N)], -total[(i//N)][(i%N)]])
            else:
                priorities.append([-x for x in [total[(i//N)][(i%N)], -total[(i//N)][(i%N)]]])
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if h[i][j] > 0:
                        total_spin[i][j] += 1
                    else:
                        total_spin[i][j] -= 1
        priorities = []
        for i in range(N*N):
            priority_total = [total_spin[(i//N)][(i%N)], -total_spin[(i//N)][(i%N)]]
            if h[i//N][i%N] > 0:
                priorities.append(priority_total)
            else:
                priorities.append([-x for x in priority_total])
        return priorities




#score: {'data2D.txt': 0.010939660493827158}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += h[site][j]
                total_spin[i*N+j][1] -= h[i][j]
        priority_total = [[float('inf') for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[site][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j][1]
        return [[x for x in row] for row in priority_total]




#score: {'data2D.txt': 0.001082253086419753}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [0 for _ in range(N**2)]
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = priority_total[i][0]
            else:
                priority_total[i][1] = -priority_total[i][1]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        priority_total = [[float('inf') for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += h[site][j]
                total_spin[i*N+j][1] += -h[site][j]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j][0]
        return priority_total




#score: {'data2D.txt': -0.008430092592592593}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        for j in range(N):
            if h[0][j] > 0:
                priority[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority[j][1] -= sum(h[k][j] for k in range(1,N))
        return priority




#score: {'data2D.txt': -0.004868055555555555}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority_total[j][1] -= sum(h[k][j] for k in range(1,N))
        
        return priority_total




#score: {'data2D.txt': -0.0006180555555555562}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]

        for j in range(N):
            if h[0][j] > 0:
                priority[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority[j][1] -= sum(h[k][j] for k in range(1,N))

        return priority




#score: {'data2D.txt': -0.0006202160493827155}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] if k%2 == 0 else -state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0011856481481481481}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][j] + state[i][(j+(k-1)%2 - 1)]%N for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] * (1 if state[i][j] == state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] else (-1)) for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        h_new = h.flatten()
        sum_1 = (np.prod(J_new[::2],0) + h_new).flatten()
        sum_2 = (np.prod(J_new[1::2],0)).flatten()
        priority = np.column_stack((sum_1 - sum_2, sum_1 + sum_2))
        return(priority)




#score: {'data2D.txt': -0.0006202160493827155}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] if k%2 == 0 else -state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0006202160493827155}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] if k%2 == 0 else -state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0007578703703703706}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0006202160493827155}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] if k%2 == 0 else -state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.09390879629629637}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[site][0]
                else:
                    priorities[i*N+j][1] = -total_spin[site][0]
        for i in range(N):
            site = (i + ((N-1)%2 - 1)) % N
            total_sum = sum(h[k][i] for k in range(N))
            if h[i][j] > 0:
                priorities[i*N+j][0] = total_spin[site][0] + total_sum
            else:
                priorities[i*N+j][1] = -total_spin[site][0] - total_sum
        return [list(row) for row in priorities]




#score: {'data2D.txt': -0.0006202160493827155}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] if k%2 == 0 else -state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0006202160493827155}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] if k%2 == 0 else -state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
            if h[i][j] > 0:
                priorities.append((-total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': -0.0017121913580246911}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, 1))
        return sorted(priorities)




#score: {'data2D.txt': -0.0017121913580246911}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': -0.0017779320987654317}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[i*k%N + min(k, N-1)][min(j+N-k%N,N-1)] if (k==j) or (k==(N-1)-abs(j-N)) else 0 for k in range(max(0,j-N+1))])
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                    priority[i*N+j][1] = -total_spin
                else:
                    priority[i*N+j][0] = -total_spin
                    priority[i*N+j][1] = total_spin
        return priority




#score: {'data2D.txt': -8.780864197530791e-05}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0.0 for _ in range(2)] for _ in range(N**2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = 1 if h[i][j] <= 0 else -1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += spin
            priority_total = np.zeros((N,2), dtype=int)
            if h[i][j] > 0:
                priority_total[:, 0] = total_spin[:, 0]
            else:
                priority_total[:, 1] = -total_spin[:, 0]
            for j in range(N):
                priority[i*N+j][:] = priority_total[j]
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total = np.zeros((N,N), dtype=int)
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if h[site][j] > 0:
                        total[i][j] += 1
                    else:
                        total[i][j] -= 1
        priorities = []
        for i in range(N*N):
            if h[i//N][i%N] > 0:
                priorities.append([total[(i//N)][(i%N)], -total[(i//N)][(i%N)]])
            else:
                priorities.append([-x for x in [total[(i//N)][(i%N)], -total[(i//N)][(i%N)]]])
        return priorities




#score: {'data2D.txt': 0.33346743827160397}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N_squared = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N_squared)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                
                site = (i + ((j-1)%2 - 1)) % N
                
                total_spin += h[site][j]
                
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.0017121913580246911}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': -0.012068672839506174}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site_neighbor = (site + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += h[site_neighbor][j]
        return [[p[1], -p[0]] for p in total_spin]




#score: {'data2D.txt': -0.0320368827160494}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N,N,2), dtype=int)
    for i in range(N):
        total_spin = np.zeros(2)
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[0] += h[site][j]
            if h[i][j] > 0:
                priority_total[i,j,0] = total_spin[0]
            else:
                priority_total[i,j,1] = -total_spin[0]
    return priority_total.reshape(N*N,2)




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if k < j else row_sum[N-1-(j-k)%N] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [p for p in priorities]




#score: {'data2D.txt': -0.09538009259259264}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[site] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[site]
            else:
                priority_total[i*N+j][1] = -total_spin[site]
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        for j in range(N):
            priority_total[j, 0] = sum(priority_total[:, 0])
            if h[0][j] > 0:
                priority_total[j, 1] = -sum(priority_total[:, 1])
            else:
                priority_total[j, 1] = sum(priority_total[:, 1])
        return priority_total




#score: {'data2D.txt': -0.0003498456790123462}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_interactions = []
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k-j+N < N and k-j-N >= 0:
                        site_interactions.append(J[site, j-k%N].flatten()[0])
                    else:
                        site_interactions.append(h[site][j])
                total_spin = sum(site_interactions)
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [(a,b) for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.25798719135802445}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i+k)%N,(j-k)%N].flatten()[0] if k-j+N < N and k-j-N >= 0 else h[(i+k)%N,j-k%N] for k in range(3)])
                if h[i][j] > 0:
                    priorities.append((total_spin,1))
                else:
                    priorities.append((-total_spin,-1))
        return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return [[x for x in y] for y in [list(pair) for pair in priorities]]




#score: {'data2D.txt': -0.0007578703703703706}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0009214506172839503}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                site = (i + ((3-1)%2 - 1)) % N
                total_magnetism = h[site][j]
                if h[i][j] > 0:
                    priorities.append((-total_spin-total_magnetism, 1))
                else:
                    priorities.append((total_spin+total_magnetism, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0011856481481481481}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for k in range(4):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if h[i][j] > 0:
                        total_spin[site][0] += state[i][j]
                    else:
                        total_spin[site][1] += -state[i][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((total_spin[i][0], 1))
                else:
                    priorities.append((-total_spin[i][1], -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[float('-inf'), float('inf')] for _ in range(N*N)]
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[0]
                else:
                    priority[i*N+j][1] = -total_spin[0]
        return priority




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': 0.0007044753086419755}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.009663734567901214}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0015714506172839506}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []  
        for i in range(N):  
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]  
            for j in range(N):  
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))]) 
                if h[i][j] > 0:  
                    priorities.append((total_spin, 1))  
                else:  
                    priorities.append((total_spin, -1))  
        return [[p[1], p[0]] for p in sorted(priorities)]




#score: {'data2D.txt': -0.1792072530864197}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        for j in range(N):
            site = (i + ((N-1)%2 - 1)) % N
            if h[i][site] > 0:
                priority_total[i*N+site][0] += sum([h[k][site] for k in range(N)])
            else:
                priority_total[i*N+site][1] -= sum([h[k][site] for k in range(N)])
        site = (N-1 + ((0)%2 - 1)) % N
        if h[site][j] > 0:
            priority_total[site][0] += sum([h[j][k] for k in range(N)])
        else:
            priority_total[site][1] -= sum([h[j][k] for k in range(N)])
        return priority_total




#score: {'data2D.txt': -0.05155447530864201}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i]
                else:
                    priority_total[i*N+j][1] = -total_spin[i]
        for i in range(N):
            site = (i + ((N-1)%2 - 1)) % N
            if h[i][site] > 0:
                priority_total[i*N+site][0] += sum([h[k][site] for k in range(N)])
            else:
                priority_total[i*N+site][1] -= sum([h[k][site] for k in range(N)])
        site = (N-1 + ((0)%2 - 1)) % N
        if h[site][j] > 0:
            priority_total[site][0] += sum([h[j][k] for k in range(N)])
        else:
            priority_total[site][1] -= sum([h[j][k] for k in range(N)])
        return priority_total




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1748381172839508}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
        priorities = []
        for i in range(N*N):
            if h[i//N][i%N] > 0:
                priorities.append((total_spin[i//N][0], 1))
            else:
                priorities.append((-total_spin[i//N][0], -1))
        return priorities




#score: {'data2D.txt': 0.01271496913580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_priority[i*N+j][0] += site_spin * J[k][site][j]
        return total_priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2,2))
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority.astype(int)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum2 = (-np.prod(J_new[1::2], 0) - h).flatten()
        priority = np.column_stack((sum1, -sum2))
        return priority




#score: {'data2D.txt': 0.15037762345679034}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, 1]
                else:
                    priorities[i*N+j] = [-total_spin, -1]
        return priorities




#score: {'data2D.txt': 0.017051080246913583}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = J.reshape(4,N*N)
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[k][i*N+j]
                if h[i][j] > 0:
                    priority.append((total_spin, h[i][j]))
                else:
                    priority.append((-total_spin, -h[i][j]))
        return priority




#score: {'data2D.txt': 0.0009464506172839509}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                total_magnetism = h[i][j]
                if h[i][j] > 0:
                    priorities.append((-total_spin-total_magnetism, 1))
                else:
                    priorities.append((total_spin+total_magnetism, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0008060185185185185}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.00132854938271605}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                total_magnetism = h[i][j]
                if site_spin > 0:
                    priorities.append((-total_spin-total_magnetism, 1))
                else:
                    priorities.append((total_spin+total_magnetism, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.008696141975308642}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[j*N+i, 0] = total_spin
                else:
                    priority_total[j*N+i, 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.0009183641975308645}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[x[1],-x[0]] for x in sorted(priorities,reverse=True)]




#score: {'data2D.txt': -0.33347391975308543}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0 for _ in range(2)] for _ in range(N**2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][spin] += spin
            priority_total = np.zeros((N,2), dtype=int)
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[j][0]
                else:
                    priority_total[j][1] = -1*total_spin[j][0]
            for j in range(N):
                if h[i][j] > 0:
                    priority[i*N+j][0] = np.sum(total_spin[:,0])
                    priority[i*N+j][1] = -np.sum(total_spin[:,1])
                else:
                    priority[i*N+j][0] = -np.sum(total_spin[:,0])
                    priority[i*N+j][1] = np.sum(total_spin[:,1])
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0 for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            total_spin = sum([J[i*k%N + min(k, N-1)][min(j+N-k%N,N-1)] if (k==j) or (k==(N-1)-abs(j-N)) else 0 for k in range(max(0,j-N+1))])
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin
                priority[i*N+j][1] = -total_spin
            else:
                priority[i*N+j][0] = -total_spin
                priority[i*N+j][1] = total_spin
    return priority




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0006692901234567905}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N//2) % N
                total_spin[site] += state[i][j]
        for j in range(N*N):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j//N]
            else:
                priority_total[j][1] = -total_spin[j//N]
        return priority_total




#score: {'data2D.txt': -0.20015447530864225}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = [0]*N2
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin[i*N+j], 0]
                else:
                    priority[i*N+j] = [-total_spin[i*N+j], 1]
        return priority




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin[i][0], 0]
                else:
                    priority[i*N+j] = [-total_spin[i][0], 1]
        return priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': -0.25167268518518493}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = J.reshape(4,N*N)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    total_spin[site][0] += state[i][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority = (total_spin[i][0], h[i][j])
                else:
                    priority = (-total_spin[i][0], -h[i][j])
                priorities.append(priority)
        return priorities




#score: {'data2D.txt': -0.024777314814814815}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for k in range(3):
            for i in range(N):
                for j in range(N):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[site][0] += 1
                    else:
                        total_spin[site][0] -= 1
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[(i + ((k-1)%2 - 1)) % N][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[(i + ((k-1)%2 - 1)) % N][0]
        return priority_total.tolist()




#score: {'data2D.txt': -0.0008828703703703702}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
        priorities = []
        for j in range(N):
            for i in range(N):
                if h[i][j] > 0:
                    priority_total = np.zeros((2), dtype=int)
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[site][0] += 1 if h[i][j] > 0 else -1
                    priorities.append((-total_spin.sum(), 1) if total_spin.sum() < 0 else (-total_spin.sum(), -1))
                else:
                    priority_total = np.zeros((2), dtype=int)
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[site][0] += 1 if h[i][j] > 0 else -1
                    priorities.append((-total_spin.sum(), -1) if total_spin.sum() < 0 else (-total_spin.sum(), 1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = -total_spin
                    priorities[i*N+j, 1] = total_spin
                else:
                    priorities[i*N+j, 0] = total_spin
                    priorities[i*N+j, 1] = -total_spin
        return priorities.tolist()




#score: {'data2D.txt': -0.0003464506172839503}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((0)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
        priority_total = []
        for i in range(N):
            priorities = []
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((-total_spin[i][0], 1))
                else:
                    priorities.append((total_spin[i][0], -1))
            priority_total.extend(priorities)
        return [[x, 1-x] for x,_ in sorted(priority_total)]




#score: {'data2D.txt': -0.0005214506172839501}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((2-j)%2 - 1)) % N
                total_spin[site][j] += h[i][j]
        priority_total = []
        for j in range(N):
            for i in range(N):
                if h[i][j] > 0:
                    priority_total.append((-total_spin[i][j], 1))
                else:
                    priority_total.append((total_spin[i][j], -1))
        return [list(x) for x in sorted(priority_total)]




#score: {'data2D.txt': -0.05791280864197533}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i + ((k-1)%2) % N, (j-k)%N)].flatten()[0] if 0 <= k-j+N < N and 0 <= k-j-N < N else h[i][j] for k in range(3)])
                if h[i][j] > 0:
                    priorities.append([total_spin, -1])
                else:
                    priorities.append([-total_spin, 1])
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    site = (i + ((1)%2) - 1) % N
                    total_spin[site][j] += 1
                else:
                    site = (i + ((0)%2) - 1) % N
                    total_spin[site][j] -= 1
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin.sum(), 1]
                else:
                    priorities[i*N+j] = [-total_spin.sum(), -1]
        return priorities




#score: {'data2D.txt': 0.0009464506172839509}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                total_magnetism = h[i][j]
                if h[i][j] > 0:
                    priorities.append((-total_spin-total_magnetism, 1))
                else:
                    priorities.append((total_spin+total_magnetism, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.0009464506172839509}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
            total_magnetism = h[i][j]
            if h[i][j] > 0:
                priorities.append((-total_spin-total_magnetism, 1))
            else:
                priorities.append((total_spin+total_magnetism, -1))
    return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.0009464506172839509}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                total_magnetism = h[i][j]
                if h[i][j] > 0:
                    priorities.append((-total_spin-total_magnetism, 1))
                else:
                    priorities.append((total_spin+total_magnetism, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.16911280864197556}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N**2, 2), dtype=int)
        priority_total = np.zeros((N**2, 2), dtype=float)
        
        for i in range(N):
            for j in range(N):
                site_sum = sum([state[(i+((k-1)%2)-1)%N][j-k%N] for k in range(3)])
                total_spin[i*N+j] += [site_sum, -site_sum]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], 0]
                else:
                    priority_total[i*N+j] = [-total_spin[i*N+j][1], 0]
        
        return priority_total.tolist()




#score: {'data2D.txt': 0.0336807098765432}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                else:
                    priority[i*N+j][1] = -sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        return priority




#score: {'data2D.txt': -0.09667175925925932}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0 for _ in range(2)] for _ in range(N*N)]
    total_spin = [0 for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site] += h[i][j]
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin[site]
            else:
                priority[i*N+j][1] = -total_spin[site]
    return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return priority




#score: {'data2D.txt': 0.0008711419753086423}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin_1 = 0
                total_spin_2 = 0
                
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin_1 += state[site1][j]
                
                if i > 0:
                    site2 = (i - 1 + ((j-1)%N - 1)) % N
                    total_spin_2 += state[site2][j]
                else:
                    site2 = (i + ((j-1)%N - 1)) % N
                    total_spin_2 += state[site2][j]

                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin_1
                    priority_total[i*N+j][1] = total_spin_2
                else:
                    priority_total[i*N+j][0] = -total_spin_1
                    priority_total[i*N+j][1] = -total_spin_2
                    
        return priority_total




#score: {'data2D.txt': -0.0007470679012345674}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site] += spin
            priority_total[j*N+i, 0] = total_spin[0]
            priority_total[j*N+i, 1] = -total_spin[0]
    for j in range(N):
        if h[0][j] > 0:
            priority_total[j, 0] = total_spin[0]
        else:
            priority_total[j, 1] = -total_spin[0]
    return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[float('-inf') for _ in range(2)] for i in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
                    
        return [list(x) for x in priority]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': -0.00123287037037037}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += -1 if h[i][j] > 0 else 1
        priority_total = [[0,0] for _ in range(N**2)]
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]
        return priority_total




#score: {'data2D.txt': 0.007417746913580248}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = [[0,0] for _ in range(N**2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j%2) - 1)) % N
            total_spin[site][0] += h[i][j]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += -1 if h[i][j] > 0 else 1
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priorities[i][0] = total_spin[i//N][0]
        else:
            priorities[i][1] = -1*total_spin[i//N][0]
    return priorities




#score: {'data2D.txt': 0.3286859567901225}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            total_spin = [[0,0]*N for _ in range(N)]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][site] += state[i][j]
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((total_spin[i][j], 1))
                else:
                    priorities.append((total_spin[i][j], -1))
        return priorities




#score: {'data2D.txt': 0.12278935185185201}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((total_spin[site], -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.20612422839506192}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j] > 0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[i[1], 0-i[0]] for i in priorities]




#score: {'data2D.txt': 0.3340680555555546}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        row_sum = [0 if j == N//2 else sum(J[j*N:(j+1)*N][:i*N+j].sum() for k in range(4)) for j in range(N)]
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                if h[site][j] > 0:
                    total_spin += J[j*N:(j+1)*N][:i*N+j].sum()
                else:
                    total_spin -= J[j*N:(j+1)*N][:i*N+j].sum()
            if h[i][j] > 0:
                priority.append((total_spin, 1))
            else:
                priority.append((-total_spin, -1))
    return priority




#score: {'data2D.txt': -0.0024612654320987663}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[site][0]
                else:
                    priorities[i*N+j][1] = -total_spin[site][0]
        for i in range(N):
            site = (i + ((N-1)%2 - 1)) % N
            total_spin[site][0] += sum(h[k][i] for k in range(N))
            if h[i][0] > 0:
                priorities[i][0] = total_spin[site][0]
            else:
                priorities[i][1] = -total_spin[site][0]
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N,N,2), dtype=int)
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][j] += h[site][0]
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin[i][j]
                else:
                    priority_total[i][j][1] = -total_spin[i][j]
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': 8.132716049382671e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        priority = np.zeros((N**2,2))
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flat[(site*N+j)*4:(site*N+j)*4+1].sum()
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': -0.031488425925925934}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = J.reshape(4,N*N)
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((0)%2 - 1)) % N
                total_spin = J[0][i*N+j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, h[i][j]]
                else:
                    priority_total[i*N+j] = [-total_spin, -h[i][j]]
        return priority_total




#score: {'data2D.txt': 0.026356018518518518}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if (i+j) % 2 ==0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        
        return priority_total.tolist()




#score: {'data2D.txt': 0.16115385802469093}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin[j] += state[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i][0] > 0:
                priority_total[i*N, 0] = total_spin.sum()
            else:
                priority_total[i*N, 1] = -total_spin.sum()
            for j in range(1,N):
                site = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] += state[site][j]
                else:
                    priority_total[(i*N+j), 1] -= state[site][j]
        return priority_total.tolist()




#score: {'data2D.txt': -0.0021584876543209877}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [x for x in sorted(priorities)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site_neighbors = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
                for k in range(3):
                    if h[site_neighbors[k]][j] > 0:
                        total_spin += state[site_neighbors[k]][j]
                    else:
                        total_spin -= state[site_neighbors[k]][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.000583796296296295}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      J_flat = J.reshape((4*N**2,))
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          total_spin = 0
          for j in range(N):
              for k in range(4):
                  site = (i + ((k-1)%2 - 1)) % N
                  total_spin += J_flat[(site*N+3-j)%N::].sum()
              if h[i][j] > 0:
                  priorities.append([(total_spin, 1)])
              else:
                  priorities.append([(-total_spin, -1)])
      return [i[0] for i in priorities]




#score: {'data2D.txt': 0.11460447530864211}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        priority = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flat[(site*N+j)*4:(site*N+j)*4+1].sum()
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin, 1]
                else:
                    priority[i*N+j] = [-total_spin, -1]
        return priority




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,N), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][site] += h[i][j]
                
                if h[i][j] > 0:
                    priority_total = -total_spin[i].sum()
                else:
                    priority_total = total_spin[i].sum()
                    
                priorities.append((priority_total, 1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [state[(i + ((k-1)%2 - 1)) % N][j] if k%2==1 else state[i][(j + ((k-1)%2 - 1)) % N] for k in range(4)]
                total_spin_sum = sum(total_spin)
                if h[i][j] > 0:
                    priorities.append((total_spin_sum, 1))
                else:
                    priorities.append((-total_spin_sum, -1))
        return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.02664151234567902}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0, 0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin = sum(h[site][k] for k in range(N))
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin
            else:
                priority[i*N+j][1] = -total_spin
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': -0.0018192901234567898}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin_sum = 0
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin_sum += site_spin * state[site][max(0,j-k)%N]
                if h[i][j] > 0:
                    priorities.append((total_spin_sum, 1))
                else:
                    priorities.append((-total_spin_sum, -1))
        return sorted(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2))
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[site][j] > 0:
                        total_spin += 1
                    else:
                        total_spin -= 1
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin, 1]
                else:
                    priority[i*N+j] = [-total_spin, -1]
        return priority




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x,y] for x,y in sorted(priorities)]




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.00021219135802469157}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N) - N//2) % N
            total_spin[site] += state[i][j]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[(i*N+j),0] = total_spin[site]
            else:
                priority_total[(i*N+j),1] = -total_spin[site]
    return priority_total




#score: {'data2D.txt': -0.003907870370370373}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_list = []
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0, min(j+k,N)-1)] * state[i][j-k%N] 
                                  for k in range(max(0, j-N), min(j+N, 2*N)+1)])
                if h[i][j] > 0:
                    priority_list.append((total_spin, 1))
                else:
                    priority_list.append((-total_spin, -1))
        
        return priority_list




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site_neighbors = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
                for k in range(3):
                    if h[site_neighbors[k]][j] > 0:
                        total_spin += state[site_neighbors[k]][j]
                    else:
                        total_spin -= state[site_neighbors[k]][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, 0]
                else:
                    priority_total[i*N+j] = [-total_spin, 1]
        
        return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site_neighbors = [(i + ((k-1)%2 - 1)) % N for k in range(4)] 
                for k in range(4): 
                    if h[site_neighbors[k]][j] > 0:
                        total_spin += state[site_neighbors[k]][j]
                    else:
                        total_spin -= state[site_neighbors[k]][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site_neighbors = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
                for k in range(4):
                    if h[site_neighbors[k]][j] > 0:
                        total_spin += state[site_neighbors[k]][j]
                    else:
                        total_spin -= state[site_neighbors[k]][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': 8.132716049382671e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        priority = np.zeros((N**2,2))
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flat[(site*N+j)*4:(site*N+j)*4+1].sum()
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': 0.00016404320987654263}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], 1))
        return [[x,y] for x,y in sorted(priorities)]




#score: {'data2D.txt': -0.0009220679012345682}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site_sum = sum([state[k][(i+j)%N] for k in range(N) if k != i])
                priority_total = site_sum + h[i][j]
                if h[i][j] > 0:
                    priorities.append((priority_total, -1))
                else:
                    priorities.append((-priority_total, 1))
        return [[x,y] for x,y in sorted(priorities)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += h[i][j]
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i][j] = (total_spin[i][j], 1)
                else:
                    priority_total[i][j] = (-total_spin[i][j], -1)
        return priority_total.reshape((N*N,2)).tolist()




#score: {'data2D.txt': 0.11460447530864211}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        priority = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flat[(site*N+j)*4:(site*N+j)*4+1].sum()
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin, 1]
                else:
                    priority[i*N+j] = [-total_spin, -1]
        return priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority.tolist()




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[a[0], a[1]] for a in sorted(priorities)]




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': 0.16438472222222242}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return priorities




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.005123611111111112}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] * state[i][(j+((k-1)%2 - 1)) % N] for k in range(3)])
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = total_spin
                    priorities[i*N+j, 1] = 1
                else:
                    priorities[i*N+j, 0] = -total_spin
                    priorities[i*N+j, 1] = -1
        return priorities.tolist()




#score: {'data2D.txt': -0.0009708333333333332}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if k%2 == 0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0008381172839506171}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum([J[k][site][j-k%N] if k%2 == 0 else -J[k][site][j-k%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.001272993827160494}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += 1 if h[i][j] > 0 else -1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += 1 if h[site][j] > 0 else -1
        priorities = []
        for i in range(N*N):
            if h[i//N][i%N] > 0:
                priorities.append((-total_spin[i//N][0], 1))
            else:
                priorities.append((total_spin[i//N][0], -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0011856481481481481}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][j] + state[i][(j+(k-1)%2 - 1)]%N for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0011856481481481481}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][j] + state[i][(j+(k-1)%2 - 1)]%N for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0011856481481481481}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][j] + state[i][(j+(k-1)%2 - 1)]%N for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0022162037037037033}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                
                priorities.append((priority_total, -1))
        return [row for row in priorities]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += h[site][j]
                
                if h[i][j] > 0:
                    priority_total = -total_spin[i].sum()
                else:
                    priority_total = total_spin[i].sum()
                    
                priorities.append((priority_total, -1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        priorities = []
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += h[site][j]
                
                if h[i][j] > 0:
                    priority_total = -total_spin[i].sum()
                else:
                    priority_total = total_spin[i].sum()
                    
                priorities.append((priority_total, 1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': 0.010818672839506174}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = [0]*N
            for j in range(N):
                site = (i + ((j-1)%N) - N//2) % N
                total_spin[site] += state[i][j]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[j]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[j]
        return priority_total




#score: {'data2D.txt': 0.00902361111111111}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site_spin = -1 if h[i][j] > 0 else 1
            for k in range(4):
                site = (i + ((k-1)%2 - 1)) % N
                total_priority[i*N+j][0] += site_spin * J[k%4][site][min((j+k)%N,N-1)]
    return total_priority




#score: {'data2D.txt': 0.01271496913580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_priority[i*N+j][0] += site_spin * J[k][site][j]
        return total_priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=float)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j, 0] = total_spin
            else:
                priority_total[i*N+j, 1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': 0.2313328703703704}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site_sum = sum([state[(i+((k-1)%2)-1)%N][j-k%N] for k in range(3)])
            total_spin[i*N+j][0] += site_sum
            if h[i][j] > 0:
                total_spin[i*N+j][1] = -total_spin[i*N+j][0]
            else:
                total_spin[i*N+j][1] = total_spin[i*N+j][0]
    return [list(i) for i in total_spin]




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [x for x in sorted(priorities)]




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [x for x in sorted(priorities)]




#score: {'data2D.txt': -0.0021584876543209877}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [x for x in sorted(priorities)]




#score: {'data2D.txt': 1.6820987654320997e-05}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[x[1],-x[0]] for x in sorted(priorities,reverse=True)]




#score: {'data2D.txt': -0.0009183641975308645}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[x[1],-x[0]] for x in sorted(priorities,reverse=True)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if 0 <= k-j <= N-1 else 0 for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.14871250000000028}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = J.reshape(4,N*N)
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[k][i*N+j]
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0004084876543209872}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    total_spin[site][0] += state[i][j]
        for i in range(N*N):
            if h[i//N][i%N] > 0:
                priorities.append((total_spin[i//N][0], 1))
            else:
                priorities.append((-total_spin[i//N][0], -1))
        return [[x[1],-x[0]] for x in sorted(priorities,reverse=True)]




#score: {'data2D.txt': -0.0009183641975308645}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[x[1],-x[0]] for x in sorted(priorities,reverse=True)]




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append([total_spin, 1])
            else:
                priorities.append([-total_spin, -1])
    return(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        prior = np.zeros((N*N,2),dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    prior[i*N+j,0] = total_spin
                else:
                    prior[i*N+j,1] = -total_spin
        return prior




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) // N * N + (j+1)%N) % N
                total_spin[i][j] += h[site][0]
                priorities[(i*N+j), 1] = total_spin[i][j]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) // N * N + (j+1)%N) % N
                if h[site][0] > 0:
                    priorities[(i*N+j), 0] = total_spin[i][j]
                else:
                    priorities[(i*N+j), 1] = -total_spin[i][j]
        return priorities




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return sorted(priorities)




#score: {'data2D.txt': 0.008250462962962963}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        spin = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        total_spin = [0]*N
        for i in range(N):
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site] += spin[i][site]
            if h[i][site] > 0:
                priority_total[(i*N+site), 0] = total_spin[site]
            else:
                priority_total[(i*N+site), 1] = -total_spin[site]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]  
        total_spin = [[0,0] for _ in range(N**2)]  
        for i in range(N):  
            for j in range(N):  
                site = (i + ((j-1)%N - 1)) % N 
                for k in range(3):  
                    neighbor_site = (site + ((k-1)%2 - 1)) % N 
                    total_spin[i*N+j][0] += state[neighbor_site][j]%2  
        return total_spin




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = [[0 for _ in range(2)] for _ in range(N*N)]
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities[i*N+j] = [total_spin, 1]
            else:
                priorities[i*N+j] = [-total_spin, -1]
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin
                else:
                    priorities[(i*N+j), 1] = -total_spin
        return priorities




#score: {'data2D.txt': 0.0042192901234567905}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += site_spin * state[min(i+1,N-1)][max(j-k%N,0)]
                if h[i][j] > 0:
                    priorities[(i*N+j),0] = np.sum(total_spin)
                else:
                    priorities[(i*N+j),1] = -np.sum(total_spin)
        return priorities.tolist()




#score: {'data2D.txt': -0.0010032407407407412}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin_sum = 0
            for k in range(4):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][j] += state[i][j]
            if h[i][j] > 0:
                priorities.append((-total_spin.sum(), 1))
            else:
                priorities.append((total_spin.sum(), -1))
    return sorted(priorities)




#score: {'data2D.txt': -0.0011856481481481481}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][j] + state[i][(j+(k-1)%2 - 1)]%N for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0011856481481481481}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][j] + state[i][(j+(k-1)%2 - 1)]%N for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.00438070987654321}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                total_spin[1] -= h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+0][0] = total_spin[0]
                priority_total[i*N+0][1] = -total_spin[1]
            else:
                priority_total[i*N+N-1][0] = -total_spin[0]
                priority_total[i*N+N-1][1] = total_spin[1]
        for j in range(N):
            for i in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[j*N+i][0] += state[site][j]
                    priority_total[j*N+i][1] -= state[site][j]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N**2)]
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += h[i][j]
        for j in range(N):
            if h[i][j] > 0:
                priority[j][0] = total_spin[j][0]
            else:
                priority[j][1] = -1*total_spin[j][0]
        return priority




#score: {'data2D.txt': -0.3284013888888879}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += site_spin
                if h[i][j] > 0:
                    priorities.append((np.sum(total_spin), 1))
                else:
                    priorities.append((-np.sum(total_spin), -1))
        return priorities




#score: {'data2D.txt': 0.048527623456790125}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                total_spin = sum([site_spin * state[(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(3)])
                priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': 0.23138132716049378}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        total_spin = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = -1 if h[site][j] > 0 else 1
                total_spin[i*N+j][state==1] += 1
        priority_total = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i][1] = -total_spin[i*N+j][0]
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority[i*N+j] = [-x for x in priority_total[j]]
                else:
                    priority[i*N+j] = [x for x in priority_total[j]]
        return priority




#score: {'data2D.txt': 0.06969429012345683}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = [state[site][k] for k in range(3)]
                if h[i][j] > 0:
                    priorities.append((sum(total_spin), 1))
                else:
                    priorities.append((-sum(total_spin), -1))
        return [[x for x in row] for row in priorities]




#score: {'data2D.txt': 0.008205709876543212}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0]*N
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], -1))
        return priorities




#score: {'data2D.txt': 0.04972947530864199}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                total_spin = sum([row_sum[k] * state[site1][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0016124999999999998}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    
    for i in range(N):
        total_spin = 0
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
        if h[i][0] > 0:
            priority_total[i*N+j][0] = total_spin
        else:
            priority_total[i*N+j][1] = -total_spin
        
        for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += state[site][j]
            if h[i][0] > 0:
                priority_total[i*N+j][0] += total_spin
            else:
                priority_total[i*N+j][1] -= total_spin
    
    for j in range(N):
        if h[i][j] > 0:
            priority_total[j][0] = priority_total[i*N+j][0]
        else:
            priority_total[j][1] = -priority_total[i*N+j][0]
    
    return priority_total




#score: {'data2D.txt': -0.004106635802469135}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = np.zeros((N2,2), dtype=int)
    
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            site1 = (i + ((j-1)%N - 1)) % N
            total_spin[0] += h[site1][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[0]
            else:
                priority_total[i*N+j][1] = -total_spin[0]
            
            site2 = (i + ((N-1-j)%N - 1)) % N
            total_spin[1] += h[site2][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] += total_spin[1]
            else:
                priority_total[i*N+j][1] -= total_spin[1]
    
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N, 2), dtype=int)
    for i in range(N):
        total_spin = np.zeros(2, dtype=int)
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[0] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j, 0] = total_spin[0]
            else:
                priority_total[i*N+j, 1] = -total_spin[0]
    return priority_total.tolist()




#score: {'data2D.txt': -0.007382561728395061}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin[i][0] += h[site][j]
        if h[site][j] > 0:
          priority[i*N+j] = [total_spin[i][0], 0]
        else:
          priority[i*N+j] = [-total_spin[i][0], 1]
    return priority




#score: {'data2D.txt': -0.007382561728395061}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
                if h[site][j] > 0:
                    priority[i*N+j] = [total_spin[i][0], 0]
                else:
                    priority[i*N+j] = [-total_spin[i][0], 1]
        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0.0 for _ in range(2)] for _ in range(N**2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority_list[i*N+j][:] = [total_spin[site][0], 1]
                else:
                    priority_list[i*N+j][:] = [-total_spin[site][0], -1]
        return priority_list




#score: {'data2D.txt': -0.06522577160493831}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], 1))
                else:
                    priorities.append((-total_spin[site][0], -1))
        return priorities




#score: {'data2D.txt': -0.05155447530864201}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_list = [[0,0] for _ in range(N**2)]
    total_spins = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spins[i] += h[site][j]
            if h[i][j] > 0:
                priority_list[i*N+j][0] = total_spins[i]
            else:
                priority_list[i*N+j][1] = -total_spins[i]
    for i in range(N):
        site = (i + ((N-1)%2 - 1)) % N
        if h[i][site] > 0:
            priority_list[i*N+site][0] += sum([h[k][site] for k in range(N)])
        else:
            priority_list[i*N+site][1] -= sum([h[k][site] for k in range(N)])
    site = (N-1 + ((0)%2 - 1)) % N
    if h[site][j] > 0:
        priority_list[site][0] += sum([h[j][k] for k in range(N)])
    else:
        priority_list[site][1] -= sum([h[j][k] for k in range(N)])
    return priority_list




#score: {'data2D.txt': -0.05155447530864201}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i]
                else:
                    priority_total[i*N+j][1] = -total_spin[i]
        for i in range(N):
            site = (i + ((N-1)%2 - 1)) % N
            if h[i][site] > 0:
                priority_total[i*N+site][0] += sum([h[k][site] for k in range(N)])
            else:
                priority_total[i*N+site][1] -= sum([h[k][site] for k in range(N)])
        site = (N-1 + ((0)%2 - 1)) % N
        if h[site][j] > 0:
            priority_total[site][0] += sum([h[j][k] for k in range(N)])
        else:
            priority_total[site][1] -= sum([h[j][k] for k in range(N)])
        return priority_total




#score: {'data2D.txt': -0.0005060185185185183}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = 1 if h[i][j] > 0 else -1
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][spin==1] += 1
    priority_total = np.zeros((N,2), dtype=int)
    for j in range(N):
        if h[i][j] > 0:
            priority_total[j][0] = total_spin[j][0]
        else:
            priority_total[j][1] = -total_spin[j][0]
    for i in range(N):
        for j in range(N):
            if spin == 1:
                priority[i*N+j] = [-x for x in priority_total[j]]
            else:
                priority[i*N+j] = [x for x in priority_total[j]]
    return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j),0] = total_spin
                else:
                    priority[(i*N+j),1] = -total_spin
        return priority.tolist()




#score: {'data2D.txt': -0.0021128086419753087}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][spin==1] += 1
    priority_total = np.zeros((N,2), dtype=int)
    for j in range(N):
        if h[i][j] > 0:
            priority_total[j][0] = total_spin[j][0]
        else:
            priority_total[j][1] = -total_spin[j][0]
    for i in range(N):
        for j in range(N):
            if spin == 1:
                priority[i*N+j] = [-x for x in priority_total[j]]
            else:
                priority[i*N+j] = [x for x in priority_total[j]]
    return priority




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_list = []
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_list.append((total_spin, 1))
                else:
                    priority_list.append((total_spin, -1))
        
        return sorted(priority_list)




#score: {'data2D.txt': -0.00041805555555555574}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N_square = N * N
        priority_list = []
        for i in range(N):
            row_sum = sum(h[i])
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_list.append((total_spin[0], 1))
                else:
                    priority_list.append((-total_spin[0], -1))
        return sorted(priority_list)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j, 0] = total_spin
                else:
                    priority[i*N+j, 1] = -total_spin
        return priority.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return priority




#score: {'data2D.txt': -0.004206944444444445}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[1] += state[site][j]
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[1]
                else:
                    priority_total[j][1] = -total_spin[1]
        return priority_total




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_list = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_list.append((total_spin, 1))
            else:
                priority_list.append((-total_spin, -1))
    return [priority_list[i*N+j] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.0014581790123456796}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += state[site][j]*h[i][j]
            if h[i][0] > 0:
                priority_total[i*N: (i+1)*N,0] = total_spin[0]
            else:
                priority_total[i*N:(i+1)*N,1] = -total_spin[0]
        for i in range(N):
            total_spin = [0,0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[0] += state[site][i]
            if h[i][i] > 0:
                priority_total[i*N+i,0] = total_spin[0]
            else:
                priority_total[i*N+i,1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.0014702160493827163}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N**2
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N) // N) % N
                total_spin[j] += state[site][j]
        for j in range(N**2):
            if h[j//N][j%N] > 0:
                priorities.append((total_spin[j], 1))
            else:
                priorities.append((total_spin[j], -1))
        return [[priority[0], priority[1]] for priority in sorted(priorities, reverse=True)]




#score: {'data2D.txt': -0.0021128086419753087}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][spin==1] += 1
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
        for i in range(N):
            for j in range(N):
                if spin == 1:
                    priority[i*N+j] = [-x for x in priority_total[j]]
                else:
                    priority[i*N+j] = [x for x in priority_total[j]]
        return priority




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][spin==1] += 1
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority[i*N+j] = [x+total_spin[site][1] for x in priority_total[j]]
                else:
                    priority[i*N+j] = [-x-total_spin[site][0] for x in priority_total[j]]
        return priority




#score: {'data2D.txt': 0.0022603395061728407}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[float('inf'), float('-inf')] for _ in range(N2)]
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    spin = 1
                else:
                    spin = -1
                site = (i + ((j-1)%N - 1)) % N
                total_spin[spin] += state[i][j]
                priority[i*N+j] = [total_spin[0], -total_spin[1]]
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    s = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[s][j]
                    
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, 1))
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,N), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][site] += h[i][j]
                
                if h[i][j] > 0:
                    priority_total = -total_spin[i].sum()
                else:
                    priority_total = total_spin[i].sum()
                    
                priorities.append((priority_total, 1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,N), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][site] += h[i][j]
                
                if h[i][j] > 0:
                    priority_total = -total_spin[i].sum()
                else:
                    priority_total = total_spin[i].sum()
                    
                priorities.append((priority_total, 1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0005322530864197532}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site_spin = -1 if h[site][((k-1)%N)] > 0 else 1
                    total_spin += site_spin * (-1)**(k%2)
                priorities[i*N+j] = [total_spin, 1]
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': -0.00040787037037036985}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[sum(state[i][:k]+state[i][k+1:]) for k in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    site_sum += total_spin[site][j]
                if h[i][j] > 0:
                    priority_total[j*N+i, 0] = site_sum
                else:
                    priority_total[j*N+i, 1] = -site_sum
        return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum2 = (-np.prod(J_new[1::2], 0) - h).flatten()
        priority = np.column_stack((sum1, -sum2))
        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        spin = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += spin[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return [list(x) for x in priority]




#score: {'data2D.txt': -0.0002998456790123456}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            total_spin = np.zeros((N,2), dtype=int)
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((total_spin[j][0], 1))
                else:
                    priorities.append((-total_spin[j][0], -1))
        return sorted(priorities,reverse=True)




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.19093379629629656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N,2))
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin[i][j][0] = -1
                    total_spin[i][j][1] = 1
                else:
                    total_spin[i][j][0] = 1
                    total_spin[i][j][1] = -1
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][j] += total_spin[site][j]
        priority = []
        for i in range(N*N):
            if h[int(i/N)][i%N] > 0:
                priority.append((total_spin[int(i/N)][i%N][0], -1))
            else:
                priority.append((total_spin[int(i/N)][i%N][1], 1))
        return priority




#score: {'data2D.txt': -0.00091466049382716}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                state = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[site*N:site*N+N, j].sum() * state
                priority_list[i*N+j][:] = [total_spin, -total_spin]
        return priority_list




#score: {'data2D.txt': 0.001082253086419753}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0 for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = h[site][j]
            if h[i][j] > 0:
                priority[i*N+j][:] = [total_spin, -total_spin]
            else:
                priority[i*N+j][:] = [-total_spin, total_spin]
    return priority




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0019418209876543213}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin = 0
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin += state[site][j]
                    priority_total[i*N+j][0] = total_spin
                else:
                    total_spin = 0
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin -= state[site][j]
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.00220570987654321}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    
    for i in range(N):
      total_spin = [0]*2
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin[0] += h[site][j]
        if h[i][j] > 0:
          priority_total[i*N+j][0] = total_spin[0]
        else:
          priority_total[i*N+j][1] = -total_spin[0]
        
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          if h[i][j] > 0:
            total_spin[0] += state[site][j]
          else:
            total_spin[1] -= state[site][j]
        
        for j in range(N):
          site = (i + ((j-1)%N - 1)) % N
          if h[i][j] > 0:
            priority_total[j][0] = total_spin[0]
          else:
            priority_total[j][1] = -total_spin[0]
    
    return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        priorities = []
        
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    site = (i + ((j-1)%N - 1)) % N
                    total_spin[i][0] += h[site][j]
                    priorities.append((total_spin[i][0], 1))
                else:
                    site = (i + ((j-1)%N - 1)) % N
                    total_spin[i][1] -= h[site][j]
                    priorities.append((total_spin[i][1], -1))
        
        return priorities




#score: {'data2D.txt': -0.0016399691358024691}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        
        for i in range(N):
            priorities = []
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += state[site][j]
            if h[i][0] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.00028996913580246894}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if abs(k-j) <= 1 else 0 for k in range(min(j+2,N))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x,y] for x,y in sorted(priorities)]




#score: {'data2D.txt': 0.06258564814814817}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            for k in range(3):
                site = (j + ((k-1)%2 - 1)) % N
                total_spin[site][0] += state[j][(k+1)%N]
        priorities = []
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priorities.append((total_spin[i//N][0], 1))
            else:
                priorities.append((total_spin[i//N][1], -1))
        return priorities




#score: {'data2D.txt': -0.0003945987654320987}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((total_spin, -1))
      return [[p[1], p[0]] for p in sorted(priorities, reverse=True)]




#score: {'data2D.txt': 0.008250462962962963}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priority_total = np.zeros((N*N,2), dtype=int)
      total_spin = [0]*N
      for i in range(N):
          for k in range(3):
              site = (i + ((k-1)%2 - 1)) % N
              total_spin[site] += state[i][site]
          if h[i][site] > 0:
              priority_total[(i*N+site), 0] = total_spin[site]
          else:
              priority_total[(i*N+site), 1] = -total_spin[site]
      return priority_total




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append([total_spin, 0])
                else:
                    priority.append([-total_spin, 1])
        return priority




#score: {'data2D.txt': 0.16559459876543234}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = J.reshape(4,N*N)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i + ((k-1)%2 - 1)) % N + (j-k%N)*N] * state[(i + ((k-1)%2 - 1)) % N][max(0,j-k)] for k in range(3)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.019882253086419752}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if abs(k-j)%2==0 else 0 for k in range(min(j,N-1))])
                priorities.append((total_spin, -1) if h[i][j] > 0 else (total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = np.zeros((N2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.010946450617283951}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin[i][j] += 1
                else:
                    total_spin[i][j] -= 1
        priority_total = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    total_spin[site][0] += total_spin[i][j]
                else:
                    total_spin[site][0] -= total_spin[i][j]
        priority_total = [[total_spin[i][j], 1] if h[i][j] > 0 else [-total_spin[i][j], -1] for i in range(N) for j in range(N)]
        return priority_total




#score: {'data2D.txt': 0.1745115740740743}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = J.reshape(4,N*N)
        priority_list = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[k,N*site+j]
                if h[i][j] > 0:
                    priority_list[i*N+j] = [total_spin, 1]
                else:
                    priority_list[i*N+j] = [-total_spin, -1]
        
        return priority_list




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin
                else:
                    priorities[(i*N+j), 1] = -total_spin
        return priorities.tolist()




#score: {'data2D.txt': -0.0006658950617283955}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((total_spin[i][j][0], 1))
                else:
                    priorities.append((-total_spin[i][j][0], -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0008381172839506171}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum([J[k][site][j-k%N] if k%2 == 0 else -J[k][site][j-k%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0008381172839506171}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum([J[k][site][j-k%N] if k%2 == 0 else -J[k][site][j-k%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.001966512345679012}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N * N
        priority_list = [[0, 0] for _ in range(N2)]
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_list[i*N+j][0] = total_spin
            else:
                priority_list[i*N+j][1] = -total_spin
        for j in range(N):
            if h[i][j] > 0:
                priority_list[j][0] = priority_list[N2-j-1][0]
            else:
                priority_list[j][1] = -priority_list[N2-j-1][1]
        return priority_list




#score: {'data2D.txt': -0.3099924382716045}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] = priority_total[0][0]
            else:
                priority_total[j][1] = -priority_total[0][0]
        return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[0, 0] for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            site_sum = [0]*2
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                site_sum[0 if h[i][j] > 0 else 1] += state[site][j]
            priority_total[i*N+j] = site_sum
    
    return [[x for x in row] for row in priority_total]




#score: {'data2D.txt': 0.146027314814815}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_total.append((-total_spin, -1))
                else:
                    priority_total.append((total_spin, 1))
        return priority_total




#score: {'data2D.txt': -0.001049228395061728}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += spin
                priorities.append((total_spin[site][0], spin))
        return priorities




#score: {'data2D.txt': 0.3060847222222215}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[(site*N+3-j)%N::].sum()
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                    priorities[i*N+j][1] = 1
                else:
                    priorities[i*N+j][0] = -total_spin
                    priorities[i*N+j][1] = -1
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape((4*N**2,))
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        
        return [[i[0], i[1]] for i in priorities]




#score: {'data2D.txt': -0.0017270061728395063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_interactions = []
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k-j+N < N and k-j-N >= 0:
                        site_interactions.append(J[site, j-k%N].flatten()[0])
                    else:
                        site_interactions.append(h[site][j])
                total_spin[i*N+j] = [sum(site_interactions), -sum(site_interactions)]
        return sorted(total_spin)




#score: {'data2D.txt': -0.0017652777777777773}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k-j+N < N and k-j-N >= 0:
                        total_spin[0] += J[site, j-k%N].flatten()[0]
                    else:
                        total_spin[0] += h[site][j]
                for spin in [-1,1]:
                    priority_total = sum([spin*h[i][j] for j in range(N)])
                    priorities.append((priority_total + sum([spin*J[site, j-k%N].flatten()[0] for k in range(4) if k-j+N < N and k-j-N >= 0]), spin))
        return sorted(priorities)[::-1][:N*N]




#score: {'data2D.txt': -0.0320368827160494}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N, 2), dtype=int)
    for i in range(N):
        total_spin = [0, 0]
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[0] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[0]
            else:
                priority_total[i*N+j][1] = -total_spin[0]
    return priority_total.tolist()




#score: {'data2D.txt': -0.0010643518518518517}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], -1))
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': 0.0010452160493827159}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = np.array(J).reshape(4,N,N)
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[0][i][site]
                if h[i][j] > 0:
                    priority_total[(i*N+j),0] = total_spin
                else:
                    priority_total[(i*N+j),1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': 0.010939660493827158}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = [[0,0] for _ in range(N2)]
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += state[site][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority[i*N+j][1] = -total_spin[i*N+j][0]
                    
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N, 2), dtype=int)
        for j in range(N):
            spin = -1 if h[0][j] > 0 else 1
            for i in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][spin] += 1
            for i in range(N):
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i][0]
                else:
                    priority[i*N+j][1] = -total_spin[i][0]
        return priority




#score: {'data2D.txt': -0.0015180555555555553}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        for i in range(N):
            total_spin = [0, 0]
            for j in range(N):
                site = (i + ((j)%N - 1)) % N
                if h[i][j] > 0:
                    total_spin[0] += state[site][j]
                else:
                    total_spin[1] -= state[site][j]
            for k in range(2):
                priority[i*N+j][k] = total_spin[k]
        return priority




#score: {'data2D.txt': -0.05414922839506174}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
        for i in range(N):
            row_sum = sum(h[i])
            for j in range(N):
                if h[i][j] > 0:
                    priority[i*N+j][0] += row_sum
                else:
                    priority[i*N+j][1] -= row_sum
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
                    
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N * N
        priority_list = [[0,0] for _ in range(N2)]
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][j] += h[i][j]
        for i in range(N):
            if h[i][0] > 0:
                priority_list[i*N+j][0] = total_spin[i][0]
            else:
                priority_list[i*N+j][1] = -total_spin[i][0]
            if h[i][N-1] > 0:
                priority_list[i*N+N-1-j][0] = total_spin[i][N-1-j]
            else:
                priority_list[i*N+N-1-j][1] = -total_spin[i][N-1-j]
        for i in range(N):
            if h[0][i] > 0:
                priority_list[j][0] = total_spin[0][j]
            else:
                priority_list[j][1] = -total_spin[0][j]
            if h[N-1][i] > 0:
                priority_list[i*N+N-1-j][0] = total_spin[N-1-j][i]
            else:
                priority_list[i*N+N-1-j][1] = -total_spin[N-1-j][i]
        return priority_list




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N * N
    priority_list = [[0, 0] for _ in range(N2)]
    total_spin = np.zeros((N, 2), dtype=int)
    for i in range(N):
      spin = -1 if h[i][0] > 0 else 1
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[site][0] += spin
      priority_total = np.zeros((N,2), dtype=int)
      for j in range(N):
        if h[i][j] > 0:
          priority_total[j][0] = total_spin[j][0]
        else:
          priority_total[j][1] = -1*total_spin[j][0]
    return priority_list




#score: {'data2D.txt': -0.00029243827160493766}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = np.zeros((N2, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = [0, 0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[1 if h[i][j] > 0 else 0] += h[site][j]
                priority_total[i*N+j][1 if h[i][j] > 0 else 0] = total_spin[1 if h[i][j] > 0 else 0]
        
        return priority_total




#score: {'data2D.txt': -0.0067242283950617295}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = np.zeros((N2,2), dtype=int)
    total_spin = 0
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j),0] = total_spin
            else:
                priority_total[(i*N+j),1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': 8.935185185185229e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N) // N) % N
            total_spin[site][0] += state[i][j]
            if h[i][j] > 0:
                priorities.append((total_spin[site][0], 1))
            else:
                priorities.append((total_spin[site][0], -1))
    return [priority for priority in sorted(priorities, reverse=True)]




#score: {'data2D.txt': 0.24635231481481468}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] * state[i][(j+((k-1)%2 - 1)) % N] for k in range(3)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                
                if h[i][j] > 0:
                    priority = [total_spin, 1]
                else:
                    priority = [-total_spin, -1]
                    
                priorities.append(priority)
        
        return priorities




#score: {'data2D.txt': -0.051907561728395064}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[(i + ((j-1)%2 - 1)) % N][min(j,N-1)] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((-total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return [[p[1], p[0]] for p in priorities]




#score: {'data2D.txt': 0.0008711419753086423}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin_1 = 0
                total_spin_2 = 0
                
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin_1 += state[site1][j]
                
                if i > 0:
                    site2 = (i - 1 + ((j-1)%N - 1)) % N
                    total_spin_2 += state[site2][j]
                else:
                    site2 = (i + ((j-1)%N - 1)) % N
                    total_spin_2 += state[site2][j]

                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin_1
                    priority_total[i*N+j][1] = total_spin_2
                else:
                    priority_total[i*N+j][0] = -total_spin_1
                    priority_total[i*N+j][1] = -total_spin_2
                    
        return priority_total




#score: {'data2D.txt': 0.0008711419753086423}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin_1 = 0
                total_spin_2 = 0
                
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin_1 += state[site1][j]
                
                if i > 0:
                    site2 = (i - 1 + ((j-1)%N - 1)) % N
                    total_spin_2 += state[site2][j]
                else:
                    site2 = (i + ((j-1)%N - 1)) % N
                    total_spin_2 += state[site2][j]

                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin_1
                    priority_total[i*N+j][1] = total_spin_2
                else:
                    priority_total[i*N+j][0] = -total_spin_1
                    priority_total[i*N+j][1] = -total_spin_2
                    
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j, 0] = total_spin
            else:
                priority_total[i*N+j, 1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    total_spin = [np.zeros(2) for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i*N+j][0] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i*N+j][0]
            else:
                priority_total[i*N+j][1] = -total_spin[i*N+j][0]
    return [a.tolist() for a in priority_total]




#score: {'data2D.txt': 0.00902361111111111}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_priority[i*N+j][0] += site_spin * J[k%4][site][min((j+k)%N,N-1)]
        return total_priority




#score: {'data2D.txt': 0.00902361111111111}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_priority[i*N+j][0] += site_spin * J[k%4][site][min((j+k)%N,N-1)]
        return [list(x) for x in total_priority]




#score: {'data2D.txt': 0.00902361111111111}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_priority[i*N+j][0] += site_spin * J[k%4][site][min((j+k)%N,N-1)]
        return total_priority




#score: {'data2D.txt': -0.08092669753086419}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                sum_1 = 0
                sum_2 = 0
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if j+k < N:
                        sum_1 += J[k%4][site][min((j+k)%N,N-1)] * site_spin
                        sum_2 += J[k%4][site][min((j+k)%N,N-1)]
                priority_total = [sum_1 - sum_2, sum_1 + sum_2]
                for k in range(2):
                    total_priority[i*N+j][k] = priority_total[k]
        return total_priority




#score: {'data2D.txt': -0.0021128086419753087}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][spin==1] += 1
    priority_total = np.zeros((N,2), dtype=int)
    for j in range(N):
        if h[i][j] > 0:
            priority_total[j][0] = total_spin[j][0]
        else:
            priority_total[j][1] = -total_spin[j][0]
    for i in range(N):
        for j in range(N):
            if spin == 1:
                priority[i*N+j] = [-x for x in priority_total[j]]
            else:
                priority[i*N+j] = [x for x in priority_total[j]]
    return priority




#score: {'data2D.txt': -0.019209104938271607}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = [0 for _ in range(2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[1 if h[i][j] > 0 else 0] += h[i][j]
                priority[i*N+j] = [total_spin[1], -total_spin[0]]
        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    total_spin = np.zeros((N,2), dtype=int)
    priority = [[float('inf') for _ in range(2)] for _ in range(N2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][0] += h[i][j]
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin[site][0]
            else:
                priority[i*N+j][1] = -total_spin[site][0]
    for i in range(N):
        row_sum = sum(h[i])
        for j in range(N):
            if h[i][j] > 0:
                priority[i*N+j][0] += row_sum
            else:
                priority[i*N+j][1] -= row_sum
    return priority




#score: {'data2D.txt': -0.05414922839506174}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][0] += h[i][j]
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin[site][0]
            else:
                priority[i*N+j][1] = -total_spin[site][0]
    for i in range(N):
        row_sum = sum(h[i])
        for j in range(N):
            if h[i][j] > 0:
                priority[i*N+j][0] += row_sum
            else:
                priority[i*N+j][1] -= row_sum
    return priority




#score: {'data2D.txt': -0.06477114197530873}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], 1))
                else:
                    priorities.append((-total_spin[site][0], -1))
        return priorities




#score: {'data2D.txt': 0.007894907407407408}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        total_spin = [0]*N
        for i in range(N):
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site] += state[i][k]
        for j in range(N**2):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j//N]
            else:
                priority_total[j][1] = -total_spin[j//N]
        return priority_total




#score: {'data2D.txt': -0.07669706790123462}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = []
        for i in range(N**2):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][i%N]
            if h[i//N][i%N] > 0:
                priority.append((total_spin, -1))
            else:
                priority.append((total_spin, 1))
        return priority




#score: {'data2D.txt': 0.0001510802469135808}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += state[site][j]
        priority_total = [[0,0] for _ in range(N**2)]
        
        for i in range(N**2):
            if h[int(i//N)][i%N] > 0:
                priority_total[i][0] = total_spin[int(i//N)][0]
            else:
                priority_total[i][1] = -total_spin[int(i//N)][0]
        
        return priority_total




#score: {'data2D.txt': -0.001710339506172839}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[0,0] for _ in range(N**2)]
    
    for i in range(N):
        total_spin = 0
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
        if h[i][0] > 0:
            priority_total[i*N+j][0] = total_spin
        else:
            priority_total[i*N+j][1] = -total_spin
        
        for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin += state[site][j]
        if h[i][j] > 0:
            priorities = [(total_spin, 1)]
        else:
            priorities = [(-total_spin, -1)]
        
    return priority_total




#score: {'data2D.txt': -0.1444520061728397}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-1*total_spin[0], 1))
        return priorities




#score: {'data2D.txt': -0.010197067901234569}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_list = [[0,0] for _ in range(N*N)]
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        total_spin = h[site][j]
        if h[i][j] > 0:
          priority_list[i*N+j][0] = total_spin
        else:
          priority_list[i*N+j][1] = -total_spin
    for i in range(N):
      for j in range(N-2,-1,-1):
        site = (i + ((j-1)%2 - 1)) % N
        total_spin += h[site][j]
        if h[i][j] > 0:
          priority_list[i*N+j][0] = total_spin
        else:
          priority_list[i*N+j][1] = -total_spin
    return priority_list




#score: {'data2D.txt': -0.05197391975308645}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i]
            else:
                priority_total[i*N+j][1] = -total_spin[i]
    for i in range(N):
        if h[i][N-1] > 0:
            priority_total[i*N+N-1][0] += sum([h[i][j] for j in range(N)])
        else:
            priority_total[i*N+N-1][1] -= sum([h[i][j] for j in range(N)])
    for i in range(N):
        if h[0][i] > 0:
            priority_total[i][0] += sum([h[0][j] for j in range(N)])
        else:
            priority_total[i][1] -= sum([h[0][j] for j in range(N)])
    return priority_total




#score: {'data2D.txt': -0.0011856481481481481}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            total_spin = np.zeros((N,2), dtype=int)
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], 1))
                else:
                    priorities.append((-total_spin[site][0], -1))
        return sorted(priorities,reverse=True)




#score: {'data2D.txt': -0.0009183641975308645}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[x[1],-x[0]] for x in sorted(priorities,reverse=True)]




#score: {'data2D.txt': -0.005123611111111112}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] * state[i][(j+((k-1)%2 - 1)) % N] for k in range(3)])
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, 1]
                else:
                    priorities[i*N+j] = [-total_spin, -1]
        return priorities




#score: {'data2D.txt': 0.07977114197530885}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = J.reshape(4,N*N)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] * J[k][(i*N+j)] for k in range(4)])
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, 1]
                else:
                    priorities[i*N+j] = [-total_spin, -1]
        return priorities




#score: {'data2D.txt': 0.1746979938271607}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append([-total_spin, total_spin])
                else:
                    priorities.append([total_spin, -total_spin])
        return priorities




#score: {'data2D.txt': 0.18963657407407436}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = (J_new[0::4] + J_new[1::4]).flatten()
        sum_2 = (J_new[2::4] + J_new[3::4]).flatten()
        priority = np.column_stack((sum_1, -sum_1))
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority[(i*N+j),1] = 1
                else:
                    priority[(i*N+j),1] = -1
        return(priority)




#score: {'data2D.txt': 0.013364043209876542}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[site][0]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[site][0]
        return priority_total




#score: {'data2D.txt': 0.03499737654320991}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_list = []
    for i in range(N**2):
        total_spin = 0
        for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin += state[site][i%N]
        if h[i//N][i%N] > 0:
            priority_list.append((total_spin, 1))
        else:
            priority_list.append((-total_spin, -1))
    return priority_list




#score: {'data2D.txt': -0.002184722222222223}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                state = 1
            else:
                state = -1
            site = (i + ((j-1)%N) - N//2) % N
            total_spin[i*N+j][0] += state
    priority_total = [[0,0] for _ in range(N**2)]
    for j in range(N**2):
        if h[j//N][j%N] > 0:
            priority_total[j][0] = total_spin[j//N][0]
        else:
            priority_total[j][1] = -total_spin[j//N][0]
    return priority_total




#score: {'data2D.txt': -0.00021219135802469157}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N//2) % N
                total_spin[site] += state[i][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[site]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[site]
        return priority_total




#score: {'data2D.txt': -0.00044830246913580185}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [priority for priority in sorted(priorities, reverse=True)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total = [total_spin, h[i][j]]
                else:
                    priority_total = [-total_spin, -h[i][j]]
                priorities.append(priority_total)
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': 8.935185185185229e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      total_spin = np.zeros((N,2), dtype=int)
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - N) // N) % N
              total_spin[site][0] += state[i][j]
              if h[i][j] > 0:
                  priorities.append((total_spin[site][0], 1))
              else:
                  priorities.append((total_spin[site][0], -1))
      return [priority for priority in sorted(priorities, reverse=True)]




#score: {'data2D.txt': 0.06863750000000002}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[site][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[site][0]
        return priority_total




#score: {'data2D.txt': -0.09538009259259264}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0, 0] for _ in range(N*N)]
        total_spin = [0] * N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site]
                else:
                    priority[i*N+j][1] = -total_spin[site]
        return priority




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[1] += state[site][j]
                    else:
                        total_spin[0] += state[site][j]
                priorities.append(total_spin)
        return priorities




#score: {'data2D.txt': 0.007989351851851853}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[1 if state[i][j] == state[site][((k+2)%3)-1] else 0] += 1 if h[i][j] > 0 else -1
                priorities.append(total_spin)
        return np.array(priorities)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N), dtype=int)
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i][site] += h[i][j]
            
            if h[i][j] > 0:
                priority_total = -total_spin[i].sum()
            else:
                priority_total = total_spin[i].sum()
                
            priorities.append((priority_total, 1))
    return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0027128086419753086}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0,0] for _ in range(N**2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][0] += h[site][j]
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = total_spin[i][0]
                else:
                    priority_list[i*N+j][1] = -total_spin[i][0]
        for j in range(N):
            if h[i][j] > 0:
                priority_list[i*N+j][0] += sum([h[k][j] for k in range(N)])
            else:
                priority_list[i*N+j][1] -= sum([h[k][j] for k in range(N)])
        return priority_list




#score: {'data2D.txt': -0.0011458333333333333}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N = int(N)
    priorities = [[0,0] for _ in range(N**2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][0] += h[site][j]
                priorities[i*N+j][0] = total_spin[i][0]
            else:
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][1] -= h[site][j]
                priorities[i*N+j][1] = -total_spin[i][1]
    for i in range(N):
        if h[i][N-1-i] > 0:
            site = (i + ((N-1)%2 - 1)) % N
            total_spin[i][0] += sum([h[k][site] for k in range(N)])
            priorities[i*N+site][0] = total_spin[i][0]
        else:
            site = (i + ((N-1)%2 - 1)) % N
            total_spin[i][1] -= sum([h[k][site] for k in range(N)])
            priorities[i*N+site][1] = -total_spin[i][1]
    return priorities




#score: {'data2D.txt': 0.00438070987654321}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                total_spin[1] -= h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+0][0] = total_spin[0]
                priority_total[i*N+0][1] = -total_spin[1]
            else:
                priority_total[i*N+N-1][0] = -total_spin[0]
                priority_total[i*N+N-1][1] = total_spin[1]
        for j in range(N):
            for i in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[j*N+i][0] += state[site][j]
                    priority_total[j*N+i][1] -= state[site][j]
        return priority_total




#score: {'data2D.txt': -0.001650771604938272}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
                priority_total[i*N+j][1] = -total_spin
    for j in range(N):
        for i in range(N):
            site = (i + ((j-1)%N - 1)) % N
            if h[i][j] > 0:
                for k in range(3):
                    total_spin += state[site][k]
                priority_total[j*N+i][0] = total_spin
            else:
                for k in range(3):
                    total_spin -= state[site][k]
                priority_total[j*N+i][1] = -total_spin
    return priority_total




#score: {'data2D.txt': 0.003918364197530865}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                total_spin[1] -= h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+0][0] = total_spin[0]
                priority_total[i*N+N-1][1] = -total_spin[1]
            else:
                priority_total[i*N+0][0] = -total_spin[0]
                priority_total[i*N+N-1][1] = total_spin[1]
        for j in range(N):
            for i in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[j*N+i][0] += state[site][j]
                    priority_total[j*N+i][1] -= state[site][j]
        return priority_total




#score: {'data2D.txt': -0.0006180555555555562}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]

        for j in range(N):
            if h[0][j] > 0:
                priority[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority[j][1] -= sum(h[k][j] for k in range(1,N))

        return priority




#score: {'data2D.txt': -0.1776118827160496}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append([total_spin, -total_spin])
                else:
                    priorities.append([-total_spin, total_spin])
        return priorities




#score: {'data2D.txt': -1.4043209876543283e-05}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total = [total_spin, -1*total_spin]
                else:
                    priority_total = [-total_spin, total_spin]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.005166512345679013}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.0015714506172839506}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))]) 
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[p[1], p[0]] for p in sorted(priorities)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[site][j]
                if h[i][j] > 0:
                    priority[i*N+j, 0] = total_spin[0]
                else:
                    priority[i*N+j, 1] = -total_spin[0]
        return priority




#score: {'data2D.txt': -0.0012510802469135802}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2,2), dtype=int)
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += state[site][j]*h[i][j]
            if h[i][0] > 0:
                priority_total[i*N: (i+1)*N,0] = total_spin[i][0]
            else:
                priority_total[i*N:(i+1)*N,1] = -total_spin[i][0]
                
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
        for j in range(N):
            priority_total[j][0] = total_spin[j][0]
            priority_total[j][1] = -total_spin[j][0]
        
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[1] += state[site][j]
                    else:
                        total_spin[0] += state[site][j]
                priorities.append(total_spin)
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0006501543209876544}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities, key=lambda x: x[0], reverse=True)




#score: {'data2D.txt': -0.001591203703703704}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total = [np.sum(total_spin[max(0,i-1):i+2,min(j,N-1):j+2]), h[i][j]]
            else:
                priority_total = [-np.sum(total_spin[max(0,i-1):i+2,min(j,N-1):j+2]), -h[i][j]]
            return [priority_total for _ in range(N*N)]




#score: {'data2D.txt': -0.00044830246913580185}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = []
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                
                if total_spin > 0:
                    priority_list.append((total_spin, 1))
                else:
                    priority_list.append((-total_spin, -1))
        
        return priority_list




#score: {'data2D.txt': -0.003907870370370373}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_list = []
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0, min(j+k,N)-1)] * state[i][j-k%N] 
                                  for k in range(max(0, j-N), min(j+N, 2*N)+1)])
                if h[i][j] > 0:
                    priority_list.append((total_spin, 1))
                else:
                    priority_list.append((-total_spin, -1))
        
        return priority_list




#score: {'data2D.txt': -0.003907870370370373}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0, min(j+k,N)-1)] * state[i][j-k%N] 
                                  for k in range(max(0, j-N), min(j+N, 2*N)+1)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        
        return priorities




#score: {'data2D.txt': -0.0014291666666666658}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 0:
                        neighbor = (i+1)%N, j
                    elif k == 1:
                        neighbor = i, (j+1)%N
                    elif k == 2:
                        neighbor = (i-1+N)%N, j
                    else:
                        neighbor = i, (j-1+N)%N
                    site_sum += J[k][neighbor[0]][neighbor[1]]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j].sum() > 0:
                priority_total[(j*N):(j+1)*N, 0] = total_spin.sum(axis=1)
            else:
                priority_total[(j*N):(j+1)*N, 1] = -1*total_spin.sum(axis=1)
        return priority_total.reshape((N*N,2))




#score: {'data2D.txt': 0.0004239197530864195}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            site_sum = 0
            for k in range(4):
                if k==2:
                    continue
                neighbor = (i + ((k-1)%2 - 1)) % N, j
                site_sum += J[k][neighbor[0]][neighbor[1]]
            total_spin[i][j] = site_sum
    priority_total = np.zeros((N,N,2), dtype=int)
    for j in range(N):
        if h[j].sum() > 0:
            priority_total[:,j,0] = total_spin.sum(axis=1)
        else:
            priority_total[:,j,1] = -1*total_spin.sum(axis=1)
    return priority_total.reshape((N*N,2))




#score: {'data2D.txt': 0.05763101851851852}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_priority = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site_sum = 0
            for k in range(3):
                neighbor = (i + ((k-1)%2 - 1)) % N, j
                if neighbor[0] == i:
                    site_sum += J[k][neighbor[0]][neighbor[1]]
                else:
                    site_sum += J[k][(neighbor[0]-i+2)%N][j]
            total_spin = site_sum
            if h[i][j] > 0:
                total_priority[i*N+j, 0] = total_spin
            else:
                total_priority[i*N+j, 1] = -total_spin
    return total_priority




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = [0, 0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[site][j]
                    total_spin[1] -= state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[0], 0]
                else:
                    priority_total[i*N+j] = [-total_spin[1], 0]
        return priority_total




#score: {'data2D.txt': -0.006567746913580247}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[j*N+i, 0] = total_spin
            else:
                priority_total[j*N+i, 1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': -0.02031003086419753}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_list = []
        
        for i in range(N):
            row_sum = [sum(state[k][:(i+1)%N]+state[k][(i+2)%N:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[m] * state[(m+(j-1))%N][0] for m in range(min(j,N-1))])
                priority_list.append((total_spin, -1 if h[i][j] > 0 else 1))
        
        return priority_list




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [x for x in sorted(priorities)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i,j,0] = total_spin
                else:
                    priority_total[i,j,1] = -total_spin
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': -0.00037762345679012314}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += state[i][site]
                if h[i][site] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return sorted(priorities,reverse=True)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2,2), dtype=int)
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i][0] += state[site][j]
            total_spin[i][1] -= state[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i][0]
                priority_total[i*N+j][1] = -total_spin[i][1]
    return priority_total




#score: {'data2D.txt': 0.003918364197530865}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                total_spin[1] -= h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+0][0] = total_spin[0]
                priority_total[i*N+N-1][1] = -total_spin[1]
            else:
                priority_total[i*N+0][0] = -total_spin[0]
                priority_total[i*N+N-1][1] = total_spin[1]
        for j in range(N):
            for i in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[j*N+i][0] += state[site][j]
                    priority_total[j*N+i][1] -= state[site][j]
        return priority_total




#score: {'data2D.txt': 0.3102609567901235}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_sum = [0,0]
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum[0] += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum[1] += J[k][(neighbor[0]-i+2)%N][j]
                if h[i][j] > 0:
                    total_priority[i*N+j] = [site_sum[0], 1]
                else:
                    total_priority[i*N+j] = [-site_sum[1], -1]
        return total_priority




#score: {'data2D.txt': 0.05763101851851852}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin = site_sum
                if h[i][j] > 0:
                    total_priority[i*N+j, 0] = total_spin
                else:
                    total_priority[i*N+j, 1] = -total_spin
        return total_priority




#score: {'data2D.txt': 0.05763101851851852}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin = site_sum
                if h[i][j] > 0:
                    total_priority[i*N+j, 0] = total_spin
                else:
                    total_priority[i*N+j, 1] = -total_spin
        return total_priority




#score: {'data2D.txt': 0.05763101851851852}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin = site_sum
                if h[i][j] > 0:
                    total_priority[i*N+j, 0] = total_spin
                else:
                    total_priority[i*N+j, 1] = -total_spin
        return total_priority




#score: {'data2D.txt': -0.0024412037037037032}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    total_spin = [[0 for _ in range(2)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            state = h[site][j]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += state if h[i][j] > 0 else -state
    priority_total = [[0 for _ in range(2)] for _ in range(N2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][0] += state if h[i][j] > 0 else -state
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[site][0]
            else:
                priority_total[i*N+j][1] = -total_spin[site][0]
    return priority_total




#score: {'data2D.txt': -0.002099228395061728}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0008060185185185185}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if k <= j else -row_sum[N-1-k]*state[i][j-k%N] for k in range(min(j,N-1))])
                priorities.append((-total_spin, 1) if h[i][j] > 0 else (total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.002099228395061728}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0010939814814814816}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = sum(J[i*N:(i+1)*N,j*N:(j+1)*N][::2].flatten()) + h[i][j]
                if h[i][j] > 0:
                    priorities[j][0] = total_spin
                else:
                    priorities[j][1] = -total_spin
        
        return [list(x) for x in priorities]




#score: {'data2D.txt': -0.003907870370370373}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0, min(j+k,N)-1)] * state[i][j-k%N] 
                                  for k in range(max(0, j-N), min(j+N, 2*N)+1)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0010479938271604943}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin.sum(), 1))
                else:
                    priorities.append((-total_spin.sum(), -1))
        return sorted(priorities)




#score: {'data2D.txt': 0.0336807098765432}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = [[0,0] for _ in range(N*N)]
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] if 0 <= j-k%N < N else J[k*N+i+j-k%N,1]*state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
            priorities[i*N+j][0] = total_spin
        else:
            priorities[i*N+j][1] = -total_spin
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += spin
                if total_spin[i][j] > 0:
                    priorities[i*N+j] = [total_spin[i][j], 1]
                else:
                    priorities[i*N+j] = [-total_spin[i][j], -1]
        return priorities




#score: {'data2D.txt': 0.0677109567901235}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = np.zeros((N*N,2), dtype=int)
      total_spin = [np.zeros(2) for _ in range(N)]
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%2 - 1)) % N
              total_spin[site][0] += state[i][j]
              if h[i][j] > 0:
                  priorities[(i*N+j),0] = total_spin[site][0]
              else:
                  priorities[(i*N+j),1] = -total_spin[site][0]
      return priorities.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = [np.zeros(2) for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += state[i][j]
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = total_spin[i*N+j][0]
                else:
                    priorities[i*N+j, 1] = -total_spin[i*N+j][0]
        return priorities




#score: {'data2D.txt': -0.001401697530864198}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                for m in range(2):
                    if m == 0:
                        spin = 1
                    else:
                        spin = -1
                    priorities[i*N+j][m] = priority_total * spin
        return [row for row in priorities]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                spin = -1 if h[i][j] > 0 else 1
                
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += spin
                    
                priority_total[i*N+j] = [total_spin, -total_spin]
                
        return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
                    
        return priority




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[p[0], p[1]] for p in priorities]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[i][site]
                if h[i][j] > 0:
                    priority.append((total_spin[0], 1))
                else:
                    priority.append((-total_spin[0], -1))
        return priority




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_total.append((total_spin, 1))
                else:
                    priority_total.append((-total_spin, -1))
        return priority_total




#score: {'data2D.txt': -0.15429645061728445}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, 0]
                else:
                    priorities[i*N+j] = [-total_spin, 1]
        return priorities




#score: {'data2D.txt': -0.0008526234567901241}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((-total_spin, 1))
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        Jflat = J.reshape(4,-1).T.flatten()
        hflat = h.flatten()
        priority_total = np.zeros((N2,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j),0] = total_spin
                else:
                    priority_total[(i*N+j),1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.00044830246913580185}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return sorted(priorities, reverse=True)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    total_spin[site][1] += 1
                else:
                    total_spin[site][1] -= 1
        priority_total = [[total_spin[(i*N+j)][0] if h[i][j]>0 else -total_spin[(i*N+j)][0], 1] if h[i][j]>0 else [-total_spin[(i*N+j)][0],-1] for i in range(N) for j in range(N)]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site][j]
    priority_total = [[-total_spin[i*N+j][0], 1] if h[i][j] > 0 else [total_spin[i*N+j][0], -1] for i in range(N) for j in range(N)]
    return priority_total




#score: {'data2D.txt': -0.010946450617283951}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spins = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spins[i][j] += 1
                else:
                    total_spins[i][j] -= 1
        priority_total = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    total_spins[site][0] += total_spins[i][j]
                else:
                    total_spins[site][0] -= total_spins[i][j]
        priority_total = [[total_spins[i][j], 1] if h[i][j] > 0 else [-total_spins[i][j], -1] for i in range(N) for j in range(N)]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin[i][j] += 1
                else:
                    total_spin[i][j] -= 1
        priority_total = [[total_spin[i][j], 1] if h[i][j] > 0 else [-total_spin[i][j], -1] for i in range(N) for j in range(N)]
        return priority_total




#score: {'data2D.txt': 0.00438070987654321}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2, 2), dtype=int)
        for i in range(N):
            total_spin = [0, 0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += state[site][j]
                total_spin[1] -= state[site][j]
            if h[i][0] > 0:
                priority_total[i*N+0][0] = total_spin[0]
                priority_total[i*N+0][1] = -total_spin[1]
            else:
                priority_total[i*N+N-1][0] = -total_spin[0]
                priority_total[i*N+N-1][1] = total_spin[1]
        for j in range(N):
            for i in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[j*N+i][0] += state[site][j]
                    priority_total[j*N+i][1] -= state[site][j]
        return priority_total




#score: {'data2D.txt': -0.14525540123456807}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priority_total = [total_spin[site][0], -total_spin[site][0]]
                else:
                    priority_total = [-x for x in [total_spin[site][0], -total_spin[site][0]]]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            row_sum = sum(h[i])
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
        return priority




#score: {'data2D.txt': -0.0016973765432098762}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        
        for i in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities = [(total_spin, 1)]
            else:
                priorities = [(-total_spin, -1)]
        
        return priority_total




#score: {'data2D.txt': -0.0016973765432098762}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        
        for i in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities = [(total_spin, 1)]
            else:
                priorities = [(-total_spin, -1)]
        
        return priority_total




#score: {'data2D.txt': -0.004106635802469135}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = np.zeros((N2,2), dtype=int)
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site1][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
                
                site2 = (i + ((N-1-j)%N - 1)) % N
                total_spin[1] += h[site2][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += total_spin[1]
                else:
                    priority_total[i*N+j][1] -= total_spin[1]
        
        return priority_total




#score: {'data2D.txt': -0.0043788580246913586}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site1][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
                
                site2 = (i + ((N-1-j)%N - 1)) % N
                total_spin[1] += h[site2][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += total_spin[1]
                else:
                    priority_total[i*N+j][1] -= total_spin[1]
        return priority_total




#score: {'data2D.txt': 0.001082253086419753}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    site = (i + ((j-1)%N - 1)) % N
                    total_spin = h[site][j]
                    priority_list[i*N+j][0] = total_spin
                    priority_list[i*N+j][1] = -total_spin
                else:
                    site = (i + ((j-1)%N - 1)) % N
                    total_spin = -h[site][j]
                    priority_list[i*N+j][0] = total_spin
                    priority_list[i*N+j][1] = -total_spin
        return priority_list




#score: {'data2D.txt': 0.1671344135802472}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin = 0
                    for l in range(3):
                        total_spin += state[site][(j+l)%N]
                    if h[i][j] > 0:
                        priority_total[i][j, 0] = total_spin
                    else:
                        priority_total[i][j, 1] = -total_spin
        return priority_total.reshape((N*N,2)).tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0,0] for _ in range(N2)]
    total_spin = [0]*N2
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[site*N+j] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j] = [total_spin[site*N+j], -total_spin[site*N+j]]
            else:
                priority_total[i*N+j] = [-total_spin[site*N+j], total_spin[site*N+j]]
    return priority_total




#score: {'data2D.txt': -0.19614120370370397}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, -1]
                else:
                    priorities[i*N+j] = [-total_spin, 1]
        return priorities




#score: {'data2D.txt': -0.046575462962963006}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = [[0 for _ in range(2)] for _ in range(N*N)]
    
    for i in range(N**2):
        total_spin = 0
        for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin += state[site][i%N]
        if h[i//N][i%N] > 0:
            priorities[i][0] = total_spin
            priorities[i][1] = -total_spin
        else:
            priorities[i][0] = -total_spin
            priorities[i][1] = total_spin
    
    return priorities




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[(i*N)+j] = [total_spin, 1]
                else:
                    priorities[(i*N)+j] = [-total_spin, -1]
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin
            else:
                priority_total[i*N+j,1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': -0.0009526234567901237}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                site_sum = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    site_sum += spin
                total_spin[i][0] += site_sum
                if h[i][j] > 0:
                    priority_total = [total_spin[i][0], 1]
                else:
                    priority_total = [-total_spin[i][0], -1]
        return [priority_total for _ in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N//2) % N
                total_spin = 0
                for k in range(3):
                    site2 = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site2][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        
        return priority




#score: {'data2D.txt': -0.0006692901234567905}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        total_spin = [np.zeros(2) for _ in range(N)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N//2) % N
                total_spin[site][0] += state[i][j]
                
        for j in range(N*N):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j//N][0]
            else:
                priority_total[j][1] = -total_spin[j//N][0]
        
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      for j in range(N):
        total_spin = 0
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          total_spin += state[site][j]
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0011896604938271605}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin
                else:
                    priority_total[j][1] = -1*total_spin
        
        return priority_total




#score: {'data2D.txt': 0.003984722222222222}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][site] > 0:
                    total_spin[0] += state[i][site]
                else:
                    total_spin[1] += state[i][site]
            if h[i][0] > 0:
                priority_total[i*N:(i+1)*N,0] = total_spin[0]
            else:
                priority_total[i*N:(i+1)*N,1] = -total_spin[0]
        for i in range(N):
            total_spin = [0,0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                if h[i][site] > 0:
                    total_spin[0] += state[i][site]
                else:
                    total_spin[1] += state[i][site]
            priority_total[i*N+i,0] = total_spin[0]
            priority_total[i*N+i,1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x for x in row] for row in priorities]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((2)%2 - 1)) % N
                total_spin[0] += state[i][j]
                total_spin[1] -= state[i][j]
        for i in range(N*N):
            if h[int(i/N)][int(i%N)] > 0:
                priorities.append([total_spin[0], total_spin[1]])
            else:
                priorities.append([-total_spin[0], -total_spin[1]])
        return [[priorities[i][0]//100000, priorities[i][1]%2] for i in range(N*N)]




#score: {'data2D.txt': -0.13418811728395078}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_list = []
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[1] += state[i][site]
            total_spin[0] -= total_spin[1]
            if h[i][j] > 0:
                priority_list.append([-x for x in total_spin])
            else:
                priority_list.append([x for x in total_spin])
    return priority_list




#score: {'data2D.txt': -0.011823611111111111}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][spin==1] += 1
            priority_total = np.zeros((N,2), dtype=int)
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[j][0]
                else:
                    priority_total[j][1] = -total_spin[j][0]
            for j in range(N):
                if spin == 1:
                    priority[i*N+j] = [-x for x in priority_total[j]]
                else:
                    priority[i*N+j] = [x for x in priority_total[j]]
        return priority




#score: {'data2D.txt': -0.08210385802469139}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]

        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[site][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[site][0]

        for j in range(N):
            priority_total[j][0] = total_spin[j][0]
            if h[0][j] > 0:
                priority_total[j][1] = -total_spin[j][0]
            else:
                priority_total[j][1] = total_spin[j][0]

        return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    spin = 1
                else:
                    spin = -1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += spin
                priority_total[i*N+j] = [total_spin, -total_spin]
        return priority_total




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if 0 <= j-k%N < N else 0 for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((-1)%2 - 1)) % N
                if h[i][j] > 0:
                    total_spin[site][0] += 1
                else:
                    total_spin[site][1] += 1
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((-1)%2 - 1)) % N
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], 1))
                else:
                    priorities.append((total_spin[site][1], -1))
        return priorities




#score: {'data2D.txt': -0.24194027777777763}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for k in range(3):
            for i in range(N):
                for j in range(N):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += state[i][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((total_spin[i][0], 1))
                else:
                    priorities.append((-total_spin[i][0], -1))
        return priorities




#score: {'data2D.txt': -0.00031188271604938345}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]    
        priorities = []    
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x[1],1-x[1]] for x in sorted(priorities)[::-1]]




#score: {'data2D.txt': -0.0003844135802469139}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((-total_spin, -1))
    return [[p[1], -p[1]] for p in sorted(priorities)]




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
                    
        return priority




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
                    
        return priorities




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
                    
        return priorities




#score: {'data2D.txt': -0.0010918209876543208}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if k < N-j else row_sum[N-1-(j-k)%N]*state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return [[x[1],x[0]] for x in sorted(priorities)]




#score: {'data2D.txt': 0.146027314814815}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return [[p[1], p[0]] for p in priorities]




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-1*total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1444520061728397}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-1*total_spin[0], 1))
        return priorities




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = [0 for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] += h[site][j]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j]
                    
        return [priority_total[i] for i in range(N*N)]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    return priority_total




#score: {'data2D.txt': 0.0009047839506172837}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[i-((i+1)%N)][j-k%N] if k < N else -1*state[(-i+N-1)%N][min(j+k-N,k)] 
                                  for k in range(max(0,j-1))])
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': 0.0008711419753086423}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin_1 = 0
                total_spin_2 = 0
                
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin_1 += state[site1][j]
                
                if i > 0:
                    site2 = (i - 1 + ((j-1)%N - 1)) % N
                    total_spin_2 += state[site2][j]
                else:
                    site2 = (i + ((j-1)%N - 1)) % N
                    total_spin_2 += state[site2][j]

                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin_1
                    priority_total[i*N+j][1] = total_spin_2
                else:
                    priority_total[i*N+j][0] = -total_spin_1
                    priority_total[i*N+j][1] = -total_spin_2
                    
        return priority_total




#score: {'data2D.txt': 0.0008711419753086423}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin_1 = 0
                total_spin_2 = 0
                
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin_1 += state[site1][j]
                
                if i > 0:
                    site2 = (i - 1 + ((j-1)%N - 1)) % N
                    total_spin_2 += state[site2][j]
                else:
                    site2 = (i + ((j-1)%N - 1)) % N
                    total_spin_2 += state[site2][j]

                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin_1
                    priority_total[i*N+j][1] = total_spin_2
                else:
                    priority_total[i*N+j][0] = -total_spin_1
                    priority_total[i*N+j][1] = -total_spin_2
                    
        return priority_total




#score: {'data2D.txt': 0.0008711419753086423}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[0,0] for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            total_spin_1 = 0
            total_spin_2 = 0
            
            site1 = (i + ((j-1)%N - 1)) % N
            total_spin_1 += state[site1][j]
            
            if i > 0:
                site2 = (i - 1 + ((j-1)%N - 1)) % N
                total_spin_2 += state[site2][j]
            else:
                site2 = (i + ((j-1)%N - 1)) % N
                total_spin_2 += state[site2][j]

            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin_1
                priority_total[i*N+j][1] = total_spin_2
            else:
                priority_total[i*N+j][0] = -total_spin_1
                priority_total[i*N+j][1] = -total_spin_2
            
    return priority_total




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site_neighbors = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
                for k in range(4):
                    if h[site_neighbors[k]][j] > 0:
                        total_spin += state[site_neighbors[k]][j]
                    else:
                        total_spin -= state[site_neighbors[k]][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.00017854938271604949}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        for k in range(3):
            site_neighbors = [(i + ((k-1)%2 - 1)) % N for i in range(N)]
            for i in range(N):
                for j in range(N):
                    if h[site_neighbors[k]][j] > 0:
                        total_spin[i][j] += state[site_neighbors[k]][j]
                    else:
                        total_spin[i][j] -= state[site_neighbors[k]][j]
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            site_neighbors = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
            for i in range(N):
                total_spin[i][0] += state[i][j]
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for j in range(N):
            site_neighbors = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
            for i in range(N):
                total_spin[i][j] += state[site_neighbors[k]][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[i][j]
                else:
                    priorities[i*N+j][1] = -total_spin[i][j]
        return priorities




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        
        return priority




#score: {'data2D.txt': -0.001166512345679013}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        state = [[-1 if h[i][j]>0 else 1 for j in range(N)] for i in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    total_spin[(i*N+j)][0] += state[site][k]
                if h[i][j]>0:
                    priority_total = [total_spin[(i*N+j)][0], 1]
                else:
                    priority_total = [-total_spin[(i*N+j)][0], -1]
        return [priority_total for _ in range(N*N)]




#score: {'data2D.txt': -0.0010418209876543211}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += 1 if h[i][j] > 0 else -1
            else:
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] -= 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] -= 1 if h[i][j] > 0 else -1
    priority_total = [[0,0] for _ in range(N)]
    for j in range(N):
        if h[0][j] > 0:
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                priority_total[i][0] = total_spin[i][0]
        else:
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                priority_total[i][1] = -total_spin[site][0]
    priorities = []
    for j in range(N*N):
        if h[j//N][j%N] > 0:
            priorities.append((priority_total[j//N][0], 1))
        else:
            priorities.append((-priority_total[j//N][0], -1))
    return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0015714506172839506}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[i[1], i[0]] for i in sorted(priorities)]




#score: {'data2D.txt': 0.31821712962962906}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[i][j] * h[site][j]
                    total_spin[1] -= state[i][j] * h[site][j]
                if h[i][j] > 0:
                    priorities.append(total_spin)
                else:
                    priorities.append([-x for x in total_spin])
        return priorities




#score: {'data2D.txt': 0.03903811728395064}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum([state[site][k] for k in range(min(j+1,N))])
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j)%N - 1)) % N
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        
        return priority




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j)%N - 1)) % N
                for k in range(3):
                    s = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[s][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = [[0,0] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += h[site][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority[i*N+j][1] = -total_spin[i*N+j][0]
                    
        return priority




#score: {'data2D.txt': 0.32924367283950523}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = [0,0]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = -1 if h[i][j] > 0 else 1
                total_spin[0] += state
                priority[i*N+j][1-int(state)>0] = total_spin[0]
        
        return priority




#score: {'data2D.txt': -0.0013097222222222223}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = [0, 0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
            if h[i][0] > 0:
                priority[i*N+j][0] = total_spin[0]
            else:
                priority[i*N+j][1] = -total_spin[0]
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                site2 = (i + ((j+1)%N - 1)) % N
                total_spin[0] += state[i][site1]
                total_spin[1] += state[i][site2]
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin[0]
                priority[i*N+j][1] = -total_spin[1]
            else:
                priority[i*N+j][0] = total_spin[1]
                priority[i*N+j][1] = -total_spin[0]
        
        return priority




#score: {'data2D.txt': -0.0017652777777777773}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k-j+N < N and k-j-N >= 0:
                        total_spin[0] += J[site, j-k%N].flatten()[0]
                    else:
                        total_spin[0] += h[site][j]
                for spin in [-1,1]:
                    priority_total = sum([spin*h[i][j] for j in range(N)])
                    priorities.append((priority_total + sum([spin*J[site, j-k%N].flatten()[0] for k in range(4) if k-j+N < N and k-j-N >= 0]), spin))
        return sorted(priorities)[::-1][:N*N]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][j] += h[site][j]
        priority_total = []
        for i in range(N):
            row_sum = sum(total_spin[i])
            for j in range(N):
                if h[i][j] > 0:
                    priority_total.append((row_sum, 1))
                else:
                    priority_total.append((-row_sum, -1))
        return priority_total




#score: {'data2D.txt': 0.001964969135802469}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += h[i][j]
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += spin
            priority_total[j][0] = sum(total_spin[:,0])
        return [[priority_total[i][0], 1 if h[i][j] > 0 else -1] for j in range(N) for i in range(N)]




#score: {'data2D.txt': 0.007640895061728394}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += h[site][0]
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            spin = -1 if h[(i+N-1)%N][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][j] += spin
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i][j]
                else:
                    priority[i*N+j][1] = -total_spin[i][j]
        return priority.tolist()




#score: {'data2D.txt': 0.048527623456790125}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                total_spin = sum([site_spin * state[(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(3)])
                priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N,N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i,j,0] = total_spin
            else:
                priority_total[i,j,1] = -total_spin
    return priority_total.reshape((N*N,2)).tolist()




#score: {'data2D.txt': -0.0024612654320987663}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[site][0]
                else:
                    priorities[i*N+j][1] = -total_spin[site][0]
        for i in range(N):
            site = (i + ((N-1)%2 - 1)) % N
            total_spin[site][0] += sum(h[k][i] for k in range(N))
            if h[i][0] > 0:
                priorities[i][0] = total_spin[site][0]
            else:
                priorities[i][1] = -total_spin[site][0]
        return priorities




#score: {'data2D.txt': 0.15287793209876566}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += state[i][site]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                    total_spin = [0,0]
                else:
                    priorities.append((-total_spin[0], -1))
                    total_spin = [0,0]
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += h[i][j]
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin[i][j]
                else:
                    priority_total[i][j][1] = -total_spin[i][j]
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': -0.004631944444444445}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += state[site][j]
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[0]
                else:
                    priority_total[j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.005166512345679013}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': 0.14929243827160515}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        total_spin = 0
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
        if h[i][0] > 0:
            priority_total[i*N:(i+1)*N, 0] = total_spin
        else:
            priority_total[i*N:(i+1)*N, 1] = -total_spin
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j, 0] += state[i][j]
            else:
                priority_total[i*N+j, 1] += -state[i][j]
    return priority_total.tolist()




#score: {'data2D.txt': -0.0011328703703703705}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((2-j)%2 - 1)) % N
                for k in range(3):
                    neighbor_i = (i + ((k-1)%2 - 1)) % N
                    total_spin[neighbor_i][0] += h[i][j]
        priorities = []
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((-total_spin[i][0], 1))
                else:
                    priorities.append((total_spin[i][0], -1))
        return [list(x) for x in sorted(priorities)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2))
        J_new = J.flatten()
        sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum_2 = (-1)*sum_1
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority[i] = [sum_1[i] - sum_2[i], sum_1[i] + sum_2[i]]
            else:
                priority[i] = [-sum_1[i] + sum_2[i], -sum_1[i] - sum_2[i]]
        return(priority)




#score: {'data2D.txt': -0.0018526234567901236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                state = (-1 if h[site][j] > 0 else 1)
                total_spin[i*N+j][0] += state
                total_spin[i*N+j][1] -= state
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j][0]
        return priority_total




#score: {'data2D.txt': 0.00017824074074074075}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]  
        priorities = []  
        total_spin = [0,0]  
        for i in range(N):  
            for j in range(N):  
                site = (i + ((j-1)%N - 1)) % N  
                total_spin[0] += h[site][j]  
                if h[i][j] > 0:  
                    priorities.append((total_spin[0], 1))  
                else:  
                    priorities.append((-total_spin[0], -1))  
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.0007563271604938273}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return sorted(priorities)[::-1]




#score: {'data2D.txt': -0.0008060185185185185}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((-total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return [(a,b) for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.0008128086419753088}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N
                    total_spin[neighbor][0] += J[k][i*N+j]
                if h[i][j] > 0:
                    priority_total = total_spin[i][0]
                else:
                    priority_total = -total_spin[i][0]
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N
                    total_spin[neighbor][0] -= J[k][i*N+j]
                if h[i][j] > 0:
                    return [(N*i+j,1) for _ in range(N**2)]
                else:
                    return [(N*i+j,-1) for _ in range(N**2)]




#score: {'data2D.txt': 0.010818672839506174}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    
    for i in range(N):
        total_spin = [0]*N
        for j in range(N):
            site = (i + ((j-1)%N) - N//2) % N
            total_spin[site] += state[i][j]
        for j in range(N):
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin[j]
            else:
                priority_total[(i*N+j), 1] = -total_spin[j]
    return priority_total




#score: {'data2D.txt': -0.0006347222222222216}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    
    for i in range(N):
      total_spin = [0]*N
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[site] += state[i][j]
      if h[i][j] > 0:
        priority_total[(i*N+j), 0] = sum(total_spin)
      else:
        priority_total[(i*N+j), 1] = -sum(total_spin)
    
    return priority_total




#score: {'data2D.txt': 0.0009047839506172837}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[i-((i+1)%N)][j-k%N] if k < N else -1*state[(-i+N-1)%N][min(j+k-N,k)] 
                                  for k in range(max(0,j-1))])
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][j] for k in range(3)])
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = np.zeros((N2,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site1][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
                
                site2 = (i + ((N-1-j)%N - 1)) % N
                total_spin[1] += h[site2][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += total_spin[1]
                else:
                    priority_total[i*N+j][1] -= total_spin[1]
        
        return priority_total




#score: {'data2D.txt': -0.004106635802469135}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = np.zeros((N2, 2), dtype=int)
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site1][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
                
                site2 = (i + ((N-1-j)%N - 1)) % N
                total_spin[1] += h[site2][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += total_spin[1]
                else:
                    priority_total[i*N+j][1] -= total_spin[1]
        
        return priority_total




#score: {'data2D.txt': -0.0011013888888888892}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += 1 if h[i][j] > 0 else -1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site*N+j][0] += 1 if h[i][j] > 0 else -1
        priority_total = [[0 for _ in range(2)] for _ in range(N)]
        for j in range(N):
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[site*N+j][0]
                else:
                    priority_total[j][1] = -total_spin[site*N+j][0]
        priorities = []
        for j in range(N*N):
            if h[j//N][j%N] > 0:
                priorities.append((priority_total[j//N][0], 1))
            else:
                priorities.append((-priority_total[j//N][0], -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0010418209876543211}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += 1 if h[i][j] > 0 else -1
            else:
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] -= 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] -= 1 if h[i][j] > 0 else -1
    priority_total = [[0,0] for _ in range(N)]
    for j in range(N):
        if h[0][j] > 0:
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                priority_total[i][0] = total_spin[i][0]
        else:
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                priority_total[i][1] = -total_spin[site][0]
    priorities = []
    for j in range(N*N):
        if h[j//N][j%N] > 0:
            priorities.append((priority_total[j//N][0], 1))
        else:
            priorities.append((-priority_total[j//N][0], -1))
    return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.00142391975308642}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += spin
        priority_total = [[0,0] for _ in range(N)]
        for j in range(N):
            if h[0][j] > 0:
                for i in range(N):
                    site = (i + ((j-1)%2 - 1)) % N
                    priority_total[i][0] = total_spin[i][0]
            else:
                for i in range(N):
                    site = (i + ((j-1)%2 - 1)) % N
                    priority_total[i][1] = -total_spin[site][0]
        priorities = []
        for j in range(N*N):
            if h[j//N][j%N] > 0:
                priorities.append((priority_total[j//N][0], 1))
            else:
                priorities.append((-priority_total[j//N][0], -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0, 0]
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    site_sum += state[site][j]
                if h[i][j] > 0:
                    total_spin[0] += site_sum
                    priorities.append((total_spin[0], 1))
                else:
                    total_spin[1] -= site_sum
                    priorities.append((-1 * total_spin[1], -1))
        return priorities




#score: {'data2D.txt': -0.17246496913580261}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j%2) - 1)) % N
                total_spin = sum([state[site][k] for k in range(N)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.3418541666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += 1 if h[i][j] > 0 else -1
                site = (i + ((j+1)%N - 1)) % N
                total_spin[site][0] += 1 if h[i][j] > 0 else -1
                site = (i + ((i+j-1)%2 - 1)) % N
                total_spin[site][0] += 1 if h[i][j] > 0 else -1
        priority_total = [[total_spin[i][0], 1] if h[(i//N)][i%N] > 0 else [-total_spin[i][0], -1] for i in range(N*N)]
        return priority_total




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority = (total_spin, 1)
                else:
                    priority = (-total_spin, -1)
                priorities.append(priority)
        return priorities




#score: {'data2D.txt': -0.01128317901234563}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        total_spin = np.zeros(2)
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin[0], 0]
                else:
                    priority[i*N+j] = [-total_spin[0], 1]
        return priority




#score: {'data2D.txt': -0.21168194444444452}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += spin
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], spin))
                else:
                    priorities.append((-total_spin[site][0], spin))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = []
        for i in range(N):
            for j in range(N):
                total_spin = np.zeros((N,2), dtype=int)
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority_list.append([total_spin[site][0], 1])
                else:
                    priority_list.append([-total_spin[site][0], -1])
        return priority_list




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N = int(N)
    priorities = [[0,0] for _ in range(N**2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i][0 if h[site][j] > 0 else 1] += h[i][j]
            priorities[i*N+j][0 if h[i][j] > 0 else 1] = total_spin[i][0 if h[i][j] > 0 else 1]
    return priorities




#score: {'data2D.txt': 0.03366095679012345}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        priorities = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][0] += state[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[i][0]
                else:
                    priorities[i*N+j][1] = -total_spin[i][0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[site][0]
                else:
                    priorities[i*N+j][1] = -total_spin[site][0]
        return priorities.tolist()




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site*N+j, 0 if h[i][j] > 0 else 1] += spin
        return total_spin




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] * state[i][j-k%N] for k in range(min(j+1,N))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += state[i][k]
        
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            for i in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[i][1]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[i][1]
        
        return priority_total




#score: {'data2D.txt': 0.17118410493827185}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    total_spin += J[k][site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[priorities[j][0], priorities[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.20612422839506192}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((-total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.2950908950617275}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += state[i][j]*state[state[i][site]][j]
                total_spin[1] += -state[i][j]*state[state[i][site]][j]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priorities.append((total_spin[0], 1))
            else:
                priorities.append((total_spin[1], -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2))
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority[(i*N+j),0] = -1
                    priority[(i*N+j),1] = 1
                else:
                    priority[(i*N+j),0] = 1
                    priority[(i*N+j),1] = -1
        return(priority)




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.11372515432098769}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2))
        J_new = J.flatten()
        for i in range(N**2):
            sum_1 = 0
            sum_2 = 0
            for k in range(4):
                site = (i//N + ((k-1)%2 - 1)) % N * N + (i%N) + ((k-1)%2)
                if J_new[site] > 0:
                    sum_1 += h[i//N][i%N]
                    sum_2 -= J_new[site]
                else:
                    sum_1 -= h[i//N][i%N]
                    sum_2 += J_new[site]
            if sum_1 > 0:
                priority[i] = [sum_1 - sum_2, sum_1 + sum_2]
            else:
                priority[i] = [-sum_1 + sum_2, -sum_1 - sum_2]
        return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[float('inf'), float('-inf')] for _ in range(N2)]
        total_spin = [0,0]
        
        for k in range(3):
            for i in range(N):
                for j in range(N):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[i][j]
                    priority[i*N+j] = [total_spin[0], -total_spin[1]]
        return priority




#score: {'data2D.txt': 8.132716049382671e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        priority = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = [0, 0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[1] += J_flat[(site*N+j)*4:(site*N+j)*4+1].sum()
                    else:
                        total_spin[0] -= J_flat[(site*N+j)*4:(site*N+j)*4+1].sum()
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin[1], -total_spin[0]]
                else:
                    priority[i*N+j] = [-total_spin[1], total_spin[0]]
        return priority




#score: {'data2D.txt': 8.132716049382671e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        priority = np.zeros((N**2,2))
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flat[(site*N+j)*4:(site*N+j)*4+1].sum()
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': -0.0014473765432098764}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flat[(site*N+j)*4:(site*N+j)*4+1].sum()
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [(i[0], i[1]) for i in sorted(priorities)]




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0684967592592593}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        priority_list = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    total_spin[site][0] += 1
                else:
                    total_spin[site][1] += 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = total_spin[site][0]
                else:
                    priority_list[i*N+j][1] = -total_spin[site][0]
        return priority_list




#score: {'data2D.txt': -0.04612854938271605}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += 1 if h[i][j] > 0 else -1
        priority_list = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = total_spin[site][0]
                else:
                    priority_list[i*N+j][1] = -total_spin[site][0]
        return priority_list.tolist()




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.00015354938271604907}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            for k in range(3):
                site2 = (site + ((k-1)%2 - 1)) % N
                if h[i][j] > 0:
                    total_spin += state[site2][j]
                else:
                    total_spin -= state[site2][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return [[x[1],x[0]] for x in sorted(priorities)]




#score: {'data2D.txt': -0.0008128086419753088}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N
                    total_spin[neighbor][0] += J[k][i*N+j]
                if h[i][j] > 0:
                    priority_total = total_spin[i][0]
                else:
                    priority_total = -total_spin[i][0]
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N
                    total_spin[neighbor][0] -= J[k][i*N+j]
                if h[i][j] > 0:
                    return [(N*i+j,1) for _ in range(N**2)]
                else:
                    return [(N*i+j,-1) for _ in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N,N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i,j,0] = total_spin
            else:
                priority_total[i,j,1] = -total_spin
    return priority_total.reshape(N*N,2)




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = h[site][j]
            if h[i][j] > 0:
                priorities[i*N+j][0] = total_spin
            else:
                priorities[i*N+j][1] = -total_spin
    return priorities




#score: {'data2D.txt': 0.0028408950617283954}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0.5 for _ in range(2)] for _ in range(N**2)]
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    total_spin += state[site][k%N]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.04920601851851852}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        priority_total = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += state[site][j]
                total_spin[i*N+j][1] += state[i][site]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return [[spin for spin in row] for row in priority_total]




#score: {'data2D.txt': 0.0007044753086419755}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.018448611111111114}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    total_spin[site][0] += state[i][j]
        return [total_spin[i]+[h[i][j]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((site_spin, 1))
                else:
                    priorities.append((-site_spin, -1))
        return [[x for x in row] for row in [[0]*2 for _ in range(N**2)]]




#score: {'data2D.txt': -0.0006202160493827155}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = 1 if h[i][j] > 0 else -1
                total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] if k%2 == 0 else -state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if site_spin > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0006658950617283955}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N, N), dtype=int)  
        for i in range(N):  
            for j in range(N):  
                site = (i + ((j-1)%2 - 1)) % N  
                total_spin[site][0] += 1 if h[i][j] > 0 else -1  
        priority_total = np.zeros((N,2), dtype=int)  
        for i in range(N):  
            for j in range(N):  
                site = (i + ((j-1)%2 - 1)) % N  
                total_spin[site][0] += 1 if h[i][j] > 0 else -1  
                priority_total[i][0] += 1 if h[i][j] > 0 else -1  
        priorities = []  
        for i in range(N*N):  
            if h[i//N][i%N] > 0:  
                priorities.append((-total_spin[i//N][i%N], 1))  
            else:  
                priorities.append((total_spin[i//N][i%N], -1))  
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0006202160493827155}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          for j in range(N):
              total_spin = sum([state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] if k%2 == 0 else -state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
              if h[i][j] > 0:
                  priorities.append((-total_spin, 1))
              else:
                  priorities.append((total_spin, -1))
      return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin[i*N+j, h[i][j] > 0] = site_sum
        return total_spin




#score: {'data2D.txt': 0.055821759259259085}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[site][0] += state[i][k%N]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        total_spin[site][1] += h[i][j]
        if h[i][j] > 0:
          priority_total[i*N+j] = [total_spin[site][0], 1]
        else:
          priority_total[i*N+j] = [-total_spin[site][0], -1]
    return priority_total




#score: {'data2D.txt': -0.00017916666666666702}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += site_spin
                if h[i][j] > 0:
                    priorities.append((total_spin[i][0], 1))
                else:
                    priorities.append((-total_spin[i][0], -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.0037507716049382713}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[i][j] += J[0][site][0]
        if i > 0:
          site = (i - 1 + ((j-1)%2 - 1)) % N
          total_spin[i][j] += J[1][site][0]
        if j > 0:
          site = (i + ((j-1)%2 - 1)) % N
          total_spin[i][j] += J[2][site][0]
        if i < N-1:
          site = (i + 1 + ((j-1)%2 - 1)) % N
          total_spin[i][j] += J[3][site][0]
    priority_total = np.zeros((N,N,2), dtype=int)
    for j in range(N):
      if h[j][0] > 0:
        priority_total[j][0][0] = total_spin[j][0]
      else:
        priority_total[j][1][0] = -1*total_spin[j][0]
    return priority_total.reshape((N*N,2))




#score: {'data2D.txt': -0.11696990740740758}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    if k == 0:
                        total_spin[i*N+j][0] += J[0][site][0]
                    elif k == 1:
                        total_spin[i*N+j][0] += J[1][site][0]
                    else:
                        total_spin[i*N+j][0] += J[2][site][0]
                if h[i][j] > 0:
                    total_spin[i*N+j][1] = total_spin[i*N+j][0]
                else:
                    total_spin[i*N+j][1] = -total_spin[i*N+j][0]
        return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.00021064814814814804}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += J[(i%2)][site][0]
                if i > 0:
                    total_spin[i][j] += J[1][site][0]
                if j > 0:
                    total_spin[i][j] += J[3][site][0]
                if i < N-1:
                    total_spin[i][j] += J[(i+1)%2][site][0]
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j][0] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
        return priority_total.reshape((N*N,2))




#score: {'data2D.txt': -0.0011430555555555554}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            for k in range(3):
                total_spin[i][j] += J[k][site][0]
            if h[i][j] > 0:
                priority_total = np.zeros((N,N,2), dtype=int)
                for j in range(N):
                    if h[j][0] > 0:
                        priority_total[j][0][0] = total_spin[j][0]
                    else:
                        priority_total[j][1][0] = -1*total_spin[j][0]
                return priority_total.reshape((N*N,2))




#score: {'data2D.txt': -0.0011405864197530863}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            total_spin = np.zeros((N,2), dtype=int)
            for j in range(N):
                site_spin = state[i][j]
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += spin
                if h[i][j] > 0:
                    priorities.append((-total_spin[i][0], 1))
                else:
                    priorities.append((total_spin[i][0], -1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': -0.00021867283950617334}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in [(i+1)%N, (i+N-1)%N]:
                    total_spin += state[k][j]
                for k in [(j+1)%N, (j+N-1)%N]:
                    total_spin += state[i][k]
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[::-1]




#score: {'data2D.txt': -0.00021280864197530862}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': -0.0019375}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j-k%N] > 0 else -state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [(i[0], i[1]) for i in sorted(priorities)]




#score: {'data2D.txt': 0.00027237654320987623}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j%N+2)%N - 1)) % N * N + j
                for k in range(4):
                    offset = k*N**2
                    neighbor = site + (offset + ((k-1)%2 - 1)) % N**2
                    total_spin += J_flat[neighbor:neighbor+1].sum()
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [(i[0], i[1]) for i in sorted(priorities)]




#score: {'data2D.txt': 0.11926064814814831}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N*N)]
    state = [[-1 if h[i][j]>0 else 1 for j in range(N)] for i in range(N)]
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[(i*N+j)][0] += sum([state[site][k] if k in [j-1,j+1] else 0 for k in range(N)])
    
    priority_total = [[total_spin[i][0], 1] if h[i//N][i%N]>0 else [-total_spin[i][0], -1] for i in range(N*N)]
    return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, -1))
                else:
                    priority.append((total_spin, 1))
        for j in range(N):
            if sum(h[i][j] for i in range(N)) > 0:
                priority_total = [(sum(h[i][j] for i in range(N)), 1) for _ in range(N)]
            else:
                priority_total = [(-sum(h[i][j] for i in range(N)), -1) for _ in range(N)]
        return priority




#score: {'data2D.txt': 0.2447532407407406}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j%2) - 1)) % N
                total_spin[site][0] += state[i][j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += -1 if state[i][j] > 0 else 1
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priorities.append((total_spin[i//N][0], 1))
            else:
                priorities.append((-total_spin[i//N][0], -1))
        return priorities




#score: {'data2D.txt': -0.01753719135802469}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j-k%N] > 0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            total_spin = sum([state[(i//N)%N][max(0, min(i%N,k))]*2-1 if h[(i//N)%N][max(0, min(i%N,k))] > 0 else 1 for k in range(max(0, i%N), min(N,i%N+1))])
            priorities.append((total_spin, -1) if sum(h[i//N][j] for j in range(N)) > 0 else (total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0043788580246913586}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            total_spin = [0, 0]
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site1][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[0]
                else:
                    priorities[i*N+j][1] = -total_spin[0]
                
                site2 = (i + ((N-1-j)%N - 1)) % N
                total_spin[1] += h[site2][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] += total_spin[1]
                else:
                    priorities[i*N+j][1] -= total_spin[1]
        return priorities




#score: {'data2D.txt': -0.0043788580246913586}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site1][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
                
                site2 = (i + ((N-1-j)%N - 1)) % N
                total_spin[1] += h[site2][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] += total_spin[1]
                else:
                    priority_total[i*N+j][1] -= total_spin[1]
        return priority_total




#score: {'data2D.txt': -0.005123611111111112}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] * state[i][(j+((k-1)%2 - 1)) % N] for k in range(3)])
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = total_spin
                    priorities[i*N+j, 1] = 1
                else:
                    priorities[i*N+j, 0] = -total_spin
                    priorities[i*N+j, 1] = -1
        return priorities.tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [list(x) for x in priorities]




#score: {'data2D.txt': 0.010818672839506174}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = [0]*N
            for j in range(N):
                site = (i + ((j-1)%N) - N//2) % N
                total_spin[site] += state[i][j]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[j]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[j]
        return priority_total




#score: {'data2D.txt': 0.22170293209876554}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j] > 0 else -state[i][j-k%N] for k in range(min(j,N-1))])
                priorities.append((total_spin, -1) if h[i][j] > 0 else (total_spin, 1))
        
        return [[p[1], p[0]] for p in priorities]




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)




#score: {'data2D.txt': 0.00016404320987654263}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], 1))
        return [[x,y] for x,y in sorted(priorities)]




#score: {'data2D.txt': 0.09528009259259258}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[k][site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0011430555555555554}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    total_spin[i][j] += J[k][site][0]
                if h[i][j] > 0:
                    priority_total = np.zeros((N,N,2), dtype=int)
                    for j in range(N):
                        if h[j][0] > 0:
                            priority_total[j][0][0] = total_spin[j][0]
                        else:
                            priority_total[j][1][0] = -1*total_spin[j][0]
                    return priority_total.reshape((N*N,2))




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[priorities[j][0], priorities[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.000897067901234568}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site] += state[i][j]*h[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], -1))
        return [[p[1],-p[0]] for p in sorted(priorities)]




#score: {'data2D.txt': -0.0008251543209876545}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return [[x[0],-x[1]] for x in sorted(priorities)]




#score: {'data2D.txt': -0.009625771604938273}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin += h[site1][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
                
                site2 = (i + ((N-1-j)%N - 1)) % N
                total_spin += h[site2][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] += total_spin
                else:
                    priorities[i*N+j][1] -= total_spin
        
        return priorities




#score: {'data2D.txt': -0.009625771604938273}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin = h[site1][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
                
                site2 = (i + ((N-1-j)%N - 1)) % N
                total_spin += h[site2][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] += total_spin
                else:
                    priorities[i*N+j][1] -= total_spin
        return priorities




#score: {'data2D.txt': -0.0028214506172839506}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            total_spin = [0, 0]
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site1][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
                
                site2 = (i + ((N-1-j)%N - 1)) % N
                total_spin[1] += h[site2][j]
                if h[i][j] > 0:
                    priorities[-1] = (priorities[-1][0]+total_spin[1], priorities[-1][1])
                else:
                    priorities[-1] = (priorities[-1][0]-total_spin[1], -priorities[-1][1])
        
        return priorities




#score: {'data2D.txt': -0.20015447530864225}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = [0 for _ in range(N2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i*N+j] += h[site][j]
            if h[i][j] > 0:
                priority[i*N+j] = [total_spin[i*N+j], 0]
            else:
                priority[i*N+j] = [-total_spin[i*N+j], 1]
    return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N**2
        for k in range(3):
            for i in range(N):
                for j in range(N):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[(i*N+j)] += state[site][j]
        priority_total = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j)][0] = total_spin[(i*N+j)]
                else:
                    priority_total[(i*N+j)][1] = -total_spin[(i*N+j)]
        return priority_total




#score: {'data2D.txt': -0.0008128086419753088}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N
                    total_spin[neighbor][0] += J[k][i*N+j]
                if h[i][j] > 0:
                    priority_total = total_spin[i][0]
                else:
                    priority_total = -total_spin[i][0]
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N
                    total_spin[neighbor][0] -= J[k][i*N+j]
                if h[i][j] > 0:
                    return [(N*i+j,1) for _ in range(N**2)]
                else:
                    return [(N*i+j,-1) for _ in range(N**2)]




#score: {'data2D.txt': -0.0008128086419753088}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            for k in range(3):
                neighbor = (i + ((k-1)%2 - 1)) % N
                total_spin[neighbor][0] += J[k][i*N+j]
            if h[i][j] > 0:
                priority_total = total_spin[i][0]
            else:
                priority_total = -total_spin[i][0]
            for k in range(3):
                neighbor = (i + ((k-1)%2 - 1)) % N
                total_spin[neighbor][0] -= J[k][i*N+j]
            if h[i][j] > 0:
                return [(N*i+j,1) for _ in range(N**2)]
            else:
                return [(N*i+j,-1) for _ in range(N**2)]

    priority_total = [[0,0] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[site][0] += h[i][j]
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[site][0]
            else:
                priority_total[j][1] = -total_spin[site][0]

    return [priority_total[j] for j in range(N)]




#score: {'data2D.txt': -0.0008128086419753088}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N
                    total_spin[neighbor][0] += J[k][i*N+j]
                if h[i][j] > 0:
                    priority_total = total_spin[i][0]
                else:
                    priority_total = -total_spin[i][0]
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N
                    total_spin[neighbor][0] -= J[k][i*N+j]
                if h[i][j] > 0:
                    return [(N*i+j,1) for _ in range(N**2)]
                else:
                    return [(N*i+j,-1) for _ in range(N**2)]




#score: {'data2D.txt': -0.0008128086419753088}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N)]
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        for k in range(3):
          neighbor = (i + ((k-1)%2 - 1)) % N
          total_spin[neighbor][0] += J[k][i*N+j]
        if h[i][j] > 0:
          priority_total = total_spin[i][0]
        else:
          priority_total = -total_spin[i][0]
        for k in range(3):
          neighbor = (i + ((k-1)%2 - 1)) % N
          total_spin[neighbor][0] -= J[k][i*N+j]
        if h[i][j] > 0:
          return [(N*i+j,1) for _ in range(N**2)]
        else:
          return [(N*i+j,-1) for _ in range(N**2)]




#score: {'data2D.txt': -0.11696990740740758}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    if k == 0:
                        total_spin[i*N+j][0] += J[0][site][0]
                    elif k == 1:
                        total_spin[i*N+j][0] += J[1][site][0]
                    else:
                        total_spin[i*N+j][0] += J[2][site][0]
                if h[i][j] > 0:
                    total_spin[i*N+j][1] = total_spin[i*N+j][0]
                else:
                    total_spin[i*N+j][1] = -total_spin[i*N+j][0]
        return [[x for x in row] for row in total_spin]




#score: {'data2D.txt': -0.11696990740740758}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    if k == 0:
                        total_spin[i*N+j][0] += J[0][site][0]
                    elif k == 1:
                        total_spin[i*N+j][0] += J[1][site][0]
                    else:
                        total_spin[i*N+j][0] += J[2][site][0]
                if h[i][j] > 0:
                    total_spin[i*N+j][1] = total_spin[i*N+j][0]
                else:
                    total_spin[i*N+j][1] = -total_spin[i*N+j][0]
        return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.04733317901234568}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            total_spin = [0,0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[0] += state[site][((i//N)+((k-1)%2-1))%N]
                total_spin[1] -= state[(i//N)][(i%N)]
            if h[i//N][i%N] > 0:
                priorities.append(total_spin)
            else:
                priorities.append([-x for x in total_spin])
        return priorities




#score: {'data2D.txt': -0.0006023148148148145}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    state = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += h[state][j]
                if h[i][j] > 0:
                    priority_total = [[float('inf') for _ in range(2)] for _ in range(N**2)]
                    for j in range(N):
                        site = (i + ((j-1)%N - 1)) % N
                        if h[site][j] > 0:
                            priority_total[i*N+j][0] = total_spin[i*N+j][0]
                        else:
                            priority_total[i*N+j][1] = -total_spin[i*N+j][1]
                    return [[x for x in row] for row in priority_total]




#score: {'data2D.txt': 0.010939660493827158}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = [-1 if h[i][j] > 0 else 1 for j in range(N)]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += state[j]
        priority_total = [[float('inf') for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[site][j] > 0:
                    priority_total[i*N+j][0] = total_spin[site][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[site][0]
        return [[x for x in row] for row in priority_total]




#score: {'data2D.txt': -0.0017270061728395063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_interactions = []
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k-j+N < N and k-j-N >= 0:
                        site_interactions.append(J[site, j-k%N].flatten()[0])
                    else:
                        site_interactions.append(h[site][j])
                total_spin[i*N+j] = [sum(site_interactions), -sum(site_interactions)]
        return sorted(total_spin)




#score: {'data2D.txt': -0.000912191358024691}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[k,(i*N+j) : (i*N+site),:(j+1)].sum()
                if h[i][j] > 0:
                    priorities[(i*N+j)][0] = total_spin
                else:
                    priorities[(i*N+j)][1] = -total_spin
        return priorities




#score: {'data2D.txt': -0.00091466049382716}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += J[site*N:site*N+N, j].sum() * spin
            priority_list[i*N+j][:] = [total_spin, -total_spin]
    return priority_list




#score: {'data2D.txt': 0.33388626543209776}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += J[site*N:site*N+N,j].sum()
                if h[i][j] > 0:
                    priority_list[i*N+j][:] = [total_spin[site][0], 1]
                else:
                    priority_list[i*N+j][:] = [-total_spin[site][0], -1]
        return priority_list




#score: {'data2D.txt': 0.001082253086419753}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = h[site][j]
            if h[i][j] > 0:
                priority_list[i*N+j][:] = [total_spin, -total_spin]
            else:
                priority_list[i*N+j][:] = [-total_spin, total_spin]
    return priority_list




#score: {'data2D.txt': 0.3411566358024681}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
            if h[i][0] > 0:
                priority[i*N+j][0] = total_spin
            else:
                priority[i*N+j][1] = -total_spin
                
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
                    
        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N = int(N)
        J_new = J.reshape(-1,2).flatten()
        sum1 = (np.prod(J_new[0::2], 0)).flatten()
        sum2 = (np.prod(J_new[1::2], 0)).flatten()
        h_flatten = h.flatten()
        priority = np.column_stack((sum1+h_flatten, -sum1-h_flatten))
        return(priority)




#score: {'data2D.txt': 0.2313328703703704}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N = int(N)
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = [[0,0] for _ in range(N**2)]
    for i in range(N):
      for j in range(N):
        total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][j] > 0 else -state[(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(3)])
        if h[i][j] > 0:
          priorities[i*N+j] = [total_spin, 1]
        else:
          priorities[i*N+j] = [-total_spin, -1]
    return priorities




#score: {'data2D.txt': -0.0018547839506172837}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N = int(N)
        priorities = [[0,0] for _ in range(N**2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][0] += h[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[i][0]
                else:
                    priorities[i*N+j][1] = -total_spin[i][1]
        for i in range(N):
            site = (i + ((N-1)%2 - 1)) % N
            total_spin[i][0] += sum([h[k][site] for k in range(N)])
            if h[i][N-1-i] > 0:
                priorities[i*N+site][0] = total_spin[i][0]
            else:
                priorities[i*N+site][1] = -total_spin[i][1]
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    site = (i + ((1%2 - 1)) % N) * N + j
                    total_priority[site, 0] += 1
                else:
                    site = (i + ((1%2 - 1)) % N) * N + j
                    total_priority[site, 1] -= 1
        return total_priority




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin_sum = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin_sum += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin_sum, 1))
                else:
                    priorities.append((-total_spin_sum, -1))
        return priorities




#score: {'data2D.txt': -0.0015458333333333333}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((total_spin, -1))
        return [[a, b] for a,b in sorted(priority)]




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = [0, 0]
                
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[site][j]
                if h[i][j] > 0:
                    priorities.append([total_spin[0], 1])
                else:
                    priorities.append([-total_spin[0], -1])
        
        return priorities




#score: {'data2D.txt': -0.05336157407407408}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
        
        for j in range(N):
            row_sum = sum(h[:,j])
            for i in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority[i*N+j][0] += row_sum
                else:
                    priority[i*N+j][1] -= row_sum
        
        return priority




#score: {'data2D.txt': 0.004595524691358025}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = [np.zeros((N,2), dtype=int) for _ in range(N)]
    
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[i][site][0] += spin
            priority_total[i*N+j] = [total_spin[i][0].sum(), -total_spin[i][1].sum()]
    return priority_total




#score: {'data2D.txt': -0.05414922839506174}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i][0]
                else:
                    priority[i*N+j][1] = -total_spin[i][0]
        for i in range(N):
            row_sum = sum(h[i])
            for j in range(N):
                if h[i][j] > 0:
                    priority[i*N+j][0] += row_sum
                else:
                    priority[i*N+j][1] -= row_sum
        return priority




#score: {'data2D.txt': -0.09538009259259264}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0,0] for _ in range(N*N)]
    total_spin = [0]*N
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[site] += h[i][j]
        if h[i][j] > 0:
          priority[i*N+j][0] = total_spin[site]
        else:
          priority[i*N+j][1] = -total_spin[site]
    return priority




#score: {'data2D.txt': 0.0036479938271604933}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2, 2), dtype=int)
        for i in range(N):
            total_spin = [0, 0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                total_spin[1] -= h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+0][0] = total_spin[0]
                priority_total[i*N+N-1][1] = -total_spin[1]
            else:
                priority_total[i*N+0][0] = -total_spin[0]
                priority_total[i*N+N-1][1] = total_spin[1]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[j*N+i][0] += state[site][j]
                    priority_total[j*N+i][1] -= state[site][j]
        return priority_total




#score: {'data2D.txt': -0.0026933641975308642}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            if h[i][j] > 0:
                total_spin[0] += state[site][j]
                priority_total[j*N+i][0] = total_spin[0]
            else:
                total_spin[1] -= state[site][j]
                priority_total[j*N+i][1] = -total_spin[1]
    
    return priority_total




#score: {'data2D.txt': 0.16438472222222242}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[0] += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin[0], 1))
            else:
                priorities.append((-total_spin[0], -1))
    return priorities




#score: {'data2D.txt': 0.15176033950617307}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            total_spin = [[0,0] for _ in range(N)]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[j][0] += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[j][0], 1))
                else:
                    priorities.append((-total_spin[j][0], -1))
        return priorities




#score: {'data2D.txt': -0.004206944444444445}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[1] += state[site][j]
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[1]
                else:
                    priority_total[j][1] = -total_spin[1]
        return priority_total




#score: {'data2D.txt': -0.00040817901234567943}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N) // N) % N
                total_spin[site][0] += state[i][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((total_spin[i][0], 1))
                else:
                    priorities.append((-total_spin[i][0], -1))
        return [[priority[0], priority[1]] for priority in sorted(priorities, reverse=True)]




#score: {'data2D.txt': -0.0667609567901235}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = np.zeros((N*N,2), dtype=int)
    total_spin = np.zeros((N,N), dtype=int)
    
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - N) // N) % N
        total_spin[site][0] += state[i][j]
        if h[i][j] > 0:
          priorities[i*N+j,0] = total_spin[site][0]
          priorities[i*N+j,1] = 1
        else:
          priorities[i*N+j,0] = -total_spin[site][0]
          priorities[i*N+j,1] = -1
    
    return priorities.tolist()




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N) // N) % N
                total_spin = sum([state[i][k] if abs(i-site) + abs(j-k) == 1 else state[i][k]*h[i][k] for k in range(N)])
                priorities[i*N+j] = [total_spin, -total_spin]
        return priorities.tolist()




#score: {'data2D.txt': -0.00044830246913580185}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N) // N) % N
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total = total_spin
                else:
                    priority_total = -total_spin
                priorities.append((priority_total, 1))
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': 0.027214043209876543}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
        for i in range(N):
            for j in range(N):
                total_spin[0][j] = total_spin[N-1][j] if j == 0 else (total_spin[0][j-1] + total_spin[N-1][j]) // 2
                site = (i + ((j-1)%2 - 1)) % N
                priorities[i*N+j, 0] = total_spin[site][0]
        return priorities




#score: {'data2D.txt': 0.057156018518518543}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i+((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, 1]
                else:
                    priorities[i*N+j] = [-total_spin, -1]
        return priorities




#score: {'data2D.txt': 0.057156018518518543}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin = sum([J[(i+((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
                    priorities[i*N+j] = [total_spin, 1]
                else:
                    total_spin = sum([J[(i+((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
                    priorities[i*N+j] = [-total_spin, -1]
        return priorities




#score: {'data2D.txt': 0.03179552469135804}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = []
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if (i+k)%2 == 0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                priority.append((total_spin, 1) if h[i][j] > 0 else (-total_spin, -1))
        
        return priority




#score: {'data2D.txt': -0.0016973765432098762}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
                
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flat = J.reshape(4*N**2)
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': 8.132716049382671e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flat[(site*N+j)*4:(site*N+j)*4+1].sum()
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.001041203703703704}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flat[(site*N+j)*4+k]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [(i[0], i[1]) for i in sorted(priorities)]




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.0013307098765432098}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    spin = -1 if h[i][j] > 0 else 1
                    total_spin[spin==1] += J[(site*N+j)*4:(site*N+j)*4+1].sum()
                priority_total = [int(x) for x in total_spin]
                priorities[i*N+j] = priority_total
        return priorities




#score: {'data2D.txt': 0.11328441358024705}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N**2)]
        J_flat = J.reshape((4*N**2))
        for i in range(N):
            for j in range(N):
                site_spin_sum = [0, 0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin = site_spin_sum[0] if h[i][j] > 0 else site_spin_sum[1]
                    total_spin += J_flat[(site*N+j)*4:(site*N+j)*4+1].sum()
                    site_spin_sum[0] += h[i][j] if total_spin > 0 else -h[i][j]
                    site_spin_sum[1] -= h[i][j] if total_spin < 0 else -h[i][j]
                priorities[i*N+j] = list(site_spin_sum)
        return priorities




#score: {'data2D.txt': -0.16809830246913599}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin = site_sum + row_sum[j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.05763101851851852}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin = site_sum
                if h[i][j] > 0:
                    total_priority[i*N+j, 0] = total_spin
                else:
                    total_priority[i*N+j, 1] = -total_spin
        return total_priority




#score: {'data2D.txt': 0.1713328703703706}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin = site_sum
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.02222052469135802}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = J.reshape(4,N*N)
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[k][i*N+j]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                    priority_total[i*N+j, 1] = -total_spin
                else:
                    priority_total[i*N+j, 0] = -total_spin
                    priority_total[i*N+j, 1] = total_spin
        return priority_total




#score: {'data2D.txt': 0.14825046296296315}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J = J.reshape(4,N*N)
    priority_total = [[0,0] for _ in range(N*N)]
    for i in range(N):
      for j in range(N):
        total_spin = sum([J[0][i*N+j-1], J[1][(i+1)*N%N+j], J[2][i*N+N-1-j], J[3][i*N%N+j-1]])
        if h[i][j] > 0:
          priority_total[i*N+j] = [total_spin, 1]
        else:
          priority_total[i*N+j] = [-total_spin, -1]
    return priority_total




#score: {'data2D.txt': 0.04580787037037038}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum([row_sum[k] * state[site][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0012103395061728393}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = np.zeros((N, N), dtype=int)
        for i in range(N):
            for j in range(N):
                state = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += state
                priority_total = np.zeros((N,2), dtype=int)
                for l in range(N):
                    total_spin[l][0] += state
                priority_total[state][0] += sum([total_spin[m][n] if m != i else 0 for m in range(N) for n in range(N)])
                priorities[i*N+j] = [priority_total[1][0], -priority_total[0][0]]
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': 0.1647720679012351}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = []
    for i in range(N):
        for j in range(N):
            total_spin = [0, 0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[0] += state[site][j]
                total_spin[1] -= state[site][j]
            if h[i][j] > 0:
                priority_total.append([total_spin[0], -total_spin[1]])
            else:
                priority_total.append([-total_spin[0], total_spin[1]])
    return priority_total




#score: {'data2D.txt': 0.00438070987654321}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2, 2), dtype=int)
    for i in range(N):
        total_spin = [0, 0]
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[0] += state[site][j]
            total_spin[1] -= state[site][j]
        if h[i][0] > 0:
            priority_total[i*N+0][0] = total_spin[0]
            priority_total[i*N+0][1] = -total_spin[1]
        else:
            priority_total[i*N+N-1][0] = -total_spin[0]
            priority_total[i*N+N-1][1] = total_spin[1]
    for j in range(N):
        for i in range(N):
            site = (i + ((j-1)%N - 1)) % N
            if h[i][j] > 0:
                priority_total[j*N+i][0] += state[site][j]
                priority_total[j*N+i][1] -= state[site][j]
    return priority_total




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priority_total.append((total_spin, 1))
            else:
                priority_total.append((-total_spin, -1))
    return priority_total




#score: {'data2D.txt': -0.0008128086419753088}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N)]
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        for k in range(3):
          neighbor = (i + ((k-1)%2 - 1)) % N
          total_spin[neighbor][0] += J[k][i*N+j]
        if h[i][j] > 0:
          priority_total = total_spin[i][0]
        else:
          priority_total = -total_spin[i][0]
        for k in range(3):
          neighbor = (i + ((k-1)%2 - 1)) % N
          total_spin[neighbor][0] -= J[k][i*N+j]
        if h[i][j] > 0:
          return [[N*i+j,1] for _ in range(N**2)]
        else:
          return [[N*i+j,-1] for _ in range(N**2)]

    priority_total = [[0 for _ in range(2)] for _ in range(N)]
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[site][0] += h[i][j]
        if h[i][j] > 0:
          priority_total[j][0] = total_spin[site][0]
        else:
          priority_total[j][1] = -total_spin[site][0]

    return [priority_total[j] for j in range(N)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N)]
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        for k in range(3):
          neighbor = (i + ((k-1)%2 - 1)) % N
          total_spin[neighbor][0] += J[k][i*N+j]
        if h[i][j] > 0:
          priority_total = [(N*i+j,1) for _ in range(N**2)]
        else:
          priority_total = [(N*i+j,-1) for _ in range(N**2)]
      return priority_total




#score: {'data2D.txt': -0.0010214506172839502}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        total_spin = [np.zeros(2) for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state_site = state[site]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += state_site[k%N]
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
        return priority_total




#score: {'data2D.txt': -0.06477114197530873}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], 1))
                else:
                    priorities.append((-total_spin[site][0], -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N, 2), dtype=int)
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += site_spin*(-1)**((k-1)%2)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = int(np.sum(total_spin[:,j]))
                else:
                    priorities[i*N+j, 1] = -int(np.sum(total_spin[:,j]))
        return priorities.tolist()




#score: {'data2D.txt': 0.16028688271604957}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], -1))
        return priorities




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return [[p[0], p[1]] for p in sorted(priorities)]




#score: {'data2D.txt': -0.0006023148148148145}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    state = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += h[state][j]
                if h[i][j] > 0:
                    priority_total = [[float('inf') for _ in range(2)] for _ in range(N**2)]
                    for j in range(N):
                        site = (i + ((j-1)%N - 1)) % N
                        if h[site][j] > 0:
                            priority_total[i*N+j][0] = total_spin[i*N+j][0]
                        else:
                            priority_total[i*N+j][1] = -total_spin[i*N+j][1]
                    return [[x for x in row] for row in priority_total]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        return priorities




#score: {'data2D.txt': 0.16438472222222242}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return priorities




#score: {'data2D.txt': -0.005166512345679013}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.031181944444444453}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[0] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[0]
            else:
                priority_total[i*N+j][1] = -total_spin[0]
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[0] += state[site][j]
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[0]
            else:
                priority_total[j][1] = -total_spin[0]
    return priority_total.tolist()




#score: {'data2D.txt': -0.002104783950617284}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        for j in range(N):
            total_spin = [0,0]
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += state[site][j]
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[0]
                else:
                    priority_total[j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][0] += state[site][j]
        priority_total = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][1] += h[site][j]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, h[i][j]))
                else:
                    priorities.append((-total_spin, -h[i][j]))
        return [[p[1], p[0]] for p in priorities]




#score: {'data2D.txt': -0.051907561728395064}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[(i + ((j-1)%2 - 1)) % N][min(j,N-1)] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[p[1], p[0]] for p in priorities]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = total_spin
                else:
                    priorities[i*N+j, 1] = -total_spin
        return priorities




#score: {'data2D.txt': -0.0043788580246913586}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priorities = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        total_spin = [0, 0]
        for j in range(N):
            site1 = (i + ((j-1)%N - 1)) % N
            total_spin[0] += h[site1][j]
            if h[i][j] > 0:
                priorities[i*N+j][0] = total_spin[0]
            else:
                priorities[i*N+j][1] = -total_spin[0]
            
            site2 = (i + ((N-1-j)%N - 1)) % N
            total_spin[1] += h[site2][j]
            if h[i][j] > 0:
                priorities[i*N+j][0] += total_spin[1]
            else:
                priorities[i*N+j][1] -= total_spin[1]
    return priorities




#score: {'data2D.txt': -0.0043788580246913586}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site1][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[0]
                else:
                    priorities[i*N+j][1] = -total_spin[0]
                
                site2 = (i + ((N-1-j)%N - 1)) % N
                total_spin[1] += h[site2][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] += total_spin[1]
                else:
                    priorities[i*N+j][1] -= total_spin[1]
        
        return priorities




#score: {'data2D.txt': -0.0043788580246913586}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site1][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[0]
                else:
                    priorities[i*N+j][1] = -total_spin[0]
                
                site2 = (i + ((N-1-j)%N - 1)) % N
                total_spin[1] += h[site2][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] += total_spin[1]
                else:
                    priorities[i*N+j][1] -= total_spin[1]
        return priorities




#score: {'data2D.txt': -0.0043788580246913586}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site1][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[0]
                else:
                    priorities[i*N+j][1] = -total_spin[0]
                
                site2 = (i + ((N-1-j)%N - 1)) % N
                total_spin[1] += h[site2][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] += total_spin[1]
                else:
                    priorities[i*N+j][1] -= total_spin[1]
        return priorities




#score: {'data2D.txt': 0.15547268518518542}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin[i][j] = -1
                else:
                    total_spin[i][j] = 1
                site = (i + ((2)%2 - 1)) % N
                if i < N-1:
                    total_spin[site][j] += total_spin[i][j]
                if j < N-1:
                    total_spin[i][site] += total_spin[i][j]
        return [[total_spin[i][j],-total_spin[i][j]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.3266069444444435}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += state[i][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = (total_spin[i*N+j][0],1)
                else:
                    priority_total[i*N+j] = (-total_spin[i*N+j][0],-1)
        return priority_total




#score: {'data2D.txt': -0.0010705246913580246}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted([(x[0],x[1]) for x in priorities])[::-1]




#score: {'data2D.txt': -0.0006347222222222216}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    
    for i in range(N):
      total_spin = [0]*N
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[site] += state[i][j]
      if h[i][j] > 0:
        priority_total[(i*N+j), 0] = sum(total_spin)
      else:
        priority_total[(i*N+j), 1] = -sum(total_spin)
    
    return priority_total




#score: {'data2D.txt': -0.06497083333333337}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N, 2), dtype=int)
        
        for i in range(N):
            total_spin = [0]*N
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = sum(total_spin)
                else:
                    priority_total[(i*N+j), 1] = -sum(total_spin)
        return priority_total




#score: {'data2D.txt': -0.0006347222222222216}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
          total_spin = [0]*N
          for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[site] += state[i][j]
          if h[i][j] > 0:
            priority_total[(i*N+j), 0] = sum(total_spin)
          else:
            priority_total[(i*N+j), 1] = -sum(total_spin)
        
        return priority_total




#score: {'data2D.txt': -0.0006347222222222216}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
          total_spin = [0]*N
          for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[site] += state[i][j]
          if h[i][j] > 0:
            priority_total[(i*N+j), 0] = sum(total_spin)
          else:
            priority_total[(i*N+j), 1] = -sum(total_spin)
        
        return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          for j in range(N):
              total_spin = [0,0]
              for k in range(3):
                  site = (i + ((k-1)%2 - 1)) % N
                  if h[i][j] > 0:
                      total_spin[1] += state[site][j]
                  else:
                      total_spin[0] -= state[site][j]
              priorities.append(total_spin)
      return priorities




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                priority_total = [total_spin, -total_spin]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[float('-inf'), float('inf')] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[i-((i+1)%N)][j-k%N] if k < N else -1*state[(-i+N-1)%N][min(j+k-N,k)] 
                                  for k in range(max(0,j-1))])
                
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = np.zeros((N,2), dtype=int)
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priority_total = [total_spin[site][0], -total_spin[site][0]]
                else:
                    priority_total = [-x for x in [total_spin[site][0], -total_spin[site][0]]]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        priority = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][site] += h[i][j]
                
                if h[i][j] > 0:
                    priority[(i*N+j),0] = total_spin[i][site]
                else:
                    priority[(i*N+j),1] = -total_spin[i][site]
        
        return priority




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append([total_spin, -total_spin])
                else:
                    priorities.append([-total_spin, total_spin])
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i][j] = total_spin
            else:
                priority_total[i][j] = -total_spin
    return [[x, -x] for x in priority_total.flatten()]




#score: {'data2D.txt': -0.048366820987654324}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = []
        
        for i in range(N):
            row_sum = [sum(state[k][i:i+1]+state[(k+1)%N][i:i+1]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[j-k%N][i] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority.append((total_spin, -1))
                else:
                    priority.append((total_spin, 1))
        
        return priority




#score: {'data2D.txt': 0.010818672839506174}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = [0]*N
            for j in range(N):
                site = (i + ((j-1)%N) - N//2) % N
                total_spin[site] += state[i][j]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[j]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[j]
        
        return priority_total




#score: {'data2D.txt': -0.0502550925925926}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0]*N
            for j in range(N):
                site = (i + ((j-1)%N) - N//2) % N
                total_spin[site] += h[i][j]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = sum(total_spin)
                else:
                    priority_total[(i*N+j), 1] = -sum(total_spin)
        return priority_total




#score: {'data2D.txt': 0.010818672839506174}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = [0]*N
            for j in range(N):
                site = (i + ((j-1)%N) - N//2) % N
                total_spin[site] += state[i][j]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[j]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[j]
        return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0,0] for _ in range(N*N)]
    for i in range(N):
      for j in range(N):
        total_spin = 0
        site = (i + ((j-1)%2 - 1)) % N
        total_spin += h[site][j]
        if h[i][j] > 0:
          priority[i*N+j][0] = total_spin
        else:
          priority[i*N+j][1] = -total_spin
    return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0004026234567901235}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += spin
            priority_total = np.zeros((N,2), dtype=int)
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[j][0]
                else:
                    priority_total[j][1] = -1*total_spin[j][0]
            for j in range(N):
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[0][0]
                else:
                    priority[i*N+j][1] = -1*total_spin[0][0]
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][0] += h[i][j]
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin[site][0]
            else:
                priority[i*N+j][1] = -total_spin[site][0]
    return priority




#score: {'data2D.txt': -0.000583796296296295}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape((4*N**2,))
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = 0
            for j in range(N):
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flat[(site*N+3-j)%N::].sum()
                if h[i][j] > 0:
                    priorities.append([(total_spin, 1)])
                else:
                    priorities.append([(-total_spin, -1)])
        return [i[0] for i in priorities]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = h[site][j]
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin
            else:
                priority[i*N+j][1] = -total_spin
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = np.zeros((N,N), dtype=int)
      for i in range(N):
          for j in range(N):
              site = (i + ((0)%2 - 1)) % N
              total_spin[site][j] += h[i][j]
              if h[i][j] > 0:
                  priority_total = np.zeros((N*N,2), dtype=int)
                  for i in range(N):
                      for j in range(N):
                          if h[i][j] > 0:
                              priority_total[i*N+j][0] = total_spin[site][j]
                          else:
                              priority_total[i*N+j][1] = -total_spin[site][j]
                  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin[i][j] += h[i][j]
                if h[i][j] > 0:
                    total_spin[i][j] += 1
                else:
                    total_spin[i][j] -= 1
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i][j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i][j]
        return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return priority




#score: {'data2D.txt': 0.1746979938271607}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append([-total_spin, total_spin])
                else:
                    priorities.append([total_spin, -total_spin])
        return priorities




#score: {'data2D.txt': -0.0006180555555555562}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]

        for j in range(N):
            if h[0][j] > 0:
                priority[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority[j][1] -= sum(h[k][j] for k in range(1,N))

        return priority




#score: {'data2D.txt': 0.19654398148148175}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority_total = total_spin[site][0]
                else:
                    priority_total = -total_spin[site][0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities.append([priority_total, 1])
                else:
                    priorities.append([-priority_total, -1])
        return priorities




#score: {'data2D.txt': -0.19614120370370397}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_list = []
    for i in range(N):
      for j in range(N):
        site_spin = state[i][j]
        total_spin = 0
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          if h[site][j] > 0:
            total_spin += site_spin
          else:
            total_spin -= site_spin
        priority_list.append([total_spin, site_spin])
    return priority_list




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N, 2), dtype=int)
        total_spin = np.zeros((N, N), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += h[site][j]
                
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin[i][j]
                else:
                    priority[(i*N+j), 1] = -total_spin[i][j]
                    
        return priority




#score: {'data2D.txt': 0.01271496913580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_priority[i*N+j][0] += site_spin * J[k][site][j]
        return total_priority




#score: {'data2D.txt': 0.01271496913580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site_spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_priority[i*N+j][0] += site_spin * J[k][site][j]
    return total_priority




#score: {'data2D.txt': 0.01271496913580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
      for i in range(N):
          for j in range(N):
              site_spin = -1 if h[i][j] > 0 else 1
              for k in range(3):
                  site = (i + ((k-1)%2 - 1)) % N
                  total_priority[i*N+j][0] += site_spin * J[k][site][j]
      return total_priority




#score: {'data2D.txt': 0.01271496913580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site_spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_priority[i*N+j][0] += site_spin * J[k][site][j]
    return total_priority




#score: {'data2D.txt': -0.0006810185185185182}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.random.rand(N**2,2)
        return(priority)




#score: {'data2D.txt': -0.17066188271604887}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spins = [sum([-state[i][j] if h[i][j] > 0 else state[i][j] for j in range(N)]) for i in range(N)]
        for i in range(N):
            for j in range(N):
                site_total_spin = sum([total_spins[(i+k)%N] * (-1)**((k+1)%(2)) if k < 0 else total_spins[(i-k-1)%N] * (-1)**(k%2) for k in range(max(j, N-j)-1)])
                if h[i][j] > 0:
                    priorities.append([site_total_spin, -1*site_total_spin])
                else:
                    priorities.append([-site_total_spin, site_total_spin])
        return priorities




#score: {'data2D.txt': -0.04909398148148149}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j-(k%N)]
                if h[i][j] > 0:
                    priority_total = [total_spin, -1*total_spin]
                else:
                    priority_total = [-total_spin, total_spin]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
    return priority_total




#score: {'data2D.txt': 0.0031587962962963006}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = J.reshape(4,N*N)
        priority_total = np.zeros((N*N,2), dtype=int)
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((0)%2 - 1)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j] = [sum(J[0][:i*N+j]), h[i][j]]
                else:
                    priority_total[i*N+j] = [-sum(J[0][:i*N+j]), -h[i][j]]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0 for _ in range(2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) // N + (i % N)) % N
                total_spin[0] += state[i][j] if h[i][j] > 0 else -state[i][j]
                total_spin[1] -= state[i][j] if h[i][j] > 0 else -state[i][j]
        for i in range(N):
            row_sum = [sum([h[k][j] * state[k][i-j%N] for k in range(min(i,N-1))]) for j in range(N)]
            for j in range(N):
                priorities.append((total_spin[0] + row_sum[j], 1) if h[i][j] > 0 else (total_spin[1] - row_sum[j], -1))
        return [row for row in priorities]




#score: {'data2D.txt': 0.20332700617283966}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0016628086419753088}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = 0
        for i in range(N):
            for j in range(N):
                site = (i + ((2)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities[(i*N+j), 0] = total_spin
            else:
                priorities[(i*N+j), 1] = -total_spin
        return priorities.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i+((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
                priorities.append([total_spin, -1 if h[i][j] > 0 else 1])
        return priorities




#score: {'data2D.txt': -0.001633487654320987}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if 0 <= k-j+N <= N and 0 <= k-j-N < N else h[i][j] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [(x[0], x[1]) for x in sorted(priorities)]




#score: {'data2D.txt': 0.057156018518518543}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          for j in range(N):
              total_spin = sum([J[(i+((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
              if h[i][j] > 0:
                  priorities.append([total_spin, 1])
              else:
                  priorities.append([-total_spin, -1])
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1876375000000008}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x[1],x[0]] for x in priorities]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin[site][0], 1]
                else:
                    priorities[i*N+j] = [-total_spin[site][0], -1]
        return priorities




#score: {'data2D.txt': -0.0013307098765432098}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    spin = -1 if h[i][j] > 0 else 1
                    total_spin[spin==1] += J[(site*N+j)*4:(site*N+j)*4+1].sum()
                priority_total = [int(x) for x in total_spin]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -0.0013307098765432098}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N): 
          for j in range(N): 
              total_spin = [0,0]
              for k in range(3):
                  site = (i + ((k-1)%2 - 1)) % N
                  spin = -1 if h[i][j] > 0 else 1
                  total_spin[spin==1] += J[(site*N+j)*4:(site*N+j)*4+1].sum()
              priority_total = [int(x) for x in total_spin]
              priorities.append(priority_total)
      return priorities




#score: {'data2D.txt': -0.0013307098765432098}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    spin = -1 if h[i][j] > 0 else 1
                    total_spin[spin==1] += J[(site*N+j)*4:(site*N+j)*4+1].sum()
                priority_total = [int(x) for x in total_spin]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -1.4043209876543283e-05}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin, -total_spin]
                else:
                    priority[i*N+j] = [-total_spin, total_spin]
        return priority




#score: {'data2D.txt': -0.17424212962962976}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j%2) - 1)) % N
                total_spin[site][0] += state[i][j]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priorities.append([total_spin[i//N][0], 1])
            else:
                priorities.append([-total_spin[i//N][0], -1])
        return priorities




#score: {'data2D.txt': -0.1962779320987655}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j%2) - 1)) % N
            total_spin[site][0] += h[i][j]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += -1 if h[i][j] > 0 else 1
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priorities.append((total_spin[i//N][0], 1))
        else:
            priorities.append((-total_spin[i//N][0], -1))
    return priorities




#score: {'data2D.txt': -0.005123611111111112}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] * state[i][(j+((k-1)%2 - 1)) % N] for k in range(3)])
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = total_spin
                    priorities[i*N+j, 1] = 1
                else:
                    priorities[i*N+j, 0] = -total_spin
                    priorities[i*N+j, 1] = -1
        return priorities.tolist()




#score: {'data2D.txt': 0.00017824074074074075}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.00017824074074074075}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.00017824074074074075}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.09096743827160501}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -state[(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(N)])
                priorities.append((total_spin, 1) if h[i][j] > 0 else (total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.15176033950617307}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [np.zeros(2) for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[i*N+j][0], 1))
                else:
                    priorities.append((-total_spin[i*N+j][0], -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j),0] = total_spin
                else:
                    priority_total[(i*N+j),1] = -total_spin
        
        return priority_total.tolist()




#score: {'data2D.txt': 0.03179552469135804}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = []
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if (i+k)%2 == 0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        
        return priority




#score: {'data2D.txt': 0.3425050925925915}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N = int(N)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        for j in range(N):
            if h[i][N-1-i] > 0:
                site = (i + ((N-1)%2 - 1)) % N
                priority_total[i*N+site][0] += sum([h[k][site] for k in range(N)])
            else:
                site = (i + ((N-1)%2 - 1)) % N
                priority_total[i*N+site][1] -= sum([h[k][site] for k in range(N)])
        return priority_total




#score: {'data2D.txt': 0.146027314814815}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x[1], x[0]] for x in priorities]




#score: {'data2D.txt': 0.24355478395061686}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total.reshape((N*N,2))




#score: {'data2D.txt': -0.00021064814814814804}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += J[(i%2)][site][0]
                if i > 0:
                    total_spin[i][j] += J[1][site][0]
                if j > 0:
                    total_spin[i][j] += J[3][site][0]
                if i < N-1:
                    total_spin[i][j] += J[(i+1)%2][site][0]
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j][0] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
        return priority_total.reshape((N*N,2))




#score: {'data2D.txt': 5.7561728395061464e-05}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += J[(i%2)][site][0] + J[1][site][0] + J[3][site][0]
                if i > 0:
                    total_spin += J[(i+1)%2][site][0]
                if j > 0:
                    total_spin += J[2][j][0]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total.reshape((N*N,2))




#score: {'data2D.txt': -0.012068672839506174}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site_neighbor = (site + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += h[site_neighbor][j]
        return [[p[1], -p[0]] for p in total_spin]




#score: {'data2D.txt': 0.1647720679012351}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append([total_spin, 1])
            else:
                priorities.append([-total_spin, -1])
    return priorities




#score: {'data2D.txt': -0.0008128086419753088}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N)]
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        for k in range(3):
          neighbor = (i + ((k-1)%2 - 1)) % N
          total_spin[neighbor][0] += J[k][i*N+j]
        if h[i][j] > 0:
          priority_total = total_spin[i][0]
        else:
          priority_total = -total_spin[i][0]
        for k in range(3):
          neighbor = (i + ((k-1)%2 - 1)) % N
          total_spin[neighbor][0] -= J[k][i*N+j]
        if h[i][j] > 0:
          return [(N*i+j,1) for _ in range(N**2)]
        else:
          return [(N*i+j,-1) for _ in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2))
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j),:] = [total_spin, 1]
                else:
                    priority[(i*N+j),:] = [-total_spin, -1]
        return priority




#score: {'data2D.txt': -0.0067242283950617295}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N, 2), dtype=int)
        total_spin = 0
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0011856481481481481}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i][site] += h[i][j]
    priority_total = []
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total.append((total_spin[i][j], 1))
            else:
                priority_total.append((-total_spin[i][j], -1))
    return sorted(priority_total,reverse=True)




#score: {'data2D.txt': -0.007113734567901235}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = np.zeros((N,2), dtype=int)
    for j in range(N):
        if h[0][j] > 0:
            total_spin[j][0] = sum([state[i][j] for i in range(1,N)])
        else:
            total_spin[j][1] = -sum([state[i][j] for i in range(1,N)])
    priority_total = [[0,0] for _ in range(N**2)]
    for j in range(N):
        if h[0][j] > 0:
            priority_total[j*N+N-1][0] = total_spin[j][0]
            priority_total[j*N+N-1][1] = -total_spin[j][1]
        else:
            priority_total[j*N+N-1][0] = -total_spin[j][0]
            priority_total[j*N+N-1][1] = total_spin[j][1]
    for i in range(N):
        if h[i][0] > 0:
            priority_total[i*N+0][0] = sum([state[k][0] for k in range(1,N)])
        else:
            priority_total[i*N+0][0] = -sum([state[k][0] for k in range(1,N)])
    return priority_total




#score: {'data2D.txt': -0.17413348765432066}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [0 for _ in range(2)]
    priorities = []
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[0] += state[i][site]
            if h[i][j] > 0:
                priorities.append((total_spin[0], 1))
            else:
                priorities.append((-total_spin[0], -1))
    return priorities




#score: {'data2D.txt': -0.0667609567901235}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = np.zeros((N,2), dtype=int)
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin.sum(), 1))
                else:
                    priorities.append((-total_spin.sum(), -1))
        return priorities




#score: {'data2D.txt': 0.028334722222222223}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            total_spin[j][0] += row_sum[j]
            priority_total = np.zeros((N,2), dtype=int)
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += spin
            if h[i][j] > 0:
                priorities.append((total_spin[j][0], 1))
            else:
                priorities.append((total_spin[j][0], -1))
    return priorities




#score: {'data2D.txt': -0.005835648148148147}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return [priority[1::-1] for priority in priorities]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j]
        return priority_total




#score: {'data2D.txt': -0.0013307098765432098}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    spin = -1 if h[i][j] > 0 else 1
                    total_spin[spin==1] += J[(site*N+j)*4:(site*N+j)*4+1].sum()
                priority_total = [int(x) for x in total_spin]
                priorities[i*N + j] = priority_total
        return priorities




#score: {'data2D.txt': -0.0013307098765432098}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    spin = -1 if h[i][j] > 0 else 1
                    total_spin[spin==1] += J[(site*N+j)*4:(site*N+j)*4+1].sum()
                priorities[(i*N+j)] = list(map(int, total_spin))
        return priorities




#score: {'data2D.txt': -0.0013134259259259256}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    spin = -1 if h[site][j] > 0 else 1
                    total_spin[spin==1] += J[(site*N+j)*4:(site*N+j)*4+1].sum()
                priorities[i*N+j] = [x for x in total_spin]
        return priorities




#score: {'data2D.txt': -0.0011464506172839508}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = np.roll(J, 1, axis=0)[:, :-1]
        J = np.concatenate((J, J), axis=0)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total = [total_spin, h[i][j]]
                else:
                    priority_total = [-total_spin, -h[i][j]]
                priorities.append(priority_total)
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': 0.056820833333333334}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k==2:
                        continue
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    site_sum += J[k][neighbor[0]][neighbor[1]]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i].sum() > 0:
                for j in range(N):
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin_site = total_spin[site][j]
                    priority_total[i*N+j, 0] = total_spin_site
            else:
                for j in range(N):
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin_site = total_spin[site][j]
                    priority_total[i*N+j, 1] = -total_spin_site
        return priority_total




#score: {'data2D.txt': 0.0004239197530864195}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k==2:
                        continue
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    site_sum += J[k][neighbor[0]][neighbor[1]]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N,N,2), dtype=int)
        for j in range(N):
            if h[j].sum() > 0:
                priority_total[:,j,0] = total_spin.sum(axis=1)
            else:
                priority_total[:,j,1] = -1*total_spin.sum(axis=1)
        return priority_total.reshape((N*N,2))




#score: {'data2D.txt': 0.05727546296296296}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k==2:
                        continue
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    site_sum += J[k][neighbor[0]][neighbor[1]]
                total_spin = site_sum
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': 0.1440479938271607}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i + ((k-1)%2 - 1)) % N][j] * (-1 if h[i][j] > 0 else 1) for k in range(4)])
                if h[i][j] > 0:
                    priority_list.append((total_spin, 1))
                else:
                    priority_list.append((total_spin, -1))
        return priority_list




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_priority[i*N+j, 0] = total_spin
                else:
                    total_priority[i*N+j, 1] = -total_spin
        return total_priority




#score: {'data2D.txt': 0.21655354938271626}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = J.reshape(4,N*N)
        priority_total = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k,(i+k)%N*(N)+j] if k%2==0 else -J[3-k,(i+(k-1))%N*(N)+j] for k in range(4)])
                if h[i][j] > 0:
                    priority_total.append((total_spin, 1))
                else:
                    priority_total.append((total_spin, -1))
        return priority_total




#score: {'data2D.txt': -0.15269768518518537}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i*N+j][0] += h[site][j]
            if h[i][j] > 0:
                total_spin[i*N+j][1] = total_spin[i*N+j][0]
            else:
                total_spin[i*N+j][1] = -total_spin[i*N+j][0]
        
    return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.0010939814814814816}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = sum(J[i*N:(i+1)*N,j*N:(j+1)*N][::2].flatten()) + h[i][j]
                if h[i][j] > 0:
                    priorities[j][0] = total_spin
                else:
                    priorities[j][1] = -total_spin
        
        return [list(x) for x in priorities]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
                    
        return priority




#score: {'data2D.txt': -0.3172692901234563}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        
        for j in range(N):
            if h[j][0] > 0:
                priority_total = [0, 0]
                for i in range(N):
                    site = (i + ((2-1)%2 - 1)) % N
                    total_spin = sum([h[site][j] for j in range(N)])
                    if h[i][0] > 0:
                        priority_total[0] += total_spin
                    else:
                        priority_total[1] -= total_spin
                priority[j*N+0][0] = priority_total[0]
                priority[j*N+0][1] = -priority_total[1]
        
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(-1,4).sum(1)
        priority_total = np.zeros((N,N,2), dtype=int)
        for j in range(N):
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if J_flat[i*N+j] > 0:
                    priority_total[i][j][0] = total_spin
                else:
                    priority_total[i][j][1] = -total_spin
        return priority_total.reshape(-1,2)




#score: {'data2D.txt': 0.11460447530864211}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flat[(site*N+j)*4:(site*N+j)*4+1].sum()
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin
                    priority_total[i][j][1] = 1
                else:
                    priority_total[i][j][0] = -total_spin
                    priority_total[i][j][1] = -1
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append([total_spin, 0])
                else:
                    priority.append([-total_spin, 1])
        return priority




#score: {'data2D.txt': -0.0017121913580246911}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': -0.0017121913580246911}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': 0.009171759259259258}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[0.5, 0.5] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    total_spin += state[site][k]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_ = np.reshape(J,(4,N*N)) # Reshape J to be N x N
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if J_[0][i*N+j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((-total_spin, -1))
      return priorities




#score: {'data2D.txt': -0.1748381172839508}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
        priorities = []
        for i in range(N*N):
            if h[i//N][i%N] > 0:
                priorities.append((total_spin[i//N][0], 1))
            else:
                priorities.append((-total_spin[i//N][0], -1))
        return priorities




#score: {'data2D.txt': -0.00021219135802469157}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = np.zeros((N*N,2), dtype=int)
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j%N+1) - 1)) % N
        total_spin[site][0] += state[i][j]
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        if h[i][j] > 0:
          priorities[(i*N+j),0] = total_spin[site][0]
        else:
          priorities[(i*N+j),1] = -total_spin[site][0]
    return priorities




#score: {'data2D.txt': 0.035122993827160484}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = [np.zeros((N,), dtype=int) for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin_sum = 0
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin_sum += site_spin * state[site][max(0,j-k)%N]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin_sum
                else:
                    priorities[(i*N+j), 1] = -total_spin_sum
        return priorities




#score: {'data2D.txt': -0.0014291666666666658}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            site_sum = 0
            for k in range(4):
                if k == 0:
                    neighbor = (i+1)%N, j
                elif k == 1:
                    neighbor = i, (j+1)%N
                elif k == 2:
                    neighbor = (i-1+N)%N, j
                else:
                    neighbor = i, (j-1+N)%N
                site_sum += J[k][neighbor[0]][neighbor[1]]
            total_spin[i][j] = site_sum
    priority_total = np.zeros((N*N,2), dtype=int)
    for j in range(N):
        if h[j].sum() > 0:
            priority_total[(j*N):(j+1)*N, 0] = total_spin.sum(axis=1)
        else:
            priority_total[(j*N):(j+1)*N, 1] = -1*total_spin.sum(axis=1)
    return priority_total.reshape((N*N,2))




#score: {'data2D.txt': -0.0008266975308641976}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site_sum = 0
            for k in range(4):
                if k == 0:
                    neighbor = (i+1)%N, j
                elif k == 1:
                    neighbor = i, (j+1)%N
                elif k == 2:
                    neighbor = (i-1+N)%N, j
                else:
                    neighbor = i, (j-1+N)%N
                site_sum += J[k][neighbor[0]][neighbor[1]]
            total_spin[i*N+j, 0] = -site_sum if h[i][j]>0 else site_sum
    return total_spin




#score: {'data2D.txt': -0.0014291666666666658}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 0:
                        neighbor = (i+1)%N, j
                    elif k == 1:
                        neighbor = i, (j+1)%N
                    elif k == 2:
                        neighbor = (i-1+N)%N, j
                    else:
                        neighbor = i, (j-1+N)%N
                    site_sum += J[k][neighbor[0]][neighbor[1]]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j].sum() > 0:
                priority_total[(j*N):(j+1)*N, 0] = total_spin.sum(axis=1)
            else:
                priority_total[(j*N):(j+1)*N, 1] = -1*total_spin.sum(axis=1)
        return priority_total.reshape((N*N,2))




#score: {'data2D.txt': 0.08913719135802477}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = total_spin
                    priorities[i*N+j, 1] = -total_spin
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        for j in range(N):
            priority_total = np.zeros((N,2), dtype=int)
            for i in range(N):
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin
                else:
                    priority_total[j][1] = -total_spin
        return priorities




#score: {'data2D.txt': 0.0611304012345679}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k==2:
                        continue
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    site_sum += J[k][neighbor[0]][neighbor[1]]
                total[i*N+j, 0] = site_sum
        for i in range(N):
            if h[i].sum() > 0:
                for j in range(N):
                    site = (i + ((j-1)%2 - 1)) % N
                    total[i*N+site, 0] += h[site][j]
            else:
                for j in range(N):
                    site = (i + ((j-1)%2 - 1)) % N
                    total[i*N+site, 1] -= h[site][j]
        return total




#score: {'data2D.txt': 0.056820833333333334}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k==2:
                        continue
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    site_sum += J[k][neighbor[0]][neighbor[1]]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i].sum() > 0:
                for j in range(N):
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin_site = total_spin[site][j]
                    priority_total[i*N+j, 0] = total_spin_site
            else:
                for j in range(N):
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin_site = total_spin[site][j]
                    priority_total[i*N+j, 1] = -total_spin_site
        return priority_total




#score: {'data2D.txt': -0.0009492283950617285}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j+1)%2 - 1)) % N
                for k in range(3):
                    if k==1:
                        continue
                    neighbor_i = (i + ((k-1)%2 - 1)) % N
                    total_spin[neighbor_i][0] += h[i][j]
        priorities = []
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total = np.zeros((N,2), dtype=int)
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[site][0] += 1
                    priority_total[j][0] = total_spin[j][0]
                else:
                    priority_total = np.zeros((N,2), dtype=int)
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[site][0] -= 1
                    priority_total[j][1] = -total_spin[j][0]
                priorities.append(list(priority_total[0]))
        return priorities




#score: {'data2D.txt': -0.0011328703703703705}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N)]
    for i in range(N):
      for j in range(N):
        site = (i + ((2-j)%2 - 1)) % N
        for k in range(3):
          neighbor_i = (i + ((k-1)%2 - 1)) % N
          total_spin[neighbor_i][0] += h[i][j]
    priorities = []
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          priorities.append((-total_spin[i][0], 1))
        else:
          priorities.append((total_spin[i][0], -1))
    return [list(x) for x in sorted(priorities)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority_list.append((total_spin, 1))
                else:
                    priority_list.append((-total_spin, -1))
        return priority_list




#score: {'data2D.txt': -0.001226697530864198}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if h[neighbor[0]][neighbor[1]] > 0:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum -= J[k][neighbor[0]][neighbor[1]]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N,N,2), dtype=int)
        for j in range(N):
            if h[:,j].sum() > 0:
                priority_total[:,:,0] += total_spin.sum(axis=0)
            else:
                priority_total[:,:,1] -= total_spin.sum(axis=0)
        return priority_total.reshape((N*N,2))




#score: {'data2D.txt': -0.0001304012345679008}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 2:
                        continue
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N,N,2), dtype=int)
        for j in range(N):
            if h[j].sum() > 0:
                priority_total[:,j,0] = total_spin.sum(axis=1)
            else:
                priority_total[:,j,1] = -1*total_spin.sum(axis=1)
        return priority_total.reshape((N*N,2))




#score: {'data2D.txt': 0.0010347222222222218}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 0:
                        site_sum += J[k][i-1%N][j]
                    elif k == 1:
                        site_sum += J[k][(i+1)%N][j]
                    elif k == 2:
                        site_sum += J[k][i][j-1%N]
                    else:
                        site_sum += J[k][i][(j+1)%N]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j].sum() > 0:
                priority_total[j::N,0] = total_spin.sum(axis=1)
            else:
                priority_total[j::N,1] = -1*total_spin.sum(axis=1)
        return priority_total




#score: {'data2D.txt': 0.20332700617283966}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0008381172839506171}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum([J[k][site][j-k%N] if k%2 == 0 else -J[k][site][j-k%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.028289351851851864}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if k%2 == 0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0010347222222222218}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 0:
                        site_sum += J[0][(i-1)%N][j]
                    elif k == 1:
                        site_sum += J[1][(i+1)%N][j]
                    elif k == 2:
                        site_sum += J[2][i][(j-1)%N]
                    else:
                        site_sum += J[3][i][(j+1)%N]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j].sum() > 0:
                priority_total[j::N,0] = total_spin.sum(axis=1)
            else:
                priority_total[j::N,1] = -1*total_spin.sum(axis=1)
        return priority_total




#score: {'data2D.txt': 0.0010347222222222218}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 0:
                        site_sum += J[k][i-1%N][j]
                    elif k == 1:
                        site_sum += J[k][(i+1)%N][j]
                    elif k == 2:
                        site_sum += J[k][i][j-1%N]
                    else:
                        site_sum += J[k][i][(j+1)%N]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j].sum() > 0:
                priority_total[j::N,0] = total_spin.sum(axis=1)
            else:
                priority_total[j::N,1] = -1*total_spin.sum(axis=1)
        return priority_total




#score: {'data2D.txt': 0.0002989197530864193}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 0:
                        site_sum += J[3][i-1%N][j]
                    elif k == 1:
                        site_sum += J[0][(i+1)%N][j]
                    elif k == 2:
                        site_sum += J[2][i][j-1%N]
                    else:
                        site_sum += J[1][i][(j+1)%N]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j].sum() > 0:
                priority_total[j::N,0] = total_spin.sum(axis=1)
            else:
                priority_total[j::N,1] = -1*total_spin.sum(axis=1)
        return priority_total




#score: {'data2D.txt': 0.07592638888888889}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 0:
                        site_sum += J[k][(i-1)%N][j]
                    elif k == 1:
                        site_sum += J[k][(i+1)%N][j]
                    elif k == 2:
                        site_sum += J[k][i][(j-1)%N]
                    else:
                        site_sum += J[k][i][(j+1)%N]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = site_sum
                else:
                    priority_total[(i*N+j), 1] = -site_sum
        return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[float('-inf'),float('-inf')] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        
        for j in range(N):
            for i in range(N):
                if h[i][j] > 0:
                    priority[j*N+i][0] += state[i][j]
                else:
                    priority[j*N+i][1] += -state[i][j]
        
        return priority




#score: {'data2D.txt': -0.001946141975308642}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]  
        for i in range(N):  
            for j in range(N):  
                site_sum = 0  
                for k in range(4):  
                    if k==2: continue  
                    neighbor = (i + ((k-1)%2 - 1)) % N, j  
                    site_sum += J[k][neighbor[0]][neighbor[1]] * h[neighbor[0]][neighbor[1]]  
                total_spin[i*N+j] = [site_sum, -site_sum]  
        return total_spin




#score: {'data2D.txt': 0.15392947530864218}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if (i+k)%2 == 0 else -state[i][j-k%N] for k in range(min(j,N-1))])
                priorities.append((-total_spin, 1) if h[i][j] > 0 else (total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0017597222222222222}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]  
        priorities = []  
        total_spin = [[0,0] for _ in range(N*N)]  
        for i in range(N):  
            for j in range(N):  
                site_sum = 0  
                for k in range(3):  
                    site = (i + ((k-1)%2 - 1)) % N  
                    total_spin[site][0] += state[i][j]  
                priority_total = np.zeros((N,2), dtype=int)  
                for j in range(N):  
                    for k in range(3):  
                        site = (i + ((k-1)%2 - 1)) % N  
                        priority_total[site][0] += state[i][j]  
                if h[i][j] > 0:  
                    priorities.append((priority_total.sum(), 1))  
                else:  
                    priorities.append((-priority_total.sum(), 1))  
        return priorities




#score: {'data2D.txt': -0.05155447530864201}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i]
            else:
                priority_total[i*N+j][1] = -total_spin[i]
    for i in range(N):
        site = (i + ((N-1)%2 - 1)) % N
        if h[i][site] > 0:
            priority_total[i*N+site][0] += sum([h[k][site] for k in range(N)])
        else:
            priority_total[i*N+site][1] -= sum([h[k][site] for k in range(N)])
    site = (N-1 + ((0)%2 - 1)) % N
    if h[site][j] > 0:
        priority_total[site][0] += sum([h[j][k] for k in range(N)])
    else:
        priority_total[site][1] -= sum([h[j][k] for k in range(N)])
    return priority_total




#score: {'data2D.txt': -0.05155447530864201}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i]
            else:
                priority_total[i*N+j][1] = -total_spin[i]
    for i in range(N):
        site = (i + ((N-1)%2 - 1)) % N
        if h[i][site] > 0:
            priority_total[i*N+site][0] += sum([h[k][site] for k in range(N)])
        else:
            priority_total[i*N+site][1] -= sum([h[k][site] for k in range(N)])
    site = (N-1 + ((0)%2 - 1)) % N
    if h[site][j] > 0:
        priority_total[site][0] += sum([h[j][k] for k in range(N)])
    else:
        priority_total[site][1] -= sum([h[j][k] for k in range(N)])
    return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for j in range(N):
            for i in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += spin
        priorities = np.zeros((N*N, 2), dtype=int)
        for j in range(N):
            for i in range(N):
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin[i][j]
                else:
                    priorities[(i*N+j), 1] = -total_spin[i][j]
        return priorities




#score: {'data2D.txt': -0.00036435185185185214}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N) // N) % N
            total_spin[site][0] += state[i][j]
    priority_total = np.zeros((N,2), dtype=int)
    for j in range(N):
        if h[0][j] > 0:
            priority_total[j][0] = total_spin[0][0]
        else:
            priority_total[j][1] = -1*total_spin[0][0]
    for i in range(1, N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] += total_spin[i][0]
            else:
                priority_total[j][1] -= total_spin[i][0]
    return [list(pair) for pair in sorted([(total_spin[site][0], -1 if h[i][j] > 0 else 1) for i in range(N) for j in range(N)], reverse=True)]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j] > 0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    total_priority[i*N+j,0] = total_spin
                else:
                    total_priority[i*N+j,1] = -total_spin
        return total_priority.tolist()




#score: {'data2D.txt': 0.029137499999999997}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 2:
                        continue
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin[i][j]
                else:
                    priority_total[i*N+j, 1] = -total_spin[i][j]
        return priority_total




#score: {'data2D.txt': -0.00342330246913583}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
      for j in range(N):
        site_sum = 0
        for k in range(4):
          if k == 2:
            site_sum += J[k][i][j]
          else:
            neighbor = (i + ((k-1)%2 - 1)) % N, j
            if neighbor[0] == i:
              site_sum += J[k][neighbor[0]][neighbor[1]]
            else:
              site_sum += J[k][(neighbor[0]-i+2)%N][j]
        total_spin[i][j] = h[i][j] + site_sum
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          priority_total[(i*N+j),0] = total_spin[i][j]
        else:
          priority_total[(i*N+j),1] = -total_spin[i][j]
    return priority_total




#score: {'data2D.txt': 0.05763101851851852}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        total_spin = [0]*N
        for j in range(N):
            site_sum = 0
            for k in range(3):
                neighbor = (i + ((k-1)%2 - 1)) % N, j
                if neighbor[0] == i:
                    site_sum += J[k][neighbor[0]][neighbor[1]]
                else:
                    site_sum += J[k][(neighbor[0]-i+2)%N][j]
            total_spin[j] = site_sum
        for j in range(N):
            priority_total[i*N+j] = [total_spin[j], -total_spin[j]]
    return priority_total.reshape((N*N,2))




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0010918209876543208}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if k < N-j else row_sum[N-1-(j-k)%N]*state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x[1],x[0]] for x in sorted(priorities)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin
                else:
                    priorities[(i*N+j), 1] = -total_spin
        return priorities.tolist()




#score: {'data2D.txt': 0.01408966049382716}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = J.reshape(4,N*N)
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N) // N) % N
                total_spin = 0
                for k in [0,1,3]:
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[k][site*N+j]
                if h[i][j] > 0:
                    priority_total = total_spin
                else:
                    priority_total = -total_spin
                priorities[site*N+j] = [priority_total, 1]
        return priorities




#score: {'data2D.txt': -0.0006692901234567905}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N//2) % N
                total_spin[site] += state[i][j]
        for j in range(N*N):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j//N]
            else:
                priority_total[j][1] = -1*total_spin[j//N]
        return priority_total




#score: {'data2D.txt': 0.01271496913580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_priority[i*N+j][0] += site_spin * J[k][site][j]
        return total_priority




#score: {'data2D.txt': 0.01271496913580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site_spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_priority[i*N+j][0] += site_spin * J[k][site][j]
    return total_priority




#score: {'data2D.txt': 0.01271496913580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_priority[i*N+j][0] += site_spin * J[k][site][j]
        return total_priority




#score: {'data2D.txt': -0.0014702160493827163}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N**2
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N) // N) % N
                total_spin[j] += state[site][j]
        for j in range(N**2):
            if h[j//N][j%N] > 0:
                priorities.append((total_spin[j], 1))
            else:
                priorities.append((total_spin[j], -1))
        return [[priority[0], priority[1]] for priority in sorted(priorities, reverse=True)]




#score: {'data2D.txt': -0.001210030864197531}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = np.zeros((N,N))
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N) // N) % N
                total_spin[i][site] += state[i][j]
        for j in range(N*N):
            if h[j//N][j%N] > 0:
                priorities[j][0] = total_spin[j//N][j%N]
                priorities[j][1] = -total_spin[j//N][j%N]
            else:
                priorities[j][0] = -total_spin[j//N][j%N]
                priorities[j][1] = total_spin[j//N][j%N]
        return priorities.argsort(axis=1)[::-1].reshape(N*N,2)




#score: {'data2D.txt': -0.0013307098765432098}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    spin = -1 if h[i][j] > 0 else 1
                    total_spin[spin==1] += J[(site*N+j)*4:(site*N+j)*4+1].sum()
                priority_total[i*N+j] = [int(x) for x in total_spin]
        return priority_total.tolist()




#score: {'data2D.txt': -0.0013307098765432098}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    spin = -1 if h[i][j] > 0 else 1
                    total_spin[spin==1] += J[(site*N+j)*4:(site*N+j)*4+1].sum()
                priority[i*N+j] = total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.0004239197530864195}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            site_sum = 0
            for k in range(4):
                if k==2:
                    continue
                neighbor = (i + ((k-1)%2 - 1)) % N, j
                site_sum += J[k][neighbor[0]][neighbor[1]]
            total_spin[i][j] = site_sum
    priority_total = np.zeros((N,N,2), dtype=int)
    for j in range(N):
        if h[j].sum() > 0:
            priority_total[:,j,0] = total_spin.sum(axis=1)
        else:
            priority_total[:,j,1] = -1*total_spin.sum(axis=1)
    return priority_total.reshape((N*N,2))




#score: {'data2D.txt': 0.08284305555555564}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += state[i][site]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += h[site][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[i][0]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[i][0]
        return priority_total.tolist()




#score: {'data2D.txt': -0.0013177469135802475}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin[site][0] += sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = -total_spin[site][0]
                else:
                    priority_total[(i*N+j), 1] = total_spin[site][0]
        return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    total_spin[i*N+j][0] += 1
                    total_spin[i*N+j][1] -= 1
                else:
                    total_spin[i*N+j][0] -= 1
                    total_spin[i*N+j][1] += 1
        return total_spin




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0015797839506172839}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return [[x[1], x[0]] for x in sorted(priorities)]




#score: {'data2D.txt': -1.4043209876543283e-05}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total = [total_spin, -1*total_spin]
                else:
                    priority_total = [-total_spin, total_spin]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i+k)%N][(j+l)%N] * state[max(0, i-k)][max(0, j-l)] 
                                  for k in range(-1) for l in range(-1)])
                if h[i][j] > 0:
                    priorities.append([total_spin, -total_spin])
                else:
                    priorities.append([-total_spin, total_spin])
        return priorities




#score: {'data2D.txt': -0.1776118827160496}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_total = [total_spin, -total_spin]
                else:
                    priority_total = [-total_spin, total_spin]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -0.21518472222222226}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = (-1 if h[i][j] > 0 else 1)
                
                total_spin[site][0] += state
                
                for k in range(3):
                    site2 = (i + ((k-1)%2 - 1)) % N
                    total_spin[site2][0] += state
                    
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[site][0], 0]
                else:
                    priority_total[i*N+j] = [-total_spin[site][0], 1]
                    
        return priority_total




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [x for x in sorted(priorities)]




#score: {'data2D.txt': -0.002402932098765432}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority = total_spin
                else:
                    priority = -total_spin
                priorities.append((priority, 1 if h[i][j]>0 else -1))
        return sorted(priorities)




#score: {'data2D.txt': 0.0022378086419753084}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[j*N+i] = [total_spin, 1]
                else:
                    priority_total[j*N+i] = [-total_spin, -1]
        return priority_total




#score: {'data2D.txt': 0.008696141975308642}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[j*N+i, 0] = total_spin
            else:
                priority_total[j*N+i, 1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': 0.004641820987654321}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    state = [[-1 if h[k][l] > 0 else 1 for l in range(N)] for k in range(N)]
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i][j] += state[site][k]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[j*N+i, 0] = total_spin[i][j]
                else:
                    priority_total[j*N+i, 1] = -total_spin[i][j]
        return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j),0] = total_spin
                else:
                    priority_total[(i*N+j),1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        spin = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += spin[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0015251543209876543}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = [h[i][k] if h[i][k] > 0 else 1 for k in range(N)]
                total_spin[site][0] += sum([state[k-1] if j-k%N>=0 else state[N-1] for k in range(j+1)])
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], -1))
                else:
                    priorities.append((total_spin[site][0], 1))
                    
        return priorities




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = total_spin
                else:
                    priorities[i*N+j, 1] = -total_spin
        return priorities.tolist()




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin
                else:
                    priorities[(i*N+j), 1] = -total_spin
        return priorities.tolist()




#score: {'data2D.txt': 0.1754149691358027}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(-1)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = -total_spin
                    priority_total[(i*N+j), 1] = total_spin + J_flat[(i*N+j)*4:(i*N+j)*4+1].sum()
                else:
                    priority_total[(i*N+j), 0] = total_spin
                    priority_total[(i*N+j), 1] = -total_spin - J_flat[(i*N+j)*4:(i*N+j)*4+1].sum()
        return priority_total.tolist()




#score: {'data2D.txt': -0.001734413580246914}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(-1)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum(J_flat[(i*N+j)%N*4:(i*N+j)%N*4+1].flatten())
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [(i[0], i[1]) for i in sorted(priorities)]




#score: {'data2D.txt': -0.0014473765432098764}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flat = J.reshape(4*N**2)
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += J_flat[(site*N+j)*4:(site*N+j)*4+1].sum()
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return sorted([(i[0], i[1]) for i in priorities])




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N) // N) % N
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin
                else:
                    priorities[(i*N+j), 1] = -total_spin
        return priorities




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N) // N) % N
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, 1]
                else:
                    priorities[i*N+j] = [-total_spin, -1]
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += spin
        priorities_total = np.zeros((N,N,2), dtype=int)
        for j in range(N):
            for i in range(N):
                priorities_total[i][j] = [total_spin[i][j], -total_spin[i][j]]
        return priorities_total.reshape(N*N, 2).tolist()




#score: {'data2D.txt': -0.00019984567901234573}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%N - N) // N) % N
                total_spin1 = 0
                for k in range(3):
                    site = (site1 + ((k-1)%2 - 1)) % N
                    total_spin1 += state[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin1
                else:
                    priorities[i*N+j][1] = -total_spin1
                
                site2 = (i + ((N-1-j)%N - N) // N) % N
                total_spin2 = 0
                for k in range(3):
                    site = (site2 + ((k-1)%2 - 1)) % N
                    total_spin2 += state[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] += total_spin2
                else:
                    priorities[i*N+j][1] -= total_spin2
                
        return priorities




#score: {'data2D.txt': -0.001060648148148148}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      for j in range(N):
        total_spin = 0
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          total_spin += state[site][j]
        if h[i][j] > 0:
          priority = total_spin
        else:
          priority = -total_spin
        priorities.append((priority, -1 if h[i][j] > 0 else 1))
    return sorted(priorities, reverse=True)




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum = (np.prod(J_new[0::2], 0) + h).flatten()
        priority = np.column_stack((sum, -sum))
        return priority




#score: {'data2D.txt': 0.00023935185185185214}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        total_spin = 0
        for j in range(N):
            site_sum = 0
            for k in range(4):
                if k == 0:
                    site_sum += J[3][i-1%N][j]
                elif k == 1:
                    site_sum += J[0][(i+1)%N][j]
                elif k == 2:
                    site_sum += J[2][i][j-1%N]
                else:
                    site_sum += J[1][i][(j+1)%N]
            if h[i][j] > 0:
                priority_total[(i*N+j),0] = total_spin + site_sum
            else:
                priority_total[(i*N+j),1] = -total_spin - site_sum
    return priority_total




#score: {'data2D.txt': 0.0002989197530864193}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = np.zeros((N,N), dtype=int)
    for k in range(4):
        for i in range(N):
            site = (i + ((k-1)%2 - 1)) % N
            for j in range(N):
                if k == 0:
                    total_spin[i][j] += J[3][i-1%N][j]
                elif k == 1:
                    total_spin[i][j] += J[0][(i+1)%N][j]
                elif k == 2:
                    total_spin[i][j] += J[2][i][j-1%N]
                else:
                    total_spin[i][j] += J[1][i][(j+1)%N]
    priority_total = np.zeros((N*N,2), dtype=int)
    for j in range(N):
        if h[j].sum() > 0:
            priority_total[j::N,0] = total_spin.sum(axis=1)
        else:
            priority_total[j::N,1] = -1*total_spin.sum(axis=1)
    return priority_total




#score: {'data2D.txt': -0.0003498456790123462}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      for j in range(N):
        site_interactions = []
        for k in range(4):
          site = (i + ((k-1)%2 - 1)) % N
          if k-j+N < N and k-j-N >= 0:
            site_interactions.append(J[site, j-k%N].flatten()[0])
          else:
            site_interactions.append(h[site][j])
        total_spin = sum(site_interactions)
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return [(a,b) for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.0010918209876543212}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for k in range(3):
            for i in range(N):
                for j in range(N):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[site][0] += state[i][j]
                    else:
                        total_spin[site][1] += state[i][j]
        for j in range(N):
            priority = []
            for i in range(N):
                if h[i][j] > 0:
                    priority.append((total_spin[i][0], 1))
                else:
                    priority.append((total_spin[i][1], -1))
            priorities.extend(sorted(priority))
        return priorities




#score: {'data2D.txt': -0.007949845679012347}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[0]
            else:
                priority_total[j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': 0.0042529320987654325}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        Nsq = N*N
        priority_total = [[0,0] for _ in range(Nsq)]
        state = [[-1 if h[i][j]>0 else 1 for j in range(N)] for i in range(N)]
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += state[site][j]
                if h[i][j]>0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.334628549382715}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[k,(i*N+j) : (i*N+site),:(j+1)].sum()
                if h[i][j] > 0:
                    priorities.append((total_spin,1))
                else:
                    priorities.append((-total_spin,-1))
        return priorities




#score: {'data2D.txt': -0.0007415123456790119}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in [-1, 0, 1]:
                    site = (i + k) % N
                    if h[i][j] > 0:
                        total_spin += J[2, (i*N+j) : (i*N+site),:(j+1)].sum()
                    else:
                        total_spin -= J[2, (i*N+j) : (i*N+site),:(j+1)].sum()
                if h[i][j] > 0:
                    priorities[(i*N+j)][0] = -total_spin
                else:
                    priorities[(i*N+j)][1] = total_spin
        return priorities




#score: {'data2D.txt': 0.0357733024691358}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - N) // N) % N
        total_spin = 0
        for k in range(3):
          site2 = (site + ((k-1)%2 - 1)) % N
          total_spin += state[site2][j]
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': -0.013522376543209877}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 2:
                        continue
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin += h[i][j] + site_sum
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.029137499999999997}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 2:
                        continue
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin[i][j]
                else:
                    priority_total[i*N+j, 1] = -total_spin[i][j]
        return priority_total




#score: {'data2D.txt': 0.10492484567901231}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in [0,2]:
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    if neighbor[0] == i:
                        site_sum += J[k][neighbor[0]][neighbor[1]]
                    else:
                        site_sum += J[k][(neighbor[0]-i+2)%N][j]
                total_spin[i][j] = site_sum + h[i][j]
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin[i][j]
                else:
                    priority_total[i*N+j, 1] = -total_spin[i][j]
        return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            total_spin = np.zeros((N,2), dtype=int)
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if state[i][j] == 1:
                    priorities.append((-total_spin[site][0], 1))
                else:
                    priorities.append((total_spin[site][0], -1))
        return priorities




#score: {'data2D.txt': 0.009474537037037038}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N): 
            row_sum = [sum(J[i*(N**2):(i+1)*(N**2),j*N+j-1:j*N+j+3].flatten()) for j in range(N)]
            for k in range(N):
                total_spin = sum([row_sum[j] * h[k][j] for j in range(min(k,N-1))])
                if h[k][k] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return [[p[1], -p[0]] for p in priorities]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total = [total_spin, -total_spin]
                else:
                    priority_total = [-total_spin, total_spin]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -0.0012510802469135802}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            for k in range(3):
                total_spin[site][0] += -1 if h[i][j] > 0 else 1
    priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            if h[i][j] > 0:
                priority_total[site][0] = total_spin[site][0]
            else:
                priority_total[site][1] = -total_spin[site][0]
    return [list(i) for i in priority_total]




#score: {'data2D.txt': -0.03504521604938272}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = -total_spin
            else:
                priority_total[(i*N+j), 1] = total_spin
    return priority_total.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum = (np.prod(J_new[0::2], 0) + h).flatten()
        priority = np.column_stack((sum, -sum))
        return(priority)




#score: {'data2D.txt': -0.05336157407407408}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            state = (-1 if h[i][j] > 0 else 1)
            total_spin[site][state] += h[i][j]
            priority[i*N+j][state] = total_spin[site][state]
            
    for j in range(N):
        row_sum = sum(h[:,j])
        for i in range(N):
            site = (i + ((j-1)%N - 1)) % N
            state = (-1 if h[i][j] > 0 else 1)
            if h[i][j] > 0:
                priority[i*N+j][0] += row_sum
            else:
                priority[i*N+j][1] -= row_sum
                
    return priority




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            total_spin = 0
            for k in range(3):
                site = (i // N + ((k - 1) % 2 - 1)) % N
                total_spin += state[site][i % N]
            if h[i//N][i%N] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j]
        return priority_total




#score: {'data2D.txt': -0.024905709876543218}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i, :, 0] = total_spin
            else:
                priority_total[i, :, 1] = -total_spin
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.007989351851851853}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[1 if state[i][j] == state[site][((k+2)%3)-1] else 0] += 1 if h[i][j] > 0 else -1
                priorities.append(total_spin)
        return np.array(priorities)




#score: {'data2D.txt': 0.007989351851851853}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[1 if state[i][j] == state[site][((k+2)%3)-1] else 0] += 1 if h[i][j] > 0 else -1
                priorities.append(total_spin)
        return np.array(priorities)




#score: {'data2D.txt': 0.002483487654320988}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k == 3:
                        total_spin[1 if state[i][j] == state[site][((k+1)%2) - 1] else 0] += 1 if h[i][j] > 0 else -1
                    else:
                        total_spin[1 if state[i][j] == state[site][(k-1)%2 - 1] else 0] += 1 if h[i][j] > 0 else -1
                priorities.append(total_spin)
        return np.array(priorities)




#score: {'data2D.txt': -0.00017854938271604949}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        for k in range(3):
            site_neighbors = [(i + ((k-1)%2 - 1)) % N for i in range(N)]
            for i in range(N):
                for j in range(N):
                    if h[site_neighbors[k]][j] > 0:
                        total_spin[i][j] += state[site_neighbors[k]][j]
                    else:
                        total_spin[i][j] -= state[site_neighbors[k]][j]
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            site_neighbors = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
            for i in range(N):
                total_spin[i][0] += state[i][j]
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for j in range(N):
            site_neighbors = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
            for i in range(N):
                total_spin[i][j] += state[site_neighbors[k]][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[i][j]
                else:
                    priorities[i*N+j][1] = -total_spin[i][j]
        return priorities




#score: {'data2D.txt': -0.00017854938271604949}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        for k in range(3):
            site_neighbors = [(i + ((k-1)%2 - 1)) % N for i in range(N)]
            for i in range(N):
                for j in range(N):
                    if h[site_neighbors[k]][j] > 0:
                        total_spin[i][j] += state[site_neighbors[k]][j]
                    else:
                        total_spin[i][j] -= state[site_neighbors[k]][j]
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            site_neighbors = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
            for i in range(N):
                total_spin[i][0] += state[i][j]
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for j in range(N):
            site_neighbors = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
            for i in range(N):
                total_spin[i][j] += state[site_neighbors[k]][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[i][j]
                else:
                    priorities[i*N+j][1] = -total_spin[i][j]
        return priorities




#score: {'data2D.txt': 0.0677109567901235}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = [np.zeros(2) for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin[site][0]
                else:
                    priorities[(i*N+j), 1] = -total_spin[site][0]
        return priorities.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site1 = (i + ((0)%2 - 1)) % N
                site2 = (i + ((1)%2 - 1)) % N
                total_spin[i][j] += h[site1][j]
                if h[site1][j] > 0:
                    priority[(i*N+j), 0] = total_spin[i][j]
                else:
                    priority[(i*N+j), 1] = -total_spin[i][j]
                
                site1 = (i + ((1)%2 - 1)) % N
                site2 = (i + ((2)%2 - 1)) % N
                total_spin[i][j] += h[site1][j]
                if h[site1][j] > 0:
                    priority[(i*N+j), 0] += h[site1][j]
                else:
                    priority[(i*N+j), 1] -= h[site1][j]
                
                site1 = (i + ((2)%2 - 1)) % N
                site2 = (i + ((3)%2 - 1)) % N
                total_spin[i][j] += h[site1][j]
                if h[site1][j] > 0:
                    priority[(i*N+j), 0] += h[site1][j]
                else:
                    priority[(i*N+j), 1] -= h[site1][j]
                
                site1 = (i + ((3)%2 - 1)) % N
                site2 = (i + ((0)%2 - 1)) % N
                total_spin[i][j] += h[site1][j]
                if h[site1][j] > 0:
                    priority[(i*N+j), 0] += h[site1][j]
                else:
                    priority[(i*N+j), 1] -= h[site1][j]
        return priority.tolist()




#score: {'data2D.txt': -0.12285169753086436}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += J[0][site][0]
                if i > 0:
                    site = (i - 1 + ((j-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += J[1][site][0]
                if j > 0:
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += J[2][site][0]
                if i < N-1:
                    site = (i + 1 + ((j-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += J[3][site][0]
                if h[i][j] > 0:
                    total_spin[i*N+j][1] = total_spin[i*N+j][0]
                else:
                    total_spin[i*N+j][1] = -total_spin[i*N+j][0]
        return [row for row in total_spin]




#score: {'data2D.txt': -0.0010939814814814816}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = sum(J[i*N:(i+1)*N,j*N:(j+1)*N][::2].flatten()) + h[i][j]
                if h[i][j] > 0:
                    priorities[j][0] = total_spin
                else:
                    priorities[j][1] = -total_spin
        
        return [list(x) for x in priorities]




#score: {'data2D.txt': -0.0010939814814814816}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = [[0,0] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = sum(J[i*N:(i+1)*N,j*N:(j+1)*N][::2].flatten()) + h[i][j]
            if h[i][j] > 0:
                priorities[j][0] = total_spin
            else:
                priorities[j][1] = -total_spin
    
    return [list(x) for x in priorities]




#score: {'data2D.txt': 0.1489134259259261}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flat[(site*N+j)*4+k]
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, 1]
                else:
                    priorities[i*N+j] = [-total_spin, -1]
        
        return priorities




#score: {'data2D.txt': -0.001041203703703704}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flat[(site*N+j)*4+k]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)




#score: {'data2D.txt': 0.04990601851851852}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            sum_1 = 0
            sum_2 = 0
            if i > 0:
                sum_1 += J[0][i-1][j]
                sum_2 += J[3][i-1][j]
            if i < N - 1:
                sum_1 += J[0][i+1][j]
                sum_2 += J[3][i+1][j]
            if j > 0:
                sum_1 += J[1][i][j-1]
                sum_2 += J[3][i][j-1]
            if j < N - 1:
                sum_1 += J[1][i][j+1]
                sum_2 += J[3][i][j+1]
            priority.append([sum_1, sum_2])
    return priority




#score: {'data2D.txt': -0.0012773148148148155}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[0][i][site]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x[1],x[0]] for x in sorted(priorities)]




#score: {'data2D.txt': -0.00042453703703703734}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x[1], x[0]] for x in sorted(priorities)]




#score: {'data2D.txt': 0.0009464506172839509}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                total_magnetism = h[i][j]
                if h[i][j] > 0:
                    priorities.append((-total_spin-total_magnetism, 1))
                else:
                    priorities.append((total_spin+total_magnetism, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.0009464506172839509}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                total_magnetism = h[i][j]
                if h[i][j] > 0:
                    priorities.append((-total_spin-total_magnetism, 1))
                else:
                    priorities.append((total_spin+total_magnetism, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.22352268518518537}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            site = (i + ((2) % 2 - 1)) % N
            total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
            total_spin += h[i][j]
            if h[i][j] > 0:
                priority[(i*N+j),0] = np.sign(total_spin)
                priority[(i*N+j),1] = 1
            else:
                priority[(i*N+j),0] = -np.sign(total_spin)
                priority[(i*N+j),1] = -1
    return priority.astype(int)




#score: {'data2D.txt': -0.0001625000000000008}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
        for i in range(N):
            for j in range(N):
                total_spin[i][1] = sum([total_spin[(i+((k-1)%2 - 1)) % N][0] for k in range(4)]) if (i+j) % 2 == 0 else -sum([total_spin[(i+((k-1)%2 - 1)) % N][0] for k in range(4)])
                total_spin[i][0] += h[i][j]
                priorities.append((total_spin[i][0], 1) if h[i][j] > 0 else (-total_spin[i][0], -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.13444120370370385}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2))
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], 1))
                else:
                    priorities.append((-total_spin[site][0], 1))
        return priorities




#score: {'data2D.txt': 0.056820833333333334}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k==2:
                        continue
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    site_sum += J[k][neighbor[0]][neighbor[1]]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i].sum() > 0:
                for j in range(N):
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin_site = total_spin[site][j]
                    priority_total[i*N+j, 0] = total_spin_site
            else:
                for j in range(N):
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin_site = total_spin[site][j]
                    priority_total[i*N+j, 1] = -total_spin_site
        return priority_total




#score: {'data2D.txt': 0.056820833333333334}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k==2:
                        continue
                    neighbor = (i + ((k-1)%2 - 1)) % N, j
                    site_sum += J[k][neighbor[0]][neighbor[1]]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i].sum() > 0:
                for j in range(N):
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin_site = total_spin[site][j]
                    priority_total[i*N+j, 0] = total_spin_site
            else:
                for j in range(N):
                    site = (i + ((j-1)%2 - 1)) % N
                    total_spin_site = total_spin[site][j]
                    priority_total[i*N+j, 1] = -total_spin_site
        return priority_total




#score: {'data2D.txt': -0.07464799382716049}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0, 0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i + ((k-1)%2 - 1)) % N][j] * state[(i + ((k-1)%2 - 1)) % N][j] for k in range(4)])
                
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, 0]
                else:
                    priority_total[i*N+j] = [-total_spin, 0]
        
        return priority_total




#score: {'data2D.txt': 0.0008995370370370373}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    
    for i in range(N):
        total_spin = 0
        for j in range(N):
            site_sum = 0
            for k in range(4):
                if k==2:
                    continue
                neighbor = (i + ((k-1)%2 - 1)) % N, j
                site_sum += J[k][neighbor[0]][neighbor[1]]*state[neighbor[0]][neighbor[1]]
            total_spin += site_sum
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j, 0] = total_spin
            else:
                priority_total[i*N+j, 1] = -total_spin
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site_neighbors = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
                for k in range(3):
                    if h[site_neighbors[k]][j] > 0:
                        total_spin += state[site_neighbors[k]][j]
                    else:
                        total_spin -= state[site_neighbors[k]][j]
                if h[i][j] > 0:
                    priority[i*N+j][1] = total_spin
                else:
                    priority[i*N+j][0] = -total_spin
        return priority




#score: {'data2D.txt': 0.0021692901234567907}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[j*N+i][0] = total_spin[0]
                else:
                    priority_total[j*N+i][1] = -total_spin[1]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += state[site][j]*h[i][j]
                priority_total[j*N+i][0] = total_spin[0]
                total_spin[1] -= state[site][j]*h[i][j]
                priority_total[j*N+i][1] = -total_spin[1]
        
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site_spin = -1 if h[i][j] > 0 else 1
            sum_1 = 0
            sum_2 = 0
            for k in range(4):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin = 0
                for l in range(3):
                    site = (i + ((l-1)%2 - 1)) % N
                    if j+l < N:
                        total_spin += J[k][site][min((j+l)%N,N-1)] * site_spin
                priority_total = [total_spin - sum_2, total_spin + sum_2]
                for k in range(2):
                    total_priority[i*N+j][k] = priority_total[k]
    return total_priority




#score: {'data2D.txt': -0.08092669753086419}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                sum_1 = 0
                sum_2 = 0
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if j+k < N:
                        sum_1 += J[k%4][site][min((j+k)%N,N-1)] * site_spin
                        sum_2 += J[k%4][site][min((j+k)%N,N-1)]
                priority_total = [sum_1 - sum_2, sum_1 + sum_2]
                for k in range(2):
                    total_priority[i*N+j][k] = priority_total[k]
        return total_priority




#score: {'data2D.txt': -0.08092669753086419}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                sum_1 = 0
                sum_2 = 0
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if j+k < N:
                        sum_1 += J[k%4][site][min((j+k)%N,N-1)] * site_spin
                        sum_2 += J[k%4][site][min((j+k)%N,N-1)]
                priority_total = [sum_1 - sum_2, sum_1 + sum_2]
                for k in range(2):
                    total_priority[i*N+j][k] = priority_total[k]
        return total_priority




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.18367885802469164}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                spin = 1 if h[i][j] < 0 else -1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][spin == -1] += spin
                priority_total = np.zeros((N,2), dtype=int)
                for j in range(N):
                    if h[i][j] > 0:
                        priority_total[j][0] = total_spin[j][0]
                    else:
                        priority_total[j][1] = -1*total_spin[j][0]
                for j in range(N):
                    if h[i][j] > 0:
                        priority[i*N+j] = [priority_total[j][0], -priority_total[j][0]]
                    else:
                        priority[i*N+j] = [-priority_total[j][0], priority_total[j][0]]
        
        return priority




#score: {'data2D.txt': 0.008250462962962963}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        total_spin = [0]*N
        for i in range(N):
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site] += state[i][site]
            if h[i][site] > 0:
                priority_total[(i*N+site), 0] = total_spin[site]
            else:
                priority_total[(i*N+site), 1] = -total_spin[site]
        return priority_total




#score: {'data2D.txt': 0.000374537037037037}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J = J.reshape(4,N*N)
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N) // N) % N
                for k in [0,1,3]:
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += J[k][site*N+j]
                if h[i][j] > 0:
                    priorities[site*N+j] = [total_spin[site][0], 1]
                else:
                    priorities[site*N+j] = [-total_spin[site][0], -1]
        return priorities




#score: {'data2D.txt': 0.01408966049382716}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      J = J.reshape(4,N*N)
      priorities = [[0 for _ in range(2)] for _ in range(N*N)]
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - N) // N) % N
              total_spin = 0
              for k in [0,1,3]:
                  site = (i + ((k-1)%2 - 1)) % N
                  total_spin += J[k][site*N+j]
              if h[i][j] > 0:
                  priority_total = total_spin
              else:
                  priority_total = -total_spin
              priorities[site*N+j] = [priority_total, 1]
      return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = np.zeros((N,N), dtype=int)
        
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    for k in range(4):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[site][j] += state[i][j]
                    priorities[(i*N+j),0] = np.sum(total_spin)
                else:
                    for k in range(4):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[site][j] -= state[i][j]
                    priorities[(i*N+j),1] = -np.sum(total_spin)
        
        return priorities.tolist()




#score: {'data2D.txt': -0.00065570987654321}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 1))
            else:
                priority.append((-total_spin, -1))
    return [[p[1], -p[0]] for p in sorted(priority)]




#score: {'data2D.txt': -0.00019984567901234573}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flat = J.reshape(4*N**2)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((0)%2 - 1)) % N
                total_spin += state[site][j]
                site = (i + ((1)%2 - 1)) % N
                total_spin += state[site][j]
                site = (i + ((2)%2 - 1)) % N
                total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin
                else:
                    priority_total[i][j][1] = -total_spin
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': 0.004110956790123456}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][:] = [total_spin[site][0] + J[site*N:site*N+N, j].sum(), 
                                        total_spin[site][1] - J[site*N:site*N+N, j].sum()]
        return total_spin




#score: {'data2D.txt': -0.00091466049382716}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N * N
    priority_list = [[0 for _ in range(2)] for _ in range(N2)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            state = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += J[site*N:site*N+N, j].sum() * state
            priority_list[i*N+j][:] = [total_spin, -total_spin]
    return priority_list




#score: {'data2D.txt': -0.0008004629629629628}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_priority = [[0 for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                total_spin = sum(J[k*N+j:(k+1)*N,j].sum() for k in range(min(j,N-1)))
                priority_list = [total_spin, -total_spin]
            else:
                total_spin = sum(J[k*N+j:(k+1)*N,j].sum() for k in range(min(j,N-1)))
                priority_list = [-total_spin, total_spin]
            total_priority[i*N+j] = priority_list
    return(total_priority)




#score: {'data2D.txt': -0.0029322530864197543}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                state = -1 if h[i][j] > 0 else 1
                site = (i + ((j%N-1)%N)) % N
                while site != i:
                    total_spin += J[site*N:site*N+N, j].sum() * state
                    site = (site + ((j%N-1)%N)) % N
                priority_list[i*N+j][:] = [total_spin, -total_spin]
        return priority_list




#score: {'data2D.txt': -0.010844907407407409}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                for k in range(3):
                    if k%2 == 0:
                        total_spin[i*N+j][0] += h[site][k]
                    else:
                        total_spin[i*N+j][1] -= h[site][k]
        return total_spin




#score: {'data2D.txt': 0.16911280864197556}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2,2), dtype=float)
        for i in range(N):
            for j in range(N):
                site_sum = sum([state[(i+((k-1)%2)-1)%N][j-k%N] for k in range(3)])
                total_spin = site_sum
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': 0.16911280864197556}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2,2), dtype=float)
        for i in range(N):
            for j in range(N):
                site_sum = sum([state[(i+((k-1)%2)-1)%N][j-k%N] for k in range(3)])
                total_spin = site_sum
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': 0.33401033950617187}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[site][j] > 0:
                        total_spin += J[0, (i*N+j) : (N*N+site),:(j+1)].sum()
                    else:
                        total_spin -= J[3, (i*N+j) : (N*N+site),:(j+1)].sum()
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.3338983024691348}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[2, (i*N+j) : (i*N+((k-1)%N)),:(j+1)].sum() if h[i][j] > 0 else -J[2, (i*N+j) : (i*N+((k-1)%N)),:(j+1)].sum() for k in range(N)])
                if h[i][j] > 0:
                    priorities.append([-total_spin, 1])
                else:
                    priorities.append([total_spin, -1])
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0687680555555556}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j%2) - 1)) % N
                total_spin = sum([state[site][k] * (-1)**((abs(i-site)+abs(j-k))//2) for k in range(N)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0008828703703703702}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
        priorities = []
        for j in range(N):
            for i in range(N):
                if h[i][j] > 0:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[site][0] += 1 if h[i][j] > 0 else -1
                    priorities.append((-total_spin.sum(), 1) if total_spin.sum() < 0 else (-total_spin.sum(), -1))
                else:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[site][0] += 1 if h[i][j] > 0 else -1
                    priorities.append((-total_spin.sum(), -1) if total_spin.sum() < 0 else (-total_spin.sum(), 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.00333626543209876}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = np.sum(J_new[0::2], axis=0)
        sum_2 = np.sum(J_new[1::2], axis=0)
        priority_total = (np.prod(np.sign(sum_1 - sum_2), 0) + h).flatten()
        priority = np.column_stack((priority_total, -priority_total))
        return priority




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0013526234567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%2 - 1)) % N
                site2 = (i + ((j+1)%2 - 1)) % N
                site3 = (i + ((i-1)%N - 1)) % N
                site4 = (i + ((i+1)%N - 1)) % N
                
                total_spin = h[site1][j] + h[site2][j] + h[site3][i] + h[site4][i]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                    
                priorities.append((priority_total, -1))
        
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0005763888888888887}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for j in range(N):
            for k in range(3):
                site = (j + ((k-1)%2 - 1)) % N
                total_spin[site][0] += state[j][site]
        for i in range(N):
            for j in range(N):
                priority_total = np.zeros((N,2), dtype=int)
                for k in range(3):
                    site = (j + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += state[i][site]
                if h[i][j] > 0:
                    priority_total = total_spin
                else:
                    priority_total *= -1
                priorities.append((np.sum(priority_total), 1 if h[i][j] > 0 else -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = []
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((total_spin, -1))
        
        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.0019418209876543213}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin = 0
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin += state[site][j]
                    priority_total[i*N+j][0] = total_spin
                else:
                    total_spin = 0
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin -= state[site][j]
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      for j in range(N):
        site_sum = 0
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          site_sum += state[site][j]
        priority_total = [site_sum, 1]
        if h[i][j] > 0:
          priority_total = [priority_total[0], 1]
        else:
          priority_total = [-priority_total[0], -1]
        priorities.append(priority_total)
    return priorities




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.0018526234567901236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
        
        return priority_total.tolist()




#score: {'data2D.txt': 0.002133796296296296}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            site_sum = 0
            for k in range(4):
                if k == 0:
                    site_sum += J[0][(i-1)%N][j]
                elif k == 1:
                    site_sum += J[1][(i+1)%N][j]
                elif k == 2:
                    site_sum += J[2][i][(j-1)%N]
                else:
                    site_sum += J[3][i][(j+1)%N]
            total_spin[i][j] = site_sum
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        if h[i].sum() > 0:
            priority_total[i*N:(i+1)*N,0] = total_spin.sum(axis=0)
        else:
            priority_total[i*N:(i+1)*N,1] = -1*total_spin.sum(axis=0)
    return priority_total




#score: {'data2D.txt': -0.0004319444444444442}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J0 = J[0].flatten()
        J1 = J[1].flatten()
        J2 = J[2].flatten()
        J3 = J[3].flatten()

        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                if h[i][j] > 0:
                    site_sum += -1*(J0[i*N+j] + J2[j])
                else:
                    site_sum += 1*(J0[i*N+j] + J2[j])
                total_spin[i][j] = site_sum

        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j].sum() > 0:
                priority_total[j::N,0] = total_spin.sum(axis=1)
            else:
                priority_total[j::N,1] = -1*total_spin.sum(axis=1)

        return priority_total




#score: {'data2D.txt': 0.07592638888888889}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 0:
                        site_sum += J[0][(i-1)%N][j]
                    elif k == 1:
                        site_sum += J[1][(i+1)%N][j]
                    elif k == 2:
                        site_sum += J[2][i][(j-1)%N]
                    else:
                        site_sum += J[3][i][(j+1)%N]
                total_spin[i*N+j] = [site_sum, -site_sum]
        return total_spin




#score: {'data2D.txt': 0.0010347222222222218}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flipped = np.array([J[0], J[1], J[2], J[3]])
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(4):
                    if k == 0:
                        site_sum += J_flipped[k][(i-1)%N][j]
                    elif k == 1:
                        site_sum += J_flipped[k][(i+1)%N][j]
                    elif k == 2:
                        site_sum += J_flipped[k][i][(j-1)%N]
                    else:
                        site_sum += J_flipped[k][i][(j+1)%N]
                total_spin[i][j] = site_sum
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j].sum() > 0:
                priority_total[j::N,0] = total_spin.sum(axis=1)
            else:
                priority_total[j::N,1] = -1*total_spin.sum(axis=1)
        return priority_total




#score: {'data2D.txt': -0.0001776234567901238}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N, N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][site][0] += 1 if h[i][j] > 0 else -1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[i][site][0] += 1 if h[site][j] > 0 else -1
        priorities = []
        for i in range(N*N):
            if h[i//N][i%N] > 0:
                priorities.append((-total_spin[i//N][i%N][0], 1))
            else:
                priorities.append((total_spin[i//N][i%N][0], -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.003984722222222222}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][site] > 0:
                    total_spin[0] += state[i][site]
                else:
                    total_spin[1] += state[i][site]
            if h[i][0] > 0:
                priority_total[i*N:(i+1)*N,0] = total_spin[0]
            else:
                priority_total[i*N:(i+1)*N,1] = -total_spin[0]
        for i in range(N):
            total_spin = [0,0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                if h[i][site] > 0:
                    total_spin[0] += state[i][site]
                else:
                    total_spin[1] += state[i][site]
            priority_total[i*N+i,0] = total_spin[0]
            priority_total[i*N+i,1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = np.zeros((N,N), dtype=int)
        total_spin = np.zeros((2,N*N), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    spin = -1
                else:
                    spin = 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    state[site][j] += spin
                total_spin[0, i*N+j] += h[i][j]
                if h[i][j] > 0:
                    total_spin[0, i*N+j] += 1
                else:
                    total_spin[0, i*N+j] -= 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[1, i*N+j] += state[site][j]
        return total_spin.T.tolist()




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.002705401234567901}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += spin
                if h[i][j] > 0:
                    priorities = [(total_spin[i][j], h[i][j])]
                else:
                    priorities = [(-total_spin[i][j], -h[i][j])]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += spin
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = sum(x[0] for x in priorities)
                else:
                    priority_total[i*N+j][1] = -sum(x[0] for x in priorities)
        return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
      for i in range(N):
        for j in range(N):
          site = (i + ((j-1)%N - 1)) % N
          total_spin[i*N+j][0] += h[site][j]
          if h[i][j] > 0:
            total_spin[i*N+j][0] += 1
          else:
            total_spin[i*N+j][0] -= 1
      for i in range(N):
        priority_total = [[-total_spin[k][0] if k < N else total_spin[k-N][0] for _ in range(2)] for k in range(N*N)]
      return priority_total




#score: {'data2D.txt': -0.34273966049382615}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0, 0] for _ in range(N*N)]
    state = np.sign(h)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    return [row for row in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[1] += state[site][j]
                    else:
                        total_spin[0] -= state[site][j]
                priorities.append(total_spin)
        return priorities




#score: {'data2D.txt': -0.19697546296296325}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):  
                    site = (i + ((k%2) - 1)) % N
                    if h[i][j] > 0:
                        total_spin[1] += state[site][j]
                    else:
                        total_spin[0] -= state[site][j]
                priorities.append(total_spin)
        return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0, 0]
                for k in range(4):
                    site_i = (i + ((k-1)%2 - 1)) % N
                    site_j = (j + ((k-1)%3 - 1)) % N
                    if h[site_i][site_j] > 0:
                        total_spin[1] += state[i][j]
                    else:
                        total_spin[0] -= state[i][j]
                priorities.append(total_spin)
        return priorities




#score: {'data2D.txt': -0.0011856481481481481}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += h[site][j]
                if h[i][j] > 0:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i][j] += state[site][j]
                    priorities.append((total_spin[i][j], -h[i][j]))
                else:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i][j] -= state[site][j]
                    priorities.append((-total_spin[i][j], h[i][j]))
        return [[x, y] for x, y in sorted(priorities)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0021584876543209877}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.0021584876543209877}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i,site] += h[i][j]
        priority = []
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority.append((total_spin[i,j], 1))
                else:
                    priority.append((-total_spin[i,j], -1))
        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N,N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin
                else:
                    priority_total[i][j][1] = -total_spin
        
        return priority_total.reshape((N*N,2)).tolist()




#score: {'data2D.txt': -0.0010078703703703703}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][max(0,j-k)%N] if h[i][j] * state[(i + ((k-1)%2 - 1)) % N][max(0,j-k)%N] > 0 else -state[(i + ((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': -0.0017779320987654317}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)[::-1]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum2 = (-np.prod(J_new[1::2], 0)).flatten()
        priority = np.column_stack((sum1 - sum2, sum1 + sum2))
        return priority.reshape(N**2, 2)




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if h[i][j] > 0:
                        total_spin[site][0] += state[i][j]
                    else:
                        total_spin[site][1] += state[i][j]
        priorities = []
        for i in range(N**2):
            spin = -1 if h[i//N][i%N] > 0 else 1
            if spin == 1:
                priorities.append((-total_spin[i//N][0], 1))
            else:
                priorities.append((total_spin[i//N][1], -1))
        return(priorities)




#score: {'data2D.txt': -0.0013291666666666669}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return [[x[0], x[1]] for x in sorted(priorities)]




#score: {'data2D.txt': 0.07502453703703703}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k, (i + ((k-1)%2 - 1)) % N, j] * state[(i + ((k-1)%2 - 1)) % N][min((j + k) % N, N - 1)] for k in range(4)])
                
                if h[i][j] > 0:
                    priority_total = total_spin
                else:
                    priority_total = -total_spin
                
                priorities.append((priority_total, 1))
        return [row for row in priorities]




#score: {'data2D.txt': -0.001401697530864198}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                
                priorities[i*N+j][0] = priority_total
                priorities[i*N+j][1] = -priority_total
        
        return priorities




#score: {'data2D.txt': -0.057243981481481514}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i+((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
                priorities[i*N+j] = [-total_spin, -1] if total_spin > 0 else [total_spin, 1]
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += J[(site, (j-k)%N)].flatten()[0] if 0 <= k-j+N <= N and 0 <= k-j-N < N else h[i][j]
            priority_total = [total_spin, -total_spin] if total_spin > 0 else [-total_spin, total_spin]
            priorities[i*N+j] = priority_total
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.007676388888888889}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N * N
        priority_list = [[0, 0] for _ in range(N2)]
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        
        for i in range(N):
            total_spin = [0, 0]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += state[site][j]*h[i][j]
                total_spin[1] += -state[site][j]*h[i][j]
            
            if h[i][j] > 0:
                priority_list[i*N+j][0] = total_spin[0]
                priority_list[i*N+j][1] = total_spin[1]
            else:
                priority_list[i*N+j][0] = -total_spin[0]
                priority_list[i*N+j][1] = -total_spin[1]
        
        return priority_list




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N * N
        priority_list = [[0, 0] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += h[site][j]
            if h[i][j] > 0:
                priority_list[i*N+j][0] = np.sum(total_spin[:,0])
            else:
                priority_list[i*N+j][1] = -np.sum(total_spin[:,0])
        for j in range(N):
            if h[i][j] > 0:
                priority_list[j][0] = np.sum(total_spin[:,0])
            else:
                priority_list[j][1] = -np.sum(total_spin[:,0])
        return priority_list




#score: {'data2D.txt': -0.06522577160493831}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][0] += state[i][j]
            if h[i][j] > 0:
                priorities.append((total_spin[site][0], 1))
            else:
                priorities.append((-total_spin[site][0], -1))
    return priorities




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N,N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = [0,0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[0] += state[site][j]
            if h[i][j] > 0:
                priority_total[i][j] = total_spin
            else:
                priority_total[i][j] = [-x for x in total_spin]
    return [list(x) for x in priority_total.reshape(N*N,2)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k%2==0:
                        total_spin[0] += state[site][j]
                    else:
                        total_spin[1] += state[i][site]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return sorted(priorities)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[float('-inf'), float('inf')] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[i-((i+1)%N)][j-k%N] if k < N else -1*state[(-i+N-1)%N][min(j+k-N,k)] 
                                  for k in range(max(0,j-1))])
                
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[float('inf'), float('-inf')] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[i-((i+1)%N)][j-k%N] if k < N else -1*state[(-i+N-1)%N][min(j+k-N,k)] 
                                  for k in range(max(0,j-1))])
                
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
                    
        return priority_total




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[p[1], -p[0]] for p in priorities]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0, 0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[1] += state[site][j%N]
                    else:
                        total_spin[0] += state[site][j%N]
                priorities.append(total_spin)
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.018448611111111114}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = np.zeros((N,2), dtype=int)
    for k in range(3):
      for i in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        for j in range(N):
          total_spin[site][0] += state[i][j]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          priority_total[(i*N+j), 0] = total_spin[site][0]
        else:
          priority_total[(i*N+j), 1] = -total_spin[site][0]
    return priority_total




#score: {'data2D.txt': -0.0006918209876543207}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0]*N for _ in range(N)]
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[i][site] += -1 if h[i][j] > 0 else 1
                priority_total = [[0]*2 for _ in range(N*N)]
                for j in range(N):
                    if h[i][j] > 0:
                        priority_total[i*N+j][0] = sum(total_spin[i])
                    else:
                        priority_total[i*N+j][1] = -sum(total_spin[i])
        return priority_total




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.009663734567901214}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spins = [[0, 0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site_interactions = []
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k-j+N < N and k-j-N >= 0:
                        site_interactions.append(J[site, j-k%N].flatten()[0])
                    else:
                        site_interactions.append(h[site][j])
                total_spin = sum(site_interactions)
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.009663734567901214}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = []
        for i in range(N):
            for j in range(N):
                site_interactions = []
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k-j+N < N and k-j-N >= 0:
                        site_interactions.append(J[site, j-k%N].flatten()[0])
                    else:
                        site_interactions.append(h[site][j])
                total_spin = sum(site_interactions)
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [(i[0], i[1]) for i in priorities]




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N): 
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.00044830246913580185}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [(i[0], i[1]) for i in sorted(priorities, reverse=True)]




#score: {'data2D.txt': -0.0006180555555555562}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]

        for j in range(N):
            if h[0][j] > 0:
                priority[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority[j][1] -= sum(h[k][j] for k in range(1,N))

        return priority




#score: {'data2D.txt': -0.0006180555555555562}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        
        total_spin = np.zeros((N, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]

        for j in range(N):
            if h[0][j] > 0:
                priority[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority[j][1] -= sum(h[k][j] for k in range(1,N))

        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
    
    for i in range(N):
        total_spin = 0
        for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin += state[site][i]
        if h[i][j] > 0:
            priority_total[i*N+i][0] = total_spin
        else:
            priority_total[i*N+i][1] = -total_spin
    
    return priority_total.tolist()




#score: {'data2D.txt': -0.0011856481481481481}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        
        return [x for x in sorted(priorities)]




#score: {'data2D.txt': 0.0008711419753086423}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[0,0] for _ in range(N*N)]

    for i in range(N):
        for j in range(N):
            total_spin_1 = 0
            total_spin_2 = 0
            
            site1 = (i + ((j-1)%N - 1)) % N
            total_spin_1 += state[site1][j]
            
            if i > 0:
                site2 = (i - 1 + ((j-1)%N - 1)) % N
                total_spin_2 += state[site2][j]
            else:
                site2 = (i + ((j-1)%N - 1)) % N
                total_spin_2 += state[site2][j]

            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin_1
                priority_total[i*N+j][1] = total_spin_2
            else:
                priority_total[i*N+j][0] = -total_spin_1
                priority_total[i*N+j][1] = -total_spin_2

    return priority_total




#score: {'data2D.txt': 0.0008711419753086423}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin_1 = 0
                total_spin_2 = 0
                
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin_1 += state[site1][j]
                
                if i > 0:
                    site2 = (i - 1 + ((j-1)%N - 1)) % N
                    total_spin_2 += state[site2][j]
                else:
                    site2 = (i + ((j-1)%N - 1)) % N
                    total_spin_2 += state[site2][j]

                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin_1
                    priority_total[i*N+j][1] = total_spin_2
                else:
                    priority_total[i*N+j][0] = -total_spin_1
                    priority_total[i*N+j][1] = -total_spin_2
                    
        return priority_total




#score: {'data2D.txt': -0.011453240740740741}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        total_spin = 0
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority_total[j][1] -= sum(h[k][j] for k in range(1,N))
    
    total_spin = 0
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    
    return priority_total




#score: {'data2D.txt': -0.33023472222222133}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += site_spin
                if h[i][j] > 0:
                    priority_total = total_spin.copy()
                    priority_total[:,1] = -priority_total[:,0]
                    priorities.append(tuple(map(sum, zip(*priority_total))))
                else:
                    priority_total = total_spin.copy()
                    priority_total[:,0] = -priority_total[:,0]
                    priorities.append(tuple(map(sum, zip(*priority_total))))
        return priorities




#score: {'data2D.txt': 0.047373611111111116}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            total_spin=0
            site_spin = state[i][j]
            if h[i][j]>0:
                priority_total=[0,0]
                for k in range(3):
                    site=(i+((k-1)%2 - 1))%N
                    total_spin+=site_spin*state[site][max(0,j-k)%N]
                    priority_total[0]+=site_spin*state[site][max(0,j-k)%N]
                priorities[i*N+j]=[total_spin,0]
            else:
                priority_total=[0,0]
                for k in range(3):
                    site=(i+((k-1)%2 - 1))%N
                    total_spin+=-site_spin*state[site][max(0,j-k)%N]
                    priority_total[1]-=site_spin*state[site][max(0,j-k)%N]
                priorities[i*N+j]=[-total_spin,0]
    return priorities




#score: {'data2D.txt': 0.010597067901234568}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j)%N - N//2)) % N
                total_spin = 0
                for k in range(3):
                    ssite = (site + ((k-1)%2 - 1)) % N
                    total_spin += state[ssite][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0006692901234567905}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2,2), dtype=int)
    
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N) - N//2) % N
        total_spin[site][0] += state[i][j]
    
    for j in range(N**2):
      if h[j//N][j%N] > 0:
        priority_total[j][0] = total_spin[j//N][0]
      else:
        priority_total[j][1] = -1*total_spin[j//N][0]
    
    return priority_total




#score: {'data2D.txt': -0.0005214506172839501}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], 1))
                else:
                    priorities.append((-total_spin[site][0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.0002319444444444446}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site_nb = (site + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += h[site_nb][((k-1)%N)]
        priorities = [[a,b] for a,b in sorted([(total_spin[i][0], 1) if h[int(i/N)][i%N]>0 else (-total_spin[i][0], -1) for i in range(N*N)])]
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N * N
        priority_list = [[0, 0] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += h[site][j]
            if h[i][j] > 0:
                priority_list[i*N+j][0] = np.sum(total_spin[:,0])
                priority_list[i*N+j][1] = -np.sum(total_spin[:,1])
            else:
                priority_list[i*N+j][0] = -np.sum(total_spin[:,0])
                priority_list[i*N+j][1] = np.sum(total_spin[:,1])
        return priority_list




#score: {'data2D.txt': 0.1745115740740743}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += J[k][site][j]
            if h[i][j] > 0:
                priority[(i*N+j),0] = total_spin
                priority[(i*N+j),1] = 1
            else:
                priority[(i*N+j),0] = -total_spin
                priority[(i*N+j),1] = -1
    return(priority)




#score: {'data2D.txt': -0.00044830246913580185}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return sorted(priorities,reverse=True)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin[i][j] += 1
                else:
                    total_spin[i][j] -= 1
        priority_total = [[total_spin[i][j], 1] if h[i][j] > 0 else [-total_spin[i][j], -1] for i in range(N) for j in range(N)]
        return priority_total




#score: {'data2D.txt': -0.0012217592592592588}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += spin
                priority_total = np.zeros((N,2), dtype=int)
                for j in range(N):
                    if h[i][j] > 0:
                        priority_total[j][0] = total_spin[j][0]
                    else:
                        priority_total[j][1] = -1*total_spin[j][0]
                return [priority_total[i]+[h[i][j]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.04872268518518522}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        total_spin = 0
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += state[site][j]
            if h[i][j] > 0:
                priorities = [(total_spin, h[i][j])]
            else:
                priorities = [(-total_spin, -h[i][j])]
        
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            priority_total[j][0] += state[site][j]
            priority_total[j][1] -= state[site][j]
    
    return priority_total




#score: {'data2D.txt': -0.005052006172839507}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        total_spin = 0
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[j][0] = total_spin
            else:
                priority_total[j][1] = -total_spin
    
    return priority_total




#score: {'data2D.txt': -0.002173919753086422}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            site1 = (i + ((j-1)%N - 1)) % N
            site2 = (i + ((j+1)%N - 1)) % N
            
            if h[i][j] > 0:
                total_spin = sum(h[site1][k] for k in range(N))
                priority_total[i*N+j][0] = total_spin
                priority_total[i*N+j][1] = -total_spin
            else:
                total_spin = sum(-h[site2][k] for k in range(N))
                priority_total[i*N+j][0] = total_spin
                priority_total[i*N+j][1] = -total_spin
    
    return priority_total




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    site_sum += state[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j] = [site_sum, 1]
                else:
                    priorities[i*N+j] = [-site_sum, -1]
        return priorities




#score: {'data2D.txt': -0.1706245370370365}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        site = lambda i,k: ((i + (k-1)%2 - 1)) % N
        total_spin = [0]*N*N
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin[i*N+j] += h[site(i,(j-1)%2)][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j]
        return priority_total




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    total_spin = np.zeros((N,2), dtype=int)
    priority_total = np.zeros((N2, 2), dtype=int)

    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i][0] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i][0]
            else:
                priority_total[i*N+j][1] = -total_spin[i][0]

    return priority_total




#score: {'data2D.txt': -0.28767422839506124}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if 0 <= k-j+N <= N and 0 <= k-j-N < N else h[i][j] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.028530709876543214}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((total_spin[i][0], 1))
                else:
                    priorities.append((total_spin[i][0], -1))
        return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            spin = -1 if h[i][j] > 0 else 1
            total_spin[site][spin==1] += 1
    for i in range(N):
        for j in range(N):
            priority[i*N+j] = [total_spin[i%N][1], -total_spin[i%N][0]] if h[i][j] > 0 else [-total_spin[i%N][0], total_spin[i%N][1]]
    return priority




#score: {'data2D.txt': 0.007989351851851853}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[1 if state[i][j] == state[site][((k+2)%3)-1] else 0] += 1 if h[i][j] > 0 else -1
                priorities.append(total_spin)
        return np.array(priorities)




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return np.array(priorities)




#score: {'data2D.txt': -0.001586265432098765}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin[i][0]
            else:
                priority_total[i*N+j,1] = -total_spin[i][0]
        return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
                if h[i][j] > 0:
                    state = [1 if k > 0 else -1 for k in range(3)]
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[site][0] += state[k]
                priorities = np.zeros((N*N,2), dtype=int)
                for j in range(N):
                    if h[i][j] > 0:
                        priorities[i*N+j,0] = total_spin[j][0]
                    else:
                        priorities[i*N+j,1] = -total_spin[j][0]
                return priorities.tolist()




#score: {'data2D.txt': -0.05336157407407408}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
                    
        for j in range(N):
            row_sum = sum(h[:,j])
            for i in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority[i*N+j][0] += row_sum
                else:
                    priority[i*N+j][1] -= row_sum
        
        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': 0.07726342592592597}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                spin = 1
            else:
                spin = -1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][spin] += state[i][j]
            if h[i][j] > 0:
                priorities.append((total_spin[i][0], spin))
            else:
                priorities.append((-total_spin[i][1], spin))
    return priorities




#score: {'data2D.txt': -0.09538009259259264}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[site]
                else:
                    priority_total[i*N+j][1] = -total_spin[site]
        return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': 0.16028688271604957}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], -1))
        return priorities




#score: {'data2D.txt': 0.06863750000000002}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin[site][0]
                else:
                    priorities[(i*N+j), 1] = -total_spin[site][0]
        return priorities




#score: {'data2D.txt': -0.0018526234567901236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority[(i*N+j), 0] = total_spin
            else:
                priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.02470570987654321}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N*N)]
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += 1
            else:
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] -= 1
    for j in range(N):
        if h[0][j] > 0:
            priority_total[j][0] = total_spin[0][0]
        else:
            priority_total[j][1] = -total_spin[0][0]
    for i in range(1,N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += 1
            else:
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] -= 1
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i][0]
            else:
                priority_total[i*N+j][1] = -total_spin[i][0]
    return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[site][j]
                if h[i][j] > 0:
                    priority_total[i][j] = total_spin
                else:
                    priority_total[i][j] = [-x for x in total_spin]
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0004655864197530859}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    total_spin = [0]*N
    for i in range(N):
        for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin[site] += state[i][k]
        for j in range(N):
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin[j]
            else:
                priority_total[(i*N+j), 1] = -total_spin[j]
    return priority_total




#score: {'data2D.txt': 0.33350848765432}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin[i][site] += state[i][site]
    for j in range(N**2):
        if h[j//N][j%N] > 0:
            priorities.append((total_spin[j//N][j%N], 1))
        else:
            priorities.append((-total_spin[j//N][j%N], -1))
    return priorities




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 0))
                else:
                    priority.append((-total_spin, 1))
        return priority




#score: {'data2D.txt': 0.007640895061728394}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i][j] += h[site][0]
    priority_total = np.zeros((N,2), dtype=int)
    for j in range(N):
        spin = -1 if h[(i+N-1)%N][j] > 0 else 1
        for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin[site][j] += spin
    priority = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin[i][j]
            else:
                priority[i*N+j][1] = -total_spin[i][j]
    return priority.tolist()




#score: {'data2D.txt': 0.007640895061728394}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += h[site][0]
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            spin = -1 if h[(i+N-1)%N][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][j] += spin
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i][j]
                else:
                    priority[i*N+j][1] = -total_spin[i][j]
        return priority.tolist()




#score: {'data2D.txt': 0.013601388888888889}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += h[site][j]
                total_spin[i*N+j][1] -= h[site][j]
        priority_total = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            spin = -1 if h[i][N-1-i]%N > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site*N+(N-1-i)%N][spin == 1] += spin
        priority = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority[i*N+j][1] = -total_spin[i*N+j][1]
        return [list(row) for row in priority]




#score: {'data2D.txt': -0.0320368827160494}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[0] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[0]
            else:
                priority_total[i*N+j][1] = -total_spin[0]
    return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
        return priority




#score: {'data2D.txt': -0.013703549382716054}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = np.zeros((N,N), dtype=int)
        
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    spin = 1
                else:
                    spin = -1
                
                for k in range(2):
                    site = (i + ((k)%2) - 1) % N
                    total_spin[site, j] += spin
                
                priority_total = np.zeros((N,2), dtype=int)
                for jj in range(N):
                    if h[i][jj] > 0:
                        priority_total[jj][0] = total_spin[0,jj]
                    else:
                        priority_total[jj][1] = -total_spin[0,jj]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[0, j]
                else:
                    priority[i*N+j][1] = -total_spin[0, j]
        
        return priority




#score: {'data2D.txt': -0.17729830246913594}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [[0, 0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((total_spin[i][0], 1))
                else:
                    priorities.append((-total_spin[i][0], -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': 0.06840601851851855}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0]*N for _ in range(N)]
        priority_total = [[0]*2 for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[i][site] += -1 if h[i][j] > 0 else 1
                    
                    if h[i][j] > 0:
                        priority_total[i*N+j][0] = sum(total_spin[i])
                    else:
                        priority_total[i*N+j][1] = -sum(total_spin[i])
        
        return priority_total




#score: {'data2D.txt': -0.0017270061728395063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_interactions = []
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k-j+N < N and k-j-N >= 0:
                        site_interactions.append(J[site, j-k%N].flatten()[0])
                    else:
                        site_interactions.append(h[site][j])
                total_spin[i*N+j] = [sum(site_interactions), -sum(site_interactions)]
        return sorted(total_spin)




#score: {'data2D.txt': -0.0017270061728395063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_interactions = []
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k-j+N < N and k-j-N >= 0:
                        site_interactions.append(J[site, j-k%N].flatten()[0])
                    else:
                        site_interactions.append(h[site][j])
                total_spin[i*N+j] = [sum(site_interactions), -sum(site_interactions)]
        return sorted(total_spin)




#score: {'data2D.txt': 0.0706646604938272}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[float('inf'), float('-inf')] for _ in range(N2)]

    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            if h[i][j] > 0:
                spin = 1
            else:
                spin = -1
            site = (i + ((j-1)%N - 1)) % N
            total_spin[spin] += state[i][j]

            priority_total[i*N+j] = [total_spin[0], -total_spin[1]]

    for j in range(N):
        if h[j][j] > 0:
            priority_total[j*N+j] = [priority_total[j*N+j][0]+state[j][j], -priority_total[j*N+j][1]-state[j][j]]
        else:
            priority_total[j*N+j] = [-priority_total[j*N+j][0]-state[j][j], priority_total[j*N+j][1]+state[j][j]]

    return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0.0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.00041805555555555574}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N_square = N * N
        priority_list = []
        for i in range(N):
            row_sum = sum(h[i])
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_list.append((total_spin[0], 1))
                else:
                    priority_list.append((-total_spin[0], -1))
        return sorted(priority_list)




#score: {'data2D.txt': -0.14584305555555574}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
       state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
       priorities = []
       for i in range(N):
           row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
           for j in range(N):
               total_spin = sum([row_sum[k] * state[i][j-k%N] if (i+(k-1)%2 - 1) % N != j else 0 for k in range(min(j,N-1))])
               if h[i][j] > 0:
                   priorities.append((total_spin, 1))
               else:
                   priorities.append((-1*total_spin, -1))
       return priorities




#score: {'data2D.txt': 0.035122993827160484}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin_sum = sum([state[(i + ((k-1)%2 - 1)) % N][max(0,j-k)%N] * site_spin for k in range(4)])
            if h[i][j] > 0:
                priorities[i*N+j,0] = total_spin_sum
            else:
                priorities[i*N+j,1] = -total_spin_sum
    return priorities




#score: {'data2D.txt': 0.1647720679012351}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                site_interactions = [J[(i + ((k-1)%2 - 1)) % N, j-k%N][0] if (k-j+N < N and k-j-N >= 0) else h[(i + ((k-1)%2 - 1)) % N, j] for k in range(3)]
                total_spin = sum(site_interactions)
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, 1]
                else:
                    priorities[i*N+j] = [-total_spin, -1]
        return priorities




#score: {'data2D.txt': -0.0013399691358024694}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
        for i in range(N):
            for j in range(N):
                priority_total = np.zeros((2), dtype=int)
                if h[i][j] > 0:
                    priority_total[0] = -sum([total_spin[site][1] if site != i else total_spin[site][0] for site in range(N)])
                    priorities.append([priority_total[0], 1])
                else:
                    priority_total[1] = sum([total_spin[site][0] if site != i else total_spin[site][1] for site in range(N)])
                    priorities.append([-priority_total[1], -1])
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': -0.004464351851851853}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j)%N - 1)) % N
                total_spin[site][0] += 1 if h[i][j] > 0 else -1
                for k in range(3):
                    site2 = (i + ((k-1)%2 - 1)) % N
                    total_spin[site2][0] += 1 if h[i][j] > 0 else -1
                if h[i][j] > 0:
                    priorities[i*N+j][0] = sum(total_spin[site][0] for site in range(N))
                else:
                    priorities[i*N+j][1] = -sum(total_spin[site][0] for site in range(N))
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[float('-inf'), float('inf')] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[i-((i+1)%N)][j-k%N] if k < N else -1*state[(-i+N-1)%N][min(j+k-N,k)] 
                                  for k in range(max(0,j-1))])
                
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.0001776234567901238}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N, N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][site][0] += 1 if h[i][j] > 0 else -1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[i][site][0] += 1 if h[site][j] > 0 else -1
        priorities = []
        for i in range(N*N):
            if h[i//N][i%N] > 0:
                priorities.append((-total_spin[i//N][i%N][0], 1))
            else:
                priorities.append((total_spin[i//N][i%N][0], -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)




#score: {'data2D.txt': -0.002099228395061728}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0006180555555555562}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin[j][0] += 1
                else:
                    total_spin[j][1] -= 1
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += 2*(h[i][j] > 0) - 1
        for j in range(N):
            if h[0][j] > 0:
                priority[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority[j][1] -= sum(h[k][j] for k in range(1,N))
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
            if h[i][j] > 0:
                priority_total = total_spin.copy()
                for j in range(N):
                    priority_total[j][0] = total_spin[j][0]
            else:
                priority_total = -total_spin.copy()
                for j in range(N):
                    priority_total[j][1] = -total_spin[j][0]
        return priority




#score: {'data2D.txt': -0.008430092592592593}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        for j in range(N):
            if h[0][j] > 0:
                priority[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority[j][1] -= sum(h[k][j] for k in range(1,N))
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    spin = 1
                else:
                    spin = -1
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += spin
        for i in range(N):
            if h[i][0] > 0:
                priority[i*N:][0] += np.sum(h[:,0], dtype=int)
            else:
                priority[i*N:][1] -= np.sum(h[:,0], dtype=int)
        return priority




#score: {'data2D.txt': -0.0006180555555555562}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        
        total_spin = np.zeros((N, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[i][j]
                
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i][0]
                else:
                    priority[i*N+j][1] = -total_spin[i][0]

        for j in range(N):
            if h[0][j] > 0:
                priority[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority[j][1] -= sum(h[k][j] for k in range(1,N))

        return priority




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
                    
        return priority_total




#score: {'data2D.txt': -0.15429645061728445}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j] = [total_spin, 0]
            else:
                priority_total[i*N+j] = [-total_spin, 1]
    return priority_total




#score: {'data2D.txt': -0.0667609567901235}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = np.zeros((2), dtype=int)
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += spin
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return priorities




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.0021584876543209877}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.0008986111111111117}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k == 0:
                        total_spin[0] += state[i][j]
                    elif k == 1 or k==3:
                        total_spin[0] += state[site][j]
                    else:
                        total_spin[0] += state[site][(j+1)%N]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = [0,0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[0] += state[site][j]
            if h[i][j] > 0:
                priorities[i*N+j] = [total_spin[0], 1]
            else:
                priorities[i*N+j] = [-total_spin[0], -1]
    return priorities.tolist()




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((-total_spin, -1))
    return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.32667206790123365}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      N2 = N*N
      total_spin = [[0 for _ in range(2)] for _ in range(N)]
      priorities = []
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      for i in range(N):
          for j in range(N):
              total_spin[0][0] += state[i][j]
              if h[i][j] > 0:
                  priorities.append((total_spin[0][0], 1))
              else:
                  priorities.append((-total_spin[0][0], -1))
      return priorities




#score: {'data2D.txt': -0.004868055555555555}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority_total[j][1] -= sum(h[k][j] for k in range(1,N))
        
        return priority_total




#score: {'data2D.txt': -0.004868055555555555}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority_total[j][1] -= sum(h[k][j] for k in range(1,N))
        
        return priority_total




#score: {'data2D.txt': -0.004868055555555555}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority_total[j][1] -= sum(h[k][j] for k in range(1,N))
        
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        total_spin = [0,0]
        for j in range(N):
            site_sum = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                site_sum += state[i][j] * h[site][j]
            total_spin[1 if h[i][j] > 0 else 0] += site_sum
        for j in range(N):
            if h[i][j] > 0:
                priorities.append((total_spin[1], 1))
            else:
                priorities.append((-total_spin[0], -1))
    return priorities




#score: {'data2D.txt': 0.008216203703703703}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N2)]
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[site*N+j][0] += state[i][j]
                else:
                    priority_total[site*N+j][1] -= state[i][j]
        return [list(row) for row in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[p[0],p[1]] for p in priorities]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,N), dtype=int)
        for k in range(3):
            for i in range(N):
                for j in range(N):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += state[i][j]
        priority_total = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((total_spin[i][j], h[i][j]))
                else:
                    priorities.append((-total_spin[i][j], -h[i][j]))
        return [list(i) for i in priorities]




#score: {'data2D.txt': 0.007117129629629629}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += state[site][0]
        return [(np.sum(total_spin[i][j]), -1 if h[i][j] > 0 else 1) for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.09921311728395071}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin[site][0], 0]
                else:
                    priorities[i*N+j] = [-total_spin[site][0], 1]
        priority_total = [[0 for _ in range(2)] for _ in range(N)]
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]
        return priorities




#score: {'data2D.txt': 0.339107561728394}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0 for _ in range(2)] for _ in range(N2)]
    
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    
    for j in range(N):
        if h[0][j] > 0:
            priority_total[j][0] += sum(h[k][j] for k in range(1,N))
        else:
            priority_total[j][1] -= sum(h[k][j] for k in range(1,N))
    
    return priority_total




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    
    return priority_total




#score: {'data2D.txt': -0.09538009259259264}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
        
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority_total[j][1] -= sum(h[k][j] for k in range(1,N))
    
    total_spin = [0 for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[site] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[site]
            else:
                priority_total[i*N+j][1] = -total_spin[site]
    
    return priority_total




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [(i[0], i[1]) for i in priorities]




#score: {'data2D.txt': -0.0009492283950617285}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j+1)%2 - 1)) % N
                for k in range(3):
                    if k==1:
                        continue
                    neighbor_i = (i + ((k-1)%2 - 1)) % N
                    total_spin[neighbor_i][0] += h[i][j]
        priorities = []
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total = np.zeros((N,2), dtype=int)
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[site][0] += 1
                    priority_total[j][0] = total_spin[j][0]
                else:
                    priority_total = np.zeros((N,2), dtype=int)
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[site][0] -= 1
                    priority_total[j][1] = -total_spin[j][0]
                priorities.append(list(priority_total[0]))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities[(i*N+j), 0] = total_spin
            else:
                priorities[(i*N+j), 1] = -total_spin
    return priorities.tolist()




#score: {'data2D.txt': -0.0010723765432098765}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site2 = (site + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[site][site2]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j] > 0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.007382561728395061}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
                if h[site][j] > 0:
                    priority[i*N+j] = [total_spin[i][0], 0]
                else:
                    priority[i*N+j] = [-total_spin[i][0], 1]
        return priority




#score: {'data2D.txt': -0.007382561728395061}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
                if h[site][j] > 0:
                    priority[i*N+j] = [total_spin[i][0], 0]
                else:
                    priority[i*N+j] = [-total_spin[i][0], 1]
        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((2)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return priority




#score: {'data2D.txt': 0.0677109567901235}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = np.zeros((N,N), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
                
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = total_spin[site][0]
                else:
                    priorities[i*N+j, 1] = -total_spin[site][0]
                    
        return priorities




#score: {'data2D.txt': -0.14262546296296313}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
                priorities[(i*N+j), 0] = total_spin[site][0] if h[i][j] > 0 else -total_spin[site][0]
        return priorities




#score: {'data2D.txt': -0.0008986111111111117}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k == 0:
                        total_spin[0] += state[i][j]
                    elif k == 1 or k==3:
                        total_spin[0] += state[site][j]
                    else:
                        total_spin[0] += state[site][(j+1)%N]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.0008986111111111117}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k == 0:
                        total_spin[0] += state[i][j]
                    elif k == 1 or k==3:
                        total_spin[0] += state[site][j]
                    else:
                        total_spin[0] += state[site][(j+1)%N]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.0006692901234567905}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[0,0] for _ in range(N**2)]
    
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N) - N//2) % N
            total_spin[site] += state[i][j]
    
    for j in range(N**2):
        if h[j//N][j%N] > 0:
            priority_total[j][0] = total_spin[j//N]
        else:
            priority_total[j][1] = -1*total_spin[j//N]
        
    return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    total_spin = [[0,0] for _ in range(N)]
    priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N) - N//2) % N
            total_spin[site][0] += h[i][j]
            
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[site][0]
            else:
                priority_total[i*N+j][1] = -total_spin[site][0]
                
    return priority_total




#score: {'data2D.txt': -0.0001776234567901238}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N, N, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i][site][0] += 1 if h[i][j] > 0 else -1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[i][site][0] += 1 if h[site][j] > 0 else -1
    priorities = []
    for i in range(N*N):
        if h[i//N][i%N] > 0:
            priorities.append((-total_spin[i//N][i%N][0], 1))
        else:
            priorities.append((total_spin[i//N][i%N][0], -1))
    return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.03457453703703706}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += state[i][int((k-1)/2)*N+(int((k-1)/2) + (k%2))]
        for j in range(N*N):
            if h[int(j/N)][j%N] > 0:
                priority = [total_spin[j//N][0], 1]
            else:
                priority = [-total_spin[j//N][0], -1]
            priorities.append(priority)
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.009031944444444443}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += spin
                total_spin[N*site+j][1] += spin
        return [[total_spin[k][0], total_spin[k][1]] for k in range(N*N)]




#score: {'data2D.txt': 0.1495297839506174}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[0][(i + ((k-1)%2 - 1)) % N][j] if state[i][((k-1)%2 - 1)] == 1 else -J[0][(i + ((k-1)%2 - 1)) % N][j] for k in range(3)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x[0], x[1]] for x in sorted(priorities)]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0007563271604938273}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return sorted(priorities)[::-1]




#score: {'data2D.txt': 0.0007563271604938273}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return sorted(priorities)[::-1]




#score: {'data2D.txt': 0.0007563271604938273}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return sorted(priorities)[::-1]




#score: {'data2D.txt': 0.0007563271604938273}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return sorted(priorities)[::-1]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]  
    priorities = []  
    for i in range(N):  
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]  
      for j in range(N):  
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])  
        if h[i][j] > 0:  
          priorities.append((total_spin, 1))  
        else:  
          priorities.append((total_spin, -1))  
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i,site] += h[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin[i,j]
                else:
                    priority_total[i*N+j, 1] = -total_spin[i,j]
        return priority_total




#score: {'data2D.txt': -0.0010418209876543211}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []  
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[3*(k*N+j)][:N].dot(state[max(0,i-k),:][min(j+k,N-1):]) for k in range(max(0,j-N+1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[p[1], p[0]] for p in sorted(priorities)]  




#score: {'data2D.txt': 0.06840601851851855}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin[i][0] += site_spin
                if h[i][j] > 0:
                    priorities[(i*N+j),1] = -total_spin[i][0]
                else:
                    priorities[(i*N+j),0] = total_spin[i][0]
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i][j] = [total_spin, 0]
                else:
                    priority_total[i][j] = [-total_spin, 1]
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': -0.0009214506172839503}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                site = (i + ((3-1)%2 - 1)) % N
                total_magnetism = h[site][j]
                if h[i][j] > 0:
                    priorities.append((-total_spin-total_magnetism, 1))
                else:
                    priorities.append((total_spin+total_magnetism, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0009214506172839503}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                site = (i + ((3-1)%2 - 1)) % N
                total_magnetism = h[site][j]
                if h[i][j] > 0:
                    priorities.append((-total_spin-total_magnetism, 1))
                else:
                    priorities.append((total_spin+total_magnetism, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][j] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((-total_spin[i][j], 1))
                else:
                    priorities.append((total_spin[i][j], -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.16358780864197553}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return priorities




#score: {'data2D.txt': 0.033143981481481365}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                if h[site][j] > 0:
                    total_spin += h[site][j]
                for k in range(4):
                    if k-j+N < N and k-j-N >= 0:
                        total_spin += J[site, j-k%N].flatten()[0]
                priority_total = total_spin
                priorities[i*N+j] = [priority_total, -priority_total]
        return priorities




#score: {'data2D.txt': -0.0017652777777777773}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k-j+N < N and k-j-N >= 0:
                        total_spin[0] += J[site, j-k%N].flatten()[0]
                    else:
                        total_spin[0] += h[site][j]
                for spin in [-1,1]:
                    priority_total = sum([spin*h[i][j] for j in range(N)])
                    priorities.append((priority_total + sum([spin*J[site, j-k%N].flatten()[0] for k in range(4) if k-j+N < N and k-j-N >= 0]), spin))
        return sorted(priorities)[::-1][:N*N]




#score: {'data2D.txt': -0.0017652777777777773}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = [0,0]
            for k in range(4):
                site = (i + ((k-1)%2 - 1)) % N
                if k-j+N < N and k-j-N >= 0:
                    total_spin[0] += J[site, j-k%N].flatten()[0]
                else:
                    total_spin[0] += h[site][j]
            for spin in [-1,1]:
                priority_total = sum([spin*h[i][j] for j in range(N)])
                priorities.append((priority_total + sum([spin*J[site, j-k%N].flatten()[0] for k in range(4) if k-j+N < N and k-j-N >= 0]), spin))
    return sorted(priorities)[::-1][:N*N]




#score: {'data2D.txt': -0.0008294753086419755}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x[1], x[0]] for x in sorted(priorities, key=lambda y: (-y[0], y[1]))]




#score: {'data2D.txt': -0.0022162037037037033}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                
                if h[i][j] > 0:
                    priority_total = -total_spin
                else:
                    priority_total = total_spin
                
                priorities.append((priority_total, -1))
        return [[row[0], row[1]] for row in priorities]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][site] += h[site][j]
                if h[i][j] > 0:
                    total_spin[i][j] = total_spin[i][site]
                else:
                    total_spin[i][j] = -total_spin[i][site]
        priority_total = []
        for i in range(N):
            row = []
            for j in range(N):
                if h[i][j] > 0:
                    row.append((total_spin[i][j],1))
                else:
                    row.append((-total_spin[i][j],-1))
            priority_total.extend(row)
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site,j] += spin
    priorities = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priorities[(i*N+j), 0] = total_spin[i,j]
            else:
                priorities[(i*N+j), 1] = -total_spin[i,j]
    return priorities.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            total_spin = np.zeros(2, int)
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[0]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[0]
        for j in range(N):
            priority_total[j, 0] = priority_total[N*j: N*(j+1), 0].sum()
            if h[i][j] > 0:
                priority_total[j, 1] = priority_total[N*j: N*(j+1), 1].sum()
            else:
                priority_total[j, 1] = -(priority_total[N*j: N*(j+1), 1].sum())
        return priority_total




#score: {'data2D.txt': 0.26402175925925897}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if ((i + ((j-k)%2 - 1)) % N) == k else 0 for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, 1]
                else:
                    priority_total[i*N+j] = [-total_spin, -1]
        return priority_total




#score: {'data2D.txt': 0.07110972222222227}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += state[i][k%N]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i][0], 1]
                else:
                    priority_total[i*N+j] = [-total_spin[i][0], -1]
        return priority_total




#score: {'data2D.txt': 0.2904572530864192}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_spin = state[i][j]
                total_spin = sum([site_spin + (-1)**((k-1)%2)*state[(i+((k-1)%2 - 1)) % N][max(0,j-k)%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = total_spin
                else:
                    priorities[i*N+j, 1] = -total_spin
        return priorities




#score: {'data2D.txt': -0.10544336419753096}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum([state[i][site], state[(i+1)%N][j], state[i][(j+1)%N] if j < N-1 else state[0][j-N]])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.011142746913580248}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin[0]
                else:
                    priorities[(i*N+j), 1] = -total_spin[0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] += total_spin[0]
                else:
                    priorities[(i*N+j), 1] -= total_spin[0]
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[spin] += state[site][j]
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            for i in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[j, 0] = total_spin
                else:
                    priority_total[j, 1] = -total_spin
        return priorities




#score: {'data2D.txt': 0.033143981481481365}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return priorities




#score: {'data2D.txt': -0.010884104938271605}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = np.zeros((N*N,2), dtype=int)
    total_spin = [0,0]
    
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[0] += h[site][j]
        
        if h[i][j] > 0:
          priorities[(i*N+j), 0] = total_spin[0]
        else:
          priorities[(i*N+j), 1] = -total_spin[0]
    
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][0] += spin
            if h[i][j] > 0:
                priorities.append((total_spin[site][0], 1))
            else:
                priorities.append((total_spin[site][0], -1))
    return priorities




#score: {'data2D.txt': 0.04118287037037037}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
                    
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
                    
        return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
    sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
    priority = np.column_stack((sum_1, -sum_2))
    return(priority)




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((-total_spin, -1))
      return priorities




#score: {'data2D.txt': -0.0005214506172839501}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N_square = N * N
        priorities = [[0 for _ in range(2)] for _ in range(N_square)]
        total_spin = np.zeros((N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += h[i][j]
        priority_total = []
        for j in range(N_square):
            if h[j//N][j%N] > 0:
                priority_total.append((total_spin[j//N][0], 1))
            else:
                priority_total.append((-total_spin[j//N][0], -1))
        return sorted(priority_total)




#score: {'data2D.txt': -0.00041805555555555574}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N_square = N * N
        priority_list = []
        for i in range(N):
            row_sum = sum(h[i])
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_list.append((total_spin[0], 1))
                else:
                    priority_list.append((-total_spin[0], -1))
        return sorted(priority_list)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]  
        priorities = []    
        for i in range(N):  
            for j in range(N):  
                site = (i + ((j%2) - 1)) % N 
                total_spin = 0  
                for k in range(3):  
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j] 
                if h[i][j] > 0:  
                    priorities.append((total_spin, 1))
                else:  
                    priorities.append((-total_spin, -1))
        return [[p[1], p[0]] for p in priorities]




#score: {'data2D.txt': 0.0323652777777778}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j%2) - 1)) % N
                for k in range(3):
                    site = (site + ((k-1)%2 - 1)) % N
                    total_spin += state[site][0]
                
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        
        return priorities




#score: {'data2D.txt': -0.0008853395061728396}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return [[p[1],-p[0]] for p in sorted(priorities)]




#score: {'data2D.txt': -0.012068672839506174}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            for k in range(3):
                site_neighbor = (site + ((k-1)%2 - 1)) % N
                total_spin[i*N+j][0] += h[site_neighbor][j]
    return [[p[1], -p[0]] for p in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    for k in range(3):
                        site_neighbor = (i + ((k-1)%2 - 1)) % N
                        total_spin[site_neighbor][0] += 1 if h[i][j] > 0 else -1
                priority_total[i*N+j] = [total_spin[site][0], -total_spin[site][0]]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                if h[site][j] > 0:
                    total_spin += h[site][j]
                for k in range(4):
                    if k-j+N < N and k-j-N >= 0:
                        total_spin += J[site, j-k%N].flatten()[0]
                priority_total = total_spin
                priorities.append([priority_total, -priority_total])
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -1.4043209876543283e-05}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[site, j-k%N].flatten()[0] if 0 <= k-j+N < N and 0 <= k-j-N < N else 0 for k in range(4)])
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities.append([total_spin, -total_spin])
                else:
                    priorities.append([-total_spin, total_spin])
        return priorities




#score: {'data2D.txt': 0.057156018518518543}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i+((k-1)%2) % N, (j-k)%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(3)])
                if h[i][j] > 0:
                    priorities.append([total_spin, 1])
                else:
                    priorities.append([-total_spin, -1])
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.057156018518518543}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2))
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[(i+((k-1)%2) % N, j-k%N)].flatten()[0] if (0 <= k-j+N <= N and 0 <= k-j-N < N) else h[i][j] for k in range(-1,2)])
                if h[i][j] > 0:
                    priority[(i*N+j),0] = total_spin
                    priority[(i*N+j),1] = 1
                else:
                    priority[(i*N+j),0] = -total_spin
                    priority[(i*N+j),1] = -1
        return(priority)




#score: {'data2D.txt': -0.0010276234567901236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0]*2 for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][1 if h[i][j] > 0 else 0] += -1 if h[i][j] > 0 else 1
        for j in range(N):
            if h[i][j] > 0:
                total_spin[j][0] = sum(total_spin[k][1] for k in range(j))
            else:
                total_spin[j][1] = -sum(total_spin[k][0] for k in range(j))
        return [list(t) for t in total_spin]




#score: {'data2D.txt': 0.016561574074074076}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0]*N for _ in range(N)]
    priority_total = []
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority = [sum(total_spin[i][:k]+total_spin[i][k+1:]) for k in range(N)][0]
                total_spin[i][j] = -1
            else:
                priority = [-sum(total_spin[i][:k]+total_spin[i][k+1:]) for k in range(N)][0]
                total_spin[i][j] = 1
            priority_total.append([priority, 1-2*total_spin[i][j]])
    return priority_total




#score: {'data2D.txt': -0.17209737654321003}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum([state[k][site] if k != i else state[i][j] for k in range(N)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.010946450617283951}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spins = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spins[i][j] += 1
                else:
                    total_spins[i][j] -= 1
        priority_total = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                if h[i][j] > 0:
                    total_spins[site][0] += total_spins[i][j]
                else:
                    total_spins[site][0] -= total_spins[i][j]
        priority = [[total_spins[i][j], 1] if h[i][j] > 0 else [-total_spins[i][j], -1] for i in range(N) for j in range(N)]
        return priority




#score: {'data2D.txt': 0.3330828703703694}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spins = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%2 - 1)) % N
                total_spins[site][1] += 1
            else:
                site = (i + ((j-1)%2 - 1)) % N
                total_spins[site][0] -= 1
    priority_total = [[total_spins[i][1], 1] if h[i//N][i%N] > 0 else [(-total_spins[i][0]), -1] for i in range(N*N)]
    return priority_total




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.008696141975308642}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                if h[i][j] > 0:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[0] += state[site][j]
                    priority_total[j*N+i] = [total_spin[0], 1]
                else:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[1] -= state[site][j]
                    priority_total[j*N+i] = [-total_spin[1], -1]
        
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for k in range(3):
            site = (k % 2 - 1)
            for i in range(N):
                for j in range(N):
                    total_spin[i][0] += state[(i+site)%N][j]
        priorities = []
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((-total_spin[i][1], 1))
                else:
                    priorities.append((total_spin[i][1], -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
                    
        return priorities




#score: {'data2D.txt': -0.00037762345679012314}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += state[i][site]
                if h[i][site] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return sorted(priorities,reverse=True)




#score: {'data2D.txt': -0.00037762345679012314}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += state[i][site]
                if h[i][site] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return sorted(priorities,reverse=True)




#score: {'data2D.txt': -0.00037762345679012314}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += state[i][site]
                if h[i][site] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return sorted(priorities,reverse=True)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    total_spin = np.zeros((N*N,2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site*N+j][0] += spin
            priority_total[i*N+j][0] = total_spin[i*N+j][0]
            if h[i][j] > 0:
                priority_total[i*N+j][1] = total_spin[i*N+j][0]
            else:
                priority_total[i*N+j][1] = -total_spin[i*N+j][0]
    
    return priority_total




#score: {'data2D.txt': 0.07110972222222227}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
          for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin[site][0] += state[i][k%N]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
          for j in range(N):
            if h[i][j] > 0:
              priority_total[i*N+j] = [total_spin[i][0], 1]
            else:
              priority_total[i*N+j] = [-total_spin[i][0], -1]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.09921311728395071}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin[site][0], 0]
                else:
                    priorities[i*N+j] = [-total_spin[site][0], 1]
        return priorities




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0009229938271604934}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[k][site][j-k%N] * state[site][j-k%N]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0010591049382716049}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([J[k][(i + ((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.0015714506172839506}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[y[1], y[0]] for y in sorted(priorities)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[float('-inf') for _ in range(2)] for _ in range(N2)]
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priority[i*N+j][1] = -total_spin
        else:
          priority[i*N+j][0] = total_spin
    return priority




#score: {'data2D.txt': -0.005629475308641975}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            for k in range(3):
                if h[site][k] > 0:
                    total_spin += 1
                else:
                    total_spin -= 1
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        priorities = [[0,0] for _ in range(N**2)]
        
        for i in range(N**2):
            site = (i // N, i % N)
            for k in range(3):
                neighbor_site = ((site[0] + ((k-1)%2 - 1)) % N, site[1])
                total_spin[i][h[neighbor_site[0]][neighbor_site[1]] > 0] += 1
            if h[site[0]][site[1]] > 0:
                priorities[i][0] = total_spin[i][0]
            else:
                priorities[i][1] = -total_spin[i][0]
        
        for j in range(N):
            priority_total = [[0,0] for _ in range(N)]
            for i in range(N):
                if h[i][j] > 0:
                    priority_total[i][0] = total_spin[j*N+i][0]
                else:
                    priority_total[i][1] = -total_spin[j*N+i][0]
        
        return priorities




#score: {'data2D.txt': -0.0008251543209876545}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[p[1],-p[0]] for p in sorted(priorities)]




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[p[1],-p[0]]for p in priorities]




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site*N+j, 0 if h[i][j] > 0 else 1] += spin
        return total_spin




#score: {'data2D.txt': -0.001275771604938271}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            site = (i//N, i%N)
            total_spin = [0, 0]
            for k in range(3):
                neighbor = ((site[0] + ((k-1)%2 - 1)) % N, (site[1] + ((k-1)%2 - 1)) % N)
                if neighbor == site:
                    continue
                total_spin[int(J[k][neighbor[0]][neighbor[1]]) > 0] += state[neighbor[0]][neighbor[1]]
            priorities.append((total_spin[0], total_spin[1]))
        return priorities




#score: {'data2D.txt': -0.012681018518518517}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = np.zeros((N,2), dtype=int)
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
            priority_total = np.zeros((N,2), dtype=int)
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[j][0]
                else:
                    priority_total[j][1] = -1*total_spin[j][0]
            for j in range(N):
                priorities.append((priority_total[j][0], 1))
        return priorities




#score: {'data2D.txt': -0.0002998456790123456}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += state[i][site]
        priorities = []
        for i in range(N*N):
            if h[int(i/N)][i%N] > 0:
                priorities.append((total_spin[i][0], 1))
            else:
                priorities.append((-total_spin[i][0], -1))
        return sorted(priorities,reverse=True)




#score: {'data2D.txt': 1.435185185185145e-05}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], 1))
                else:
                    priorities.append((-total_spin[site][0], -1))
        return sorted(priorities,reverse=True)




#score: {'data2D.txt': -0.002173919753086422}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                site2 = (i + ((j+1)%N - 1)) % N
                
                if h[i][j] > 0:
                    total_spin = sum(h[site1][k] for k in range(N))
                    priority_total[i*N+j][0] = total_spin
                    priority_total[i*N+j][1] = -total_spin
                else:
                    total_spin = sum(-h[site2][k] for k in range(N))
                    priority_total[i*N+j][0] = total_spin
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = np.zeros((N2, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[site][j] > 0:
                        total_spin += 1
                    else:
                        total_spin -= 1
                priority_total[i*N+j] = [total_spin, -total_spin]
        
        return priority_total




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] if state[i][j-k%N] == 1 else -row_sum[k] for k in range(min(j,N-1))])
        priorities.append((total_spin, [-1,1][state[i][j]>0]))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.010884104938271605}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin[0]
                else:
                    priorities[(i*N+j), 1] = -total_spin[0]
        return priorities




#score: {'data2D.txt': 0.033143981481481365}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return priorities




#score: {'data2D.txt': -0.19093379629629656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N,2))
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin[i][j][0] = -1
                    total_spin[i][j][1] = 1
                else:
                    total_spin[i][j][0] = 1
                    total_spin[i][j][1] = -1
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][j] += total_spin[site][j]
        priority = []
        for i in range(N*N):
            if h[int(i/N)][i%N] > 0:
                priority.append((total_spin[int(i/N)][i%N][0], -1))
            else:
                priority.append((total_spin[int(i/N)][i%N][1], 1))
        return priority




#score: {'data2D.txt': -0.06522577160493831}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][0] += state[i][j]
            if h[i][j] > 0:
                priorities.append((total_spin[site][0], 1))
            else:
                priorities.append((-total_spin[site][0], -1))
    return priorities




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
                    
        return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
                    
        return priority_total




#score: {'data2D.txt': -0.0008986111111111117}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k == 0:
                        total_spin[0] += state[i][j]
                    elif k == 1 or k==3:
                        total_spin[0] += state[site][j]
                    else:
                        total_spin[0] += state[site][(j+1)%N]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.03370725308641975}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k == 0:
                        total_spin[0] += state[i][j]
                    elif k == 1 or k==3:
                        total_spin[0] += state[site][j]
                    else:
                        total_spin[0] += state[site][(j+1)%N]
                if h[i][j] > 0:
                    priority_total[(i*N+j),0] = total_spin[0]
                    priority_total[(i*N+j),1] = 1
                else:
                    priority_total[(i*N+j),0] = -total_spin[0]
                    priority_total[(i*N+j),1] = -1
        
        return priority_total.tolist()




#score: {'data2D.txt': -0.0007887345679012342}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    total_spin[site][0] += 1
                else:
                    total_spin[site][0] -= 1
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
        return priority_total




#score: {'data2D.txt': 0.11887484567901248}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[site][0] += state[i][j]
            
            if h[i][j] > 0:
                priority_total = -total_spin[site].sum()
            else:
                priority_total = total_spin[site].sum()
                
            priorities.append((priority_total, -1))
    return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,N), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += h[site][j]
                
                if h[i][j] > 0:
                    priority_total = -total_spin[i].sum()
                else:
                    priority_total = total_spin[i].sum()
                    
                priorities.append((priority_total, -1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += h[site][j]
                
                if h[i][j] > 0:
                    priority_total = -total_spin[i].sum()
                else:
                    priority_total = total_spin[i].sum()
                    
                priorities.append((priority_total, -1))
        
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N), dtype=int)
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += h[site][j]
                
                if h[i][j] > 0:
                    priority_total = -total_spin[i].sum()
                else:
                    priority_total = total_spin[i].sum()
                    
                priorities.append((priority_total, -1))
        return np.array(priorities).reshape(N*N,2)




#score: {'data2D.txt': -0.004868055555555555}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority_total[j][1] -= sum(h[k][j] for k in range(1,N))
        
        return priority_total




#score: {'data2D.txt': -0.004868055555555555}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] += sum(h[k][j] for k in range(1,N))
            else:
                priority_total[j][1] -= sum(h[k][j] for k in range(1,N))
        
        return priority_total




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[priorities[n][0], priorities[n][1]] for n in range(N*N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i*N+j][0] += 1
                else:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i*N+j][1] += 1
        return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': 0.0007044753086419755}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.0007044753086419755}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = np.zeros((N2,2), dtype=int)
        total_spin = np.zeros((N2,), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] += h[i][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j]
        return priority_total




#score: {'data2D.txt': -0.0007847222222222219}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_list = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = total_spin[site][0]
                else:
                    priority_list[i*N+j][1] = -total_spin[site][0]
        for j in range(N):
            row_sum = sum(h[j])
            for i in range(N):
                if h[i][j] > 0:
                    priority_list[i*N+j][0] += row_sum
                else:
                    priority_list[i*N+j][1] -= row_sum
        return priority_list




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priority = np.zeros((N*N,2), dtype=int)
      for i in range(N):
          for j in range(N):
              total_spin = 0
              for k in range(3):
                  site = (i + ((k-1)%2 - 1)) % N
                  total_spin += state[site][j]
              if h[i][j] > 0:
                  priority[(i*N+j), 0] = total_spin
              else:
                  priority[(i*N+j), 1] = -total_spin
      return priority




#score: {'data2D.txt': -0.06522577160493831}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    total_spin = np.zeros((N,2), dtype=int)
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][0] += state[i][j]
            if h[i][j] > 0:
                priorities.append((total_spin[site][0], 1))
            else:
                priorities.append((-total_spin[site][0], -1))
                
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += 1
                priority[i*N+j][0] = total_spin[site][0]
            else:
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][1] += 1
                priority[i*N+j][1] = -total_spin[site][1]
                
    return priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            row_sum = [sum(state[i//N][:k]+state[i//N][k+1:]) for k in range(N)]
            total_spin = sum([row_sum[k] * state[i//N][i%N-k%N] for k in range(min(i%N,N-1))])
            if h[i//N][i%N] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.33350848765432}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = np.zeros((N,2))
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += state[i][site]
            priority_total = np.zeros((N,2), dtype=int)
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[j][0]
                else:
                    priority_total[j][1] = -1*total_spin[j][0]
            for j in range(N):
                priorities.append((priority_total[j][0], 1) if h[i][j] > 0 else (priority_total[j][1], -1))
        return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[float('inf'), float('-inf')] for _ in range(N2)]
        
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin[0], float('-inf')]
                else:
                    priority[i*N+j] = [-total_spin[0], float('inf')]
        return priority




#score: {'data2D.txt': 0.1345319444444446}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    total_spin = [np.zeros(2) for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            state_site = state[site]
            for k in range(3):
                if h[i][j] > 0:
                    total_spin[i*N+j][0] += state_site[k%N]
                else:
                    total_spin[i*N+j][1] -= state_site[k%N]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j+N*i][0] = total_spin[i*N+j][0]
            else:
                priority_total[j+N*i][1] = -total_spin[i*N+j][0]
    return priority_total




#score: {'data2D.txt': -0.002200771604938272}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, 0]
                else:
                    priority_total[i*N+j] = [-total_spin, 1]
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin
            else:
                priority_total[j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                priority_total = np.zeros((N,2), dtype=int)
                for j in range(N):
                    if h[i][j] > 0:
                        priority_total[j][0] = total_spin
                    else:
                        priority_total[j][1] = -total_spin
                priorities.append(list(priority_total[0]))
        return priorities




#score: {'data2D.txt': 0.0336807098765432}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0,0] for _ in range(N*N)]
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        return priorities




#score: {'data2D.txt': 0.008205709876543212}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0]*N
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i,site] += h[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin[i,j]
                else:
                    priority_total[i*N+j, 1] = -total_spin[i,j]
        return priority_total




#score: {'data2D.txt': -0.0021128086419753087}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][spin==1] += 1
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
        for i in range(N):
            for j in range(N):
                if spin == 1:
                    priority[i*N+j] = [-x for x in priority_total[j]]
                else:
                    priority[i*N+j] = [x for x in priority_total[j]]
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    
    total_spin = [[0 for _ in range(2)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][spin==1] += 1
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority[i*N+j][0] = sum(total_spin[i][:])
            else:
                priority[i*N+j][1] = -sum(total_spin[i][:])
    return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][spin==1] += 1
                
        priority_total = np.zeros((N,2), dtype=int)
        
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
                
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if state[i][site] == -1:
                    spin = 1
                else:
                    spin = -1
                if h[i][j] > 0:
                    priority[i*N+j] = [-x for x in priority_total[site]]
                else:
                    priority[i*N+j] = [x for x in priority_total[site]]
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                spin = -1 if h[i][j] > 0 else 1
                total_spin[site][spin==1] += 1
                
        for i in range(N):
            for j in range(N):
                priority[i*N+j] = [-x if h[i][j] > 0 else x for x in total_spin[i]]
        
        return priority




#score: {'data2D.txt': 0.010088117283950617}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += h[site][j]
                total_spin[i*N+j][1] -= h[site][j]
        priority_total = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            spin = -1 if sum(h[i]) > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site*N+(N-1-i)%N][spin == 1] += spin
        priority = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority[i*N+j][1] = -total_spin[i*N+j][1]
        return [list(row) for row in priority]




#score: {'data2D.txt': 0.010088117283950617}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += h[site][j]
                total_spin[i*N+j][1] -= h[site][j]
        priority_total = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            spin = -1 if sum(h[i]) > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site*N+(N-1-i)%N][spin == 1] += spin
        priority = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority[i*N+j][1] = -total_spin[i*N+j][1]
        return [list(row) for row in priority]




#score: {'data2D.txt': 0.013601388888888889}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += h[site][j]
                total_spin[i*N+j][1] -= h[site][j]
        priority_total = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            spin = -1 if h[i][N-1-i]%N > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site*N+(N-1-i)%N][spin == 1] += spin
        priority = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority[i*N+j][1] = -total_spin[i*N+j][1]
        return [[y for y in x] for x in priority]




#score: {'data2D.txt': 0.010088117283950617}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i*N+j][0] += h[site][j]
            total_spin[i*N+j][1] -= h[site][j]
    priority_total = [[0 for _ in range(2)] for _ in range(N)]
    for i in range(N):
        spin = -1 if sum(h[i]) > 0 else 1
        for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin[site*N+(N-1-i)%N][spin == 1] += spin
    priority = [[0, 0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin[i*N+j][0]
            else:
                priority[i*N+j][1] = -total_spin[i*N+j][1]
    return [[i[0], i[1]] for i in priority]




#score: {'data2D.txt': 0.007823611111111111}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = np.zeros((N*N,2), dtype=int)
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[site][0] += state[i][j]
        for k in range(3):
          site = (i + ((k-1)%2 - 1)) % N
          total_spin[site][0] += state[i][j]
        if h[i][j] > 0:
          priorities[(i*N+j), 0] = total_spin[i][j]
        else:
          priorities[(i*N+j), 1] = -total_spin[i][j]
    return priorities




#score: {'data2D.txt': -0.0009452160493827155}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site2 = (site + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[i][site2]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[x[1],-x[0]] for x in sorted(priorities,reverse=True)]




#score: {'data2D.txt': -0.0008723765432098762}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site2 = (site + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[i][site2]*state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[x[1],-x[0]] for x in sorted(priorities,reverse=True)]




#score: {'data2D.txt': -0.0010643518518518517}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], -1))
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.00132854938271605}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                total_magnetism = h[i][j]
                if site_spin > 0:
                    priorities.append((-total_spin-total_magnetism, 1))
                else:
                    priorities.append((total_spin+total_magnetism, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': 0.01271496913580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_priority[i*N+j][0] += site_spin * J[k][site][j]
        return total_priority




#score: {'data2D.txt': 0.01271496913580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site_spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_priority[i*N+j][0] += site_spin * J[k][site][j]
    return [[total[0], -total[1]] for total in total_priority]




#score: {'data2D.txt': 0.01271496913580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_priority[i*N+j][0] += site_spin * J[k][site][j]
        return total_priority




#score: {'data2D.txt': -0.19614120370370397}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((-total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[float('-inf'), float('inf')] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[i-((i+1)%N)][j-k%N] if k < N else -1*state[(-i+N-1)%N][min(j+k-N,k)] 
                                  for k in range(max(0,j-1))])
                
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = total_spin
                else:
                    priorities[i*N+j, 1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.0010723765432098765}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site2 = (site + ((k-1)%2 - 1)) % N
                    total_spin[0] += state[site][site2]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.001586265432098765}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i][j] > 0:
                priority_total[(i*N+j),0] = total_spin[i][0]
            else:
                priority_total[(i*N+j),1] = -total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site_neighbor = (site + ((k-1)%2 - 1)) % N
                    total_spin[(i*N+j),0] += h[site][j]
                    if h[i][j] > 0:
                        total_spin[(i*N+j),1] = -total_spin[(i*N+j),0]
                    else:
                        total_spin[(i*N+j),1] = total_spin[(i*N+j),0]
        return total_spin




#score: {'data2D.txt': -0.001586265432098765}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      total_spin = np.zeros((N,2), dtype=int)
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - 1)) % N
              total_spin[site][0] += state[i][j]
      priority_total = np.zeros((N*N,2), dtype=int)
      for i in range(N):
          if h[i][j] > 0:
              priority_total[i*N+j,0] = total_spin[i][0]
          else:
              priority_total[i*N+j,1] = -total_spin[i][0]
      return priority_total.tolist()




#score: {'data2D.txt': -0.20015447530864225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, 0]
                else:
                    priority_total[i*N+j] = [-total_spin, 1]
        return priority_total




#score: {'data2D.txt': -0.002597376543209877}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
      for j in range(N):
        total_spin = [0, 0]
        for k in range(4):
          site = (i + ((k-1)%2 - 1)) % N
          if k-j+N < N and k-j-N >= 0:
            total_spin[0] += J[site, j-k%N].flatten()[0]
          else:
            total_spin[0] += h[site][j]
        for spin in [-1, 1]:
          priority_total = sum([spin*h[i][j] for j in range(N)])
          priorities[(i*N)+j] = [priority_total + sum([spin*J[site, j-k%N].flatten()[0] for k in range(4) if k-j+N < N and k-j-N >= 0]), spin]
    return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.06336929012345682}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0]*N
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j),0] = sum(total_spin)
                else:
                    priority_total[(i*N+j),1] = -sum(total_spin)
        for j in range(N):
            if h[j,0] > 0:
                priority_total[j,0] = total_spin[0]
            else:
                priority_total[j,1] = -total_spin[0]
        return priority_total.tolist()




#score: {'data2D.txt': -0.007704783950617285}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0,0] for _ in range(N2)]
    total_spin = [0,0]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[0] += h[site][j]
            total_spin[1] -= h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[0]
            else:
                priority_total[i*N+j][1] = -total_spin[0]
    return priority_total




#score: {'data2D.txt': -0.09606311728395069}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N*N)]
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[site] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[site]
            else:
                priority_total[i*N+j][1] = -total_spin[site]
    for i in range(N):
        total_spin[i] = 0
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i]
            else:
                priority_total[i*N+j][1] = -total_spin[i]
    return priority_total




#score: {'data2D.txt': 0.16645972222222247}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = [0,0]
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k == 0:
                        total_spin[0] += state[i][j]
                    elif k == 1 or k==3:
                        total_spin[0] += state[site][j]
                    else:
                        total_spin[0] += state[site][(j+1)%N]
                total_spin[1] = -total_spin[0]
                
                if h[i][j] > 0:
                    priority_total[(i*N+j),0] = total_spin[0]
                    priority_total[(i*N+j),1] = 1
                else:
                    priority_total[(i*N+j),0] = total_spin[0]
                    priority_total[(i*N+j),1] = -1
        
        return priority_total.tolist()




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N4 = N*N
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.03370725308641975}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(4):
                    site = (i + ((k-1)%2 - 1)) % N
                    if k == 0:
                        total_spin += state[i][j]
                    elif k == 1 or k==3:
                        total_spin += state[site][j]
                    else:
                        total_spin += state[site][(j+1)%N]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.03370725308641975}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        for j in range(N):
            total_spin = [0,0]
            for k in range(4):
                site = (i + ((k-1)%2 - 1)) % N
                if k == 0:
                    total_spin[0] += state[i][j]
                elif k == 1 or k==3:
                    total_spin[0] += state[site][j]
                else:
                    total_spin[0] += state[site][(j+1)%N]
            if h[i][j] > 0:
                priorities.append((total_spin[0], 1))
            else:
                priorities.append((-total_spin[0], -1))
    
    return priorities




#score: {'data2D.txt': -0.0018334876543209878}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        
        total_spin = np.zeros((N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][spin==1] += 1
                
        priority_total = np.zeros((N,2), dtype=int)
        
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
                
        for j in range(N):
            if spin == 1:
                priority[i*N+j] = [-x for x in priority_total[j]]
            else:
                priority[i*N+j] = [x for x in priority_total[j]]
        
        return priority




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return [x[1::-1] for x in priorities]




#score: {'data2D.txt': -0.0020634259259259256}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][spin==1] += 1
    priority_total = np.zeros((N,2), dtype=int)
    for j in range(N):
        if h[i][j] > 0:
            priority_total[j][0] = total_spin[j][0]
        else:
            priority_total[j][1] = -total_spin[j][0]
    for i in range(N):
        if spin == 1:
            priority[i*N+j] = [-x for x in priority_total[j]]
        else:
            priority[i*N+j] = [x for x in priority_total[j]]
    return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_list = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_list.append((total_spin, 1))
            else:
                priority_list.append((total_spin, -1))
    return priority_list




#score: {'data2D.txt': 0.009147067901234568}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    total_spin = [0]*N
    for i in range(N):
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[site] += state[i][site]
      for j in range(N):
        if h[i][j] > 0:
          priority_total[(i*N+j), 0] = total_spin[j]
        else:
          priority_total[(i*N+j), 1] = -total_spin[j]
    return priority_total




#score: {'data2D.txt': -0.0004655864197530859}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        total_spin = [0]*N
        for i in range(N):
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site] += state[i][k]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[j]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[j]
        return priority_total




#score: {'data2D.txt': -0.004359722222222212}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = (np.sum(J_new[0::4], 0) + h).flatten()
        sum_2 = (np.sum(J_new[1::4], 0) + h).flatten()
        priority = np.column_stack((sum_1, -sum_2))
        return(priority)




#score: {'data2D.txt': 0.008205709876543212}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            total_spin = [[0,0] for _ in range(N)]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], 1))
                else:
                    priorities.append((-total_spin[site][0], -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][0] += h[site][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin[i][0]
            else:
                priority_total[(i*N+j), 1] = -total_spin[i][0]
        return priority_total.tolist()




#score: {'data2D.txt': -0.007382561728395061}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
                if h[site][j] > 0:
                    priority[i*N+j] = [total_spin[i][0], 0]
                else:
                    priority[i*N+j] = [-total_spin[i][0], 1]
        return priority




#score: {'data2D.txt': -0.007382561728395061}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
                if h[site][j] > 0:
                    priority[i*N+j] = [total_spin[i][0], 0]
                else:
                    priority[i*N+j] = [-total_spin[i][0], 1]
        return priority




#score: {'data2D.txt': -0.0002998456790123456}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = state[i][site]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return sorted(priorities,reverse=True)




#score: {'data2D.txt': -0.00048256172839506193}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))]) + h[i][j]
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((-total_spin, -1))
      return sorted([(x[1], -x[0]) for x in priorities], reverse=True)




#score: {'data2D.txt': 0.0007563271604938273}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return sorted(priorities)[::-1]




#score: {'data2D.txt': 0.18935138888888908}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0,0] for _ in range(N*N)]
        for k in range(2):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if k == 0:
                        total_spin[i*N+j][0] += state[site][j]
                    else:
                        total_spin[i*N+j][1] += state[i][site]
        return total_spin




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[priority[0], priority[1]] for priority in priorities]




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.06863750000000002}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = np.zeros((N,2), dtype=int)
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            total_spin_site = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin_site += state[site][j]
            priority[i*N+j] = [total_spin_site, -total_spin_site]

    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.00370354938271605}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j%N+1) - 1)) % N
            total_spin = 0
            for k in range(3):
                total_spin += state[site][k]
            if h[i][j] > 0:
                priorities[(i*N+j),0] = total_spin
            else:
                priorities[(i*N+j),1] = -total_spin
    return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.1826430555555558}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += state[i][site]*h[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return priorities




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, 1]
                else:
                    priorities[i*N+j] = [-total_spin, -1]
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j, 0] = total_spin
                    priorities[i*N+j, 1] = -total_spin
                else:
                    priorities[i*N+j, 0] = -total_spin
                    priorities[i*N+j, 1] = total_spin
        return priorities.tolist()




#score: {'data2D.txt': -0.19614120370370397}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            total_spin = 0
            for k in range(3):
                site = (i // N + ((k-1)%2 - 1)) % N
                total_spin += state[site][i % N]
            if h[i // N][i % N] > 0:
                priorities.append([total_spin, -1])
            else:
                priorities.append([-total_spin, 1])
        return priorities




#score: {'data2D.txt': -0.3388609567901225}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    prior = np.zeros((N*N, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                total_spin = sum([J[k][(i + ((k-1)%2 - 1)) % N][(j + (k%2) - 1)]%N][0] for k in range(4))
                prior[i*N+j, 0] = total_spin
            else:
                total_spin = -sum([J[k][(i + ((k-1)%2 - 1)) % N][(j + (k%2) - 1)]%N][0] for k in range(4))
                prior[i*N+j, 1] = -total_spin
    return prior.tolist()




#score: {'data2D.txt': 0.008205709876543212}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0]*N
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site], 1))
                else:
                    priorities.append((-total_spin[site], -1))
        return priorities




#score: {'data2D.txt': 0.04118287037037037}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
                    
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[site][0]
                else:
                    priority[i*N+j][1] = -total_spin[site][0]
                    
        return priority




#score: {'data2D.txt': -0.0004026234567901235}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += spin
                priority_total = np.zeros((N,2), dtype=int)
                for j in range(N):
                    if h[i][j] > 0:
                        priority_total[j][0] = total_spin[j][0]
                    else:
                        priority_total[j][1] = -1*total_spin[j][0]
                for j in range(N):
                    if h[i][j] > 0:
                        priorities[i*N+j][0] = total_spin[0][0]
                    else:
                        priorities[i*N+j][1] = -1*total_spin[0][0]
        return priorities




#score: {'data2D.txt': 0.10849120370370381}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[0, 0] for _ in range(N2)]
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if k%2 else state[i][(j+k)%N] for k in range(4)])
                priority[i*N+j] = [total_spin, -total_spin]
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority = [[0 for _ in range(2)] for _ in range(N2)]
    total_spin = [np.zeros((N), dtype=int) for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i][0] += h[site][j]
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin[i][0]
            else:
                priority[i*N+j][1] = -total_spin[i][0]
    return priority




#score: {'data2D.txt': -0.15451064814814838}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][(j+k)%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [0,0]
        priority = [[float('inf'), float('-inf')] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[0] += state[i][j]
                total_spin[1] -= state[i][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin[0]
                else:
                    priority[i*N+j][1] = -total_spin[1]
        return priority




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.0011578703703703707}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]  
        priorities = []  
        for i in range(N): 
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]  
            for j in range(N):  
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])  
                if h[i][j] > 0: 
                    priorities.append((total_spin, 1))  
                else: 
                    priorities.append((-total_spin, -1))  
        return [[p[1], -p[0]] for p in sorted(priorities)]




#score: {'data2D.txt': -0.00228966049382716}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.005166512345679013}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[0]
                else:
                    priority_total[i*N+j][1] = -total_spin[0]
        return priority_total




#score: {'data2D.txt': -0.0012087962962962968}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += state[i][j]
                priority_total = np.zeros((N,2), dtype=int)
                for k in range(N):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][1] += site_spin * state[site][j]
                if h[i][j] > 0:
                    priorities.append((-total_spin[0][0], 1))
                else:
                    priorities.append((total_spin[0][0], -1))
        return sorted(priorities)[:N*N]




#score: {'data2D.txt': -0.2254094135802472}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_spin = -1 if h[i][j] > 0 else 1
                total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][j-k%N] if k%2 == 0 else -J[k][(i+((k-1)%2 - 1)) % N][j-k%N] for k in range(4)])
                total_magnetism = h[i][j]
                if site_spin > 0:
                    priority_total[(i*N+j), 0] = -total_spin-total_magnetism
                    priority_total[(i*N+j), 1] = 1
                else:
                    priority_total[(i*N+j), 0] = total_spin+total_magnetism
                    priority_total[(i*N+j), 1] = -1
        return priority_total




#score: {'data2D.txt': 1.6820987654320997e-05}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[x[1],-x[0]] for x in sorted(priorities,reverse=True)]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum2 = (-np.prod(J_new[1::2], 0)).flatten()
        priority = np.column_stack((sum1, -sum1))
        return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.000643364197530864}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                site2 = (i + ((j+1)%N - 1)) % N
                site3 = (i + ((j-N-1)%N - 1)) % N if i > 0 else None
                site4 = (i + ((j+N+1)%N - 1)) % N if i < N-1 else None
                total_spin = h[site1][j] * state[i][j-1] if j > 0 else 0
                total_spin += h[site2][j] * state[i][j+1] if j < N-1 else 0
                total_spin += h[site3][j] * state[i-1][j] if site3 is not None else 0
                total_spin += h[site4][j] * state[i+1][j] if site4 is not None else 0
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[p[1], p[0]] for p in sorted(priorities)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0,0] for _ in range(N2)]
    for i in range(N):
        total_spin = [0]*N
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site] += h[i][j]
            else:
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site] -= h[i][j]
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[j]
            else:
                priority_total[i*N+j][1] = -total_spin[j]
    return priority_total




#score: {'data2D.txt': -0.00044830246913580185}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return sorted(priorities, reverse=True)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum_2 = (-np.prod(J_new[1::2], 0) - h).flatten()
        priority = np.column_stack((sum_1, -sum_2))
        return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j][0] += state[i][j]
                
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j][0]
                    
        return priority_total




#score: {'data2D.txt': 0.00017824074074074075}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return sorted(priorities)




#score: {'data2D.txt': 0.0007044753086419755}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[0], 1))
                else:
                    priorities.append((-total_spin[0], -1))
        return [[a,b] for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.0004128086419753079}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site] += spin
            if h[i][j] > 0:
                priority_total[j*N+i, 0] = total_spin[0]
            else:
                priority_total[j*N+i, 1] = -total_spin[0]
    for j in range(N):
        if h[0][j] > 0:
            priority_total[j*N+N-1-j, 0] = -total_spin[N-1-j]
        else:
            priority_total[j*N+N-1-j, 1] = total_spin[N-1-j]
    return priority_total.tolist()




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total.append([total_spin, 0])
                else:
                    priority_total.append([-total_spin, 1])
        return priority_total




#score: {'data2D.txt': -0.030239351851851854}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if (i+k)%2 == (j-k)%2 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_total.append([total_spin, -1])
                else:
                    priority_total.append([-total_spin, 1])
        return priority_total




#score: {'data2D.txt': -0.3113186728395057}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    
    for j in range(N):
        total_spin = 0
        for i in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[j][0] = total_spin
            else:
                priority_total[j][1] = -total_spin
    
    return priority_total




#score: {'data2D.txt': -0.05122145061728399}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[0,0] for _ in range(N2)]

    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[0] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[0]
            else:
                priority_total[i*N+j][1] = -total_spin[0]

    return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return priority




#score: {'data2D.txt': 0.0336807098765432}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = [[0, 0] for _ in range(N*N)]
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities[i*N+j] = [total_spin, 1]
              else:
                  priorities[i*N+j] = [-total_spin, -1]
      return priorities




#score: {'data2D.txt': 0.3312251543209867}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    total_spin = [[0 for _ in range(2)] for _ in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [0 if h[i][j] > 0 else -1 for j in range(N)]
      for j in range(N):
        site = (i + ((j)%N - 1)) % N
        total_spin[site][0] += 1 if h[i][j] > 0 else -1
        for k in range(3):
          site2 = (i + ((k-1)%2 - 1)) % N
          total_spin[site2][0] += 1 if h[i][j] > 0 else -1
        if h[i][j] > 0:
          priorities.append((sum(total_spin[site][0] for site in range(N)), 1))
        else:
          priorities.append((-sum(total_spin[site][0] for site in range(N)), -1))
    return priorities




#score: {'data2D.txt': -0.004464351851851853}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        priorities = [[0 for _ in range(2)] for _ in range(N2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j)%N - 1)) % N
                total_spin[site][0] += 1 if h[i][j] > 0 else -1
                for k in range(3):
                    site2 = (i + ((k-1)%2 - 1)) % N
                    total_spin[site2][0] += 1 if h[i][j] > 0 else -1
                
                if h[i][j] > 0:
                    priorities[i*N+j][0] = sum(total_spin[site][0] for site in range(N))
                else:
                    priorities[i*N+j][1] = -sum(total_spin[site][0] for site in range(N))
        
        return priorities




#score: {'data2D.txt': -0.000980709876543209}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                site2 = (i + ((j+1)%N - 1)) % N
                site3 = (i + ((j-N-1)%N - 1)) % N if i > 0 else None
                site4 = (i + ((j+N+1)%N - 1)) % N if i < N-1 else None
                total_spin = h[site1][j] * state[i][j-1] if j > 0 else 0
                total_spin += h[site2][j] * state[i][j+1] if j < N-1 else 0
                total_spin += h[site3][j] * state[i-1][j] if site3 is not None else 0
                total_spin += h[site4][j] * state[i+1][j] if site4 is not None else 0
                priority = [total_spin, -total_spin]
                priorities.append(priority)
        return [[p[1], p[0]] for p in sorted(priorities)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [0] * (N * N)
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site * N + j] += spin
    priority_total = [[0, 0] for _ in range(N * N)]
    for i in range(N * N):
        if h[i // N][i % N] > 0:
            priority_total[i][0] = total_spin[i]
        else:
            priority_total[i][1] = -total_spin[i]
    return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0, 0] for _ in range(N)]
    priority_total = [[float('-inf'), float('inf')] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[site][0] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[site][0]
            else:
                priority_total[i*N+j][1] = -total_spin[site][0]
    return priority_total




#score: {'data2D.txt': -0.0019427469135802468}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_0 = (np.prod(J_new[::4], 0) + h).flatten()
        sum_1 = (np.prod(J_new[1::4], 0) + h).flatten()
        sum_2 = (np.prod(J_new[2::4], 0) + h).flatten()
        sum_3 = (np.prod(J_new[3::4], 0) + h).flatten()
        priority = np.column_stack((sum_0, -sum_1))
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority[i] = [sum_0[i] - sum_3[i], sum_0[i] + sum_3[i]]
            else:
                priority[i] = [-sum_0[i] + sum_1[i], -sum_0[i] - sum_1[i]]
        return(priority.tolist())




#score: {'data2D.txt': 0.2580785493827158}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.0017594135802469135}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N*N,2), dtype=int)
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += state[i][j]
            for k in range(2):
                site = (i + ((k-1)%2 - 1)) % N
                priorities[(i*N+j),1-k] = total_spin[site][0]
        return priorities




#score: {'data2D.txt': 0.0029739197530864203}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for j in range(N):
            for i in range(N):
                site_spin = state[i][j]
                total_spin_sum = sum([state[(i + ((k-1)%2 - 1)) % N][max(0,j-k)%N] * site_spin for k in range(4)])
                if h[i][j] > 0:
                    priorities.append((total_spin_sum, 1))
                else:
                    priorities.append((total_spin_sum, -1))
        return priorities




#score: {'data2D.txt': 0.035122993827160484}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = np.zeros((N*N,2), dtype=int)
      for i in range(N):
          for j in range(N):
              site_spin = state[i][j]
              total_spin_sum = sum([state[(i + ((k-1)%2 - 1)) % N][max(0,j-k)%N] * site_spin for k in range(4)])
              if h[i][j] > 0:
                  priorities[i*N+j,0] = total_spin_sum
              else:
                  priorities[i*N+j,1] = -total_spin_sum
      return priorities




#score: {'data2D.txt': -0.004359722222222212}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = (np.sum(J_new[0::4], 0) + h).flatten()
        sum_2 = (np.sum(J_new[1::4], 0) + h).flatten()
        priority = np.column_stack((sum_1, -sum_2))
        return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': -0.004359722222222212}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = (np.sum(J_new[0::4], 0) + h).flatten()
        sum_2 = (np.sum(J_new[1::4], 0) + h).flatten()
        priority = np.column_stack((sum_1, -sum_2))
        return(priority)




#score: {'data2D.txt': 0.11143348765432111}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            site = (i//N, i%N)
            total_spin = [0, 0]
            for k in range(4):
                if k == 3:
                    break
                neighbor = ((site[0] + ((k-1)%2 - 1)) % N, (site[1] + ((k-1)%2 - 1)) % N)
                total_spin[int(J[k][neighbor[0]][neighbor[1]]) > 0] += state[neighbor[0]][neighbor[1]]
            priorities.append((total_spin[0], total_spin[1]))
        return priorities




#score: {'data2D.txt': -0.0014035493827160494}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            site = (i//N, i%N)
            total_spin = [0, 0]
            for k in range(4):
                neighbor = ((site[0] + ((k-1)%2 - 1)) % N, (site[1] + ((k-1)%2 - 1)) % N)
                if neighbor == site:
                    continue
                total_spin[int(J[k][neighbor[0]][neighbor[1]]) > 0] += state[neighbor[0]][neighbor[1]]
            priorities.append((total_spin[0], total_spin[1]))
        return priorities




#score: {'data2D.txt': -0.0011180555555555555}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x[1],-x[0]] for x in sorted(priorities,reverse=True)]




#score: {'data2D.txt': 0.005221450617283952}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0,0]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[0] += state[i][j]
            total_spin[1] -= state[i][j]
            if h[i][j] > 0:
                priorities.append((-total_spin[1], 1))
            else:
                priorities.append((total_spin[0], -1))
    return priorities




#score: {'data2D.txt': -0.0011405864197530863}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            total_spin = np.zeros((N,2), dtype=int)
            for j in range(N):
                site_spin = state[i][j]
                spin = -1 if h[i][j] > 0 else 1
                priority_total = np.zeros((N,2), dtype=int)
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += spin
                if h[i][j] > 0:
                    priorities.append((-total_spin[i][0], 1))
                else:
                    priorities.append((total_spin[i][0], -1))
        return [[x, 1-x] for x,_ in sorted(priorities)]




#score: {'data2D.txt': -0.07624552469135808}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    spin = 1
                else:
                    spin = -1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += spin
                priority[i*N+j] = [total_spin[i][0], -total_spin[i][0]]
        return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum_2 = (-1)**((np.arange(len(sum_1))//N)%2)*(np.prod(J_new[1::2], 0)).flatten()
        priority = np.column_stack((sum_1,sum_2))
        return priority




#score: {'data2D.txt': 0.23693719135802463}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin[site][0] += state[i][(k-1)//2*N+(k-1)%2]
        priority_total = np.zeros((N,2), dtype=int)
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]
        for j in range(N):
            priorities.append((priority_total[j][0], 1) if h[i][j]>0 else (-priority_total[j][0],-1))
    return priorities




#score: {'data2D.txt': 0.013364043209876542}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        priority_total = np.zeros((N*N,2), dtype=int)

        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[site][0]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[site][0]

        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
    
    return priority_total




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [(i[0], i[1]) for i in sorted(priorities)]




#score: {'data2D.txt': -0.0007470679012345674}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site] += spin
            priority_total[j*N+i, 0] = total_spin[0]
            priority_total[j*N+i, 1] = -total_spin[0]
    for j in range(N):
        if h[0][j] > 0:
            priority_total[j, 0] = total_spin[0]
        else:
            priority_total[j, 1] = -total_spin[0]
    return priority_total.tolist()




