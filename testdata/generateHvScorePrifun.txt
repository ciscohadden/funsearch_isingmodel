#score: {'data2D.txt': -0.07410601851851865}
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch




def priority(N, h, J):
    J_new = np.sum(J[:2], axis=0)
    sum_spin = (J_new + h).flatten()
    priority = np.column_stack((sum_spin, -sum_spin))
    return priority.tolist()


#score: {'data2D.txt': 0.0622510802469136}
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch




def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': -0.17024058641975306}
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch




def priority(N, h, J):
    J_new = J.reshape((4, N, N))
    priorities = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            left = J_new[0, i, (j-1)%N] * h[i, (j-1)%N]
            right = J_new[1, i, (j+1)%N] * h[i, (j+1)%N]
            up = J_new[2, (i-1)%N, j] * h[(i-1)%N, j]
            down = J_new[3, (i+1)%N, j] * h[(i+1)%N, j]
            total_spin = left + right + up + down
            priorities[i*N+j, 0] = total_spin + h[i, j]
            priorities[i*N+j, 1] = -total_spin - h[i, j]
    return priorities




#score: {'data2D.txt': -0.17090324074074073}
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch




def priority(N, h, J):
    priorities = np.zeros((N**2, 2))
    for i in range(N**2):
        x, y = i // N, i % N
        neighbors = [(x, (y+1)%N), ((x+1)%N, y), (x, (y-1)%N), ((x-1)%N, y)]
        interaction = sum(J[k, x, y] * h[neighbors[k][0], neighbors[k][1]] for k in range(4))
        priorities[i] = [interaction + h[x, y], -(interaction + h[x, y])]
    return priorities




#score: {'data2D.txt': -0.17512453703703704}
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch




def priority(N, h, J):
    J_new = J.reshape((4, N, N))
    priorities = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            left = J_new[0, i, (j-1)%N] * h[i, (j-1)%N]
            right = J_new[1, i, (j+1)%N] * h[i, (j+1)%N]
            up = J_new[2, (i-1)%N, j] * h[(i-1)%N, j]
            down = J_new[3, (i+1)%N, j] * h[(i+1)%N, j]
            total_spin = left + right + up + down
            priorities[i*N+j, 0] = np.exp(total_spin + h[i, j])
            priorities[i*N+j, 1] = np.exp(-total_spin - h[i, j])
    return priorities / np.sum(priorities, axis=1, keepdims=True)



#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch




def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': -0.14179429012345682}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch




def priority(N, h, J):
    priorities = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            site_interactions = [J[0, i, j], J[1, i, (j-1)%N], J[2, (i-1)%N, j], J[3, i, (j+1)%N]]
            total_spin = np.sum([h[(i+k)%N][(j+l)%N] for k, l in [(-1, 0), (0, -1), (0, 1), (1, 0)]])
            priorities[i*N+j] = [total_spin + h[i][j], -(total_spin + h[i][j])]
    return priorities



#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': 0.001167438271604938}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      idx = i * N + j
      total_spin_1 = sum([h[(i+k)%N][(j+l)%N] for k, l in [(-1, 0), (1, 0), (0, -1), (0, 1)]])
      total_spin_m1 = -total_spin_1
      priorities[idx][0] = total_spin_1 + h[i][j]
      priorities[idx][1] = total_spin_m1 + h[i][j]
  return priorities




#score: {'data2D.txt': 0.28013719135802434}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(4):
                site = (i + ((k-1)%2 - 1)) % N if k < 2 else i
                site_j = (j + ((k-1)%2 - 1)) % N if k >= 2 else j
                total_spin += J[k, i, j] * h[site][site_j]
            priorities.append((total_spin, 1) if h[i][j] > 0 else (total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.003388425925925917}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N**2):
        site1 = i // N
        site2 = (site1 + (i % N) % 2)
        total_spin = sum(h[site1][j] for j in range(N)) * 2
        if h[site1, i%N] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return [[priorities[i][0], priorities[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.003388425925925917}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N**2):
        site1 = i // N
        site2 = (site1 + (i % N) % 2)
        total_spin = sum(h[site1][j] for j in range(N)) * 2
        if h[site1, i%N] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.003388425925925917}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N**2):
        site1 = i // N
        site2 = (site1 + (i % N) % 2) % N
        total_spin = sum(h[site1][j] for j in range(N)) * 2
        if h[i//N, i%N] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities


#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if 0 <= k < N else 0 for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.0635152777777778}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((-total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.03890293209876543}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if k!=0 else 2*row_sum[0] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0006507716049382719}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return [[p[0], p[1]] for p in sorted(priorities)]




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.041807561728395067}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if abs(j-k) <= 1 else 0 for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.1564294753086422}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            row_sum = sum(state[i][:j]+state[i][j+1:])
            total_spin = sum([row_sum * state[i][k-j%N] for k in range(min(j+1,N))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.01753719135802469}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j-k%N]>0 else -row_sum[k]*state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.3074560185185178}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2,2), dtype=float)
    for i in range(N):
        for j in range(N):
            total_spin = sum(J[i:(i+1),j:(j+1)].flatten()) + h[i][j]
            if h[i][j] > 0:
                priority[i*N+j, 0] = total_spin
            else:
                priority[i*N+j, 1] = -total_spin
    return priority.tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.06987515432098769}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        for j in range(N):
            total_spin = sum([state[i][k] * state[i][(j+k)%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.005117129629629629}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if (i-k)%N != 0 and (j-k)%N != N-1 else row_sum[k] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.026169290123456788}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            row_sum = sum(state[i][:j]+state[i][j+1:])
            column_sum = sum([state[k][j] for k in range(N)])
            total_spin = row_sum + column_sum
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.07359120370370377}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[j] += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin[j], 1))
            else:
                priorities.append((-1*total_spin[j], -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
    priority = np.column_stack((sum1, -sum1))
    return priority.tolist()




#score: {'data2D.txt': 0.1461016975308644}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0]*N**2
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N) - N//2) % N
            total_spin[j*N+i] += state[site][j]
    for i in range(N**2):
        if h[i//N][i%N] > 0:
            priorities.append((total_spin[i], 1))
        else:
            priorities.append((total_spin[i], -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = [[0,0] for _ in range(N2)]
    total_spin = [0]*N2
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i*N+j] += h[site][j]
            
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i*N+j]
            else:
                priority_total[i*N+j][1] = -total_spin[i*N+j]
                
    return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, -1))
            else:
                priority.append((total_spin, 1))
    return np.array(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum_0 = (np.prod(J_new[::2], 0) + h).flatten()
    sum_1 = (np.prod(J_new[1::2], 0) - h).flatten()
    priority = np.column_stack((sum_0, sum_1))
    return priority




#score: {'data2D.txt': -0.15429645061728445}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((-total_spin, 1))
    return np.array(priority)




#score: {'data2D.txt': 0.146027314814815}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return np.array(priorities).reshape(N**2,2)




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority[(i*N+j), 0] = total_spin
            else:
                priority[(i*N+j), 1] = -total_spin
    return priority.tolist()




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum_2 = (-1*np.prod(J_new[1::2], 0)).flatten()
    priority = np.column_stack((sum_1, -sum_1-sum_2))
    return priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        priority_total = np.zeros((N,2))
        for j in range(N):
            site_sum = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                site_sum += state[site][j]
            if h[i][j] > 0:
                priority_total[j][0] = site_sum
            else:
                priority_total[j][1] = -site_sum
        total_spin.append(priority_total)
    return np.concatenate([np.array(t).flatten() for t in total_spin]).reshape(N**2,2)




#score: {'data2D.txt': -0.15539830246913605}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        for j in range(N):
            total_spin = sum([J[k][(i+((k-1)%2 - 1)) % N][(j+((l-1)%2 - 1)) % N]*state[i][j-l%N] for k,l in itertools.product(range(3),range(3)) if ((k-1)%2 - 1) + (l-1)%2 == 0])
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
                
    return [[p[1],p[0]] for p in priorities]




#score: {'data2D.txt': 0.10389614197530864}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J = J.reshape(4,N*N)
    priority = [[0,0] for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                for k in range(4):
                    if k==0 and i+1<N:
                        priority[i*N+j][0] += J[0][i*N+j]
                    elif k==1 and i-1>=0:
                        priority[i*N+j][0] += J[1][i*N+j]
                    elif k==2 and j+1<N:
                        priority[i*N+j][0] += J[2][i*N+j]
                    elif k==3 and j-1>=0:
                        priority[i*N+j][0] += J[3][i*N+j]
                priority[i*N+j][1] = -priority[i*N+j][0]
            else:
                for k in range(4):
                    if k==0 and i+1<N:
                        priority[i*N+j][1] -= J[0][i*N+j]
                    elif k==1 and i-1>=0:
                        priority[i*N+j][1] -= J[1][i*N+j]
                    elif k==2 and j+1<N:
                        priority[i*N+j][1] -= J[2][i*N+j]
                    elif k==3 and j-1>=0:
                        priority[i*N+j][1] -= J[3][i*N+j]
                priority[i*N+j][0] = -priority[i*N+j][1]
    
    return priority




#score: {'data2D.txt': 0.29362299382716023}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    n = N**2
    J_flat = J.reshape((4,n))
    h_flat = h.flatten()
    priorities = []
    
    for i in range(n):
        site_neighbors = [J_flat[k][i] for k in range(4)]
        if h_flat[i] > 0:
            total_spin = sum([1 if neighbor > 0 else -1 for neighbor in site_neighbors])
            priorities.append((total_spin, 1))
        else:
            total_spin = sum([1 if neighbor < 0 else -1 for neighbor in site_neighbors])
            priorities.append((-total_spin, -1))
    
    return np.array(priorities).reshape((n,2))




#score: {'data2D.txt': 0.1647720679012351}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = []
    for j in range(N**2):
        total_spin = 0
        for k in range(3):
            site = (j // N + ((k-1)%2 - 1)) % N
            total_spin += h[site][j % N]
        if h[j // N][j % N] > 0:
            priority_total.append((total_spin, 1))
        else:
            priority_total.append((-total_spin, -1))
    return np.array(priority_total).reshape(N**2, 2)




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return np.array(priorities).reshape(N*N, 2)




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return np.array(priorities).tolist()




#score: {'data2D.txt': 0.15533472222222247}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = sum([J[k][(i + ((k-1)%2 - 1)) % N][j] * state[(i + ((k-1)%2 - 1)) % N][j] for k in range(3)])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0451294753086421}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    J_tensor = J.reshape(4,N2)
    priorities = []
    
    for i in range(N):
        for j in range(N):
            site_spin_sum = 0
            for k in range(4):
                if k == 0:
                    site_spin_sum += J_tensor[0][i*N+j]
                elif k == 1:
                    site_spin_sum += J_tensor[1][(i+1)%N*N + j]
                elif k == 2:
                    site_spin_sum += J_tensor[2][i*N+(j+1)%N]
                else:
                    site_spin_sum += J_tensor[3][((i+1)%N)*N+j]
            if h[i][j] > 0:
                priorities.append((site_spin_sum, -1))
            else:
                priorities.append((site_spin_sum, 1))
    
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.04444305555555559}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            row_sum = sum(state[i][:j]+state[i][j+1:])
            total_spin = sum([row_sum * state[k][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] if 0 <= j-k%N < N else 0 for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            
            # Calculate total spin based on site interactions and magnetism
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            
            if h[i][j] > 0:
                priority[(i*N+j), 0] = total_spin
            else:
                priority[(i*N+j), 1] = -total_spin
    
    return priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2,2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority[i*N+j, 0] = total_spin
            else:
                priority[i*N+j, 1] = -total_spin
    return priority.tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2, 2))
    for i in range(N**2):
        site_row = int(i/N)
        site_col = i % N
        total_spin = 0
        for k in range(3):
            site = (site_row + ((k-1)%2 - 1)) % N
            total_spin += state[site][site_col]
        if h[site_row][site_col] > 0:
            priority_total[i][0] = total_spin
        else:
            priority_total[i][1] = -1*total_spin
    return priority_total.tolist()




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((-total_spin, 1))
    return np.array(priority)




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority[(i*N+j), 0] = total_spin
            else:
                priority[(i*N+j), 1] = -total_spin
    return priority.tolist()




#score: {'data2D.txt': -0.0005408950617283944}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[j][0] = total_spin
            else:
                priority_total[j][1] = -total_spin
    for j in range(N):
        if h[i][j] > 0:
            priority_total[j][0] = priority_total[j][0]
        else:
            priority_total[j][1] = -priority_total[j][1]
    return [row for row in priority_total]




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return np.array(priorities).reshape(N**2, 2)




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority[(i*N+j), 0] = total_spin
            else:
                priority[(i*N+j), 1] = -total_spin
    return priority.astype(int)




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.01437175925925926}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J = J.reshape((4, N*N))
    priority_matrix = np.zeros((N*N, 2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(4):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += J[k][i*N+j]
            
            if h[i][j] > 0:
                priority_matrix[i*N+j, 0] = total_spin
                priority_matrix[i*N+j, 1] = -total_spin
            else:
                priority_matrix[i*N+j, 0] = -total_spin
                priority_matrix[i*N+j, 1] = total_spin
    
    return priority_matrix.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum_2 = (-np.prod(J_new[1::2], 0)).flatten()
    priority = np.column_stack((sum_1, -sum_1))
    return [list(i) for i in priority]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
    return [row.tolist() for row in priority_total]




#score: {'data2D.txt': -0.003459722222222222}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0,0]
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[spin] += state[site][j]
            priorities.append((total_spin[0], total_spin[1]))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j, 0] = total_spin
            else:
                priority_total[i*N+j, 1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return [p for p in priorities]




#score: {'data2D.txt': -0.17729830246913594}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spins = np.zeros((N,2))
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spins[site][0] += state[i][j]
    
    for j in range(N*N):
        if h[j//N][j%N] > 0:
            priorities.append((total_spins[j//N][0], 1))
        else:
            priorities.append((-total_spins[j//N][0], -1))
    
    return priorities




#score: {'data2D.txt': 0.07764182098765438}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            priority_total = [0, 0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total[0] = total_spin
            else:
                priority_total[1] = -total_spin
            priorities.append(priority_total)
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N))
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin_site = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin_site += site_spin * state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin_site, 1))
            else:
                priorities.append((total_spin_site, -1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority = np.zeros((N**2, 2))

    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priority[i*N+j, 0] = total_spin
            else:
                priority[i*N+j, 1] = -total_spin

    return priority.tolist()




#score: {'data2D.txt': -0.2136520061728395}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2,2))
    total_spin = np.zeros((N,N))
    priorities = []
    
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i][j] += state[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j),0] = total_spin[i][j]
            else:
                priority_total[(i*N+j),1] = -total_spin[i][j]
    
    for j in range(N**2):
        sum_1 = 0
        sum_2 = 0
        for i in range(N):
            site = (i + ((j-1)%N - N) % N)
            if h[i][site%N] > 0:
                sum_1 += priority_total[j][0]
                sum_2 += priority_total[j][1]
            else:
                sum_1 -= priority_total[j][0]
                sum_2 -= priority_total[j][1]
        priorities.append((sum_1 - sum_2, sum_1 + sum_2))
    
    return [x for x in priorities]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((total_spin, 1))
    return priority




#score: {'data2D.txt': -0.27106867283950575}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((-total_spin, 1))
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin_site = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin_site += site_spin * state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin_site, 1))
            else:
                priorities.append((total_spin_site, -1))
    return priorities




#score: {'data2D.txt': 0.005746141975308629}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [0,0]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[0] += h[site][j]
            total_spin[1] -= h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[0]
            else:
                priority_total[i*N+j][1] = -total_spin[1]
    return priority_total




#score: {'data2D.txt': -0.0006125000000000001}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((-total_spin, 1))
    return np.array(priority).T.reshape(N**2, 2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum2 = (-1 * np.prod(J_new[1::2], 0)).flatten()
    priority = np.column_stack((sum1, -sum1-sum2))
    return(priority.astype(int))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0.5 for _ in range(2)] for _ in range(N**2)]
    return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum2 = (-np.prod(J_new[1::2], 0) + h).flatten()
    priority = np.column_stack((sum1, -sum2))
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.reshape(4,-1).T.flatten()
    sum_1 = (np.prod(J_new[::2], 0) + h.flatten()).flatten()
    sum_2 = (np.prod(J_new[1::2], 0) - h.flatten()).flatten()
    priority = np.column_stack((sum_1, -sum_2))
    return(priority)




#score: {'data2D.txt': -0.33340694444444346}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2, 2))
    
    for i in range(N):
        for j in range(N):
            total_spin = sum(J[(i+1)%N*N:(i+2)%N, (j+1)%N:(j+2)%N].flatten()) + h[i][j]
            if h[i][j] > 0:
                priority[i*N+j, 0] = total_spin
            else:
                priority[i*N+j, 1] = -total_spin
    
    return priority.tolist()




#score: {'data2D.txt': -0.09667175925925932}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[site]
            else:
                priority_total[i*N+j][1] = -total_spin[site]
    return priority_total




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    return priority_total




#score: {'data2D.txt': -0.2684050925925922}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j%2) - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 0))
            else:
                priority.append((-total_spin, 1))
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j % N) - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority = total_spin
            else:
                priority = -total_spin
            priorities.append((priority, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    J_reshaped = J.reshape(4, -1).T.flatten()
    sum_ones = (np.prod(J_reshaped[::2], 0) + h.flatten()).flatten()
    sum_negones = (np.prod(J_reshaped[1::2], 0) - h.flatten()).flatten()
    priority = np.column_stack((sum_ones, -sum_negones))
    return priority




#score: {'data2D.txt': 0.009663734567901214}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [[0,0] for _ in range(N**2)]
    for k in range(4):
        for i in range(N):
            for j in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                if h[i][j] > 0:
                    total_spin[i*N+j][1] += state[site][j]
                else:
                    total_spin[i*N+j][0] += state[site][j]
    return total_spin




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return np.array(priorities)




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0]for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N))
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin_site = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin_site += site_spin * state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin_site, 1))
            else:
                priorities.append((total_spin_site, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N))
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin_site = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin_site += site_spin * state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin_site, 1))
            else:
                priorities.append((total_spin_site, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    J_reshaped = J.reshape(4, -1).T.flatten()
    sum_ones = (np.prod(J_reshaped[::2], 0) + h.flatten()).flatten()
    sum_negones = (np.prod(J_reshaped[1::2], 0) - h.flatten()).flatten()
    priority = np.column_stack((sum_ones, -sum_negones))
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            site_spin = -1 if h[i][j] > 0 else 1
            total_spin = 0
            for k in [(i-1)%N, (i+1)%N]:
                for l in [(j-1)%N, (j+1)%N]:
                    if i == k and j != l:
                        total_spin += J[k*N+l][1] * site_spin
                    elif i != k and j == l:
                        total_spin += J[i*N+j][3] * site_spin
            priority.append([total_spin, -total_spin])
    return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return np.array(priorities).reshape(N**2, 2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    J_reshaped = J.reshape(4, -1).T.flatten()
    sum_ones = (np.prod(J_reshaped[::2], 0) + h.flatten()).flatten()
    sum_negones = (np.prod(J_reshaped[1::2], 0) - h.flatten()).flatten()
    priority = np.column_stack((sum_ones, -sum_negones))
    return priority




#score: {'data2D.txt': -0.010160339506172839}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = [[0 for _ in range(2)] for _ in range(m)]
    for i in range(m):
        site = (i // N, i % N)
        total_spin = h[site[1]][site[0]]
        if h[site[0]][site[1]] > 0:
            priorities[i][0] = total_spin
        else:
            priorities[i][1] = -total_spin
    for k in range(3):
        site = ((k-1) % N, i // N)
        total_spin += J[(((k-1) % 2) + 1)][site[0]][site[1]]
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    J_reshaped = J.reshape(4, -1).T.flatten()
    sum_ones = (np.prod(J_reshaped[::2], 0) + h.flatten()).flatten()
    sum_negones = (np.prod(J_reshaped[1::2], 0) - h.flatten()).flatten()
    priority = np.column_stack((sum_ones, -sum_negones))
    return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N**2, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = h[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin
            else:
                priority_total[(i*N+j), 1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N,N,2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[i][j][0] = total_spin
            else:
                priority_total[i][j][1] = -total_spin
    return priority_total.reshape(N*N,2)




#score: {'data2D.txt': 0.009663734567901214}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.22532145061728423}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = []
    for i in range(m):
        site = (i // N, i % N)
        total_spin = h[site[1]][site[0]]
        if h[site[0]][site[1]] > 0:
            priority_minus_one = total_spin + np.sum([J[(k+2)%4][site[0]][site[1]] for k in range(3) if ((i//N + (k-1)%2 - 1)) % N == site[0]])
            priorities.append((priority_minus_one, 1))
        else:
            priority_plus_one = total_spin + np.sum([J[(k+2)%4][site[0]][site[1]] for k in range(3) if ((i//N + (k-1)%2 - 1)) % N == site[0]])
            priorities.append((priority_plus_one, -1))
    return priorities




#score: {'data2D.txt': -0.0015356481481481486}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = [[0 for _ in range(2)] for _ in range(m)]
    for i in range(m):
        site = (i // N, i % N)
        total_spin = h[site[1]][site[0]]
        if h[site[0]][site[1]] > 0:
            priorities[i][0] = total_spin
        else:
            priorities[i][1] = -total_spin
    for k in range(3):
        site = ((k-1) % N, i // N)
        total_spin += J[(((k-1) % 2) + 1)][site[0]][site[1]]
    for i in range(m):
        for j in range(i+1,m):
            site1 = (i // N, i % N)
            site2 = (j // N, j % N)
            total_spin += -J[(((site1[0]-site2[0])%2) + 1)][site1[0]][site1[1]]-J[(((site1[0]-site2[0])%2) + 1)][site2[0]][site2[1]]
    for i in range(m):
        if h[i//N][i%N] > 0:
            priorities[i][0] = total_spin
        else:
            priorities[i][1] = -total_spin
    return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N**2):
        total_spin = sum([state[(i//N)][(i%N)+(k-(k+1)%2 - 1)] % N for k in range(3)])
        if h[i//N][i%N] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    result = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site1 = (i + ((j-1)%N - 1)) % N
            site2 = (i + ((j+1)%N - 1)) % N
            if h[i][j] > 0:
                result[i*N+j][0] = total_spin
            else:
                result[i*N+j][1] = -total_spin
                
    return result




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N * N
    priorities = np.zeros((N2, 2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities[i*N+j, 0] = total_spin
            else:
                priorities[i*N+j, 1] = -total_spin
    
    return priorities




#score: {'data2D.txt': -0.144194290123457}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j % N) - 1)) % N
            total_spin[site] += state[i][j]
            if h[i][j] > 0:
                priority = total_spin[site]
            else:
                priority = -total_spin[site]
            priorities.append((priority, -1))
    return priorities




#score: {'data2D.txt': -0.3302288580246904}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0,0]
    for i in range(N):
        for j in range(N):
            site = (i + ((j % N) - 1)) % N
            total_spin[0] += state[i][j]
            if h[i][j] > 0:
                priority = total_spin[0]
            else:
                priority = -total_spin[0]
            priorities.append((priority, -1))
    return priorities




#score: {'data2D.txt': -0.20612422839506192}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((-total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.14991867283950638}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J = J.reshape(4*N**2)
    priority_list = []
    for i in range(N):
        for j in range(N):
            site_spin = 0
            for k in range(4):
                if k == 0:
                    site_spin += J[i*k + (j-1)%N]
                elif k == 1:
                    site_spin += J[i*k + N*(i+1)%N - i*N]
                elif k == 2:
                    site_spin += J[i*k + N**2 - i*N - j]
                else:
                    site_spin += J[i*k + (j-1)%N + i*N]
            priority_list.append((site_spin, -1 if h[i][j] > 0 else 1))
    return priority_list




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.009663734567901214}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return np.array(priorities)




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = [0]*N
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site] += state[i][j]
            if h[i][j] > 0:
                priority = sum(total_spin)
            else:
                priority = -sum(total_spin)
            priorities.append((priority, 1))
    return priorities




#score: {'data2D.txt': -0.144194290123457}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j % N) - 1)) % N
            total_spin[site] += state[i][j]
            if h[i][j] > 0:
                priority = total_spin[site]
            else:
                priority = -total_spin[site]
            priorities.append((priority, -1))
    return priorities




#score: {'data2D.txt': -0.13395077160493843}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j % N) - 1)) % N
            total_spin[site] += state[i][j]
            if h[i][j] > 0:
                priority = total_spin[site]
            else:
                priority = -total_spin[site]
            priorities.append((priority, 1))
    return priorities




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return np.array(priorities)




#score: {'data2D.txt': 0.03464922839506175}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N), dtype=int)
    for k in range(3):
        site = ((k-1)%2 - 1) % N
        for i in range(N):
            for j in range(N):
                total_spin[i][j] += state[(i + (k-1)%2 - 1) % N][site]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priorities.append((total_spin[i][j], 1))
            else:
                priorities.append((-1*total_spin[i][j], -1))
    return priorities




#score: {'data2D.txt': -0.0009816358024691359}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return [(a,b) for a,b in sorted(priorities)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = np.ones((N,N))
    priorities = np.zeros((N*N,2))

    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                total_spin = sum([state[i][k] if (i+k)%2 == (j+1)%2 else -state[i][k] for k in range(N)])
                priorities[i*N+j,0] = total_spin
                priorities[i*N+j,1] = 0
            else:
                total_spin = sum([state[i][k] if (i+k)%2 != (j+1)%2 else -state[i][k] for k in range(N)])
                priorities[i*N+j,0] = -total_spin
                priorities[i*N+j,1] = 1

    return priorities.astype(int)




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority[i*N+j][0] = total_spin
            else:
                priority[i*N+j][1] = -total_spin
    return priority




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N * N
    priority_list = [[0, 0] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            
            if h[i][j] > 0:
                priority_list[i*N+j][0] = total_spin
            else:
                priority_list[i*N+j][1] = -total_spin
                
    return priority_list




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    priority_total = np.zeros((N2,2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority_total[(i*N+j),0] = total_spin
            else:
                priority_total[(i*N+j),1] = -total_spin
    
    return priority_total.tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0006125000000000001}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 0))
            else:
                priorities.append((-total_spin, 1))
    return np.array(priorities).T.reshape(N**2, 2)




#score: {'data2D.txt': -0.19697546296296325}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0,0]
    for i in range(N**2):
        site = (i // N, i % N)
        spin = state[site[0]][site[1]]
        for k in range(3):
            neighbor_site = ((site[0] + ((k-1)%2 - 1)) % N, site[1])
            total_spin[0] += spin * state[neighbor_site[0]][neighbor_site[1]]
        if h[i // N][i % N] > 0:
            priorities.append((total_spin[0], 1))
        else:
            priorities.append((-total_spin[0], -1))
        total_spin = [0,0]
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    result = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site1 = (i + ((j-1)%N - 1)) % N
            site2 = (i + ((j+1)%N - 1)) % N
            if h[i][j] > 0:
                result[i*N+j][0] = total_spin
            else:
                result[i*N+j][1] = -total_spin
                
    return result




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    result = [[0 for _ in range(2)] for _ in range(N2)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site1 = (i + ((j-1)%N - 1)) % N
            site2 = (i + ((j+1)%N - 1)) % N
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                result[i*N+j][0] = total_spin
            else:
                result[i*N+j][1] = -total_spin
                
    return result




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            priorities.append((total_spin, spin))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.14721064814814835}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N**2):
        total_spin = sum([state[(i//N)%N][(i%N)+k-N] * state[i//N][k%N] for k in range(3) if (i//N)%N != ((i//N)//N*(k-1))%N])
        if h[i//N][i%N] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.11668225308641988}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin = sum([state[(i + ((k-1)%2 - 1)) % N][max(0, min(j+k, N)-1)] * site_spin for k in range(4)])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site_spin = state[i][j]
            total_spin_site = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin_site += site_spin * state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin_site, 1))
            else:
                priorities.append((total_spin_site, -1))
    return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.2852337962962958}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = sum([h[k][site-k%N] if k < N else h[N+k-(2*N),site-k%N] for k in range(3)])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.20332700617283966}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i*N+j][0]
            else:
                priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
    return priority_total




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N**2,2))
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority[i*N+j, 0] = total_spin
            else:
                priority[i*N+j, 1] = -total_spin
    return priority.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%2 - 1)) % N
            total_spin += h[site][j]
            if h[i][j] > 0:
                priority.append((total_spin, 1))
            else:
                priority.append((-total_spin, -1))
    return np.array(priority)




#score: {'data2D.txt': -0.06364182098765434}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[spin] += state[site][j]
            priorities.append((total_spin[0], total_spin[1]))
    return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((-total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return np.array(priorities)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum2 = (-np.prod(J_new[1::2], 0)).flatten()
    priority = np.column_stack((sum1, -sum1))
    return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            priority_total = np.zeros(2)
            for l in range(N):
                site = (i + ((l)%2 - 1)) % N
                if h[site][j] > 0:
                    priority_total[0] += state[site][j]
                else:
                    priority_total[1] -= state[site][j]
            if h[i][j] > 0:
                priorities.append((priority_total[0], 1))
            else:
                priorities.append((-1*priority_total[0], -1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities[i*N+j, 0] = total_spin
                priorities[i*N+j, 1] = -total_spin
    return priorities.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,2))
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][spin] += state[i][j]
            priority_total = np.zeros((N,2), dtype=int)
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += spin
            priorities.append(total_spin.sum(axis=0))
    return priorities




#score: {'data2D.txt': -0.003180092592592593}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [0,0]
    for i in range(N):
        for j in range(N):
            total_spin[0] = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][k%N-j+N-1] > 0 else - state[(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(min(j,N-1))])
            total_spin[1] = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][k%N-j+N-1] < 0 else - state[(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(min(j,N-1))])
            priorities.append((total_spin[0], total_spin[1]))
    return priorities




#score: {'data2D.txt': -0.35241188271604973}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flat = J.reshape(-1)
    H = np.zeros((N**2, 2))
    
    for i in range(N):
        for j in range(N):
            site = (i * N + j) % (N ** 2)
            total_spin = 0
            for k in range(3):
                neighbor_site = ((i + ((k - 1) % 2) - 1) % N * N + j) % (N ** 2)
                if J_flat[neighbor_site] > 0:
                    total_spin += h[i][j]
            H[site, 0] = total_spin
            H[site, 1] = -total_spin
    
    return H.tolist()




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.1647720679012351}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += h[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0008853395061728396}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    return [[x[1], -x[0]] for x in sorted(priorities)]




#score: {'data2D.txt': -0.0044970679012345674}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = [[0 for _ in range(2)] for _ in range(m)]
    
    for i in range(m):
        site = (i // N, i % N)
        total_spin = h[site[1]][site[0]]
        
        for k in range(3):
            neighbor_site = ((k-1) % N, site[1])
            if 0 <= neighbor_site[0] < N:
                total_spin += J[k][neighbor_site[0]][site[1]]
        
        for j in range(N):
            if h[i//N][j] > 0:
                priorities[i][0] = total_spin
            else:
                priorities[i][1] = -total_spin
        
    return priorities




#score: {'data2D.txt': 0.18487731481481504}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = np.zeros((N, 2), dtype=int)
    priorities = []
    for i in range(m):
        spin = -1 if h[i//N][i%N] > 0 else 1
        site = (i // N, i % N)
        for k in range(3):
            site_ = ((k-1) % N, i // N)
            total_spin[site_[1]][spin] += spin * state[site_[0]][site_[1]]
        if h[i//N][i%N] > 0:
            priorities.append((total_spin[i//N][0], 1))
        else:
            priorities.append((-total_spin[i//N][1], -1))
    return priorities




#score: {'data2D.txt': -0.004311574074074075}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = [[0 for _ in range(2)] for _ in range(m)]
    total_spin = [0 for _ in range(m)]
    for i in range(m):
        site = (i // N, i % N)
        total_spin[i] += h[site[1]][site[0]]
        for k in range(3):
            spin = -1 if h[site[0]][site[1]] > 0 else 1
            site = ((k-1) % N, i // N)
            total_spin[i] += spin * J[(((k-1) % 2) + 1)][site[0]][site[1]]
    for i in range(m):
        if h[i//N][i%N] > 0:
            priorities[i][0] = total_spin[i]
        else:
            priorities[i][1] = -total_spin[i]
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%2 - 1)) % N
            total_spin[i][j][0] += h[site][j]
            if h[i][j] > 0:
                total_spin[i][j][1] = total_spin[i][j][0]
            else:
                total_spin[i][j][1] = -total_spin[i][j][0]
    priorities = []
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priorities.append((total_spin[i][j][0], 1))
            else:
                priorities.append((-total_spin[i][j][0], -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.012347993827160468}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = [np.zeros(2) for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            row_sum = sum([state[i-((i+1)%N)][k] + state[(i+1)%N][k] for k in range(N)])
            col_sum = sum([state[k][j-((j+1)%N)] + state[k][(j+1)%N] for k in range(N)])
            
            if h[i][j] > 0:
                total_spin[i*N+j][0] += row_sum
                total_spin[i*N+j][1] += col_sum
            else:
                total_spin[i*N+j][0] -= row_sum
                total_spin[i*N+j][1] -= col_sum
    
    return [(x, y) for x, y in total_spin]




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.06433626543209879}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin_ones = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][k%N-j+N-1] > 0 else 0 for k in range(min(j,N-1))])
            total_spin_minusones = sum([-state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][k%N-j+N-1] < 0 else 0 for k in range(min(j,N-1))])
            priorities.append((total_spin_ones, total_spin_minusones))
    return priorities




#score: {'data2D.txt': -0.003180092592592593}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin_0 = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][k%N-j+N-1] > 0 else - state[(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(min(j,N-1))])
            total_spin_1 = sum([state[(i + ((k-1)%2 - 1)) % N][j-k%N] if h[i][k%N-j+N-1] < 0 else - state[(i + ((k-1)%2 - 1)) % N][j-k%N] for k in range(min(j,N-1))])
            priorities.append((total_spin_0, total_spin_1))
    return priorities




#score: {'data2D.txt': -0.20612422839506192}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((-total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.001152314814814816}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = np.zeros((m, 2), dtype=int)
    
    for i in range(m):
        site = (i // N, i % N)
        total_spin = h[site[1]][site[0]]
        
        if h[site[0]][site[1]] > 0:
            for k in range(3):
                site1 = ((k-1) % N, site[0])
                total_spin += J[(((k-1) % 2) + 1)][site1[0]][site1[1]]
            priorities[i][0] = int(total_spin)
        else:
            for k in range(3):
                site1 = ((k-1) % N, site[0])
                total_spin -= J[(((k-1) % 2) + 1)][site1[0]][site1[1]]
            priorities[i][1] = -int(total_spin)
    
    return priorities




#score: {'data2D.txt': 0.0002902777777777774}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    m = N ** 2
    priorities = [[0 for _ in range(2)] for _ in range(m)]
    total_spin = [0]*m
    for i in range(m):
        site = (i // N, i % N)
        total_spin[i] += h[site[1]][site[0]]
        if J[0][site[0]][site[1]] > 0:
            total_spin[i] += J[0][site[0]][site[1]]
        else:
            total_spin[i] -= J[0][site[0]][site[1]]
        for k in range(3):
            site = ((k-1) % N, i // N)
            total_spin[i] += J[(k%2 + 1)][site[0]][site[1]]
    for j in range(m):
        if h[j//N][j%N] > 0:
            priorities[j][0] = -total_spin[j]
        else:
            priorities[j][1] = total_spin[j]
    return priorities




#score: {'data2D.txt': -0.3153939814814807}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            site = (i + ((j%2) - 1)) % N
            total_spin[h[i][j] > 0] += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin[0], total_spin[1]))
            else:
                priorities.append((-total_spin[0], -total_spin[1]))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = [0,0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[0] += state[site][j]
            priorities.append((total_spin[0], total_spin[1]))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            
            if h[i][j] > 0:
                priorities.append((total_spin, -1))
            else:
                priorities.append((total_spin, 1))
    
    return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            total_spin = [0,0]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[spin] += state[site][j]
            priorities[i*N+j] = total_spin
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': -0.0635152777777778}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
            priorities.append((-total_spin, -1))
        else:
            priorities.append((-total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
     state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
     priorities = []
     for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
           total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
           if h[i][j] > 0:
              priorities.append((total_spin, 1))
           else:
              priorities.append((total_spin, -1))
     return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((total_spin, 1))
          else:
            priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0635152777777778}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
          total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
          if h[i][j] > 0:
            priorities.append((-total_spin, -1))
          else:
            priorities.append((-total_spin, 1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        spin_config = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(spin_config[i][:k]+spin_config[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * spin_config[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
    for j in range(N):
      total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
      if h[i][j] > 0:
          priorities.append((total_spin, 1))
      else:
          priorities.append((total_spin, -1))
  return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum_2 = (np.prod(np.flip(J_new[1::2], 0), 0) - h).flatten()
        priority = np.column_stack((sum_1, -sum_2))
        return(priority)




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]  
        priorities = []  
        for i in range(N):  
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]  
            for j in range(N):  
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])  
                if h[i][j] > 0:  
                    priorities.append((total_spin, -1))  
                else:  
                    priorities.append((total_spin, 1))  
        return priorities




#score: {'data2D.txt': 0.20332700617283966}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
            priorities.append((total_spin, 1))
        else:
            priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0635152777777778}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((-total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0022912037037037037}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[float('inf'),float('-inf')] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin, -total_spin]
                else:
                    priority[i*N+j] = [-total_spin, total_spin]
        return priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, 1))
        else:
          priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.005835648148148147}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((-total_spin, 1))
        else:
          priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.32509459876543123}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2))
        for i in range(N):
            for j in range(N):
                row_sum = sum(J[i*N:(i+1)*N,j].flatten())
                col_sum = sum(J[:,j*N:(j+1)*N].flatten())
                total_spin = row_sum + col_sum
                if h[i][j] > 0:
                    priority[(i*N+j),:] = [total_spin, -1]
                else:
                    priority[(i*N+j),:] = [-total_spin, 1]
        return(priority)




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
     state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
     priorities = []
     for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
           total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
           if h[i][j] > 0:
              priorities.append((total_spin, 1))
           else:
              priorities.append((total_spin, -1))
     return priorities




#score: {'data2D.txt': 0.146027314814815}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((-total_spin, -1))
        else:
          priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, -1))
        else:
          priorities.append((total_spin, 1))
    return priorities




#score: {'data2D.txt': -0.20548379629629648}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
              priority_total = [(total_spin, -1), (total_spin+2*h[i][j], 1)]
              priorities.append(sorted(priority_total)[0])
            else:
              priority_total = [(-total_spin, 1), (-total_spin-2*h[i][j], -1)]
              priorities.append(sorted(priority_total)[0])
        return priorities




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return(priority_total)




#score: {'data2D.txt': -0.17949922839506163}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            for i in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[site][0]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[site][0]
        return priority_total




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0003754629629629633}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0]*2 for _ in range(N**2)]
        priority_total = [[0]*2 for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N) % N
                total_spin[(i*N)+j][0] += state[site][j]
                
        for j in range(N):
            if h[j][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]

        return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.24194027777777763}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = np.zeros((N,2), dtype=int)
    for k in range(3):
        for i in range(N):
            site = (i + ((k-1)%2 - 1)) % N
            for j in range(N):
                total_spin[site][0] += state[i][j]
    priorities = []
    for i in range(N*N):
        if h[i//N][i%N] > 0:
            priorities.append((total_spin[i//N][0], 1))
        else:
            priorities.append((-total_spin[i//N][0], -1))
    return priorities




#score: {'data2D.txt': -0.13588317901234587}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N): 
            for j in range(N): 
                site = (i + ((0)%2 - 1)) % N
                total_spin[site][0] += state[i][j]
                if h[i][j] > 0: 
                    priorities.append((total_spin[site][0], 1))
                else: 
                    priorities.append((-total_spin[site][0], 1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = priority_total[j][0]
            else:
                priority_total[j][1] = -priority_total[j][0]
        
        return [[row[0], row[1]] for row in priority_total]




#score: {'data2D.txt': -0.005166512345679013}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i]
                else:
                    priority_total[i*N+j][1] = -total_spin[i]
        for i in range(N):
            if h[i][N-1] > 0:
                priority_total[i*N+N-1][0] += total_spin[i]
            else:
                priority_total[i*N+N-1][1] = -total_spin[i]
        return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0.0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.00045015432098765386}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [[0,0] for _ in range(N**2)]
    priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[j][0] += state[site][j]
                priority_total[j][0] = total_spin[j][0]
            else:
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[j][0] -= state[site][j]
                priority_total[j][1] = -1*total_spin[j][0]
    return priority_total




#score: {'data2D.txt': 0.1909066358024694}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0, 0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += state[site][j]
                if h[i][j] > 0:
                    total_spin[i*N+j][1] = total_spin[i*N+j][0]
                else:
                    total_spin[i*N+j][1] = -total_spin[i*N+j][0]
        priority_total = [[-total_spin[i][0], total_spin[i][1]] for i in range(N**2)]
        return priority_total




#score: {'data2D.txt': -0.0008754629629629627}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return [[p[0], p[1]] for p in sorted(priorities)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[j]
                else:
                    priority_total[i*N+j][1] = -1*total_spin[j]
        return priority_total




#score: {'data2D.txt': 0.17659120370370396}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([h[k][min((i+k)%N,N-1)]*state[(i+k)%N][(j+1)%N] for k in range(min(i,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [[0,0] for _ in range(N**2)]
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    total_spin[i*N+j][0] += state[site][j]
        for i in range(N**2):
            if h[int(i/N)][i%N] > 0:
                priorities.append((total_spin[i][0], 1))
            else:
                priorities.append((-1*total_spin[i][0], -1))
        return priorities




#score: {'data2D.txt': -0.0018550925925925922}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N:(i+1)*N][0] = total_spin[i]
            else:
                priority_total[i*N:(i+1)*N][1] = -total_spin[i]
        for i in range(N**2):
            if h[(i//N)%N][(i%N)] > 0:
                priority_total[i][0] += total_spin[(i//N)%N]
            else:
                priority_total[i][1] -= total_spin[(i//N)%N]
        return priority_total




#score: {'data2D.txt': 0.2401625}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0.5 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][j] += h[site][0]
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[i][j]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[i][j]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for j in range(N):
            for i in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[site][0]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[site][0]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin[site][0] += h[i][j]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          site = (i + ((j-1)%N - 1)) % N
          total_spin[site][0] += h[i][j]
          priority_total[(i*N+j), 0] = total_spin[site][0]
        else:
          site = (i + ((j+1)%N - 1)) % N
          total_spin[site][0] -= h[i][j]
          priority_total[(i*N+j), 1] = -total_spin[site][0]
    return priority_total




#score: {'data2D.txt': 0.161848302469136}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[site][0], 1))
                else:
                    priorities.append((-total_spin[site][0], -1))
        return priorities




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2))
        for i in range(N):
            for j in range(N):
                row_sum = J[i*N:i*(N+1),j].sum()
                if h[i][j] > 0:
                    priority[(i*N+j),0] = -row_sum
                    priority[(i*N+j),1] = 1
                else:
                    priority[(i*N+j),0] = row_sum
                    priority[(i*N+j),1] = -1
        return priority




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += h[site][j]
                total_spin[i*N+j][1] -= h[site][j]
        return total_spin




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):  
        for j in range(N):  
            site = (i + ((j-1)%N - 1)) % N
            for k in range(3):
                if k == 0:  
                    total_spin[i*N+j][0] += h[site][j]
                else:
                    total_spin[i*N+j][1] -= h[site][j]
    return total_spin




#score: {'data2D.txt': -0.24194027777777763}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = np.zeros((N,2), dtype=int)
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    total_spin[site][0] += state[i][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority = (total_spin[i][0], 1)
                else:
                    priority = (-total_spin[i][0], -1)
                priorities.append(priority)
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.005166512345679013}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
    total_spin = [0 for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i] += h[site][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[i]
            else:
                priority_total[i*N+j][1] = -total_spin[i]
    for i in range(N):
        if h[i][N-1] > 0:
            priority_total[i*N+N-1][0] += total_spin[i]
        else:
            priority_total[i*N+N-1][1] = -total_spin[i]
    return priority_total




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                total_spin = [0, 0]
                
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[1] += state[site][j]
                    else:
                        total_spin[0] -= state[site][j]
                
                if h[i][j] > 0:
                    priorities.append((total_spin[1], total_spin[1]))
                else:
                    priorities.append((-total_spin[0], -total_spin[0]))
        
        return priorities




#score: {'data2D.txt': -0.17246496913580261}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          for j in range(N):
              site = (i + ((j)%2 - 1)) % N
              total_spin = sum([state[site][k] for k in range(N)])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((-total_spin, -1))
      return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):  
            for j in range(N):  
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    if k == 0:  
                        total_spin[i*N+j][0] += h[site][j]
                    else:
                        total_spin[i*N+j][1] -= h[site][j]
        return total_spin




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):  
            for j in range(N):  
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    if k == 0:  
                        total_spin[i*N+j][0] += h[site][j]
                    else:
                        total_spin[i*N+j][1] -= h[site][j]
        return total_spin




#score: {'data2D.txt': -0.03459953703703704}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0.0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0.0 for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[j] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[j]
                else:
                    priority_total[i*N+j][1] = -total_spin[j]
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j][0] += total_spin[0]
            else:
                priority_total[j][1] -= total_spin[0]
        return [list(row) for row in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        total_spin = 0
        site = (i + ((j-1)%2 - 1)) % N
        total_spin += h[site][j]
        if h[i][j] > 0:
          priority[(i*N+j), 0] = total_spin
        else:
          priority[(i*N+j), 1] = -total_spin
    return priority.tolist()




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_priority[i*N+j][0] = total_spin
                else:
                    total_priority[i*N+j][1] = -total_spin
        return total_priority




#score: {'data2D.txt': -0.0034226851851851853}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = total_spin[i]
                else:
                    priority_list[i*N+j][1] = -total_spin[i]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_list[i*N+j][0] += total_spin[i]
                else:
                    priority_list[i*N+j][1] -= total_spin[i]
        return priority_list




#score: {'data2D.txt': -0.0008199074074074073}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if J_flatten[(i+1)*N+j] > 0:
                    site = (i + ((j-1)%N - 1)) % N
                else:
                    site = (i + ((j-1)%N - 1)) % N
                sum_1[i*N+j,0] += J_flatten[(i+1)*N+j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (j + ((k-1)%N - 1)) % N
                total_spin += J_flatten[(i+site)*N+j]
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin
            else:
                priority_total[i*N+j,1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N) - N//2) % N
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': -0.33023472222222133}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0,0]
        for i in range(N):
            for j in range(N):
                site = (i + ((2)%2 - 1)) % N
                total_spin[0] += state[i][j]
                if h[i][j] > 0:
                    priorities.append([total_spin[0],-total_spin[0]])
                else:
                    priorities.append([-total_spin[0],total_spin[0]])
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0012285493827160494}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                if h[i][j] > 0:
                    total_spin += J_flatten[(i+1)*N+j]
                else:
                    total_spin -= J_flatten[(i+1)*N+j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin += J_flatten[site*N+j]
                    else:
                        total_spin -= J_flatten[site*N+j]
                priority_total = np.zeros((N**2,2), dtype=int)
                for j in range(N):
                    priority_total[j][1] = -total_spin
                    priority_total[j][0] = total_spin
                return priority_total




#score: {'data2D.txt': -0.0006054012345679012}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                if h[i][j] > 0:
                    sum_1[i*N+j,0] += J_flatten[(i+1)*N+j]
                else:
                    sum_1[i*N+j,1] = -J_flatten[(i+1)*N+j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += J_flatten[(i+site)*N+j]
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin
            else:
                priority_total[i*N+j,1] = -total_spin
        return sum_1




#score: {'data2D.txt': 0.004560956790123458}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = sum([J_flatten[(k+1)*N+j] * state[max(0,i-k)][j-(i-k)%N] for k in range(min(i+1,N))])
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin
            else:
                priority_total[i*N+j,1] = -total_spin
    return priority_total.tolist()




#score: {'data2D.txt': 0.146027314814815}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0034226851851851853}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = total_spin[i]
                else:
                    priority_list[i*N+j][1] = -total_spin[i]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_list[i*N+j][0] += total_spin[i]
                else:
                    priority_list[i*N+j][1] -= total_spin[i]
        return priority_list




#score: {'data2D.txt': -0.0034226851851851853}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
    total_spin = [0 for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i] += h[site][j]
            if h[i][j] > 0:
                priority_list[i*N+j][0] = total_spin[i]
            else:
                priority_list[i*N+j][1] = -total_spin[i]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            if h[i][j] > 0:
                priority_list[i*N+j][0] += total_spin[i]
            else:
                priority_list[i*N+j][1] -= total_spin[i]
    return priority_list




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        site_interactions = np.zeros((N,N), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    site_interactions[i][j] = total_spin
                else:
                    site_interactions[i][j] = -total_spin
        priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = site_interactions[i][j]
                else:
                    priority_list[i*N+j][1] = -site_interactions[i][j]
        return priority_list




#score: {'data2D.txt': -0.0006054012345679012}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[i][j]
                if h[i][j] > 0:
                    sum_1[i*N+j,0] += J_flatten[(i+1)*N+j]
                else:
                    sum_1[i*N+j,1] = -J_flatten[(i+1)*N+j]
        return sum_1




#score: {'data2D.txt': -0.0006054012345679012}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                if h[i][j] > 0:
                    sum_1[i*N+j,0] += J_flatten[(i+1)*N+j]
                else:
                    sum_1[i*N+j,1] = -J_flatten[(i+1)*N+j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += J_flatten[(i+site)*N+j]
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin
            else:
                priority_total[i*N+j,1] = -total_spin
        return sum_1




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((2)%2 - 1)) % N
                for k in range(3):
                    if k == 0:
                        site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0013794753086419753}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N,2))
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][j] += state[site][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[i][j][0]
            else:
                priority_total[j][1] = -1*total_spin[i][j][0]
        return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': 0.0003560185185185191}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                if h[i][j] > 0:
                    for k in range(3):
                        site_neighbor = (i + ((k-1)%2 - 1)) % N
                        total_spin += J_flatten[(site_neighbor*N+j)]
                else:
                    for k in range(3):
                        site_neighbor = (i + ((k-1)%2 - 1)) % N
                        total_spin -= J_flatten[(site_neighbor*N+j)]
                if h[i][j] > 0:
                    priority_total[i*N+j,0] = total_spin
                else:
                    priority_total[i*N+j,1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0025399691358024682}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      J_flatten = J.flatten()
      sum_1 = np.zeros((N**2,2), dtype=int)
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - 1)) % N
              total_spin = 0
              if h[i][j] > 0:
                  total_spin += J_flatten[(i+1)*N+j]
              else:
                  total_spin -= J_flatten[(i+1)*N+j]
              sum_1[i*N+j,0] = total_spin
              sum_1[i*N+j,1] = -total_spin
      return sum_1




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        prior = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    prior[(i*N+j), 0] = total_spin
                else:
                    prior[(i*N+j), 1] = -total_spin
        return prior




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = sum([state[(i+(k-1)%2-1)%N][j] if k%2==0 else -state[(i+(k-1)%2-1)%N][j] for k in range(3)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': 0.026356018518518518}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if ((i-k)%2==(j-k)%2) else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.00042453703703703734}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[x[1], x[0]] for x in sorted(priorities)]




#score: {'data2D.txt': -0.0034520061728395062}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j,0] = total_spin
                else:
                    priority_total[i*N+j,1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0018186728395061728}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0025399691358024682}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        J_flatten = J.flatten()
        total_spin = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j,0] += h[site][j]
                if h[i][j] > 0:
                    total_spin[i*N+j,0] += J_flatten[(i+1)*N+j]
                else:
                    total_spin[i*N+j,0] -= J_flatten[(i+1)*N+j]
        for j in range(N):
            priority_total = np.zeros((2), dtype=int)
            for i in range(N):
                if h[i][j] > 0:
                    priority_total[0] = total_spin[i*N+j,0]
                else:
                    priority_total[1] = -total_spin[i*N+j,0]
            return total_spin




#score: {'data2D.txt': -0.0024405864197530867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
    
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - 1)) % N
            total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
            
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin
            else:
                priority_total[i*N+j][1] = -total_spin
    
    return priority_total




#score: {'data2D.txt': -0.0018186728395061728}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0024405864197530867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.10440200617283958}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if J_flatten[(site)*N+(j)] > 0:
                        total_spin += J_flatten[(site)*N+(j)]
                    else:
                        total_spin -= J_flatten[(site)*N+(j)]
                priority[i*N+j,0] = total_spin
        return priority




#score: {'data2D.txt': -0.0010637345679012338}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                for k in range(3):
                    if J_flatten[(site+1)*N+k] > 0:
                        total_spin += 1
                    else:
                        total_spin -= 1
                sum_1[i*N+j,0] = total_spin
        priority_total = np.zeros((N**2,2), dtype=int)
        for j in range(N):
            if h[j//N][j%N] > 0:
                priority_total[(j)//N*(N) + (j)%N,0] = sum_1[(j)//N*(N) + (j)%N,0]
            else:
                priority_total[(j)//N*(N) + (j)%N,1] = -sum_1[(j)//N*(N) + (j)%N,0]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin
                    priority_total[i][j][1] = -total_spin
        return priority_total.reshape(N*N,2).tolist()




#score: {'data2D.txt': -0.0635152777777778}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, -1))
                else:
                    priorities.append((-total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [(p,1) if p>0 else ((-p),-1) for p,_ in sorted(priorities,reverse=True)]




#score: {'data2D.txt': -0.20612422839506192}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
      row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
      for j in range(N):
        total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
        if h[i][j] > 0:
          priorities.append((total_spin, -1))
        else:
          priorities.append((-total_spin, 1))
    return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin += state[site][j]
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((total_spin, -1))
    return priorities




#score: {'data2D.txt': 0.20332700617283966}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
                    
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, h[i][j]))
                else:
                    priorities.append((-total_spin, -h[i][j]))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[(i*N)+j][0] = total_spin
                else:
                    priorities[(i*N)+j][1] = -total_spin
        
        return [priorities[i] for i in range(N**2)]




#score: {'data2D.txt': 0.15212052469135823}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N) % N
                total_spin = state[site][j]
                
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
                    
        return [p for p in priorities]




#score: {'data2D.txt': -0.005665277777777779}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        J_flatten = J.flatten()
        priority_total = np.zeros((N2,2), dtype=int)
        total_spin = 0
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': 2.3611111111110474e-05}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        total_spin = np.zeros(2)
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[0] += h[site][j]
            total_spin[1] += J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
            if h[i][j] > 0:
                priority_total[i*N+j, 0] = total_spin[0]
                priority_total[i*N+j, 1] = total_spin[1]
            else:
                priority_total[i*N+j, 0] = -total_spin[0]
                priority_total[i*N+j, 1] = -total_spin[1]
    return priority_total




#score: {'data2D.txt': -0.064729475308642}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        total_spin = [0]*N
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j, 0] = sum(total_spin)
            else:
                priority_total[i*N+j, 1] = -sum(total_spin)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            if h[i][j] > 0:
                total_spin[site] += J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
    return priority_total




#score: {'data2D.txt': -0.07931435185185191}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = []
    for i in range(N):
        total_spin = 0
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin += state[site][j]
            if h[i][j] > 0:
                priority_total.append((total_spin, 1))
            else:
                priority_total.append((-total_spin, -1))
    return priority_total




#score: {'data2D.txt': -0.012068672839506174}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(4)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site2 = (site + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][k] += h[site2][j]
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = sum(total_spin[i*N+j][:])
                else:
                    priority_total[i*N+j][1] = -sum(total_spin[i*N+j][:])
        return priority_total




#score: {'data2D.txt': -0.14845848765432118}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        sum_1 = np.zeros((N**2,2), dtype=int)
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += state[site][j]
                total_spin[i][1] = -total_spin[i][0]
                if h[i][j] > 0:
                    sum_1[i*N+j,0] = total_spin[i][0]
                    sum_1[i*N+j,1] = -total_spin[i][0]
                else:
                    sum_1[i*N+j,0] = -total_spin[i][0]
                    sum_1[i*N+j,1] = total_spin[i][0]
        return sum_1




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_priority[i*N+j][0] = total_spin
                else:
                    total_priority[i*N+j][1] = -total_spin
        return total_priority




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.00014953703703703735}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin[i][j][0] += J[0][site][0]
                total_spin[i][j][1] += J[1][site][1]
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin[i][j][0]
                else:
                    priority_total[i][j][1] = -1*total_spin[i][j][0]
        return priority_total.reshape((N*N,2)).tolist()




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
      priorities = []
      for i in range(N):
          row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
          for j in range(N):
              total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
              if h[i][j] > 0:
                  priorities.append((total_spin, 1))
              else:
                  priorities.append((total_spin, -1))
      return priorities




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2,2))
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority




#score: {'data2D.txt': 0.08955200617283958}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0.5 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    total_spin += J[k][site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': 0.0022603395061728407}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
    total_spin = [0 for _ in range(N)]
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site] += spin
            if h[i][j] > 0:
                priority_total[i*N+j][0] = sum(total_spin)
            else:
                priority_total[i*N+j][1] = -sum(total_spin)
    return [[a, b] for a, b in priority_total]




#score: {'data2D.txt': -0.0019427469135802468}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if k==0:
                        total_spin[i*N+j][0] += J[0][site][0]
                        total_spin[i*N+j][1] -= J[1][site][1]
                    elif k==1:
                        total_spin[i*N+j][0] -= J[0][site][0]
                        total_spin[i*N+j][1] += J[1][site][1]
                    else:
                        site = (i + ((j-1)%N - N//2)) % N
                        if h[i][j] > 0:
                            total_spin[i*N+j][0] -= h[i][j]
                            total_spin[i*N+j][1] += h[i][j]
                        else:
                            total_spin[i*N+j][0] += h[i][j]
                            total_spin[i*N+j][1] -= h[i][j]
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': 0.022686265432098764}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[j] += state[site][j]
                if h[i][j] > 0:
                    priority_total[N*i+j][0] = total_spin[j]
                else:
                    priority_total[N*i+j][1] = -1*total_spin[j]
        return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum_2 = (-np.prod(J_new[1::2], 0) - h).flatten()
        return np.column_stack((sum_1, sum_2))




#score: {'data2D.txt': -0.0009766975308641975}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin[i*N+j][0] += sum(J[0][site][(k-1)%N] for k in range(3))
                total_spin[i*N+j][1] -= sum(J[1][site][(k-1)%N] for k in range(3))
                if h[i][j] > 0:
                    total_spin[i*N+j][0] -= h[i][j]
                    total_spin[i*N+j][1] += h[i][j]
                else:
                    total_spin[i*N+j][0] += h[i][j]
                    total_spin[i*N+j][1] -= h[i][j]
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return [[p[0], p[1]] for p in priority]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        for j in range(N):
            priority_total = []
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = 0
                for k in range(3):
                    total_spin += h[site][k]
                if h[i][j] > 0:
                    priority_total.append((total_spin, 1))
                else:
                    priority_total.append((-total_spin, -1))
            for i in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = sum(h[site][k] for k in range(min(i,N-1)))
                if h[i][j] > 0:
                    priority_total.append((total_spin, 1))
                else:
                    priority_total.append((-total_spin, -1))
        return priority




#score: {'data2D.txt': -0.0012591049382716052}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = [-1 if h[site][j] > 0 else 1 for _ in range(3)]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += state[k]
                if h[i][j] > 0:
                    priority_total = [total_spin[i*N+j][0], 1]
                else:
                    priority_total = [-total_spin[i*N+j][0], -1]
        return [priority_total for _ in range(N**2)]




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    total_spin[i*N+j][0] += h[site][j]
                if h[i][j] > 0:
                    total_spin[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    total_spin[i*N+j][1] = -total_spin[i*N+j][0]
        return [total_spin[i] for i in range(N**2)]




#score: {'data2D.txt': -0.1864680555555557}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
        for j in range(N):
            site1 = (i + ((j-1)%N - 1)) % N
            site2 = (i + ((j+1)%N - 1)) % N
            if h[i][j] > 0:
                priorities.append([(row_sum[site1] + row_sum[site2]), 1])
            else:
                priorities.append([-row_sum[site1] - row_sum[site2], -1])
    return [[a, b] for a, b in priorities]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[a, b] for a, b in priorities]




#score: {'data2D.txt': -0.20612422839506192}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j] > 0 else -row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                priorities.append((total_spin, -1) if h[i][j] > 0 else (total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.0016535493827160494}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [sum([state[i][j]*(-1)**((i+j)%2) for j in range(N)]) for i in range(N)]
        priorities = [(total_spin[i], -1) if h[i][j] > 0 else (total_spin[i], 1) for i in range(N) for j in range(N)]
        return [[x, y] for x,y in sorted(priorities)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        total_spin = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j,0] += h[site][j]
                if h[i][j] > 0:
                    total_spin[i*N+j,0] -= J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                    total_spin[i*N+j,1] = total_spin[i*N+j,0]
                else:
                    total_spin[i*N+j,1] = -total_spin[i*N+j,0]
        return total_spin




#score: {'data2D.txt': -0.057249537037037064}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0035495370370370372}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin + J_flatten[(i+1)*N+j]
                else:
                    priority_total[i*N+j, 1] = total_spin - J_flatten[i*N+(j-1)%N]
        for j in range(N):
            if h[0][j] > 0:
                priority_total[j, 0] += h[0][j]
            else:
                priority_total[j, 1] -= h[0][j]
        return priority_total




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    site = (i + ((j-1)%N - N//2)) % N
                    for k in [(-1, 0), (0, -1), (1, 0)]:
                        total_spin[i*N+j][0] += J[k[0]][site][k[1]]
                else:
                    site = (i + ((j-1)%N - N//2)) % N
                    for k in [(-1, 0), (0, -1), (1, 0)]:
                        total_spin[i*N+j][1] += J[k[0]][site][k[1]]
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N,N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i][j][0] = total_spin
                else:
                    priority_total[i][j][1] = -total_spin
        return priority_total.reshape(N*N,2)




#score: {'data2D.txt': -0.12631280864197547}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            total_spin = 0
            for k in [(-1, 0), (0, -1), (1, 0)]:
                site = (i + ((k[1]-1)%N - N//2)) % N
                if h[i][j] > 0:
                    priority[i*N+j][0] += J[k[0]][site][k[1]]
                else:
                    total_spin -= J[k[0]][site][k[1]]
            if h[i][j] > 0:
                priority[i*N+j] = [total_spin, -1*total_spin]
            else:
                priority[i*N+j] = [-1*total_spin, total_spin]
    return priority




#score: {'data2D.txt': -0.0028631172839506096}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0]*2
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(0,1),(-1,0),(1,0)]:
                    if J[k[0]][site][k[1]] > 0:
                        total_spin[0] += J[k[0]][site][k[1]]
                    else:
                        total_spin[1] += -J[k[0]][site][k[1]]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = total_spin
                else:
                    priority_total[i*N+j] = [-x for x in total_spin]
        return priority_total




#score: {'data2D.txt': -0.004367438271604928}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J = J.flatten()
    sum1 = np.sum(J[0::2], 0).flatten()
    sum2 = np.sum(J[1::2], 0).flatten()
    h = h.flatten()
    priority = np.column_stack((np.sign(sum1 + h), -np.sign(sum1 + h)))
    return priority




#score: {'data2D.txt': 0.004709722222222222}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2,2), dtype=int)
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += state[site][j]
                if h[i][j] > 0:
                    priority_total[N*i+j][0] = total_spin[i][0]
                else:
                    priority_total[N*i+j][1] = -total_spin[i][0]
        for j in range(N):
            if h[j][0] > 0:
                priority_total[N*j+0][0] = total_spin[0][0]
            else:
                priority_total[N*j+0][1] = -total_spin[0][0]
        return priority_total




#score: {'data2D.txt': -0.0009662037037037034}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum([state[site][k] for k in range(N)])
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total.tolist()




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = total_spin[i][0]
            else:
                priority_total[(i*N+j), 1] = -total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin[i*N+j][0] += h[site][j]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          priority_total[i*N+j][0] = total_spin[i*N+j][0]
        else:
          priority_total[i*N+j][1] = -total_spin[i*N+j][0]
    return priority_total




#score: {'data2D.txt': -0.0020412037037037035}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += state[site][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = -total_spin[i][0]
            else:
                priority_total[(i*N+j), 1] = total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.0010637345679012338}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    sum_1 = np.zeros((N**2,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = 0
            for k in range(3):
                if J_flatten[(site+1)*N+k] > 0:
                    total_spin += 1
                else:
                    total_spin -= 1
            sum_1[i*N+j,0] = total_spin
    priority_total = np.zeros((N**2,2), dtype=int)
    for j in range(N):
        if h[j//N][j%N] > 0:
            priority_total[(j)//N*(N) + (j)%N,0] = sum_1[(j)//N*(N) + (j)%N,0]
        else:
            priority_total[(j)//N*(N) + (j)%N,1] = -sum_1[(j)//N*(N) + (j)%N,0]
    return priority_total




#score: {'data2D.txt': -0.0010637345679012338}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    sum_1 = np.zeros((N**2,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = 0
            for k in range(3):
                if J_flatten[(site+1)*N+k] > 0:
                    total_spin += 1
                else:
                    total_spin -= 1
            sum_1[i*N+j,0] = total_spin
    priority_total = np.zeros((N**2,2), dtype=int)
    for j in range(N):
        if h[j//N][j%N] > 0:
            priority_total[(j)//N*(N) + (j)%N,0] = sum_1[(j)//N*(N) + (j)%N,0]
        else:
            priority_total[(j)//N*(N) + (j)%N,1] = -sum_1[(j)//N*(N) + (j)%N,0]
    return priority_total




#score: {'data2D.txt': -0.0010637345679012338}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    sum_1 = np.zeros((N**2,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = 0
            for k in range(3):
                if J_flatten[(site+1)*N+k] > 0:
                    total_spin += 1
                else:
                    total_spin -= 1
            sum_1[i*N+j,0] = total_spin
    priority_total = np.zeros((N**2,2), dtype=int)
    for j in range(N):
        if h[j//N][j%N] > 0:
            priority_total[(j)//N*(N) + (j)%N,0] = sum_1[(j)//N*(N) + (j)%N,0]
        else:
            priority_total[(j)//N*(N) + (j)%N,1] = -sum_1[(j)//N*(N) + (j)%N,0]
    return priority_total




#score: {'data2D.txt': -0.010386882716049383}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros(2)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[0] += h[site][j]
                total_spin[1] -= h[i][j]
        return [[total_spin[0], -total_spin[0]] for _ in range(N**2)]




#score: {'data2D.txt': 0.0010171296296296298}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in [(i-1)%N, (i+1)%N]:
                    if k == i:
                        continue
                    site = (k + ((j-1)%2 - 1)) % N
                    total_spin += J[0][site][j] * h[k][j]
                priority_list.append([total_spin, -total_spin])
        return priority_list




#score: {'data2D.txt': -0.3284013888888879}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][j] += spin
            if h[i][j] > 0:
                priorities.append((np.sum(total_spin), 1))
            else:
                priorities.append((-np.sum(total_spin), -1))
    return priorities




#score: {'data2D.txt': 0.059308487654321014}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            total_spin = 0
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if h[site][j] > 0:
                        total_spin += state[i//N][j]
                    else:
                        total_spin -= state[i//N][j]
            if h[i//N][i%N] > 0:
                priorities.append([total_spin, -total_spin])
            else:
                priorities.append([-total_spin, total_spin])
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0015714506172839506}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [[p[1], p[0]] for p in sorted(priorities)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N_squared = N*N
    priority_total = [[0,0] for _ in range(N_squared)]
    
    for i in range(N):
      for j in range(N):
        total_spin = 0
        site = (i + ((j%N-1)%N)) % N
        total_spin += h[site][j]
        
        if h[i][j] > 0:
          priority_total[i*N+j][0] = total_spin
        else:
          priority_total[i*N+j][1] = -total_spin
    
    return priority_total




#score: {'data2D.txt': -0.0002770061728395061}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
      for j in range(N):
        for k in [(-1, 0), (0, -1), (1, 0)]:
          site = (i + ((k[0]%N) - N//2)) % N
          total_spin[i*N+j][0] += J[k[0]][site][k[1]]
    priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
        else:
          priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
    return priority_total




#score: {'data2D.txt': 0.003982253086419753}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    site_ = (site + k[0]) % N
                    j_ = (j + k[1]) % N
                    if h[i][j_] > 0:
                        total_spin += J[0][site_][j_]
                    else:
                        total_spin -= J[2][site_][j_]
                if h[i][j] > 0:
                    priority_list[i*N+j] = [total_spin, -1*total_spin]
                else:
                    priority_list[i*N+j] = [-1*total_spin, total_spin]
        return priority_list




#score: {'data2D.txt': -0.0017128086419753088}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
            else:
                priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[i*N+j][0] += 1
                    else:
                        total_spin[i*N+j][1] += 1
        priority_total = [[0,0] for _ in range(N**2)]
        for j in range(N):
            for i in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j][1]
        return priority_total




#score: {'data2D.txt': -0.09538009259259264}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0,0] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[site]
                else:
                    priorities[i*N+j][1] = -total_spin[site]
        return priorities




#score: {'data2D.txt': 0.0011862654320987673}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin += J[k[0]][site][k[1]]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, -1*total_spin]
                else:
                    priority_total[i*N+j] = [-1*total_spin, total_spin]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
                    total_spin[i*N+j][1] -= J[k[0]][site][k[1]]
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_list = []
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = h[site][j]
            if h[i][j] > 0:
                priority_list.append((total_spin, 1))
            else:
                priority_list.append((-total_spin, -1))
    return priority_list




#score: {'data2D.txt': 0.02931682098765433}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    total_spin[i][0] += state[site][j]
                else:
                    total_spin[i][1] += state[site][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin[i][0]
                else:
                    priority_total[(i*N+j), 1] = -total_spin[i][1]
        return priority_total




#score: {'data2D.txt': -0.0035075617283950615}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin[site][0] += J[0][site][j]
                total_spin[site][1] -= J[2][site][j]
        priority_list = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_list[i*N+j] = [total_spin[i][0], -1*total_spin[i][0]]
                else:
                    priority_list[i*N+j] = [-1*total_spin[i][0], total_spin[i][0]]
        return priority_list.tolist()




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority[i*N+j][0] = total_spin
                else:
                    priority[i*N+j][1] = -total_spin
        return priority




#score: {'data2D.txt': -0.0007733024691358028}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    spin = 1
                else:
                    spin = -1
                site = (i + ((2)%2 - 1)) % N*N
                total_spin[site//N] += spin
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    priority_total[site*N+j][spin] += total_spin[site]
        return priority_total




#score: {'data2D.txt': -0.32947330246913487}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = 0
    priorities = []
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin += state[site][j]
            if h[i][j] > 0:
                priority = total_spin
            else:
                priority = -total_spin
            priorities.append((priority, 1))
    return priorities




#score: {'data2D.txt': 0.0008794753086419755}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in range(3):
                state = 1 if h[i][j] > 0 else -1
                total_spin[i*N+j][0] += state * sum(J[0][site][(k-1)%N] for _ in range(N))
                total_spin[i*N+j][1] -= state * sum(J[1][site][(k-1)%N] for _ in range(N))
            if h[i][j] > 0:
                total_spin[i*N+j][0] -= h[i][j]
                total_spin[i*N+j][1] += h[i][j]
            else:
                total_spin[i*N+j][0] += h[i][j]
                total_spin[i*N+j][1] -= h[i][j]
    return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = [0]*N*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i*N+j] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j]
        return priority_total




#score: {'data2D.txt': 0.0001871913580246911}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if k == 0:
                        total_spin[i*N+j][0] += J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] -= J[1][site][(k-1)%N]
                    elif k == 1:
                        site = (i + ((j+1)%N - N//2)) % N
                        total_spin[i*N+j][0] += J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] -= J[1][site][(k-1)%N]
                    else:
                        site = (i + ((j-1)%N - N//2)) % N
                        total_spin[i*N+j][0] += J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] -= J[1][site][(k-1)%N]
                if h[i][j] > 0:
                    priority_total = [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]
                else:
                    priority_total = [[-total_spin[j][0], total_spin[j][1]] for j in range(N*N)]
        return priority_total




#score: {'data2D.txt': 0.198685339506173}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in range(3):
                if J[0][site][(k-1)%N] > 0:
                    total_spin[i*N+j][0] += 1
                else:
                    total_spin[i*N+j][0] -= 1
                if J[1][site][(k-1)%N] < 0:
                    total_spin[i*N+j][1] += 1
                else:
                    total_spin[i*N+j][1] -= 1
            if h[i][j] > 0:
                total_spin[i*N+j][0] -= 1
                total_spin[i*N+j][1] += 1
            else:
                total_spin[i*N+j][0] += 1
                total_spin[i*N+j][1] -= 1
    return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.0012199074074074076}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if J[0][site][(k-1)%N] > 0:
                        total_spin[i*N+j][0] += 1
                    else:
                        total_spin[i*N+j][0] -= 1
                    if J[1][site][(k-1)%N] > 0:
                        total_spin[i*N+j][1] -= 1
                    else:
                        total_spin[i*N+j][1] += 1
                if h[i][j] > 0:
                    priority_total = [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]
                else:
                    priority_total = [[-total_spin[j][0], total_spin[j][1]] for j in range(N*N)]
        return priority_total




#score: {'data2D.txt': -0.0009766975308641975}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                state = 1 if h[i][j] > 0 else -1
                total_spin[i*N+j][0] += sum(J[0][site][(k-1)%N] for k in range(3))
                total_spin[i*N+j][1] -= sum(J[1][site][(k-1)%N] for k in range(3))
                if h[i][j] > 0:
                    total_spin[i*N+j][0] -= h[i][j]
                    total_spin[i*N+j][1] += h[i][j]
                else:
                    total_spin[i*N+j][0] += h[i][j]
                    total_spin[i*N+j][1] -= h[i][j]
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[float('inf'), float('-inf')] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum(state[i][k] for k in range(N))
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin, float('-inf')]
                else:
                    priority[i*N+j] = [-total_spin, float('inf')]
        return priority




#score: {'data2D.txt': -0.0018186728395061728}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0018186728395061728}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = 0
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.16530478395061743}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    site = (i + ((k[0]%N) - N//2)) % N
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities.append((total_spin[i*N+j][0], 1))
                else:
                    priorities.append((-1*total_spin[i*N+j][0], -1))
        return priorities




#score: {'data2D.txt': -0.0022912037037037037}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[0], 1]
                else:
                    priority_total[i*N+j] = [-total_spin[0], -1]
        return [[p[0], 0] for p in priority_total]




#score: {'data2D.txt': -0.0024405864197530867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.0024405864197530867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return [(p,1) if p>0 else ((-p),-1) for p,_ in sorted(priorities,reverse=True)]




#score: {'data2D.txt': -0.006294290123456792}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        J_flatten = J.flatten()
        priority_total = np.zeros((N2,2), dtype=int)
        total_spin = 0
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = np.sign(total_spin)
                else:
                    priority_total[i*N+j, 1] = -np.sign(total_spin)
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += h[site][j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j,0] = total_spin[i][0]
                else:
                    priority_total[i*N+j,1] = -total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N, N, 2), dtype=int)
    for i in range(N):
        for j in range(N):
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[i][j][0] += (-1 if h[site][j]>0 else 1)
                total_spin[i][j][1] -= (-1 if h[site][j]>0 else 1)
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin[i][j][0]
            else:
                priority_total[i*N+j,1] = -total_spin[i][j][1]
    return priority_total




#score: {'data2D.txt': -0.10440200617283958}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.0024405864197530867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin
                else:
                    priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.005665277777777779}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        J_flatten = J.flatten()
        priority_total = np.zeros((N2,2), dtype=int)
        total_spin = 0
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin += h[site][j] + J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.000916820987654321}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    N2 = N*N
    J_flatten = J.flatten()
    priority_total = np.zeros((N2,2), dtype=int)
    total_spin = np.zeros((N,2))
    
    for j in range(N):
        if h[0][j] > 0:
            priority_total[j*2, 0] = 1
            priority_total[j*2+1, 1] = -1
        else:
            priority_total[j*2, 1] = 1
            priority_total[j*2+1, 0] = -1

    for i in range(1,N):
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin[i][0] += h[site][j]
        total_spin[i][1] -= h[site][j]
        if h[i][j] > 0:
          priority_total[(i*N+j), 0] = total_spin[i][0]
        else:
          priority_total[(i*N+j), 1] = -total_spin[i][1]

    return priority_total




#score: {'data2D.txt': -0.0008199074074074073}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                if J_flatten[(i+1)*N+j] > 0:
                    site = (i + ((j-1)%N - 1)) % N
                else:
                    site = (i + ((j-1)%N - 1)) % N
                sum_1[i*N+j,0] += J_flatten[(i+1)*N+j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for j in range(N):
            total_spin = 0
            for k in range(3):
                site = (j + ((k-1)%N - 1)) % N
                total_spin += J_flatten[(i+site)*N+j]
            if h[i][j] > 0:
                priority_total[i*N+j,0] = total_spin
            else:
                priority_total[i*N+j,1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.003996450617283951}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (j + ((k-1)%N - 1)) % N
                    if J_flatten[(i+site)*N+j] > 0:
                        total_spin += h[site][j]
                priority_total[i*N+j, 0] = total_spin
                if h[i][j] > 0:
                    priority_total[i*N+j, 1] = -total_spin
                else:
                    priority_total[i*N+j, 1] = total_spin
        return priority_total




#score: {'data2D.txt': 0.0003560185185185191}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flatten[site*N+j]
                if h[i][j] > 0:
                    priority_total = [total_spin, -total_spin]
                else:
                    priority_total = [-total_spin, total_spin]
                sum_1[i*N+j] = priority_total
        return sum_1




#score: {'data2D.txt': -0.064729475308642}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0]*N
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site] += h[i][j]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = sum(total_spin)
                else:
                    priority_total[i*N+j, 1] = -sum(total_spin)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    total_spin[site] += J_flatten[(i+1)*N+j] - J_flatten[i*N+(j-1)%N]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0 if h[site][j]>0 else 1] += (-1 if h[site][j]>0 else 1)
        priority_total = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j][1]
        return [list(row) for row in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    priority.append((total_spin, 1))
                else:
                    priority.append((-total_spin, -1))
        return priority




#score: {'data2D.txt': -0.0016702160493827158}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_spin += J_flatten[(i+1)*N+j]
                else:
                    total_spin -= J_flatten[(i+1)*N+j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin += J_flatten[site*N+j]
                    else:
                        total_spin -= J_flatten[site*N+j]
                priority_total = np.zeros((N**2,2), dtype=int)
                for j in range(N):
                    if h[i][j] > 0:
                        priority_total[(i*N+j),0] = total_spin
                    else:
                        priority_total[(i*N+j),1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0012285493827160494}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_flatten = J.flatten()
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = 0
            if h[i][j] > 0:
                total_spin += J_flatten[(i+1)*N+j]
            else:
                total_spin -= J_flatten[(i+1)*N+j]
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                if h[i][j] > 0:
                    total_spin += J_flatten[site*N+j]
                else:
                    total_spin -= J_flatten[site*N+j]
            priority_total = np.zeros((N**2,2), dtype=int)
            for j in range(N):
                priority_total[j][1] = -total_spin
                priority_total[j][0] = total_spin
            return [priority_total[j] for j in range(N**2)]




#score: {'data2D.txt': -0.0007733024691358028}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    spin = 1
                else:
                    spin = -1
                site = (i + ((2)%2 - 1)) % N*N
                total_spin[site//N] += spin
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    priority_total[site*N+j][spin] += total_spin[site]
        return priority_total




#score: {'data2D.txt': -0.0014476851851851836}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if J[0][site][(k-1)%N] > 0:
                        total_spin += 1
                    else:
                        total_spin -= 1
                    if J[1][site][(k-1)%N] > 0:
                        total_spin -= 1
                    else:
                        total_spin += 1
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, -total_spin]
                else:
                    priority_total[i*N+j] = [-total_spin, total_spin]
        return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
      for i in range(N):
          for j in range(N):
              if h[i][j] > 0:
                  site = (i + ((j-1)%N - N//2)) % N
                  total_spin[i*N+j][0] += 1
                  total_spin[i*N+j][1] -= 1
              else:
                  site = (i + ((j-1)%N - N//2)) % N
                  total_spin[i*N+j][0] -= 1
                  total_spin[i*N+j][1] += 1
      return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.0035075617283950615}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                state = 1 if h[i][j] > 0 else -1
                total_spin[site][0] += J[0][site][j]
                total_spin[site][1] -= J[2][site][j]
        priority_list = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_list[i*N+j] = [total_spin[i][0], -1*total_spin[i][0]]
                else:
                    priority_list[i*N+j] = [-1*total_spin[i][0], total_spin[i][0]]
        return [[x[0], x[1]] for x in priority_list]




#score: {'data2D.txt': -0.000402623456790124}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = np.zeros((N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                state = (-1 if h[i][j] > 0 else 1)
                total_spin[site][0] += J[0][site][j] * state
                total_spin[site][1] -= J[2][site][j] * state
        priority_list = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_list[i*N+j] = [total_spin[i][0], -1*total_spin[i][0]]
                else:
                    priority_list[i*N+j] = [-1*total_spin[i][0], total_spin[i][0]]
        return priority_list.tolist()




#score: {'data2D.txt': 0.0011862654320987673}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin += J[k[0]][site][k[1]]
                if h[i][j] > 0:
                    priorities[i*N+j] = [total_spin, -1*total_spin]
                else:
                    priorities[i*N+j] = [-1*total_spin, total_spin]
        return priorities




#score: {'data2D.txt': 0.12694583333333348}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
      total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
      for i in range(N):
          for j in range(N):
              site = (i + ((j-1)%N - N//2)) % N
              for k in [(0,-1),(1,0),(0,1)]:
                  total_spin[i*N+j][0] += J[k[0]][site][k[1]]
              if h[i][j] > 0:
                  total_spin[i*N+j][0] = total_spin[i*N+j][0]
                  total_spin[i*N+j][1] = -total_spin[i*N+j][0]
              else:
                  total_spin[i*N+j][0] = -total_spin[i*N+j][0]
                  total_spin[i*N+j][1] = total_spin[i*N+j][0]
      return total_spin




#score: {'data2D.txt': 0.0022603395061728407}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    total_spin = [0]*N
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - 1)) % N
        total_spin[site] += state[i][j]
        if h[i][j] > 0:
          priority_total[i*N+j, 0] = sum(total_spin)
        else:
          priority_total[i*N+j, 1] = -sum(total_spin)
    return priority_total




#score: {'data2D.txt': 0.0036072530864197532}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0]*N for _ in range(N)]
        priority_total = [[0, 0] for _ in range(N*N)]

        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    total_spin[i][j] += 1
                else:
                    total_spin[i][j] -= 1

                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += total_spin[i][j]

                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i][j], 1]
                else:
                    priority_total[i*N+j] = [-total_spin[i][j], -1]

        return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priority_total = np.zeros((N**2, 2), dtype=int)
    
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                priority_total[i*N+j, 0] = total_spin
            else:
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin -= state[site][j]
                priority_total[i*N+j, 1] = -total_spin
    
    return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
                    total_spin[i*N+j][1] -= J[k[0]][site][k[1]]
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
                    total_spin[i*N+j][1] -= J[k[0]][site][k[1]]
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
                    total_spin[i*N+j][1] -= J[k[0]][site][k[1]]
        priority_total = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in [(0,-1),(1,0),(0,1)]:
                total_spin[i*N+j][0] += J[k[0]][site][k[1]]
                total_spin[i*N+j][1] -= J[k[0]][site][k[1]]
    priority_total = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
            else:
                priority_total[i*N+j] = [-total_spin[i*N+j][0], total_spin[i*N+j][1]]
    return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    if k==0:
                        total_spin[i*N+j][0] += h[site][j]
                    else:
                        total_spin[i*N+j][1] -= h[site][j]
        return total_spin




#score: {'data2D.txt': -0.0756412037037037}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i*N+j][0] += J[0][site][j]
                        total_spin[i*N+j][1] -= J[1][site][j]
                else:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i*N+j][0] += -J[0][site][j]
                        total_spin[i*N+j][1] -= J[1][site][j]
        priority_total = [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]
        return priority_total




#score: {'data2D.txt': 0.00030540123456790027}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in range(3):
                    if k == 0:
                        total_spin += J[0][site][(k-1)%N]
                    elif k == 1:
                        site = (i + ((j+1)%N - N//2)) % N
                        total_spin -= J[1][site][(k-1)%N]
                    else:
                        site = (i + ((j-1)%N - N//2)) % N
                        total_spin += J[0][site][(k-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, -total_spin]
                else:
                    priority_total[i*N+j] = [-total_spin, total_spin]
        return priority_total




#score: {'data2D.txt': -9.706790123456726e-05}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if k == 0:
                        total_spin += J[0][site][(j-1)%N]
                    elif k == 1:
                        site = (i + ((j+1)%N - N//2)) % N
                        total_spin += J[0][site][((j+1)-1)%N]
                    else:
                        site = (i + ((j-1)%N - N//2)) % N
                        total_spin += J[0][site][(j-1)%N]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                    priority_total[i*N+j][1] = -total_spin
                else:
                    priority_total[i*N+j][0] = -total_spin
                    priority_total[i*N+j][1] = total_spin
        return priority_total




#score: {'data2D.txt': -0.036738734567901235}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in range(3):
                    if k == 0:
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin += J[0][site][j]
                    elif k == 1:
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin -= J[1][site][j]
                    else:
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin += J[0][site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, 0]
                else:
                    priority_total[i*N+j] = [-total_spin, 1]
        return priority_total




#score: {'data2D.txt': -0.0014476851851851836}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = 0
            site = (i + ((j-1)%N - N//2)) % N
            for k in range(3):
                if J[0][site][(k-1)%N] > 0:
                    total_spin += 1
                else:
                    total_spin -= 1
                if J[1][site][(k-1)%N] > 0:
                    total_spin -= 1
                else:
                    total_spin += 1
            if h[i][j] > 0:
                priority_total[i*N+j] = [total_spin, -total_spin]
            else:
                priority_total[i*N+j] = [-total_spin, total_spin]
    return priority_total




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N_squared = N*N
        priorities = [[0 for _ in range(2)] for _ in range(N_squared)]
        
        for i in range(N):
          for j in range(N):
            total_spin = 0
            site = (i + ((j%N-1)%N)) % N
            total_spin += h[site][j]
            
            if h[i][j] > 0:
              priorities[i*N+j][0] = total_spin
            else:
              priorities[i*N+j][1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N_squared = N*N
        priority_total = [[0,0] for _ in range(N_squared)]
        
        for i in range(N):
          for j in range(N):
            total_spin = 0
            site = (i + ((j%N-1)%N)) % N
            total_spin += h[site][j]
            
            if h[i][j] > 0:
              priority_total[i*N+j][0] = total_spin
            else:
              priority_total[i*N+j][1] = -total_spin
        
        return priority_total




#score: {'data2D.txt': -0.010528858024691359}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N_squared = N*N
        priority_total = [[0 for _ in range(2)] for _ in range(N_squared)]
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j%N-1)%N)) % N
                total_spin += h[site][j]
                
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
                
        return priority_total




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.09679552469135812}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            total_spin = sum([state[(i//N)%N][max(0, (i%N)-k)%N] * state[(i//N)%N][(i%N+k)%N] if 0<=k<N else 0 for k in range(max(0,N-1-i%N))])
            if h[i//N][i%N] > 0:
                priorities.append([total_spin, -total_spin])
            else:
                priorities.append([-total_spin, total_spin])
        return [[p[0], p[1]] for p in priorities]




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.20963935185185192}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] if h[i][j-k%N] > 0 else -state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((-total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N**2,2), dtype=float)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority[(i*N+j), 0] = total_spin
                else:
                    priority[(i*N+j), 1] = -total_spin
        return priority.astype(int)




#score: {'data2D.txt': -0.0028631172839506096}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            total_spin = [0]*2
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(0,1),(-1,0),(1,0)]:
                    if J[k[0]][site][k[1]] > 0:
                        total_spin[0] += J[k[0]][site][k[1]]
                    else:
                        total_spin[1] += -J[k[0]][site][k[1]]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = total_spin
                else:
                    priority_total[i*N+j] = [-x for x in total_spin]
        return priority_total




#score: {'data2D.txt': -0.33919861111111016}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in [(0,-1),(0,1),(-1,0),(1,0)]:
                    if J[k[0]][site][k[1]] > 0:
                        total_spin += J[k[0]][site][k[1]]
                    else:
                        total_spin -= J[k[0]][site][k[1]]
                if h[i][j] > 0:
                    total_priority[i*N+j] = [total_spin, -total_spin]
                else:
                    total_priority[i*N+j] = [-total_spin, total_spin]
        return total_priority




#score: {'data2D.txt': 2.237654320987681e-05}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = sum([J[0][(site+((k-1)%2-N//2))%N][j] * state[(site+((k-1)%2-N//2))%N][min(j,k)] 
                                  for k in range(3)])
                priority[i*N+j] = [total_spin, -total_spin]
        return priority




#score: {'data2D.txt': 0.0919671296296297}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N) % N)
                for k in range(3):
                    neighbor = (site + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += state[neighbor][j]
                    if h[i][j] > 0:
                        total_spin[i*N+j][1] += 1
                    else:
                        total_spin[i*N+j][1] -= 1
        return [(t[0], -1) if t[1] < 0 else (t[0], 1) for t in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0010637345679012338}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        sum_1 = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                for k in range(3):
                    if J_flatten[(site+1)*N+k] > 0:
                        total_spin += 1
                    else:
                        total_spin -= 1
                sum_1[i*N+j,0] = total_spin
        priority_total = np.zeros((N**2,2), dtype=int)
        for j in range(N):
            if h[j//N][j%N] > 0:
                priority_total[(j)//N*(N) + (j)%N,0] = sum_1[(j)//N*(N) + (j)%N,0]
            else:
                priority_total[(j)//N*(N) + (j)%N,1] = -sum_1[(j)//N*(N) + (j)%N,0]
        return priority_total




#score: {'data2D.txt': 0.10980231481481495}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                if h[i][j] > 0:
                    total_spin += J[0][i][j]
                else:
                    total_spin -= J[1][i][j]
                priority_total[i*N+j] = [total_spin, 1 if h[i][j] > 0 else 0]
        return priority_total




#score: {'data2D.txt': -0.03746466049382716}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[(k%2)][site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, 0]
                else:
                    priority_total[i*N+j] = [-total_spin, 1]
        return priority_total




#score: {'data2D.txt': 0.10653935185185198}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priorities = []
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin = sum([h[site][k] for k in range(N)]) if h[i][j] > 0 else -sum([h[site][k] for k in range(N)])
            if h[i][j] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
    return priorities




#score: {'data2D.txt': -0.0006023148148148145}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [0 for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site_neighbor = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j] += state[site][j]
        priority_total = np.zeros((N**2,2), dtype=int)
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j]
            else:
                priority_total[j][1] = -total_spin[j]
        return priority_total




#score: {'data2D.txt': -0.00930077160493827}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j] += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i*N+j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i*N+j]
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,N,2))
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[i][site][:] += state[i][j]
        priority_total = np.zeros((N*N,2))
        for j in range(N**2):
            if h[j//N][j%N] > 0:
                priority_total[j][:] = total_spin[j//N][j%N]
            else:
                priority_total[j][:] = -1 * total_spin[j//N][j%N]
        return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N**2
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if k%2 == 0:
                        total_spin[i*N+j] += state[site][j]
                    else:
                        total_spin[i*N+j] -= state[site][j]
        for i in range(N**2):
            if h[int(i//N)][i%N] > 0:
                priorities.append((total_spin[i], 1))
            else:
                priorities.append((total_spin[i], -1))
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N**2
        for k in range(3):
            for i in range(N):
                site = (i + ((k-1)%2 - 1)) % N
                for j in range(N):
                    total_spin[i*N+j] += state[site][j]
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority_total[i][0] = total_spin[i]
            else:
                priority_total[i][1] = -1*total_spin[i]
        return priority_total




#score: {'data2D.txt': -0.0028939814814814813}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += h[i][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i][0], 1]
                else:
                    priority_total[i*N+j] = [-total_spin[i][0], -1]
        return [[p[0], 0] for p in priority_total]




#score: {'data2D.txt': 0.161848302469136}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        priority_total = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority_total.append([total_spin[site][0], 1])
                else:
                    priority_total.append([-total_spin[site][0], -1])
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    J_new = J.flatten()
    sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
    sum_2 = (np.prod(J_new[1::2], 0) - h).flatten()
    priority = np.column_stack((sum_1, -sum_2))
    return priority




#score: {'data2D.txt': 0.1647720679012351}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append([total_spin[0], 1])
                else:
                    priorities.append([-total_spin[0], -1])
        return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0020412037037037035}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][0] += state[site][j]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            if h[i][j] > 0:
                priority_total[(i*N+j), 0] = -total_spin[i][0]
            else:
                priority_total[(i*N+j), 1] = total_spin[i][0]
        return priority_total




#score: {'data2D.txt': -8.780864197530791e-05}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_list = [[0 for _ in range(2)] for _ in range(N*N)]
    total_spin = np.zeros((N,N), dtype=int)
    for i in range(N):
        for j in range(N):
            spin = -1 if h[i][j] > 0 else 1
            for k in range(3):
                site = (i + ((k-1)%2 - 1)) % N
                total_spin[site][0] += spin
            priority_total = np.zeros((N,2), dtype=int)
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[j][0] = total_spin[j][0]
                else:
                    priority_total[j][1] = -1*total_spin[j][0]
            for j in range(N):
                if h[i][j] > 0:
                    priority_list[i*N+j] = [priority_total[j][0], -1*priority_total[j][1]]
                else:
                    priority_list[i*N+j] = [-1*priority_total[j][0], priority_total[j][1]]
    return priority_list




#score: {'data2D.txt': -0.0006412037037037035}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return [[p[0], 0] for p in sorted(priorities, reverse=True)]




#score: {'data2D.txt': -0.00902453703703704}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = (-1 if h[i][j] > 0 else 1)
                total_spin[site][0] += state
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    total_spin[site][0]
                else:
                    total_spin[site][0] = -total_spin[site][0]
                priority_total[i*N+j] = [total_spin[site][0], 0]
        return priority_total




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    total_spin += J[k[0]][site][k[1]]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin, -1*total_spin]
                else:
                    priority[i*N+j] = [-1*total_spin, total_spin]
        return priority




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - N//2)) % N
        for k in [(-1,0),(0,-1),(1,0)]:
          total_spin[i*N+j][0] += J[k[0]][site][k[1]]
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          priority_total[i*N+j] = [total_spin[i*N+j][0],-1*total_spin[i*N+j][1]]
        else:
          priority_total[i*N+j] = [-1*total_spin[i*N+j][0],total_spin[i*N+j][1]]
    return priority_total




#score: {'data2D.txt': -0.000756327160493828}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(-1, 0), (0, -1), (1, 0)]:
                    total_spin[i*N+j][0] += J[k[0]][site][k[1]]
        priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[i*N+j][0], -1*total_spin[i*N+j][1]]
                else:
                    priority_total[i*N+j] = [-1*total_spin[i*N+j][0], total_spin[i*N+j][1]]
        return priority_total




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j][0] += h[site][j]
                if h[i][j] > 0:
                    priority_total = [total_spin[i*N+j][0], 1]
                else:
                    priority_total = [-total_spin[i*N+j][0], -1]
        return [[p[0], 0] for p in total_spin]




#score: {'data2D.txt': 0.1647720679012351}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = [0,0]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += h[site][j]
                if h[i][j] > 0:
                    priorities.append([total_spin[0], 1])
                else:
                    priorities.append([-total_spin[0], -1])
        return priorities




#score: {'data2D.txt': 0.0029705246913580246}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0 for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site*N+j] += spin
                if h[i][j] > 0:
                    priorities.append((total_spin[i*N+j], 1))
                else:
                    priorities.append((-total_spin[i*N+j], -1))
        return priorities




#score: {'data2D.txt': -0.1488837962962965}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [[a,b] for a,b in priorities]




#score: {'data2D.txt': -0.08998441358024678}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                if h[i][j] > 0:
                    total_spin += sum(1 - int(J_flatten[(i+x)*N+j]) for x in (-1,0,1) if (i+x)%N==i)
                    priorities.append((total_spin, 1))
                else:
                    total_spin -= sum(-int(J_flatten[(i+x)*N+j]) for x in (-1,0,1) if (i+x)%N==i)
                    priorities.append((total_spin, -1))
        return [p for p in priorities]




#score: {'data2D.txt': -0.01565138888888889}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_spin += J_flatten[(i+1)*N+j]
                else:
                    total_spin -= J_flatten[(i+1)*N+j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin += J_flatten[site*N+j]
                    else:
                        total_spin -= J_flatten[site*N+j]
                priority_total[(i*N+j),0] = total_spin
                priority_total[(i*N+j),1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0012399691358024687}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        total_spins = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = -1 if h[i][j] > 0 else 1
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J_flatten[site*N+j] * state
                priority_total = np.zeros((N**2,2), dtype=int)
                if h[i][j] > 0:
                    priority_total[(i*N+j),0] = total_spin
                else:
                    priority_total[(i*N+j),1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.0008794753086419755}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    state = 1 if h[i][j] > 0 else -1
                    total_spin[i*N+j][0] += state * sum(J[0][site][(k-1)%N] for _ in range(N))
                    total_spin[i*N+j][1] -= state * sum(J[1][site][(k-1)%N] for _ in range(N))
                if h[i][j] > 0:
                    total_spin[i*N+j][0] -= h[i][j]
                    total_spin[i*N+j][1] += h[i][j]
                else:
                    total_spin[i*N+j][0] += h[i][j]
                    total_spin[i*N+j][1] -= h[i][j]
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.001056327160493827}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in range(3):
                    state = 1 if h[i][j] > 0 else -1
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state
                    priority_total[i*N+j][0] += state * sum(J[0][site][(k-1)%N] for _ in range(N))
                    priority_total[i*N+j][1] -= state * sum(J[1][site][(k-1)%N] for _ in range(N))
                if h[i][j] > 0:
                    priority_total[i*N+j][0] -= h[i][j]
                    priority_total[i*N+j][1] += h[i][j]
                else:
                    priority_total[i*N+j][0] += h[i][j]
                    priority_total[i*N+j][1] -= h[i][j]
        return priority_total




#score: {'data2D.txt': 0.00021280864197530924}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                state = 1 if h[i][j] > 0 else -1
                total_spin[i*N+j][0] += state * sum(J[0][site][(k-1)%N] for k in range(3))
                total_spin[i*N+j][1] -= state * sum(J[1][site][(k-1)%N] for k in range(3))
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.12300046296296295}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i*N+j][0] += J[0][site][j]
                        total_spin[i*N+j][1] -= J[1][site][j]
                else:
                    for k in range(3):
                        site = (i + ((k-1)%2 - 1)) % N
                        total_spin[i*N+j][0] += J[1][site][j]
                        total_spin[i*N+j][1] -= J[0][site][j]
        priority_total = [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]
        return priority_total




#score: {'data2D.txt': -0.30461249999999934}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N, 2), dtype=int)
        for i in range(N):
            for j in range(N):
                site_sum = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if J[0][site][j] > 0:
                        site_sum += J[0][site][j]
                    else:
                        site_sum -= J[0][site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [site_sum, -1*site_sum]
                else:
                    priority_total[i*N+j] = [-1*site_sum, site_sum]
        return priority_total




#score: {'data2D.txt': -0.0756412037037037}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin[i*N+j][0] += J[0][site][j]
            total_spin[i*N+j][1] -= J[1][site][j]
        else:
          for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            total_spin[i*N+j][0] += -J[0][site][j]
            total_spin[i*N+j][1] -= J[1][site][j]
    priority_total = [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]
    return priority_total




#score: {'data2D.txt': -0.05119768518518522}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum([row_sum[k] * state[site][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0018550925925925922}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0,0] for _ in range(N**2)]
    total_spin = [0]*N
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[i] += h[site][j]
        if h[i][0] > 0:
            priority_total[i*N:(i+1)*N][0] = total_spin[i]
        else:
            priority_total[i*N:(i+1)*N][1] = -total_spin[i]
    for i in range(N**2):
        if h[(i//N)%N][(i%N)] > 0:
            priority_total[i][0] += total_spin[(i//N)%N]
        else:
            priority_total[i][1] -= total_spin[(i//N)%N]
    return priority_total




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [0]*N**2
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                for k in range(3):
                    site_nbr = (i + ((k-1)%2 - 1)) % N
                    total_spin[i*N+j] += h[site_nbr][j]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N**2):
            if h[(i//N)%N][(i%N)] > 0:
                priority_total[i][0] = total_spin[i]
            else:
                priority_total[i][1] = -total_spin[i]
        return priority_total




#score: {'data2D.txt': -0.0018550925925925922}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0,0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N:(i+1)*N][0] = total_spin[i]
            else:
                priority_total[i*N:(i+1)*N][1] = -total_spin[i]
        for i in range(N**2):
            if h[(i//N)%N][(i%N)] > 0:
                priority_total[i][0] += total_spin[(i//N)%N]
            else:
                priority_total[i][1] -= total_spin[(i//N)%N]
        return priority_total




#score: {'data2D.txt': 0.014753858024691358}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N**2,2), dtype=int)
        
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = sum([row_sum[k] * state[site][j-k%N] for k in range(min(j,N-1))])
                
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
                    
        return priority_total.tolist()




#score: {'data2D.txt': -0.009958796296296268}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum_1 = np.sum(J_new[0::2], axis=0)
        sum_2 = np.sum(J_new[1::2], axis=0)
        
        priority = np.zeros((N**2, 2))
        for i in range(N**2):
            if h[i//N][i%N] > 0:
                priority[i] = [sum_1 - sum_2, sum_1 + sum_2]
            else:
                priority[i] = [-sum_1 + sum_2, -sum_1 - sum_2]
        
        return(priority)




#score: {'data2D.txt': -0.07973935185185192}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site] += state[i][j]
                if h[i][j] > 0:
                    priorities.append((total_spin[i], 1))
                else:
                    priorities.append((-total_spin[i], -1))
        return priorities




#score: {'data2D.txt': -0.05084120370370372}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priorities = [[0 for _ in range(2)] for _ in range(N*N)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%2 - 1)) % N
                total_spin[site] += h[i][j]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priorities[i*N+j][0] = total_spin[(i + ((j-1)%2 - 1)) % N]
                else:
                    priorities[i*N+j][1] = -total_spin[(i + ((j-1)%2 - 1)) % N]
        return priorities




#score: {'data2D.txt': -0.0029955246913580245}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site][0] += 1 if h[i][j] > 0 else -1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[j][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[j][0]
        return [list(x) for x in priority_total]




#score: {'data2D.txt': -6.527777777777887e-05}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if h[i][j] > 0:
                        total_spin[i*N+j][0] += J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] -= J[1][site][(k-1)%N]
                    else:
                        total_spin[i*N+j][0] -= J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] += J[1][site][(k-1)%N]
                if h[i][j] > 0:
                    total_spin[i*N+j][0] -= h[i][j]
                    total_spin[i*N+j][1] += h[i][j]
                else:
                    total_spin[i*N+j][0] += h[i][j]
                    total_spin[i*N+j][1] -= h[i][j]
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 4.0277777777777636e-05}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0, 0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in range(3):
                    if k == 0:
                        total_spin[i*N+j][0] += J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] -= J[1][site][(k-1)%N]
                    elif k == 2:
                        total_spin[i*N+j][0] -= J[0][site][(k-1)%N]
                        total_spin[i*N+j][1] += J[1][site][(k-1)%N]
                if h[i][j] > 0:
                    total_spin[i*N+j][0] -= h[i][j]
                    total_spin[i*N+j][1] += h[i][j]
                else:
                    total_spin[i*N+j][0] += h[i][j]
                    total_spin[i*N+j][1] -= h[i][j]
        return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': 0.002587191358024691}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in range(3):
                if J[0][site][(k-1)%N] > 0:
                    total_spin[i*N+j][0] += 1
                else:
                    total_spin[i*N+j][0] -= 1
                if J[1][site][(k-1)%N] > 0:
                    total_spin[i*N+j][1] += 1
                else:
                    total_spin[i*N+j][1] -= 1
            if h[i][j] > 0:
                total_spin[i*N+j][0] -= h[i][j]
                total_spin[i*N+j][1] += h[i][j]
            else:
                total_spin[i*N+j][0] += h[i][j]
                total_spin[i*N+j][1] -= h[i][j]
    return [[total_spin[j][0], total_spin[j][1]] for j in range(N*N)]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_new = J.flatten()
        sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
        sum2 = (-np.prod(J_new[1::2], 0)).flatten()
        priority = np.column_stack((sum1, -sum1))
        return(priority)




#score: {'data2D.txt': 0.0010313271604938277}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            total_spin = 0
            for k in range(3):
                if J[0][site][(k-1)%N] > 0:
                    total_spin += 1
                else:
                    total_spin -= 1
                if J[1][site][(k-1)%N] > 0:
                    total_spin -= 1
                else:
                    total_spin += 1
            if h[i][j] > 0:
                priority_total[i*N+j, 0] = total_spin
            else:
                priority_total[i*N+j, 1] = -total_spin
    return priority_total




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return [p[:2] for p in priorities]




#score: {'data2D.txt': -0.1744359567901236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                state = (-1 if h[i][j] > 0 else 1)
                total_spin[site][0] += state
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin[site][0], 1]
                else:
                    priority_total[i*N+j] = [-total_spin[site][0], -1]
        return priority_total




#score: {'data2D.txt': -0.0010205246913580245}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    state = (i + ((k-1)%2 - 1)) % N
                    total_spin[state*N+j][0] += spin
                priority_total = np.zeros((N**2,2), dtype=int)
                if h[i][j] > 0:
                    priority_total[j*N+i][0] = total_spin[j*N+i][0]
                else:
                    priority_total[j*N+i][1] = -1*total_spin[j*N+i][0]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = [0,0]
                for k in range(3):
                    spin = -1 if h[i][j] > 0 else 1
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[0] += spin
                if h[i][j] > 0:
                    priority_list[i*N+j] = [total_spin[0], 0]
                else:
                    priority_list[i*N+j] = [0, -total_spin[0]]
        return priority_list




#score: {'data2D.txt': -0.09349027777777788}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in range(3):
                spin = 1 if h[i][j] > 0 else -1
                total_spin[i*N+j][0] += spin
                total_spin[i*N+j][1] -= spin * sum(J[0][site][(k-1)%N] for _ in range(N))
            if h[i][j] > 0:
                total_spin[i*N+j][0] -= h[i][j]
                total_spin[i*N+j][1] += h[i][j]
            else:
                total_spin[i*N+j][0] += h[i][j]
                total_spin[i*N+j][1] -= h[i][j]
    for j in range(N):
        if h[0][j] > 0:
            total_spin[j][0] = total_spin[j][0]
        else:
            total_spin[j][1] = -total_spin[j][0]
    return total_spin




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            site = (i // N) % N
            total_spin = 0
            for k in range(3):
                site_n = (site + ((k-1)%2 - 1)) % N
                total_spin += state[site_n][(i%N)]
            if h[i//N][i%N] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.018609413580246908}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            total_spin = [0,0]
            for k in range(3):
                site = (i // N + ((k-1)%2 - 1)) % N
                for j in range(N):
                    if h[site][j] > 0:
                        total_spin[0] += state[site][j]
                    else:
                        total_spin[1] -= state[site][j]
            priorities.append(total_spin)
        return priorities




#score: {'data2D.txt': 0.14675354938271623}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N**2):
            total_spin = 0
            for k in range(3):
                site = (i // N + ((k - 1) % 2 - 1)) % N
                total_spin += state[site][i % N]
            if h[i // N][i % N] > 0:
                priorities.append((total_spin, 1))
            else:
                priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0 for _ in range(2)] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N) + (i+N)*(j//N)) % N
            if h[i][j] > 0:
                total_spin[site][0] += 1
            else:
                total_spin[site][1] += 1
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[j][0]
            else:
                priority_total[i*N+j][1] = -total_spin[j][0]
    return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0018912037037037035}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        N2 = N*N
        priority_total = np.zeros((N2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = 0
                for k in range(3):
                    spin = -1 if h[site][j] > 0 else 1
                    site = (site + ((k-1)%2 - 1)) % N
                    total_spin += spin * h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j, 0] = total_spin
                else:
                    priority_total[i*N+j, 1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = np.zeros((N**2, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities[(i*N+j), 0] = total_spin
                else:
                    priorities[(i*N+j), 1] = -total_spin
        
        return priorities




#score: {'data2D.txt': -0.0034226851851851853}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_list = [[0 for _ in range(2)] for _ in range(N**2)]
        total_spin = [0 for _ in range(N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
                if h[i][j] > 0:
                    priority_list[i*N+j][0] = total_spin[i]
                else:
                    priority_list[i*N+j][1] = -total_spin[i]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                if h[i][j] > 0:
                    priority_list[i*N+j][0] += total_spin[i]
                else:
                    priority_list[i*N+j][1] -= total_spin[i]
        return priority_list




#score: {'data2D.txt': 0.010939660493827158}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': 0.15176033950617307}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site1 = (i + ((j-1)%N - 1)) % N
                total_spin = state[site1][j]
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        return priorities




#score: {'data2D.txt': 0.0622510802469136}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((total_spin, -1))
        return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin += state[site][j]
                    else:
                        total_spin -= state[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.0008072530864197533}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = [[0 for _ in range(2)] for _ in range(N*N)]
    for i in range(N):
        for j in range(N):
            if h[i][j] > 0:
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = [J[0][site][k-1] for k in range(3)]
                priority_total[i*N+j][0] = sum(total_spin)
                priority_total[i*N+j][1] = 0
            else:
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = [-J[1][site][k-1] for k in range(3)]
                priority_total[i*N+j][1] = sum(total_spin)
    return priority_total




#score: {'data2D.txt': -0.08785756172839512}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[k][site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin, 0]
                else:
                    priority_total[i*N+j] = [-total_spin, 1]
        return priority_total




#score: {'data2D.txt': -0.03811435185185185}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N,2), dtype=int)
    for i in range(N):
        for j in range(N):
            total_spin = sum([J[0][(i + ((k-1)%2 - 1)) % N][j] * (-1 if h[i][j] > 0 else 1) 
                              for k in range(3)])
            if h[i][j] > 0:
                priority_total[i*N+j] = [total_spin, 0]
            else:
                priority_total[i*N+j] = [-total_spin, 1]
    return priority_total




#score: {'data2D.txt': -0.13586311728395065}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site_sum = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += J[(k%2)][site][j]
                    if h[site][j] > 0:
                        site_sum -= 1
                    else:
                        site_sum += 1
                if h[i][j] > 0:
                    priority_total[i*N+j] = [total_spin + site_sum, 0]
                else:
                    priority_total[i*N+j] = [-total_spin - site_sum, 1]
        return priority_total




#score: {'data2D.txt': -0.003251697530864198}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0, 0] for _ in range(N**2)]
        total_spin = [0]*N
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i] += h[site][j]
            if h[i][0] > 0:
                priority_total[i*N:(i+1)*N][0] = total_spin[i]
            else:
                priority_total[i*N:(i+1)*N][1] = -total_spin[i]
        for i in range(N**2):
            site = (i // N + ((i % N-1) % N - 1)) % N
            if h[site//N][site%N] > 0:
                priority_total[i][0] += total_spin[site//N]
            else:
                priority_total[i][1] -= total_spin[site//N]
        return priority_total




#score: {'data2D.txt': 0.022993981481481476}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    total_spin = [[0,0] for _ in range(N)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            for k in range(3):
                total_spin[site][0] += -1 if h[i][j] > 0 else 1
    priority_total = [[0,0] for _ in range(N**2)]
    for i in range(N):
        for j in range(N):
            site = (i + ((j-1)%N - 1)) % N
            total_spin[site][0] += h[i][j]
            if h[i][j] > 0:
                priority_total[i*N+j][0] = total_spin[site][0]
            else:
                priority_total[i*N+j][1] = -total_spin[site][0]
    for j in range(N):
        if h[i][j] > 0:
            priority_total[j][0] = total_spin[j][0]
        else:
            priority_total[j][1] = -total_spin[j][0]
    return priority_total




#score: {'data2D.txt': 0.0336807098765432}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_total = [total_spin, 0]
                else:
                    priority_total = [0, -1*total_spin]
                priorities.append(priority_total)
        return priorities




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = [[0 for _ in range(2)] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                total_spin = 0
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.002946141975308642}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        total_spin = np.zeros((N,N), dtype=int)
        priority = np.zeros((N*N, 2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i][j] = h[site][j]
                
                if h[i][j] > 0:
                    total_spin[i][j] += J_flatten[(i+1)*N+j]
                else:
                    total_spin[i][j] -= J_flatten[(i+1)*N+j]
                    
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin[i][site] += J_flatten[site*N+j]
                    else:
                        total_spin[i][site] -= J_flatten[site*N+j]
                        
                priority[(i*N+j),0] = total_spin[i][j]
                priority[(i*N+j),1] = -total_spin[i][j]
        
        return priority




#score: {'data2D.txt': 0.16715077160493827}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_spin += J_flatten[(i+1)*N+j]
                else:
                    total_spin -= J_flatten[(i+1)*N+j]
                for k in range(2):
                    site = (i + ((k)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin += J_flatten[site*N+j]
                    else:
                        total_spin -= J_flatten[site*N+j]
                if h[i][j] > 0:
                    priority_total[(i*N+j),0] = total_spin
                    priority_total[(i*N+j),1] = -total_spin
                else:
                    priority_total[(i*N+j),0] = -total_spin
                    priority_total[(i*N+j),1] = total_spin
        return priority_total




#score: {'data2D.txt': -0.01565138888888889}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        J_flatten = J.flatten()
        priority_total = np.zeros((N**2,2), dtype=int)
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin = h[site][j]
                if h[i][j] > 0:
                    total_spin += J_flatten[(i+1)*N+j]
                else:
                    total_spin -= J_flatten[(i+1)*N+j]
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    if h[i][j] > 0:
                        total_spin += J_flatten[site*N+j]
                    else:
                        total_spin -= J_flatten[site*N+j]
                priority_total[(i*N+j),0] = total_spin
                priority_total[(i*N+j),1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%2 - 1)) % N
                total_spin += h[site][j]
                if h[i][j] > 0:
                    priority_total[(i*N+j), 0] = total_spin
                else:
                    priority_total[(i*N+j), 1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.20548379629629648}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priority_total = [(total_spin, -1), (total_spin+2*h[i][j], 1)]
                    priorities.append(sorted(priority_total)[0])
                else:
                    priority_total = [(-total_spin, 1), (-total_spin-2*h[i][j], -1)]
                    priorities.append(sorted(priority_total)[0])
        return priorities




#score: {'data2D.txt': -0.013887191358024692}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            for j in range(N):
                total_spin = 0
                site = (i + ((j-1)%N - N//2)) % N
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin
                else:
                    priority_total[i*N+j][1] = -total_spin
                for k in [(0,-1),(1,0),(0,1)]:
                    site = (i + ((k[1]-1)%2 - 1)) % N
                    if h[site][j] > 0:
                        total_spin += J[k[0]][site][j]
                    else:
                        total_spin -= J[k[0]][site][j]
                priority_total[i*N+j][0] = total_spin
                priority_total[i*N+j][1] = -total_spin
        return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0,0]
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin[0] += J[k[0]][site][k[1]]
                    total_spin[1] -= J[k[0]][site][k[1]]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin[0], -total_spin[1]]
                else:
                    priority[i*N+j] = [-total_spin[0], total_spin[1]]
        return priority




#score: {'data2D.txt': 0.0011862654320987673}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                total_spin = 0
                for k in [(0,-1),(1,0),(0,1)]:
                    total_spin += J[k[0]][site][k[1]]
                if h[i][j] > 0:
                    priority[i*N+j] = [total_spin, -1*total_spin]
                else:
                    priority[i*N+j] = [-1*total_spin, total_spin]
        return priority




#score: {'data2D.txt': 0.00829706790123457}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = np.zeros((N*N,2), dtype=int)
        priority_total = np.zeros((N*N,2), dtype=int)
        
        for i in range(N):
            for j in range(N):
                spin = -1 if h[i][j] > 0 else 1
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin[site*N+j][0] += spin
                priority_total[j][0] = total_spin[j][0]
                priority_total[j][1] = -1*total_spin[j][0]
        
        return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
    priorities = []
    for i in range(N):
        total_spin = [0,0]
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in [(0,-1),(0,1),(-1,0),(1,0)]:
                if J[k[0]][site][k[1]] > 0:
                    total_spin[0] += J[k[0]][site][k[1]]
                else:
                    total_spin[1] += -J[k[0]][site][k[1]]
        for j in range(N):
            if h[i][j] > 0:
                priorities.append((total_spin[0],1))
            else:
                priorities.append((-total_spin[1],-1))
    return priorities




#score: {'data2D.txt': 0.00021682098765431147}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
    priority_total = np.zeros((N*N, 2), dtype=int)
    for i in range(N):
        total_spin = [0]*2
        for j in range(N):
            site = (i + ((j-1)%N - N//2)) % N
            for k in [(0,-1),(0,1),(-1,0),(1,0)]:
                if J[k[0]][site][k[1]] > 0:
                    total_spin[0] += J[k[0]][site][k[1]]
                else:
                    total_spin[1] += -J[k[0]][site][k[1]]
            if h[i][j] > 0:
                priority_total[i*N+j] = total_spin
            else:
                priority_total[i*N+j] = [-x for x in total_spin]
    return priority_total




#score: {'data2D.txt': -0.0028631172839506096}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        priority_total = np.zeros((N*N,2), dtype=int)
        for i in range(N):
            total_spin = [0]*2
            for j in range(N):
                site = (i + ((j-1)%N - N//2)) % N
                for k in [(0,-1),(0,1),(-1,0),(1,0)]:
                    if J[k[0]][site][k[1]] > 0:
                        total_spin[0] += J[k[0]][site][k[1]]
                    else:
                        total_spin[1] += -J[k[0]][site][k[1]]
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j] = total_spin
                else:
                    priority_total[i*N+j] = [-x for x in total_spin]
        return priority_total




#score: {'data2D.txt': 0.005125154320987654}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            row_sum = [sum(state[i][:k]+state[i][k+1:]) for k in range(N)]
            for j in range(N):
                total_spin = sum([row_sum[k] * state[i][j-k%N] for k in range(min(j,N-1))])
                if h[i][j] > 0:
                    priorities.append((total_spin, -1))
                else:
                    priorities.append((total_spin, 1))
        return priorities




#score: {'data2D.txt': -0.06060324074074076}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        total_spin = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[i*N+j][0] += -1 if h[i][j] > 0 else 1
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N - 1)) % N
                total_spin[site][0] += h[i][j]
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[site][0]
                else:
                    priority_total[i*N+j][1] = -total_spin[site][0]
        for j in range(N):
            if h[i][j] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -total_spin[j][0]
        return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[sum(state[(i + ((k-1)%2 - 1)) % N][j] for k in range(3)) for j in range(N)] for i in range(N)]
        priority_total = [[0,0] for _ in range(N*N)]
        for i in range(N):
            for j in range(N):
                if h[i][j] > 0:
                    priority_total[i*N+j][0] = total_spin[i][j]
                else:
                    priority_total[i*N+j][1] = -total_spin[i][j]
        return [list(row) for row in priority_total]




#score: {'data2D.txt': 0.1724029320987649}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
        priority_total = [[0,0] for _ in range(N**2)]
        for i in range(N):
            for j in range(N):
                site = (i + (j % 2) - 1) % N
                total_spin[i*N+j][0] += state[site][j]
                total_spin[i*N+j][1] -= state[i][j]
        for j in range(N**2):
            if h[j//N][j%N] > 0:
                priority_total[j][0] = total_spin[j][0]
            else:
                priority_total[j][1] = -1*total_spin[j][0]
        return priority_total




#score: {'data2D.txt': -0.12707237654321002}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N) % N
                total_spin = sum([state[i][k] if k == j else state[site][min(abs(k-j), N-abs(k-j))] for k in range(N)])
                if h[i][j] > 0:
                    priorities.append((total_spin, 1))
                else:
                    priorities.append((-total_spin, -1))
        
        return [priorities[i] for i in range(N**2)]




#score: {'data2D.txt': 0.007843981481481481}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
        state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
        priorities = []
        for i in range(N):
            for j in range(N):
                site = (i + ((j-1)%N) - N) % N
                total_spin = state[site][j]
                if h[i][j] > 0:
                    priority_total = total_spin
                else:
                    priority_total = -total_spin
                for k in range(3):
                    site = (i + ((k-1)%2 - 1)) % N
                    total_spin += state[site][j]
                if h[i][j] > 0:
                    priorities.append((priority_total, h[i][j]))
                else:
                    priorities.append((-priority_total, -h[i][j]))
        return [i for i in priorities]




