#score: {'data2D.txt': -0.27106867283950575}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.27106867283950575}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%N - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -1*total_spin[i][1]
    else:
      priority_total[i][1] = -1*total_spin[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [priority_total[i][j]]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] -= 1
    
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1) % N - 1)) % N
    total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i // N][i % N] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -total_spin[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
    total_spin[i][1 if h[site_nbr][i % N] > 0 else 0] += 1
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
    if h[i // N][i % N] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -1 * total_spin[i][0]
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2), dtype=float)
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin = np.sum([h[site_nbr][j] for site_nbr in site_nbrs]) + h[i][j]
      if h[i][j] > 0:
        priority_total[i*N+j, :] += [total_spin, -1]
      else:
        priority_total[i*N+j, :] -= [total_spin, 1]
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.15976805555555576}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] = total_spin[site]
      priority_total[i*N+j][1] = -1*total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.010939660493827158}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
  return [[total_spin[i][1], total_spin[i][0]] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    total_spin[i][0 if h[site_nbr//N][site_nbr%N] > 0 else 1] += 1
  for j in range(N**2):
    if h[j//N][j%N] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.1992748456790126}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N)) % N
    total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
  for j in range(N**2):
    priority_total[j][0 if h[j//N][j%N] > 0 else 1] = total_spin[j][0 if h[j//N][j%N] > 0 else 1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  priority_total = np.full((N2,2),-float('inf'))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N)
    for j in range(4):
      if j == 0: site_nbr = (site_nbr - 1) % N
      elif j == 1: site_nbr = (site_nbr + 1) % N
      elif j == 2: site_nbr = (site_nbr - N) % N
      else: site_nbr = (site_nbr + N) % N
      total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    if h[i // N][i % N] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -total_spin[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.15976805555555576}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -7.79320987654319e-05}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      for site_nbr in site_nbrs:
        total_spin[i*N+j][0] += J[site_nbr][i][j]
        total_spin[i*N+j][1] -= J[site_nbr][i][j]
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for sublist in priority_total for x in sublist]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [priority_total[i*N+j] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.15976805555555576}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.15976805555555576}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%N - N//2)) % N
    spin = -1 if h[i//N][i%N] > 0 else 1
    total_spin[i][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= total_spin[site][1]
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= total_spin[site][1]
        priority_total[i*N+j][1] += total_spin[site][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0006544753086419748}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  for i in range(N**2):
    spin = -1 if h[i//N][i%N] > 0 else 1
    total_spin[i][spin==1] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site//N][site%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
    else:
      priority_total[i][0] -= total_spin[i][0]
      priority_total[i][1] += total_spin[i][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[i][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for k in range(N**2):
    i = k // N
    j = k % N
    site = (i + ((k-1)%2 - 1)) % N
    total_spin = sum(h[site][jj] for jj in range(N) if abs(jj-j) == 1)
    priority_total[i][j][0 if h[i][j] > 0 else 1] = total_spin
  return [[-x[1], x[0]] for x in itertools.chain(*priority_total)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      priorities.append([priority_total[i//N][i%N][0], priority_total[i//N][i%N][1]])
    else:
      priorities.append([-x for x in priority_total[i//N][i%N]])
  return priorities




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority_total[:, 0] = sum_1
  priority_total[:, 1] = -sum_2
  return priority_total.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return priority




#score: {'data2D.txt': 0.0012797839506172846}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(4)]
      total_spin = sum(h[site][j] for site in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_sq = N**2
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.reshape(N_sq, 2)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4],0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4],0) + h).flatten()
  priority = np.column_stack((sum_1,-sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1

  for i in range(N**2):
    for k in range(3):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i] += h[site_nbr][i//N]
    
    if total_spin[i][0] > total_spin[i][1]:
      priority_total[i] = [total_spin[i][0], float('-inf')]
    else:
      priority_total[i] = [float('-inf'), -total_spin[i][1]]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0032652777777777775}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      site_nbr_spin = -1 if h[site_nbr][j] > 0 else 1
      total_spin[i*N+j][0] += site_nbr_spin * spin
      total_spin[i*N+j][1] += -site_nbr_spin * spin
      
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr1][j]
      total_spin[i*N+j][1] += J[i*N*j][i*N*(site_nbr1%N)+(site_nbr1//N)*N+j][i*N*(site_nbr2%N)+(site_nbr2//N)*N+j] if i==site_nbr1 or j==site_nbr1 else 0
      total_spin[i*N+j][0] += h[site_nbr2][j]
      total_spin[i*N+j][1] -= J[i*N*j][i*N*(site_nbr2%N)+(site_nbr2//N)*N+j][i*N*(site_nbr1%N)+(site_nbr1//N)*N+j] if i==site_nbr2 or j==site_nbr2 else 0
      priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
      for i in range(N**2):
        if total_spin[i][0] > total_spin[i][1]:
          priority_total[i][0] += total_spin[i][0]
          priority_total[i][1] -= total_spin[i][1]
        else:
          priority_total[i][0] -= total_spin[i][1]
          priority_total[i][1] += total_spin[i][0]
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0.0, float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin = sum([h[site_nbr][j] for site_nbr in site_nbrs]) + h[i][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      for x in site_nbrs:
        total_spin[i*N+j][0] += h[x][j]
        if h[x][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.22844367283950626}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(4)]
      total_spin = sum([h[site_nbr][j] for site_nbr in site_nbrs]) + h[i][j]
      if h[i][j] > 0:
        priority_total[i*N+j] = [total_spin, -1]
      else:
        priority_total[i*N+j] = [-total_spin, 1]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs = [(i+((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        for site_nbr in site_nbrs:
          priority_total[site_nbr][j][0] += J[i][j][site_nbr]
          priority_total[site_nbr][j][1] -= J[i][j][site_nbr]
      else:
        site_nbrs = [(i+((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        for site_nbr in site_nbrs:
          priority_total[site_nbr][j][0] -= J[i][j][site_nbr]
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.2756566358024687}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  
  # Compute total magnetism at each site
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = sum(1 if state[site_nbr][jj] == state[i][j] and abs(jj-j) <= 1 else 0 for jj in range(N) if abs(jj-j) == 1)
      priority_total[i*N+j][0 if h[i][j] > 0 else 1] = total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr1][j]
      total_spin[i*N+j][1] += J[i*N*j][i*N*(site_nbr1%N)+(site_nbr1//N)*N+j][i*N*(site_nbr2%N)+(site_nbr2//N)*N+j] if i==site_nbr1 or j==site_nbr1 else 0
      total_spin[i*N+j][0] += h[site_nbr2][j]
      total_spin[i*N+j][1] -= J[i*N*j][i*N*(site_nbr2%N)+(site_nbr2//N)*N+j][i*N*(site_nbr1%N)+(site_nbr1//N)*N+j] if i==site_nbr2 or j==site_nbr2 else 0
      priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
      for i in range(N**2):
        if total_spin[i][0] > total_spin[i][1]:
          priority_total[i][0] += total_spin[i][0]
          priority_total[i][1] -= total_spin[i][1]
        else:
          priority_total[i][0] -= total_spin[i][1]
          priority_total[i][1] += total_spin[i][0]
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  priority_total = [[float('-inf'),float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        spin = -1
      else:
        spin = 1
      
      site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
      priority_total[i*N+j][0] += spin * (1 + site_nbr_spin)
      priority_total[i*N+j][1] += -spin * (1 + site_nbr_spin)
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  priority_total = np.full((N2,2),-float('inf'))
  
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  
  priority = np.column_stack((sum_1, -sum_2))
  
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.0012797839506172846}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(4)]
      total_spin = sum(h[site][j] for site in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.09323904320987662}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(4)]
      total_spin = sum(h[site][j] for site in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
  
  for i, j in itertools.product(range(N), range(N)):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
    for site in site_nbrs:
      if h[site][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.06200231481481484}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j] += h[site][j]
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] = total_spin[site]
      priority_total[i*N+j][1] = -total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+((j-k)%2)-1)%N][k] for k in range(max(0,j-1), min(j+2,N))]) for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += total_spin[site_nbr][j]
        priority_total[i][j][1] -= total_spin[site_nbr][j]
      else:
        priority_total[i][j][0] -= total_spin[site_nbr][j]
  return [[x[0], x[1]] for sublist in priority_total for x in sublist]




#score: {'data2D.txt': 0.15976805555555576}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N**2
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.007382561728395061}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0 if h[site_nbr][j] > 0 else 1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    if h[int(i//N)][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = total_spin[i][1]
  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i]]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  sum_1 = np.prod(J[::4].flatten(), 0) + h.flatten()
  sum_2 = np.prod(J[1::4].flatten(), 0) + h.flatten()
  return np.column_stack((sum_1, -sum_2)).reshape(N2,2)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site = (i + ((int((i/N)%N) - 1)) % N)
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.31878348765432046}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      total_spin = [0,0]
      for site_nbr in site_nbrs:
        total_spin[0] += J[site_nbr][i][j]
        total_spin[1] -= J[site_nbr][i][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -total_spin[0]
        priority_total[i*N+j][1] = total_spin[1]
      else:
        priority_total[i*N+j][0] = total_spin[0]
        priority_total[i*N+j][1] = -total_spin[1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+((k-1)%2 - 1)) % N for k in range(4) if abs(k-j) <= 1]
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = sum(h[k][l] for l, k in [(site_nbrs[r], i) for r in range(len(site_nbrs))])
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[i // N][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.0006544753086419748}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  for i in range(N**2):
    spin = -1 if h[i//N][i%N] > 0 else 1
    total_spin[i][spin==1] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site//N][site%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
    else:
      priority_total[i][0] -= total_spin[i][0]
      priority_total[i][1] += total_spin[i][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    site_nbrs = [(i + ((j-1)%N - N//2)) % N for j in range(N)]
    for k, (site, spin) in enumerate(zip(site_nbrs, state[i])):
      if h[site][k] > 0:
        priority_total[i*N+k][0] += spin
        priority_total[i*N+k][1] -= -spin
      else:
        priority_total[i*N+k][0] -= spin
        priority_total[i*N+k][1] += -spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.14150108024691338}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = [[0,0] for _ in range(N2)]
  
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      if k == 0 or k == 3:
        site_nbr = (i + ((j-1)%2 - 1)) % N
      else:
        site_nbr = (i + ((k-1)%N - N//2)) % N
      
      total_spin[i*N+j] += h[site_nbr][j]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      priority_total[i*N+j][0] = total_spin[i*N+j]
    else:
      priority_total[i*N+j][1] = -total_spin[i*N+j]
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.14787854938271625}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      site_nbr_h = [h[site][j] for site in site_nbrs]
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += sum(site_h > 0 for site_h in site_nbr_h)
        total_spin[i*N+j][1] -= len([site_h for site_h in site_nbr_h if site_h > 0])
      else:
        total_spin[i*N+j][0] -= len([site_h for site_h in site_nbr_h if site_h > 0])
        total_spin[i*N+j][1] += sum(site_h > 0 for site_h in site_nbr_h)
  
  return np.array(total_spin).tolist()




#score: {'data2D.txt': 0.0011143518518518527}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1, (j+1)%N, i-(j%N)//N, i+(N-j%N)//N]]
      
      total_spin = sum(h[site][j] for site in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr*N+(j%N)][0]
      else:
        priority_total[i*N+j][1] -= total_spin[site_nbr*N+(j%N)][0]
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      total_spin[i*N+j][1 if any(h[s][j] > 0 for s in site_nbrs) else 0] += 1
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      if any(h[s][j] > 0 for s in site_nbrs):
        priority_total[i*N+j][0] = sum(total_spin[k][0] for k in site_nbrs)
      else:
        priority_total[i*N+j][1] = -sum(total_spin[k][0] for k in site_nbrs)
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::2], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      if all(h[s][j] > 0 for s in site_nbrs):
        priority_total[i*N+j][0] += sum(-1 if h[s][j] > 0 else 1 for s in site_nbrs)
        priority_total[i*N+j][1] -= len([s for s in site_nbrs if h[s][j] > 0])
      elif all(h[s][j] < 0 for s in site_nbrs):
        priority_total[i*N+j][0] -= sum(1 if h[s][j] > 0 else -1 for s in site_nbrs)
        priority_total[i*N+j][1] += len([s for s in site_nbrs if h[s][j] < 0])
      else:
        total_spin = [sum(-1 if h[s][j] > 0 else 1 for s in site_nbrs)]
        for _ in range(N):
          site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
          if all(h[s][j] > 0 for s in site_nbrs):
            total_spin[0] += sum(-1 if h[s][j] > 0 else 1 for s in site_nbrs)
            priority_total[i*N+j][0] = total_spin[0]
          elif all(h[s][j] < 0 for s in site_nbrs):
            total_spin[0] -= sum(1 if h[s][j] > 0 else -1 for s in site_nbrs)
            priority_total[i*N+j][1] = -total_spin[0]
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i // N + ((k-1)%2 - 1)) % N for k in range(4)]
    for j in range(N):
      if h[i//N][j] > 0:
        total_spin[i][1] += 1
        total_spin[i][0] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.24602422839506097}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[::N*N+N//2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[::N*N+N//4], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  J_new = J.flatten()
  sum_1 = np.prod(J_new[0::4], 0) + h.flatten()
  sum_2 = np.prod(J_new[1::4], 0) + h.flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.reshape(N*N, 2)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  sum_1 = (np.prod(J[::4,:,:].flatten(),axis=0) + h.flatten()).flatten()
  sum_2 = (np.prod(J[1::4,:,:].flatten(),axis=0) + h.flatten()).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return([list(x) for x in priority])




#score: {'data2D.txt': -7.79320987654319e-05}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      for site_nbr in site_nbrs:
        total_spin[i*N+j][0] += J[site_nbr][i][j]
        total_spin[i*N+j][1] -= J[site_nbr][i][j]
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        for k in site_nbrs:
          if h[k][j] > 0:
            total_spin[i*N+j][0] += 1
            total_spin[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for k in range(3)]
    for k, site_nbr in enumerate(site_nbrs):
      if h[site_nbr][k] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority.tolist())




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.03972854938271592}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[i // N][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total = [[x[0], x[1]] for x in total_spin]
    else:
      priority_total = [[-y[0], -y[1]] for y in total_spin]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[i // N][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum_2 = (np.prod(np.flipud(J_new)[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(np.concatenate((J_new[1::4], J_new[3::4])), 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.22836435185185164}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      total_spin = sum([h[s][j] for s in site_nbrs])
      if any(h[s][j] > 0 for s in site_nbrs):
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      for s in site_nbrs:
        if h[s][(i+N*s%N)//N] == j+s%N:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': -0.009595524691358026}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (i-1)%N, (i+1)%N]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      priority_total[i*N+j] = [total_spin, -total_spin]
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for site_nbr in range(N**2):
    site_i, site_j = divmod(site_nbr, N)
    if h[site_i][site_j] > 0:
      priority_total[site_nbr][0] += 1
      priority_total[site_nbr][1] -= 1
    else:
      neighbor_sites = [(i, j) for i in range(N) for j in range(N) if abs(i-site_i)+abs(j-site_j)==1]
      spin_sum = sum(state[neighbor_i][neighbor_j] for neighbor_i, neighbor_j in neighbor_sites)
      priority_total[site_nbr][0] -= spin_sum
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4],0)+h).flatten()
  sum_2 = (np.prod(J_new[1::4],0)+h).flatten()
  priority = np.column_stack((sum_1,-sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'),float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      
      site_neighbors = [(i+(k-1)%2) % N for k in range(3)] if (i+j)%2 == 0 else [(i+(k-1)%2-1) % N for k in range(3)]
      
      for k in range(3):
        site_nbr_spin = -1 if h[site_neighbors[k]][j] > 0 else 1
        priority_total[i*N+j][0] += spin * (1 + site_nbr_spin)
        priority_total[i*N+j][1] -= spin * (1 + site_nbr_spin)
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  priority_total = [[float('-inf'),float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        spin = -1
      else:
        spin = 1
      
      site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
      priority_total[i*N+j][0] += spin * (1 + site_nbr_spin)
      priority_total[i*N+j][1] -= spin * (1 + site_nbr_spin)
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[i // N][i % N] > 0:
      priority_total[i//N][i%N][0] += 1
      priority_total[i//N][i%N][1] -= 1
    else:
      priority_total[i//N][i%N][0] -= 1
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      return [[priority_total[i//N][i%N][0], priority_total[i//N][i%N][1]] for i in range(N**2)]
    else:
      return [[-y[0], -y[1]] for y in [[priority_total[i//N][i%N][0], priority_total[i//N][i%N][1]] for i in range(N**2)]]
  return [[x[0], x[1]] for x in [[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for i in range(N**2) for x in [total_spin[i]]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1, (j+1)%N, i-(j%N)//N, i+(N-j%N)//N]]
      
      total_spin = sum(h[site][j] for site in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= len([_ for _ in site_nbrs if h[_][j] > 0])
      else:
        priority_total[i][j][0] -= 1
        priority_total[i][j][1] += len([_ for _ in site_nbrs if h[_][j] > 0])
  
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1, (j+1)%N, i-(j%N)//N, i+(N-j%N)//N]]
      
      total_spin[i*N+j][0] += sum(1 if h[site][j] > 0 else -1 for site in site_nbrs)
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
      priority_total[i*N+j][0] += total_spin[i*N+j][0]
      priority_total[i*N+j][1] -= total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0011143518518518527}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1, (j+1)%N, i-(j%N)//N, i+(N-j%N)//N]]
      
      total_spin = sum(h[site][j] for site in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2,2))
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.0004066358024691351}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, j+1))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      for site_nbr in site_nbrs:
        total_spin = h[site_nbr[0]][site_nbr[1]]
        priority_total[i*N+j][0 if total_spin > 0 else 1] += 1
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][site_nbr] > 0:
        priority_total[i*N+j][0] += state[site_nbr][j]
      else:
        priority_total[i*N+j][1] -= state[site_nbr][j]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += h[i][j]
        priority_total[i*N+j][1] -= h[i][j]
      else:
        priority_total[i*N+j][0] -= h[i][j]
        priority_total[i*N+j][1] += h[i][j]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x,y] for x,y in total_spin]




#score: {'data2D.txt': -0.29178348765432044}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, (j+1)%N))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      for site_nbr in site_nbrs:
        total_spin = h[site_nbr[0]][site_nbr[1]]
        priority_total[i*N+j][0 if total_spin > 0 else 1] += 1
      
      site_nbrs.sort()
      k = 0
      while k < len(site_nbrs):
        site = (i + ((site_nbrs[k][1]-1)%2 - 1)) % N
        spin = 1 if h[i][j] > 0 else -1
        total_spin += spin
        priority_total[i*N+j][0] = total_spin
        k += 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      total_spin = sum(h[site_nbr[0]][site_nbr[1]] if h[site_nbr[0]][site_nbr[1]] > 0 else -h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs)
      
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= total_spin
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.2801615740740732}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::N*N + N-1], 0) + h).flatten()
  sum_2 = (-np.prod(J_new[::N*N + N-2], 0)).flatten()
  priority = np.column_stack((sum_1, -sum_1))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf'),float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        spin = -1
      else:
        spin = 1
      
      site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
      total_spin[i*N+j][0] += spin * (1 + site_nbr_spin)
      total_spin[i*N+j][1] -= spin * (1 + site_nbr_spin)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = -total_spin[i*N+j][1]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.046519290123456826}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  priority_total = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total.append([total_spin[i][0], total_spin[i][1]])
    else:
      priority_total.append([-x for x in total_spin[i]])
  return priority_total




#score: {'data2D.txt': 0.03972854938271592}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[i // N][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total = [[x[0], x[1]] for x in total_spin]
    else:
      priority_total = [[-y[0], -y[1]] for y in total_spin]
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for k in range(N):
    site_nbr = (k + ((k-1)%N - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        priority_total[k*N+j][0] += 1
        priority_total[k*N+j][1] -= 1
      else:
        priority_total[k*N+j][0] -= 1
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009710030864197531}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site = (i + ((int((i/N)%2) - 1)) % N)
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for j in range(N):
    if h[j][0] > 0:
      total_spin = [sum(1 for k in range(N) if h[k][j] > 0), - sum(1 for k in range(N) if h[k][j] < 0)]
    else:
      total_spin = [-sum(1 for k in range(N) if h[k][j] > 0), sum(1 for k in range(N) if h[k][j] < 0)]
    for i in range(N):
      if h[i][j] > 0:
        priority_total[j*N+i][0] = total_spin[0]
      else:
        priority_total[j*N+i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    if h[int(i//N)][i%N] > 0:
      if total_spin[i][0] > total_spin[i][1]:
        priority_total[i][0] = total_spin[i][0]
        priority_total[i][1] = -total_spin[i][1]
      else:
        priority_total[i][0] = -total_spin[i][0]
        priority_total[i][1] = total_spin[i][1]
    else:
      if total_spin[i][0] > total_spin[i][1]:
        priority_total[i][0] = -total_spin[i][0]
        priority_total[i][1] = total_spin[i][1]
      else:
        priority_total[i][0] = total_spin[i][0]
        priority_total[i][1] = -total_spin[i][1]
  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i]]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    if h[int(i//N)][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = total_spin[i][1]
  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i]]]




#score: {'data2D.txt': -0.0022912037037037037}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(3)]
    for j, site_nbr in enumerate(site_nbrs):
      total_spin[i][0] += h[site_nbr][i%N]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
    else:
      priority_total[i][0] -= total_spin[i][1]
      priority_total[i][1] += total_spin[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  for i in range(N**2):
    spin = -1 if h[i//N][i%N] > 0 else 1
    total_spin[i][spin==1] += 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site//N][site%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
    else:
      priority_total[i][0] -= total_spin[i][0]
      priority_total[i][1] += total_spin[i][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  priority_total = np.full((N2,2),-float('inf'))
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr1][0] + total_spin[site_nbr2][0]
        priority_total[i*N+j][1] -= total_spin[site_nbr1][0] - total_spin[site_nbr2][0]
      else:
        priority_total[i*N+j][0] -= total_spin[site_nbr1][0] - total_spin[site_nbr2][0]
        priority_total[i*N+j][1] += total_spin[site_nbr1][0] + total_spin[site_nbr2][0]
  
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority.tolist())




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0, 0] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': 0.15976805555555576}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19400478395061746}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0011368827160493824}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      
      if h[i][j] > 0:
        total_spin[i*N+j, 0] += sum(h[site][j] for site in site_nbrs)
        total_spin[i*N+j, 1] -= sum(h[site][j] for site in site_nbrs)
      else:
        total_spin[i*N+j, 0] -= sum(h[site][j] for site in site_nbrs)
        total_spin[i*N+j, 1] += sum(h[site][j] for site in site_nbrs)
  
  return total_spin.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (i-1)%N, (i+1)%N]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      site = i*N+j
      priority_total[site][0] += total_spin
      priority_total[site][1] -= total_spin
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (i-1)%N, (i+1)%N]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      priority_total[i*N+j][1 if h[i][j] > 0 else 0] = total_spin
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.009595524691358026}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (i-1)%N, (i+1)%N]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      priority_total[i*N+j] = [total_spin, -total_spin]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(len(state[0])):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i][k%N] > 0:
        total_spin[i*N+k][1] += state[i][k]
      else:
        total_spin[i*N+k][0] -= state[i][k]
  priorities = [[total_spin[i][1], -total_spin[i][0]] for i in range(N**2)]
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site = (i + ((int((i/N)%N) - 1)) % N)
    spin = -1 if h[int(i/N)][i%N] > 0 else 1
    total_spin = [sum(1 for k in range(N) if h[k][site%N] > 0), - sum(1 for k in range(N) if h[k][site%N] < 0)]
    priorities.append([total_spin[0],-total_spin[0]])
  return priorities




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_sq = N ** 2
  priorities = np.full((N_sq, 2), -np.inf)
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      total_spin = np.zeros(2)
      for site_nbr in site_nbrs:
        total_spin[0] += J[site_nbr][i][j]
        total_spin[1] -= J[site_nbr][i][j]
      
      if h[i][j] > 0:
        priorities[i*N+j, 0] = total_spin[0]
        priorities[i*N+j, 1] = -total_spin[1]
      else:
        priorities[i*N+j, 1] = -total_spin[0]
  
  return priorities.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-j) <= 1 and (k-i) == 0]
      total_spin = [0, 0]
      for site_nbr in site_nbrs:
        total_spin[0] += J[site_nbr][i][j]
        total_spin[1] -= J[site_nbr][i][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[0]
        priority_total[i*N+j][1] = -total_spin[1]
      else:
        priority_total[i*N+j][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      total_spin = sum(h[site_nbr[0]][site_nbr[1]] if h[site_nbr[0]][site_nbr[1]] > 0 else -h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs)
      
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin = [[x[0], x[1]] for x in priority_total]
      else:
        total_spin = [[-y[0], -y[1]] for y in priority_total]
  return priority_total




#score: {'data2D.txt': 0.03972854938271592}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total = [[x[0], x[1]] for x in total_spin]
    else:
      priority_total = [[-y[0], -y[1]] for y in total_spin]
  return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      for s in site_nbrs:
        if h[s][(i+N*s%N)//N] == j+s%N:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (i-1)%N, (i+1)%N]]
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][(i+N*s%N)//N] == j+s%N else -1 for s in site_nbrs])
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= total_spin
  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = [(i + (k-1)%N) % N for k in [j-1,j+1]]
      for x in range(2):
        if h[site_nbr[0]][x] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  priorities = [[total_spin[i][1], -total_spin[i][0]] for i in range(N**2)]
  return priorities




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.03346774691358025}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.sum(h, axis=0)
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (i-1)%N, (i+1)%N]]
      total_spin_neighbors = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i*N+j] = [total_spin_neighbors + total_spin[j], -total_spin_neighbors - total_spin[j]]
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  return [total_spin[i*N+j] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][1] += 1
        total_spin[i*N+j][0] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[total_spin[i*N+j][1], -total_spin[i*N+j][0]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.1909066358024694}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
      priority_total[i*N+j][0] += site_spin * (1 + site_nbr_spin)
      priority_total[i*N+j][1] -= site_spin * (1 + site_nbr_spin)
      
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -priority_total[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -priority_total[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  priority_total = [[float('-inf'),float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
        priority_total[i*N+j][0] += 1 + site_nbr_spin
        priority_total[i*N+j][1] -= 1 - site_nbr_spin
      else:
        site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
        priority_total[i*N+j][0] -= 1 - site_nbr_spin
        priority_total[i*N+j][1] += 1 + site_nbr_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-N//2)) % N
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  priority_total = np.full((N2,2),-float('inf'))
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr1][0] + total_spin[site_nbr2][0]
        priority_total[i*N+j][1] -= total_spin[site_nbr1][0] - total_spin[site_nbr2][0]
      else:
        priority_total[i*N+j][0] -= total_spin[site_nbr1][0] - total_spin[site_nbr2][0]
        priority_total[i*N+j][1] += total_spin[site_nbr1][0] + total_spin[site_nbr2][0]
  
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  
  return [[x,y] for x,y in priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        total_spin = sum([J[i][j][site_nbr] for site_nbr in site_nbrs])
        priority_total[i][j][0] = total_spin
      else:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        total_spin = -sum([J[i][j][site_nbr] for site_nbr in site_nbrs])
        priority_total[i][j][1] = total_spin
  
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum(1 for k in range(N) if h[k][i] > 0) - sum(1 for k in range(N) if h[k][i] < 0) for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][site] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N**2):
    site = (i % N + ((int((i//N)%2) - 1)) % N)
    if h[i//N][i%N] > 0:
      priority_total[i//N][i%N][0] += 1
      priority_total[i//N][i%N][1] -= 1
    else:
      priority_total[i//N][i%N][0] -= 1
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin = [sum(1 for k in range(N) if h[k][j] > 0), - sum(1 for k in range(N) if h[k][j] < 0)]
      else:
        total_spin = [-sum(1 for k in range(N) if h[k][j] > 0), sum(1 for k in range(N) if h[k][j] < 0)]
      for k in range(N):
        site_nbrs = [(k + ((site-1)%2 - 1)) % N for s in range(3) if abs(s-site) <= 1 and (s-k) == 0]
        for site_nbr in site_nbrs:
          if h[site_nbr][j] > 0:
            priority_total[k][j][0] += J[k][j][site_nbr]
            priority_total[site_nbr][j][0] -= J[k][j][site_nbr]
          else:
            priority_total[k][j][1] -= J[k][j][site_nbr]
            priority_total[site_nbr][j][1] += J[k][j][site_nbr]
  return [[x[0], x[1]] for x in [priority_total[i//N][i%N] for i in range(N**2)]]




#score: {'data2D.txt': 0.00028132716049382743}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      total_spin[i*N+j][0 if sum(h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs) > 0 else 1] += len(site_nbrs)
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_up = np.sum([J_new[i-1] + J_new[i+1] if i % (N*N) < N else J_new[i-N] for i in range(1, N*N)], axis=0)
  sum_down = np.sum([-J_new[i-1] - J_new[i+1] if i % (N*N) < N else -J_new[i-N] for i in range(N*N-1, 0, -1)], axis=0)
  priority = np.column_stack((sum_up + h.flatten(), -sum_down - h.flatten()))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total[i][0] += state[site_nbr//N][site_nbr%N]
      priority_total[i][1] -= state[site_nbr//N][site_nbr%N]
    else:
      priority_total[i][0] -= state[site_nbr//N][site_nbr%N]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][state[site_nbr][j]] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = total_spin[i][1]
  return priority_total




#score: {'data2D.txt': -0.009595524691358026}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site = (i // N, i % N)
    site_nbrs = [(site[0] + ((k-1)%2 - 1)) % N for k in [site[1]-1, site[1]+1, (site[0]-1)%N, (site[0]+1)%N]]
    
    total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
    
    priority_total[i][0] = total_spin
    priority_total[i][1] = -total_spin
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  for k in range(3):
    site_nbr = (k % N)
    for i in range(N):
      for j in range(N):
        if (k-1)%2 == 0:
          site_nbr = (i + ((j-1)%2 - 1)) % N
        else:
          site_nbr = (i + ((j+1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
  for i in range(N**2):
    if h[int(i/N)][int(i%N)] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -total_spin[i][0]
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (i-1)%N, (i+1)%N]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = [[float('inf'), float('-inf')] for _ in range(N2)]
  
  for i in range(N2):
    site_nbr = (i // N + ((i % N - 1) % N)) % N
    if h[i // N][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  priority_total = np.full((N2,2),-float('inf'))
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr1][0] + total_spin[site_nbr2][0]
        priority_total[i*N+j][1] -= total_spin[site_nbr1][0] - total_spin[site_nbr2][0]
      else:
        site_nbr3 = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[i*N+j][0] += h[site_nbr3][j]
          total_spin[i*N+j][1] -= h[site_nbr3][j]
        else:
          total_spin[i*N+j][0] -= h[site_nbr3][j]
          total_spin[i*N+j][1] += h[site_nbr3][j]
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  for i in range(N**2):
    i_index = i // N
    j_index = i % N
    site_nbr = (i_index + ((j_index-1)%N - 1)) % N
    state[i_index][j_index] += h[site_nbr//N][site_nbr%N]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += state[i][j]
        priority_total[i*N+j][1] -= state[i][j]
      else:
        priority_total[i*N+j][0] -= state[i][j]
        priority_total[i*N+j][1] += state[i][j]
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for k in range(N**2):
    i = k // N
    j = k % N
    site_nbr = (i + ((k-1)%2 - 1)) % N
    total_spin = sum(h[site_nbr][jj] for jj in range(N) if abs(jj-j) == 1)
    priority_total[i][j][0 if h[i][j] > 0 else 1] = max(-total_spin, float('-inf'))
  return [[-x[1], x[0]] for x in itertools.chain(*priority_total)]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_up = np.sum([J_new[i-1] + J_new[i+1] if i % (N*N) < N else J_new[i-N] for i in range(1, N*N)], axis=0)
  sum_down = np.sum([-J_new[i-1] - J_new[i+1] if i % (N*N) < N else -J_new[i-N] for i in range(N*N-1, 0, -1)], axis=0)
  priority = np.column_stack((sum_up + h.flatten(), -sum_down - h.flatten()))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site_nbr][0]
      else:
        priority_total[i*N+j][1] = -total_spin[site_nbr][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i,j: ((i+j)%N - N//2) % N
  site_sum = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_sum[i*N+j][0] += 1
        site_sum[i*N+j][1] -= 1
      else:
        site_sum[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in site_sum]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.15976805555555576}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.15976805555555576}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum_2 = (np.prod(np.flipud(J_new)[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0,0] for _ in range(N)] for _ in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  for i in range(N**2):
    site = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      priority_total[site][i%N][0] = total_spin[i][0]
    else:
      priority_total[site][i%N][1] = -total_spin[i][0]
  
  return [[priority_total[j][k][0], priority_total[j][k][1]] for j in range(N) for k in range(N)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    spin = -1 if h[i//N][i%N] > 0 else 1
    total_spin[i][spin==1] += 1
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site//N][site%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
    else:
      priority_total[i][0] -= total_spin[i][0]
      priority_total[i][1] += total_spin[i][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.009595524691358026}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': -0.0017581790123456793}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = [[[0 for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      total_priority[i][j] = [total_spin, -total_spin]
  
  return [[int(x) for x in lst] for lst in [item for sublist in total_priority for item in sublist]]




#score: {'data2D.txt': 0.1909066358024694}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
      priority_total[i*N+j][0] += site_spin * (1 + site_nbr_spin)
      priority_total[i*N+j][1] -= site_spin * (1 + site_nbr_spin)
      
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -priority_total[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -priority_total[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  priority_total = [[float('-inf'),float('-inf')] for _ in range(N**2)]
  
  total_spin = [0, 0]
  
  for i in range(N):
    for j in range(N):
      site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1 + site_nbr_spin
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        priority_total[i*N+j][0] -= 1 - site_nbr_spin
        total_spin[0] -= 1
        total_spin[1] += 1
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': 0.0011881172839506174}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      spin_sum = sum(1 if state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin[i*N+j][0 if sum(h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs) > 0 else 1] += spin_sum

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+1,(j-1)%N) if i < N - 1 and j > 0 else None,
             (i,(j+1)%N) if j < N - 1 else None,
             (i-1,(j+1)%N) if i > 0 and j < N - 1 else None,
             (i,(j-1)%N) if j > 0 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin[i*N+j][0] += sum(state[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs)
      total_spin[i*N+j][1] -= len(site_nbrs) + 1
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin[i*N+j][0] += sum(1 if (h[site_nbr[0]][site_nbr[1]]) > 0 and state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin[i*N+j][1] -= len([1 if (h[site_nbr[0]][site_nbr[1]]) > 0 and state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs])
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  
  priority_total = [[0,0] for _ in range(N**2)]
  
  for j in range(N):
    if h[i][j] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0454538580246914}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -priority_total[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -priority_total[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0009850308641975304}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, j+1))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      for site_nbr in site_nbrs:
        total_spin[i][j] += h[site_nbr[0]][site_nbr[1]]
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[i][j]
      else:
        priority_total[j][1] = -1*total_spin[i][j]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority.tolist())




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.14771033950617304}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  # Calculate total spin for each site
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1

  # Calculate priority for each site
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = total_spin[i][1]

  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i]]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for site_nbrs in [(i, j) for i in range(N) for j in range(N)]:
    site_nbr = (site_nbrs[0] + ((site_nbrs[1]-1)%N - 1)) % N
    if h[site_nbrs[0]][site_nbrs[1]] > 0:
      priority_total[site_nbrs[0]*N+site_nbrs[1]][0] += 1
      priority_total[site_nbrs[0]*N+site_nbrs[1]][1] -= 1
    else:
      priority_total[site_nbrs[0]*N+site_nbrs[1]][0] -= 1
  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i]]]




#score: {'data2D.txt': 0.0006544753086419748}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  for i in range(N**2):
    spin = -1 if h[i//N][i%N] > 0 else 1
    total_spin[i][spin==1] += 1

  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site//N][site%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
    else:
      priority_total[i][0] -= total_spin[i][0]
      priority_total[i][1] += total_spin[i][1]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - (j//N)%2)) % N for i in range(N) for j in range(N)]
  for i in range(N**2):
    spin = -1 if h[i//N][i%N] > 0 else 1
    site = site_nbrs[i]
    total_spin = sum([h[site//N][j] for j in range(N) if abs((site-j)%N) <= 1])
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin
      priority_total[i][1] -= -total_spin
    else:
      priority_total[i][0] -= total_spin
      priority_total[i][1] += total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0009254629629629627}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
            -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  total_spin = [0, 0]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-j) <= 1 and (k-i) == 0]
      total_spin[0] += sum([J[site][i][j] for site in site_nbrs])
      total_spin[1] -= sum([J[site][i][j] for site in site_nbrs])
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[0]
        priority_total[i*N+j][1] = -total_spin[1]
      else:
        priority_total[i*N+j][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::2], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      total_spin = [sum(J[site][i][j] for site in site_nbrs), 
              -sum(J[site][i][j] for site in site_nbrs)]
      priority_total[i*N+j][0] = sum([h[s][j] if state[s][j] == 1 else -h[s][j] for s in range(N)])
      priority_total[i*N+j][1] = -sum([h[s][j] if state[s][j] == 1 else -h[s][j] for s in range(N)])
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
              -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[0]
        priority_total[i*N+j][1] = -total_spin[1]
      else:
        priority_total[i*N+j][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      spin_sum = sum(1 if state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin = spin_sum
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin
      else:
        priority_total[i][j][1] = -total_spin

  return [[x[0], x[1]] for x in [x for sublist in priority_total for x in sublist]]




#score: {'data2D.txt': -0.2075165123456791}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) for i in range(N) for j in range(N)]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += sum([1 if state[site_nbr][jj] == 1 else -1 for jj in range(N)])
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= sum([1 if state[site_nbr][jj] == 1 else -1 for jj in range(N)])
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for k in range(4):
    site_nbrs = [(i + ((k-1)%2 - (k//2))) % N for i in range(N)]
    for i in range(N**2):
      site = site_nbrs[i//N]
      if h[site][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0013390432098765452}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - 1)) % N
        priority_total[i*N+j][0] += J[site_nbr//N][site_nbr%N][2]
        priority_total[i*N+j][1] -= J[site_nbr//N][site_nbr%N][3]
      else:
        site_nbr = (i + ((j-1)%N - 1)) % N
        priority_total[i*N+j][0] -= J[site_nbr//N][site_nbr%N][2]
        priority_total[i*N+j][1] += J[site_nbr//N][site_nbr%N][3]
  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i]]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1

      priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][1]]
  return priority_total




#score: {'data2D.txt': -0.0011007716049382717}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') if i % N == j else float('inf') for j in range(2)] for i in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.0006538580246913581}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N//2
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N_half)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N_half)) % N
      if h[site_nbr//N][site_nbr%N] > 0:
        total_spin[i*N+j][0] += state[site_nbr//N][j]
      else:
        total_spin[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.0454538580246914}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += (site_spin*site_nbr_spin)*2
        total_spin[i*N+j][1] -= (site_spin*site_nbr_spin)*2
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j][0] = -total_spin[i*N+j][1]
      else:
        total_spin[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.0454538580246914}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = 0
      for k in site_neighbors(i,j):
        site_nbr_spin = -1 if h[k//N][k%N] > 0 else 1
        total_spin += site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
      
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -priority_total[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -priority_total[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.01645015432098765}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] = total_spin[site*N+(j-1)%N][0]
        total_spin[i*N+j][1] -= total_spin[site*N+(j-1)%N][1]
      else:
        total_spin[i*N+j][1] = -total_spin[site*N+(j-1)%N][0]
        total_spin[i*N+j][0] -= total_spin[site*N+(j-1)%N][1]
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[p[0], p[1]] for p in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      total_spin = sum([J[i][j][site_nbr] for site_nbr in site_nbrs])
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[site][j][0] += 1
        priority_total[site][j][1] -= 1
      else:
        priority_total[i][j][1] = -total_spin
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[site][j][0] -= 1
        priority_total[site][j][1] += 1
  
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.0015658950617283946}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        for site_nbr in site_nbrs:
          total_spin[i*N+j][0] += J[site_nbr][i][j]
          total_spin[i*N+j][1] -= J[site_nbr][i][j]
      else:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        for site_nbr in site_nbrs:
          total_spin[i*N+j][0] -= J[site_nbr][i][j]
          total_spin[i*N+j][1] += J[site_nbr][i][j]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.07303379629629636}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0.0 for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin = np.sum([h[site_nbr][j] for site_nbr in site_nbrs]) + h[i][j]
      if h[i][j] > 0:
        priority_total[i][j][0] += total_spin
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= total_spin
        priority_total[i][j][1] += 1
  return [[x[0], x[1]] for x in [y for row in priority_total for y in row]]




#score: {'data2D.txt': -0.0022912037037037037}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(3)]
    for j, site_nbr in enumerate(site_nbrs):
      total_spin[i][0] += h[site_nbr][i%N]
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
    else:
      priority_total[i][0] -= total_spin[i][1]
      priority_total[i][1] += total_spin[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
           -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site = (i // N) + ((i % N - 1) % N)
    spin = -1 if h[i//N][i%N] > 0 else 1
    total_spin[i][spin==1] += 1
  
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
      priority_total[i*N+j][0] += total_spin[i*N+j][spin==1] * (1 + site_nbr_spin)
      priority_total[i*N+j][1] -= total_spin[i*N+j][spin==1] * (1 + site_nbr_spin)
  
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = -priority_total[i][1]
    else:
      priority_total[i][1] = -priority_total[i][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0007131172839506175}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  site_nbr = [i for i in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    for n in range(N):
      m = (i//N)*N+n
      if ((n//N)%N==((i//N-1)%N+N//2)%N and n%N==(i%N)):
        total_spin[i][0] += sum(J_new[k]*J_new[k+1] for k in range(N**2) if (k==m*N+n or k==(m+1)*N+n))
        total_spin[i][1] -= sum(J_new[k]*J_new[k-1] for k in range(N**2) if 0<k<(i%N)+1)
      elif ((n//N)%N==(i//N)) and (n%N==0 or n%N==(i%N)):
        total_spin[i][0] -= sum(J_new[k]*J_new[k+1] for k in range(N**2) if (k==m*N+n or k==(m+1)*N+n))
        total_spin[i][1] += sum(J_new[k]*J_new[k-1] for k in range(N**2) if 0<k<(i%N)+1)
      else:
        total_spin[i][0] -= sum(J_new[k]*J_new[k+1] for k in range(N**2) if (k==m*N+n or k==(m+1)*N+n))
        total_spin[i][1] += sum(J_new[k]*J_new[k-1] for k in range(N**2) if 0<k<(i%N)+1)
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(i+(j-1)%N-N//2)%N if (j+1)%N == i and i > 0 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += len(site_nbrs)
        total_spin[i*N+j][1] -= len([site_nbr for site_nbr in site_nbrs])
      else:
        total_spin[i*N+j][0] -= len([site_nbr for site_nbr in site_nbrs])
        total_spin[i*N+j][1] += len(site_nbrs)
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.34188472222222116}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[::N**2//4], 0) + h).flatten()
  sum2 = (np.prod(J_new[N**2//4:2*N**2//4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': 0.0454538580246914}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      neighbor_spins = []
      for x, y in [(-1, 0), (1, 0), (-1, -1), (-1, 1)]:
        site_nbr_i = (i + y) % N
        site_nbr_j = (j + x) % N
        if h[site_nbr_i][site_nbr_j] > 0:
          neighbor_spin = -1
        else:
          neighbor_spin = 1
        neighbor_spins.append(site_spin * neighbor_spin)
      
      for k in range(len(neighbor_spins)):
        priority_total[i*N+j][0] += sum(neighbor_spins[:k+1])
        priority_total[i*N+j][1] -= sum(neighbor_spins[:k+1])
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -priority_total[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -priority_total[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      
      total_spin = [sum(J[site][int(i/N)][j] for site in site_nbrs), 
              -sum(J[site][int(i/N)][j] for site in site_nbrs)]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
      else:
        priority_total[i*N+j][1] -= total_spin[0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
            -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      total_spin = [sum(J[site][int(i/N)][j] for site in site_nbrs), 
              -sum(J[site][int(i/N)][j] for site in site_nbrs)]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
      else:
        priority_total[i*N+j][1] -= total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009595524691358026}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      priority_total[i*N+j][0] = max(total_spin, priority_total[i*N+j][0])
      priority_total[i*N+j][1] = min(-total_spin, priority_total[i*N+j][1])
      
  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site_nbr][0]
      else:
        priority_total[i*N+j][1] = -total_spin[site_nbr][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr][0]
      else:
        priority_total[i*N+j][1] = -total_spin[site_nbr][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          total_spin[i*N+j] += h[site_nbr][j]
        return [total_spin[i*N+j] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N**2):
    site = (i // N, i % N)
    site_nbrs = [(site[0] + ((k-1)%2 - 1)) % N for k in [site[1]-1, site[1]+1, (site[0]-1)%N, (site[0]+1)%N]]

    total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])

    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin
    else:
      priority_total[i][1] = -total_spin

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.009595524691358026}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1, (i-1)%N, (i+1)%N]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.reshape(-1,4).T.flatten()
  sum_1 = (np.prod(J_new[::2],0)+h).flatten()
  sum_2 = (-np.prod(J_new[1::2],0)).flatten()
  return np.column_stack((sum_1,-sum_1))




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  for i in range(N**2):
    site = (i // N + ((i % N - 1) % N - N//2)) % N
    if h[site][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.0008924382716049379}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  sum_1 = np.prod(J_flat[::4], 0) + h.flatten()
  sum_2 = np.prod(np.flipud(J_flat)[1::4], 0) - h.flatten()
  site_weights = (sum_1 + sum_2).reshape((N, N), order='F')
  priority_total = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_weights[i][j] += 1
        priority_total[i][j][0] -= 1
      else:
        site_weights[i][j] -= 1
        priority_total[i][j][1] += 1
  return priority_total.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[p[0], -p[1]] for p in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = np.column_stack((total_spin[:, 0], -total_spin[:, 1]))
  return priority_total.tolist()




#score: {'data2D.txt': -0.0004782407407407405}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin, total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12275601851851867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[0 for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      spin_sum = sum(1 if state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      
      total_spin = spin_sum
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin
      else:
        priority_total[i][j][1] = -total_spin

  return [[x[0], x[1]] for x in itertools.chain(*priority_total)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      spin_sum = sum(1 if state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin[i][j][0 if sum(h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs) > 0 else 1] += spin_sum
      
  return [[x[0], x[1]] for x in [list(y) for y in itertools.chain(*total_spin)]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3344081790123447}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int(j/N)][0] += 1
      else:
        total_spin[i*N+j][1] -= 1
        total_spin[site_nbr*N+int(j/N)][1] -= 1
  return [[total_spin[i*N+j][0], -total_spin[i*N+j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    site = (i + ((j-1)%N - N//2)) % N
    if h[i][j] > 0:
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.16469861111111134}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0.0, 0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      for k, site_nbr in enumerate(site_nbrs):
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1*(k%2-0.5)
        else:
          priority_total[i*N+j][0] -= 1
      for k, site_nbr in enumerate(site_nbrs):
        if h[i][site_nbr] > 0:
          priority_total[i*N+j][0] += 1*(k%2-0.5)
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum_3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum_4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2)) 
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [[-sum(1 for k in range(N) if abs(i-k)>0 and h[k][j] > 0), sum(1 for k in range(N) if abs(i-k)>0 and h[k][j] < 0)] 
      for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.0454538580246914}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for k in site_neighbors(i,j):
        site_nbr_spin = -1 if h[k//N][k%N] > 0 else 1
        total_spin += site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0454538580246914}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = 0
      for k in site_neighbors(i,j):
        site_nbr_spin = -1 if h[k//N][k%N] > 0 else 1
        total_spin += site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
      
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -priority_total[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -priority_total[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0454538580246914}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = 0
      for k in site_neighbors(i,j):
        site_nbr_spin = -1 if h[k//N][k%N] > 0 else 1
        total_spin += site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0.0, 0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.06606064814814817}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0.0, 0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)] + [(i + ((k-1)%2 - 1)) % N for k in range(i, N)]
      total_spin = [0, 0]
      for site_nbr in site_nbrs:
        if h[site_nbr][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
        if j < N - 1 and h[i][j + 1] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        elif j < N - 1 and h[i][j + 1] <= 0:
          total_spin[0] -= 1
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += total_spin[site_nbr1][0] + total_spin[site_nbr2][0]
        priority_total[i*N+j][0] = (total_spin[site_nbr1][0] + total_spin[site_nbr2][0])
      else:
        total_spin[i*N+j][0] -= total_spin[site_nbr1][0] - total_spin[site_nbr2][0]
        priority_total[i*N+j][0] = -(total_spin[site_nbr1][0] - total_spin[site_nbr2][0])
      
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': 0.12275601851851867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf'), float('inf')] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0017581790123456793}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin[i*N+j][0] += sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      total_spin[i*N+j][1] -= sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])

  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': 0.12275601851851867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i*N+j][0] = max(total_spin + state[i][j], priority_total[i*N+j][0])
      priority_total[i*N+j][1] = min(-total_spin, priority_total[i*N+j][1])
      
  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': 0.12275601851851867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      priority_total[i*N+j][0] = max(total_spin + state[i][j], priority_total[i*N+j][0])
      priority_total[i*N+j][1] = min(-total_spin, priority_total[i*N+j][1])

  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': 0.12275601851851867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[0 for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      total_spin = [sum(J[site][i][j] for site in site_nbrs), 
             -sum(J[site][i][j] for site in site_nbrs)]
      priority_total[i*N+j][0] += sum([h[s][j] if state[s][j] == 1 else -h[s][j] for s in range(N)])
      priority_total[i*N+j][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      total_spin = sum(h[site_nbr[0]][site_nbr[1]] if h[site_nbr[0]][site_nbr[1]] > 0 else -h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs)
      
      priority_total[i][j][0] += total_spin
      priority_total[i][j][1] -= total_spin
      
  return [[x[0], x[1]] for x in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0017581790123456793}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2), dtype=int)

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      priority_total[i*N+j] += [total_spin + (h[i][j] > 0), -total_spin]

  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0 for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
        priority_total[i][j][1] += 1
        
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
          -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.11083132716049394}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0454538580246914}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin += site_spin * site_nbr_spin
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
      
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
      
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -priority_total[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -priority_total[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.05763966049382722}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-1) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = [0,0]
      for k in site_neighbors(i,j):
        site_nbr_spin = -1 if h[k//N][k%N] > 0 else 1
        total_spin[0] += site_spin * site_nbr_spin
        total_spin[1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.013664043209876542}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      for k in range(-1, 2):
        site_nbr = (i + ((j + k) % N - N//2)) % N
        site_nbrs.append((site_nbr, h[site_nbr][j] > 0))
      total_spin[i*N+j][0] += sum(1 if spin else -1 for _, spin in site_nbrs)
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': 0.010939660493827158}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = np.zeros((N, N))
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[total_spin[i][1], total_spin[i][0]] for i in range(N**2)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, j+1))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))

      total_spin = sum(h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs)
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0007109567901234562}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1

  priority_total = np.zeros((N**2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        spin = -1 if h[i][j] > 0 else 1
        priority_total[i*N+j][spin==1] += total_spin[site][spin==1]

  return priority_total.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.0006603395061728401}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_weights = [[0.0,0.0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
      
  for k in range(2):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          site_weights[site*N+j][0] += total_spin[site][0]
        else:
          site_weights[site*N+j][1] -= total_spin[site][0]
          
  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0017581790123456793}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      priority_total[i*N+j][0] = max(total_spin, priority_total[i*N+j][0])
      priority_total[i*N+j][1] = min(-total_spin, priority_total[i*N+j][1])
      
  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': -0.24602422839506097}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[::N*N+N//2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[::N*N+N//4], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return([list(p) for p in priority])




#score: {'data2D.txt': 0.15976805555555576}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N2
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N2)]
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    site_nbrs_i = [site_nbr for site_nbr in site_nbrs if site_nbr == i or (abs(site_nbr-i) == 1 and abs((j-1)%2 - (site_nbr%2)) < N//4)]
    
    for k, site_nbr in enumerate(site_nbrs_i):
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += k
        priority_total[i*N+j][1] -= k
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
      
  for i in range(N**2):
    priority_total[i][0] = total_spin[i][0]
    priority_total[i][1] = -total_spin[i][0]
    
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  priority_total = [[0,0] for _ in range(N**2)]
  
  total_spin = [0,0]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_spin = -1
    else:
      site_spin = 1
    
    site_nbr_spin = -1 if h[site_neighbors(i//N,i%N)][i%N] > 0 else 1
    total_spin[0] += site_spin * (1 + site_nbr_spin)
    total_spin[1] -= site_spin * (1 + site_nbr_spin)
    
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -1*total_spin[j][0]
    
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1909066358024694}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
      priority_total[i*N+j][0] += site_spin * (1 + site_nbr_spin)
      priority_total[i*N+j][1] -= site_spin * (1 + site_nbr_spin)
      
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -priority_total[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -priority_total[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_weights = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for k in range(4): 
    for i in range(N):
      for j in range(N):
        if k == 0:
          site = (i + ((j-1)%N - N//2)) % N
        elif k == 1:
          site = (i + ((j-1)%N - N//2)) % N
        elif k == 2:
          site = (i + ((j-1)%N - N//2)) % N
        else: 
          site = (i + ((j-1)%N - N//2)) % N
        
        spin = -1 if h[i][j] > 0 else 1
        total_spin[site*N+j][spin==1] += 1
        
  for i in range(N**2):
    site_weights[i][1] -= total_spin[i][1]
    site_weights[i][0] += total_spin[i][0]

  return site_weights




#score: {'data2D.txt': 0.00017793209876543225}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_weights = [[0.0,0.0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site*N+j][spin==1] += 1

  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      site_weights[i] = [total_spin[i][0], -total_spin[i][1]]
    elif total_spin[i][0] < total_spin[i][1]:
      site_weights[i] = [-total_spin[i][0], total_spin[i][1]]
    else:
      if np.random.rand() > 0.5:
        site_weights[i] = [total_spin[i][0], -total_spin[i][1]]
      else:
        site_weights[i] = [-total_spin[i][0], total_spin[i][1]]

  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_weights = [[float('-inf'),float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[site][0] -= 1
        total_spin[site][1] += 1
        
  for k in range(2):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          site_weights[site*N+j][0] += total_spin[site][0]
          site_weights[site*N+j][1] -= total_spin[site][0]
        else:
          site_weights[site*N+j][0] -= total_spin[site][0]
          site_weights[site*N+j][1] += total_spin[site][0]
          
  return [list(x) for x in site_weights]




#score: {'data2D.txt': 0.05742978395061733}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = [0, 0]
      for k in site_neighbors(i,j):
        site_nbr_spin = -1 if h[k//N][k%N] > 0 else 1
        total_spin[0] += site_spin * site_nbr_spin
        total_spin[1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.15721157407407427}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N if j%2==0 else (i+(j+1)%N-1) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.05742978395061733}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = [0,0]
      for k in site_neighbors(i,j):
        site_nbr_spin = -1 if h[k//N][k%N] > 0 else 1
        total_spin[0] += site_spin * site_nbr_spin
        total_spin[1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.15285015432098786}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -total_spin + 2
        priority_total[i*N+j][1] = total_spin - 2
      else:
        priority_total[i*N+j][0] = -total_spin
        priority_total[i*N+j][1] = total_spin
      
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.000732253086419753}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, (j+1)%N))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      total_spin = 0
      for site_nbr in site_nbrs:
        total_spin += h[site_nbr[0]][site_nbr[1]]
      
      if h[i][j] > 0:
        priority_total[j][0] = total_spin + 1
        priority_total[j][1] = -total_spin - 1
      else:
        priority_total[j][0] = -total_spin - 1
        priority_total[j][1] = total_spin + 1
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = [state[site][0], state[site][1]]
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
      else:
        site = (i + ((j-1)%2 - 1)) % N
        total_spin = [state[site][0], state[site][1]]
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for k in range(3):
    for i in range(N**2):
      site_nbr = (i // N + ((i % N-1)%N - 1)) % N
      if h[site_nbr][i % N] > 0:
        site = (i // N + ((i % N-1)%N - N//2)) % N
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        site = (i // N + ((i % N-1)%N - N//2)) % N
        priority_total[i][0] -= 1
        priority_total[i][1] += 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    if h[i][site_nbr] > 0:
      state[i][site_nbr] = 1
      priority_total[i*N+site_nbr][0] += 1
      priority_total[i*N+site_nbr][1] -= 1
    else:
      state[i][site_nbr] = -1
      priority_total[i*N+site_nbr][0] -= 1
      priority_total[i*N+site_nbr][1] += 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[site_nbr][j] > 0:
        state[site_nbr][j] = 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        state[site_nbr][j] = -1
        priority_total[i*N+j][0] -= 1
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    if h[i][site_nbr] > 0:
      priority_total[i*N+site_nbr][0] += 1
      priority_total[i*N+site_nbr][1] -= 1
    else:
      priority_total[i*N+site_nbr][0] -= 1
  
  return [[-x[1], x[0]] for x in priority_total]




#score: {'data2D.txt': -0.0425183641975309}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0.0, 0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)] + [(i + ((k-1)%2 - 1)) % N for k in range(i, N)]
      total_spin = [0, 0]
      for site_nbr in site_nbrs:
        if h[site_nbr][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
        if j < N - 1 and h[i][j + 1] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        elif j < N - 1 and h[i][j + 1] <= 0:
          total_spin[0] -= 1
      priority_total[i*N+j][0] = total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  return [[x, -y] if sum([h[i][j] for i in range(N) for j in range(N)]) > 0 else [y, x] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)] + [(i + ((k-1)%2 - 1)) % N for k in range(i, N)]
      total_spin = [0, 0]
      for site_nbr in site_nbrs:
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
      if j < N - 1 and h[i][j + 1] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      elif j < N - 1 and h[i][j + 1] <= 0:
        total_spin[0] -= 1
  return priority_total




#score: {'data2D.txt': 0.11083132716049394}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.11083132716049394}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.11083132716049394}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.11083132716049394}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0.0, float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin = sum([h[site_nbr][j] for site_nbr in site_nbrs]) + h[i][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.07303379629629636}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0.0 for _ in range(2)] for _ in range(N)] for _ in range(N)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]

  # Calculate the priority for each site
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      total_spin = np.sum([h[site_nbr][j] for site_nbr in site_nbrs]) + h[i][j]
      if h[i][j] > 0:
        priority_total[i][j][0] += total_spin
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= total_spin
        priority_total[i][j][1] += 1

  return [[x[0], x[1]] for x in [y for row in priority_total for y in row]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i, j in itertools.product(range(N), repeat=2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = sum([h[site_nbr][j] for site_nbr in site_nbrs]) + h[i][j]
    if h[i][j] > 0:
      priority_total[i][j][0] += total_spin
      priority_total[i][j][1] -= 1
    else:
      priority_total[i][j][0] -= total_spin
      priority_total[i][j][1] += 1
  return [[x[0], x[1]] for x in [y for row in priority_total for y in row]]




#score: {'data2D.txt': -0.0020424382716049388}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  priority_total = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[site_nbr*N+i%N][0], total_spin[site_nbr*N+i%N][1]])
    else:
      priority_total.append([-total_spin[site_nbr*N+i%N][0], -total_spin[site_nbr*N+i%N][1]])
  
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      total_spin = [sum(J[site][i][j] for site in site_nbrs), 
              -sum(J[site][i][j] for site in site_nbrs)]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += sum([h[s][j] if state[s][j] == 1 else -h[s][j] for s in range(N)])
        priority_total[i*N+j][1] = -total_spin[0]
      else:
        priority_total[i*N+j][0] -= sum([h[s][j] if state[s][j] == 1 else -h[s][j] for s in range(N)])
        priority_total[i*N+j][1] = total_spin[0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      spin_sum = sum(1 if state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin[i*N+j][0 if sum(h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs) > 0 else 1] = spin_sum

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, (j+1)%N))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))

      total_spin = sum(1 if state[site[0]][site[1]] == 1 else -1 for site in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[j][0] += total_spin
        priority_total[j][1] -= total_spin
      else:
        priority_total[j][0] -= total_spin
        priority_total[j][1] += total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0003054012345679017}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      spin_sum = sum(1 if h[site_nbr[0]][site_nbr[1]] > 0 else -1 for site_nbr in site_nbrs)
      total_spin[i*N+j][0] = max(spin_sum, total_spin[i*N+j][0])
      total_spin[i*N+j][1] = min(-spin_sum, total_spin[i*N+j][1])
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.13130077160493836}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = [0,0]
    for j, site_nbr in enumerate(site_nbrs):
      if J[j][site_nbr][i%N] > 0:
        total_spin[0] += h[site_nbr][i%N]
      else:
        total_spin[1] -= h[site_nbr][i%N]
    priority_total[i][0] = -total_spin[0]
    priority_total[i][1] = total_spin[1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i // N + ((k-1)%2 - 1)) % N for k in range(4)]
    for j, site_nbr in enumerate(site_nbrs):
      total_spin[i][0] += h[site_nbr][j%N]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
    else:
      priority_total[i][0] -= total_spin[i][1]
      priority_total[i][1] += total_spin[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2,2), dtype=int)
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(3)]
    for j,site_nbr in enumerate(site_nbrs):
      total_spin[i][0] += h[site_nbr][i%N]
  priority_total = np.zeros((N**2,2), dtype=float)
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
    else:
      priority_total[i][0] -= total_spin[i][1]
      priority_total[i][1] += total_spin[i][0]
  return priority_total.tolist()




#score: {'data2D.txt': 0.0013273148148148168}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(4)]
    for j, site_nbr in enumerate(site_nbrs):
      total_spin[i][0] += h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = sum(total_spin[k][0] for k in range(N**2) if h[k//N][k%N] > 0)
      priority_total[i][1] = -sum(total_spin[k][1] for k in range(N**2) if h[k//N][k%N] > 0)
    else:
      priority_total[i][0] = -sum(total_spin[k][1] for k in range(N**2) if h[k//N][k%N] < 0)
      priority_total[i][1] = sum(total_spin[k][0] for k in range(N**2) if h[k//N][k%N] < 0)
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[-float('inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin_sum = sum(1 if h[site_nbr[0]][site_nbr[1]] > 0 else -1 for site_nbr in site_nbrs)
      priorities[i*N+j][0] += total_spin_sum
      priorities[i*N+j][1] -= total_spin_sum
  
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.0016754629629629628}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      spin_sum = sum(1 if state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin[i*N+j][0] = max(spin_sum, total_spin[i*N+j][0])
      total_spin[i*N+j][1] = min(-spin_sum, total_spin[i*N+j][1])

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0016754629629629628}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      spin_sum = sum(1 if state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin[i*N+j][0] = max(spin_sum, total_spin[i*N+j][0])
      total_spin[i*N+j][1] = min(-spin_sum, total_spin[i*N+j][1])
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0016754629629629628}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      spin_sum = sum(1 if state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin[i*N+j][0] = max(spin_sum, total_spin[i*N+j][0])
      total_spin[i*N+j][1] = min(-spin_sum, total_spin[i*N+j][1])

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0016754629629629628}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      spin_sum = sum(1 if state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin[i*N+j][0] = max(spin_sum, total_spin[i*N+j][0])
      total_spin[i*N+j][1] = min(-spin_sum, total_spin[i*N+j][1])

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0016754629629629628}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      spin_sum = sum(1 if state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin[i*N+j][0] = max(spin_sum, total_spin[i*N+j][0])
      total_spin[i*N+j][1] = min(-spin_sum, total_spin[i*N+j][1])

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0017581790123456793}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  priorities = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priorities[i*N+j][0] = total_spin + (h[i][j] > 0)
      priorities[i*N+j][1] = -total_spin
      
  return [[int(x) for x in lst] for lst in priorities]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N**2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.15976805555555576}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.2847202160493818}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::N**2+1], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::N**2+1], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.01645015432098765}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] = total_spin[site*N+(j-1)%N][0]
        total_spin[i*N+j][1] -= total_spin[site*N+(j-1)%N][1]
      else:
        total_spin[i*N+j][1] = -total_spin[site*N+(j-1)%N][0]
        total_spin[i*N+j][0] -= total_spin[site*N+(j-1)%N][1]
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.01645015432098765}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] = total_spin[site*N+(j-1)%N][0]
        total_spin[i*N+j][1] -= total_spin[site*N+(j-1)%N][1]
      else:
        total_spin[i*N+j][1] = -total_spin[site*N+(j-1)%N][0]
        total_spin[i*N+j][0] -= total_spin[site*N+(j-1)%N][1]
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.01645015432098765}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] = total_spin[site*N+(j-1)%N][0]
        total_spin[i*N+j][1] -= total_spin[site*N+(j-1)%N][1]
      else:
        total_spin[i*N+j][1] = -total_spin[site*N+(j-1)%N][0]
        total_spin[i*N+j][0] -= total_spin[site*N+(j-1)%N][1]
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (-np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.04705817901234572}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = 2*int(h[i][j]>0)-1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = 2*int(h[neighbor//N][neighbor%N]>0)-1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -total_spin
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][0] = total_spin
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0624899691358025}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0034436728395061656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  interaction_sum = np.sum(J_flat, axis=0)
  magnetism_sum = h.flatten()
  priority_total = np.column_stack((interaction_sum+magnetism_sum, -interaction_sum-magnetism_sum))
  return [[x[0], x[1]] for x in priority_total.reshape(N**2, 2)]




#score: {'data2D.txt': 0.04579151234567901}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [0, 0]
  for i in range(N):
    for j in range(N):
      site_nbr = ((i + (j - 1) % N - N // 2) % N)
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j - 1) % N - N // 2)) % N
      if h[i][j] > 0:
        state[i][j], total_spin = ([x[1], x[0]] for x in sorted([(total_spin[0] + 1, 1), (total_spin[1] - 1, -1)]))
      else:
        state[i][j], total_spin = ([x[0], x[1]] for x in sorted([(total_spin[0] - 1, 1), (total_spin[1] + 1, -1)]))
  return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [state[i][j]]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for k in range(N):
    site_nbr = (k + ((k-1)%N - 1)) % N
    for j in range(N):
      if h[site_nbr][j] > 0:
        priority_total[k*N+j][0] += 1
        priority_total[k*N+j][1] -= 1
      else:
        priority_total[k*N+j][0] -= 1
  
  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i]]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([state[(i+((j-k)%2)-1)%N][k] for k in range(max(0,j-1), min(j+2,N))]) for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += total_spin[site_nbr][j]
        priority_total[i][j][1] -= total_spin[site_nbr][j]
      else:
        priority_total[i][j][0] -= total_spin[site_nbr][j]
  return [[x[0], x[1]] for sublist in priority_total for x in sublist]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': 0.18384737654321015}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1), (i+(j+1)%N-N//2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.005452623456790123}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        total_spin[i*N+j][1] -= h[site_nbr][j]
      
      priority_total = [[0,0] for _ in range(N**2)]
      
      for i in range(N**2):
        site_nbr_spin = -1 if h[(i//N + ((i%N-1)%N - N//2)) % N][i%N] > 0 else 1
        priority_total[i][0] += site_spin * (1 + site_nbr_spin)
        priority_total[i][1] -= site_spin * (1 + site_nbr_spin)
      
      for i in range(N**2):
        if h[(i//N + ((i%N-1)%N - N//2)) % N][i%N] > 0:
          priority_total[i][0] = -priority_total[i][1]
        else:
          priority_total[i][1] = -priority_total[i][0]
      
      return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.004527932098765431}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - 1)) % N]
      for k in [1,3]:
        site_nbrs.append((i + ((k-1)%2 - 1)) % N)
      for site_nbr in site_nbrs:
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.04603070987654325}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
    total_spin = sum([state[site_nbr][i%N] for site_nbr in site_nbrs])
    if h[i//N][i%N] > 0:
      priorities.append([-total_spin, total_spin])
    else:
      priorities.append([total_spin, -total_spin])
  return priorities




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::2], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.04500601851851853}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_neighbors = []
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - 1)) % N, (i + ((j+1)%N - 1)) % N]
      total_spin = sum(1 if h[site][j] > 0 else -1 for site in site_nbrs)
      
      if h[i][j] > 0:
        priority_total = [total_spin, -total_spin]
      else:
        priority_total = [-total_spin, total_spin]
      
      site_neighbors.append(priority_total)

  return site_neighbors




#score: {'data2D.txt': -0.2846091049382708}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = np.prod(J_new[::N**2+N//2], 0).flatten() + h.flatten()
  sum2 = -np.prod(J_new[::N**2-N//2], 0).flatten() - h.flatten()
  priority = np.column_stack((sum1, sum2))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) for i in range(N) for j in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = sum([h[site_nbr][j] for site_nbr in site_nbrs if abs(i-site_nbr)//N+j//N==abs(i-j)//N])
      if h[i][j] > 0:
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] += total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[site_nbr//N][site_nbr%N][2]
        priority_total[i*N+j][1] -= J[site_nbr//N][site_nbr%N][3]
      else:
        priority_total[i*N+j][0] -= J[site_nbr//N][site_nbr%N][2]
        priority_total[i*N+j][1] += J[site_nbr//N][site_nbr%N][3]
  return [[x, -y] if sum([h[i][j] for i in range(N) for j in range(N)]) > 0 else [y, x] for x, y in priority_total]




#score: {'data2D.txt': -0.0015658950617283946}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = {}
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        site_interactions[(i, j)] = sum(J[site_nbr][i][j] for site_nbr in site_nbrs)
      else:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        site_interactions[(i, j)] = -sum(J[site_nbr][i][j] for site_nbr in site_nbrs)
  return [[x, -x] for x in site_interactions.values()]




#score: {'data2D.txt': 0.12453287037037053}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0004782407407407405}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin, total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12731959876543222}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j] = [total_spin + state[site][j], -total_spin]
      else:
        priority_total[i][j] = [-total_spin, total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.052452006172839544}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      if h[i][j] > 0:
        priority_total[i*N+j] = [total_spin + 1, -total_spin]
      else:
        priority_total[i*N+j] = [-total_spin, total_spin+1]
  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = [[-float('inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, (j+1)%N))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      total_spin = sum(1 if h[site[0]][site[1]] > 0 else -1 for site in itertools.chain(*[[(i,N-j-1),(N-i-1,N-j-1)]for i in range(N)]))
      priorities[i*N+j][0] += total_spin
      priorities[i*N+j][1] -= total_spin
  
  return [[x[0], x[1]] for x in priorities]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin_sum = sum(1 if h[site_nbr[0]][site_nbr[1]] > 0 else -1 for site_nbr in site_nbrs)
      priority_total[i][j][0] += total_spin_sum
      priority_total[i][j][1] -= total_spin_sum
      
  return [[x[0], x[1]] for x in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.07400509259259264}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0 for _ in range(3)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, (j+1)%N))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      total_spin = sum(1 if h[site_nbr[0]][site_nbr[1]] > 0 else -1 for site_nbr in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin + 1
        priority_total[i][j][1] = -total_spin - 1
      else:
        priority_total[i][j][0] = -total_spin - 1
        priority_total[i][j][1] = total_spin + 1
      
  return [[x[1], x[2]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.0017581790123456793}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin[i][j] = [-sum([1 if state[s][site_nbrs[(k-1)%4]] == 1 else -1 for s,k in zip(site_nbrs,range(4))]), 
                sum([1 if state[s][site_nbrs[(k-1)%4]] == 1 else -1 for s,k in zip(site_nbrs,range(4))])]
  
  return [[int(x) for x in lst] for lst in [item for sublist in total_spin for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [total_spin + 2*(h[i][j]>0), -total_spin]
  
  return [[int(x) if x>max(map(max,[item for sublist in priority_total for item in sublist])) else 0 for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1, (j+1)%N, i-(j%N)//N, i+(N-j%N)//N]]
      total_spin = sum(h[site][j] if (i, j) == site else 0 for site in site_nbrs)
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N2
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] -= total_spin[site]
      priority_total[i*N+j][1] += total_spin[site]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.12453287037037053}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12453287037037053}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12453287037037053}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i // N + ((k-1)%2 - 1)) % N for k in range(4)]
    for j, site_nbr in enumerate(site_nbrs):
      if h[site_nbr][j] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i // N + ((k-1)%2 - 1)) % N for k in range(4)]
    for j, site_nbr in enumerate(site_nbrs):
      total_spin[i][0] += h[site_nbr][j%N]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
    else:
      priority_total[i][0] -= total_spin[i][1]
      priority_total[i][1] += total_spin[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0721390432098766}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      site = (i + ((j-1)%2 - 1)) % N
      
      if h[i][j] > 0:
        priority_total[i][j] = [total_spin + 1, -total_spin]
      else:
        priority_total[i][j] = [-total_spin, total_spin]
  
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12731959876543222}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j] = [total_spin + state[site][j], -total_spin]
      else:
        priority_total[i][j] = [-total_spin, total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.046519290123456826}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  priority_total = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total.append([total_spin[i][0], total_spin[i][1]])
    else:
      priority_total.append([-x for x in total_spin[i]])
  return [[float(x[0]), float(x[1])] for x in priority_total]




#score: {'data2D.txt': 0.18384737654321015}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1), (i+(j+1)%N-N//2)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.18384737654321015}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1), (i+(j+1)%N-N//2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0011316358024691358}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      site_neighbors = [(i + ((j-1)%N) - N//2), (i + ((j+1)%N) - N//2)]
      
      for neighbor in site_neighbors:
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
      
      return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0016754629629629628}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      spin_sum = sum(1 if state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin[i*N+j][0] = max(spin_sum, total_spin[i*N+j][0])
      total_spin[i*N+j][1] = min(-spin_sum, total_spin[i*N+j][1])

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0016754629629629628}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      spin_sum = sum(1 if state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin[i*N+j][0] = max(spin_sum, total_spin[i*N+j][0])
      total_spin[i*N+j][1] = min(-spin_sum, total_spin[i*N+j][1])

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.04500601851851853}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  site_neighbors = []
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - 1)) % N, (i + ((j+1)%N - 1)) % N]
      total_spin = sum(1 if h[site][j] > 0 else -1 for site in site_nbrs)
      
      if h[i][j] > 0:
        priority_total = [total_spin, -total_spin]
      else:
        priority_total = [-total_spin, total_spin]
      
      site_neighbors.append(priority_total)
  
  return site_neighbors




#score: {'data2D.txt': 0.0721390432098766}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin += h[site][j]
        
        priority_total[i][j] = [total_spin, -total_spin]
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin -= h[site][j]
        
        priority_total[i][j] = [-total_spin, total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12275601851851867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_weights = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
      
      if h[i][j] > 0:
        site_weights[site_nbr*N+j][0] = -total_spin[site_nbr*N+j][1]
        site_weights[site_nbr*N+j][1] = total_spin[site_nbr*N+j][0]
      else:
        site_weights[site_nbr*N+j][0] = total_spin[site_nbr*N+j][1]
        site_weights[site_nbr*N+j][1] = -total_spin[site_nbr*N+j][0]

  return [list(x) for x in site_weights]




#score: {'data2D.txt': -0.001486882716049383}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
  
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[i][0], total_spin[i][1]])
    else:
      priority_total.append([-total_spin[i][0], -total_spin[i][1]])
  
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.06200231481481484}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j] += h[site][j]
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] = total_spin[site]
      priority_total[i*N+j][1] = -total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19400478395061746}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(3):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.000691820987654321}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += state[site_nbr][i%N]
      total_spin[i][1] -= state[site_nbr][i%N]
    else:
      total_spin[i][0] -= state[site_nbr][i%N]
      total_spin[i][1] += state[site_nbr][i%N]
  return np.array(total_spin).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.0008924382716049379}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for k in range(len(state[0])):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i][k%N] > 0:
        total_spin[i*N+k][1] += state[i][k]
      else:
        total_spin[i*N+k][0] -= state[i][k]
  
  priorities = [[total_spin[i][1], -total_spin[i][0]] for i in range(N**2)]
  return np.array(priorities).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[site_nbr*N+j][0] += 1
        priority_total[site_nbr*N+j][1] -= 1
      else:
        priority_total[site_nbr*N+j][0] -= 1
        priority_total[site_nbr*N+j][1] += 1
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.0008924382716049379}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(len(state[0])):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i][k%N] > 0:
        total_spin[i*N+k][1] += state[i][k]
      else:
        total_spin[i*N+k][0] -= state[i][k]
  priorities = [[total_spin[i][1], -total_spin[i][0]] for i in range(N**2)]
  return np.array(priorities).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.34308317901234464}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  total_spin = [sum(J[site][int(i/N)][i%N] for site in [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]) for i in range(N**2)]
  for i in range(N**2):
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[i]
      priority_total[i][1] = -total_spin[i]
    else:
      priority_total[i][1] = -total_spin[i]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] * state[site][j] for site, j in zip(site_nbrs, range(N))), 
          -sum(J[site][int(i/N)][i%N] * state[site][j] for site, j in zip(site_nbrs, range(N)))]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0003646604938271601}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = [[0, 0] for _ in range(N**2)]
  total_magnetism = [sum(h[i][j] for j in range(N)) for i in range(N)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    for j in site_nbrs:
      site_interactions[i][0] += J[j][int(i/N)][i%N] * h[int(j/N)][j%N]
      site_interactions[i][1] -= J[j][int(i/N)][i%N] * (1 - 2*h[int(j/N)][j%N])
  return [[x[0], x[1]] for x in site_interactions]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      spin_sum = sum(1 if h[site_nbr[0]][site_nbr[1]] > 0 and state[site_nbr[0]][site_nbr[1]] == 1 else -1 for site_nbr in site_nbrs)
      total_spin[i*N+j][0] = max(spin_sum, total_spin[i*N+j][0])
      total_spin[i*N+j][1] = min(-spin_sum, total_spin[i*N+j][1])

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.0003054012345679017}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      spin_sum = sum(1 if h[site_nbr[0]][site_nbr[1]] > 0 else -1 for site_nbr in site_nbrs)
      priority_total[i*N+j][0] = max(spin_sum, priority_total[i*N+j][0])
      priority_total[i*N+j][1] = min(-spin_sum, priority_total[i*N+j][1])
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.13130077160493836}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = [0, 0]
    for j, site_nbr in enumerate(site_nbrs):
      if J[j][site_nbr][i%N] > 0:
        total_spin[0] += h[site_nbr][i%N]
      else:
        total_spin[1] -= h[site_nbr][i%N]
    priority_total[i][0] = -total_spin[0]
    priority_total[i][1] = total_spin[1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.15721157407407427}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N if j%2==0 else (i+(j+1)%N-1) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.15721157407407427}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N if j%2==0 else (i+(j+1)%N-1) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.15721157407407427}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N if j%2==0 else (i+(j+1)%N-1) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': 0.0006538580246913581}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N//2
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N_half)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((j-1)%N - N_half)) % N
        if h[site_nbr//N][site_nbr%N] > 0:
          total_spin[i*N+j][0] += state[site_nbr//N][j]
        else:
          total_spin[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.0721390432098766}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j] = [total_spin, -total_spin]
      else:
        priority_total[i][j] = [-total_spin, total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.0013273148148148168}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(4)]
    for j, site_nbr in enumerate(site_nbrs):
      total_spin[i][0] += h[site_nbr][j]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = sum(total_spin[k][0] for k in range(N**2) if h[k//N][k%N] > 0)
      priority_total[i][1] = -sum(total_spin[k][1] for k in range(N**2) if h[k//N][k%N] > 0)
    else:
      priority_total[i][0] = -sum(total_spin[k][1] for k in range(N**2) if h[k//N][k%N] < 0)
      priority_total[i][1] = sum(total_spin[k][0] for k in range(N**2) if h[k//N][k%N] < 0)
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.11701188271604951}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - 1)) % N, (i + ((j+1)%N - 1)) % N]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      for site in site_nbrs:
        if h[site][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return [[x,y] for x,y in total_spin]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N2

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1

  priority_total = [[0,0] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -priority_total[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -priority_total[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.17048287037037063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
        total_spin[i*N+j][1] -= (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
          total_spin[i*N+j][0] += site_spin * site_nbr_spin
          total_spin[i*N+j][1] -= site_spin * site_nbr_spin
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j][0] = -total_spin[i*N+j][1]
      else:
        total_spin[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-N//2),(i+(j-1)%N-1)%N,(i+(j+1)%N-N//2)]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1

      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))

  priority_list = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_list.append([-total_spin[i][1], total_spin[i][0]])
    else:
      priority_list.append([total_spin[i][1], -total_spin[i][0]])

  return priority_list




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12275601851851867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([state[s][site_nbrs[(k-1)%4]] for s,k in zip(site_nbrs,range(4))])
      priority_total[i*N+j] = [-total_spin + 2*state[i][j], -total_spin]

  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': -0.20108688271604963}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      site_nbr2 = (i + ((j+1)%N - N//2)) % N
      if h[i][site_nbr2] > 0:
        priority_total[i*N+site_nbr2][0] += 1
        priority_total[i*N+site_nbr2][1] -= 1
      else:
        priority_total[i*N+site_nbr2][0] -= 1
      site_nbr3 = (i + ((j-1)%N - N//2)) % N
      if h[site_nbr3][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = [(i+((j-1)%N)-1)%N, (j-1)//N]
      if h[i][j]>0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - 1)) % N, (i + ((j+1)%N - 1)) % N]
      
      total_spin_sum = sum(1 if h[site][j] > 0 else -1 for site in site_nbrs)
      
      if h[i][j] > 0:
        priority_total = [total_spin_sum, -total_spin_sum]
      else:
        priority_total = [-total_spin_sum, total_spin_sum]
      
      return [[x,y] for x,y in np.full((N2,2),-float('inf')) + priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2,2))
  priority_total = np.full((N2,2),-float('inf'))
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr1][0] + total_spin[site_nbr2][0]
        priority_total[i*N+j][1] -= total_spin[site_nbr1][0] - total_spin[site_nbr2][0]
      else:
        priority_total[i*N+j][0] -= total_spin[site_nbr1][0] - total_spin[site_nbr2][0]
        priority_total[i*N+j][1] += total_spin[site_nbr1][0] + total_spin[site_nbr2][0]
  
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': 0.0006538580246913581}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N//2
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N_half)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N_half)) % N
      if h[site_nbr//N][site_nbr%N] > 0:
        total_spin[i*N+j][0] += state[site_nbr//N][j]
      else:
        total_spin[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0012350308641975315}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N//2
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N_half)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      total_spin[i][0] += state[site_nbr//N][site_nbr%N]
    else:
      total_spin[i][1] = -total_spin[i][0]
      
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0012350308641975315}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) // N * 2) % N)
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total[i][0] += state[site_nbr//N][site_nbr%N]
    else:
      priority_total[i][1] = -priority_total[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.00011311728395061726}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1), (i+(j+1)%N-N//2), (i+(j-1)%N-1)%N, (i+(j+1)%N-2)%N] if ((i+j) % 2 == 0) else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = -sum(site_neighbors(i,j))
      if h[i][j] > 0:
        priority_total[i*N+j][1] = sum([1 if (i-neighbor)//2 < 0 else (-1)**((i-neighbor)//2) for neighbor in site_neighbors(i,j)])
      else:
        priority_total[i*N+j][1] = -sum([1 if (i-neighbor)//2 >= 0 else (-1)**((i-neighbor)//2) for neighbor in site_neighbors(i,j)])
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.257437808641975}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.11083132716049394}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.22572669753086416}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0.0 for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%N - 1)) % N for k in range(4)]
    total_spin = sum(h[site//N][site%N] for site in site_nbrs) + h[i//N][i%N]
    if h[i//N][i%N] > 0:
      priority_total[i//N][i%N][0] += total_spin
      priority_total[i//N][i%N][1] -= 1
    else:
      priority_total[i//N][i%N][0] -= total_spin
      priority_total[i//N][i%N][1] += 1
  return [[x[0], x[1]] for x in [y for row in priority_total for y in row]]




#score: {'data2D.txt': 0.0721390432098766}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j] = [total_spin, -total_spin]
      else:
        priority_total[i][j] = [-total_spin, total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin[i*N+j][0] += sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      total_spin[i*N+j][1] -= sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
  return [[int(x) if x >= 0 else int(-x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': 0.0006347222222222227}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      for k in [(i-1)%N, (i+1)%N]:
        if k != i:
          site_nbrs.append((k, j, h[k][j] > 0))
      for k in [(j-1)%N, (j+1)%N]:
        if k != j:
          site_nbrs.append((i, k, h[i][k] > 0))
      total_spin[i*N+j][0] += sum(1 if spin else -1 for _, _, spin in site_nbrs)
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = np.zeros((N2, 2))
  priority_total = [[0, 0] for _ in range(N2)]
  
  for i in range(N2):
    if h[i//N][i%N] > 0:
      total_spin[i][1] += 1
    else:
      total_spin[i][0] -= 1
  
  for i in range(N):
    site_nbr = (i + ((-1)%2 - 1)) % N
    for j in range(N):
      priority_total[j*N+i][1] += h[site_nbr][j]
  
  for j in range(N2):
    if h[j//N][j%N] > 0:
      priority_total[j][0] = total_spin[j][1]
    else:
      priority_total[j][1] = -total_spin[j][1]
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.0034436728395061656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  interaction_sum = np.sum(J_flat, axis=0)
  magnetism_sum = h.flatten()
  priority_total = np.column_stack((interaction_sum+magnetism_sum, -interaction_sum-magnetism_sum))
  return [[x[0], x[1]] for x in priority_total.reshape(N**2, 2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0034436728395061656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  interaction_sum = np.sum(J_flat, axis=0)
  magnetism_sum = h.flatten()
  priority_total = np.column_stack((interaction_sum+magnetism_sum, -interaction_sum-magnetism_sum))
  return [[x[0], x[1]] for x in priority_total.reshape(N**2, 2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.121939351851852}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  site_nbrs_sum = np.zeros((N,N))

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs_sum[i,(j+1)%N] += 1
        site_nbrs_sum[i,j] -= 1
        site_nbrs_sum[(i+1)%N,j] -= 1
        site_nbrs_sum[i,(j-1)%N] -= 1 if j > 0 else -1
      else:
        site_nbrs_sum[i,(j+1)%N] -= 1
        site_nbrs_sum[i,j] += 1
        site_nbrs_sum[(i+1)%N,j] += 1
        site_nbrs_sum[i,(j-1)%N] += 1 if j > 0 else -1

  for i in range(N):
    for j in range(N):
      priority_total[i*N+j][0] = site_nbrs_sum[i,j]
      priority_total[i*N+j][1] = -site_nbrs_sum[i,j]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0004066358024691351}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0 for _ in range(4)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, j+1))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      for site_nbr in site_nbrs:
        total_spin = h[site_nbr[0]][site_nbr[1]]
        priority_total[i][j][0 if total_spin > 0 else 1] += 1
  return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [priority_total[i][j]]]




#score: {'data2D.txt': -0.26554089506172807}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,
             (i,(j+1)%N) if j < N - 1 else None,
             (i+1,j) if i < N - 1 else None,
             ((j+1)%N,i-1) if j > 0 and i > 0 else None]
      
      total_spin = sum(h[site_nbr[0]][site_nbr[1]] for site_nbr in [s for s in site_nbrs if s])
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin + 1
        priority_total[i*N+j][1] = -total_spin - 1
      else:
        priority_total[i*N+j][0] = -total_spin - 1
        priority_total[i*N+j][1] = total_spin + 1
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin=np.zeros((N,N,2))
  priority_total=[[-np.inf for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs=[]
      if i>0:
        site_nbrs.append((i-1,j))
      if j<N-1:
        site_nbrs.append((i,(j+1)%N))
      if i<N-1:
        site_nbrs.append((i+1,j))
      if (j+1)%N==i and i>0:
        site_nbrs.append((i-1,(j+1)%N))
      
      for k,site_nbr in enumerate(site_nbrs):
        total_spin[i][j][int(h[site_nbr[0]][site_nbr[1]]>0)]+=1
        if h[site_nbr[0]][site_nbr[1]]<0:
          site=site_nbr[0]+((site_nbr[1]-1)%2-1)%N
      if h[i][j]>0:
        priority_total[j][0]=total_spin[i][j][0]
      else:
        priority_total[j][0]=-total_spin[i][j][0]
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.000732253086419753}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, (j+1)%N))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      total_spin = sum([h[site[0]][site[1]] for site in site_nbrs])
      
      if h[i][j] > 0:
        priority_total[j][0] = total_spin + 1
        priority_total[j][1] = -total_spin - 1
      else:
        priority_total[j][0] = -total_spin - 1
        priority_total[j][1] = total_spin + 1
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.33636867283950517}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0 for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, (j+1)%N))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      for site_nbr in site_nbrs:
        priority_total[i][site_nbr[1]][0] += h[site_nbr[0]][site_nbr[1]]
        priority_total[i][site_nbr[1]][1] -= h[site_nbr[0]][site_nbr[1]]
      
      if h[i][j] > 0:
        for site_nbr in site_nbrs:
          priority_total[i][site_nbr[1]][0] += 1
          priority_total[i][site_nbr[1]][1] -= 1
      else:
        for site_nbr in site_nbrs:
          priority_total[i][site_nbr[1]][0] -= 1
          priority_total[i][site_nbr[1]][1] += 1
      
  return [[x[0], x[1]] for x in itertools.chain(*priority_total)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.12646342592592608}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin[i*N+j] = [sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))]), state[i][j]]

  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': 0.009874537037037036}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i][j] = [total_spin + state[site][j], total_spin]
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i][j] = [-total_spin + state[site][j], -total_spin]
        
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12453287037037053}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0018307098765432102}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
      
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[i][0], -total_spin[i][1]])
    else:
      priority_total.append([-total_spin[i][0], total_spin[i][1]])
  
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001486882716049383}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
  
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[i][0], total_spin[i][1]])
    else:
      priority_total.append([-total_spin[i][0], -total_spin[i][1]])
  
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.004909413580246914}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1), (i+(j+1)%N-N//2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  priority_total = [[0,0] for _ in range(N**2)]
  
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.18384737654321015}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1), (i+(j+1)%N-N//2)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.18384737654321015}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1), (i+(j+1)%N-N//2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for k in range(len(state[0])):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[i][k%N] > 0:
        total_spin[i*N+k][0] += state[i][k]
        total_spin[i*N+k][1] -= state[i][k]
      else:
        total_spin[i*N+k][0] -= state[i][k]
        total_spin[i*N+k][1] += state[i][k]
  priorities = [[total_spin[i][1], -total_spin[i][0]] for i in range(N**2)]
  return np.array(priorities).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for k in range(len(state[0])):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i][k%N] > 0:
        site_nbr = (site + ((k-1)%N - N//2)) % N
        priority_total[i*N+k][0] += 1
        priority_total[i*N+k][1] -= 1
      else:
        site_nbr = (site + ((k-1)%N - N//2)) % N
        priority_total[i*N+k][0] -= 1
        priority_total[i*N+k][1] += 1
  return priority_total




#score: {'data2D.txt': 0.06331774691358026}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0 for _ in range(3)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin = sum(1 if h[site_nbr[0]][site_nbr[1]] > 0 else -1 for site_nbr in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin + 1
        priority_total[i][j][1] = -total_spin - 1
      else:
        priority_total[i][j][0] = -total_spin - 1
        priority_total[i][j][1] = total_spin + 1
      
  return [[x[1], x[2]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.astype(int)




#score: {'data2D.txt': -0.0004782407407407405}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin[i][j] = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])

  priority_total = [[[-total_spin[i][j], total_spin[i][j]] for j in range(N)] for i in range(N)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.0013390432098765452}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[site_nbr//N][site_nbr%N][2]
        priority_total[i*N+j][1] -= J[site_nbr//N][site_nbr%N][3]
      else:
        priority_total[i*N+j][0] -= J[site_nbr//N][site_nbr%N][2]
        priority_total[i*N+j][1] += J[site_nbr//N][site_nbr%N][3]
  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i]]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('inf'), float('-inf')] for _ in range(N2)]

  for i in range(N2):
    site_nbr = (i // N + ((i % N - 1) % N)) % N
    if h[i // N][i % N] > 0:
      total_spin[i][0] += 1
      priority_total[i][0] += J[site_nbr//N][site_nbr%N][2]
      priority_total[i][1] -= J[site_nbr//N][site_nbr%N][3]
    else:
      total_spin[i][0] -= 1
      priority_total[i][0] -= J[site_nbr//N][site_nbr%N][2]
      priority_total[i][1] += J[site_nbr//N][site_nbr%N][3]

  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i]]]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[site_nbr//N][site_nbr%N][2]
        priority_total[i*N+j][1] -= J[site_nbr//N][site_nbr%N][3]
      else:
        site_nbr = (i + ((j-1)%N - 1)) % N
        priority_total[i*N+j][0] -= J[site_nbr//N][site_nbr%N][2]
        priority_total[i*N+j][1] += J[site_nbr//N][site_nbr%N][3]
  return [[x[0], x[1]] for i in range(N**2) for x in [priority_total[i]]]




#score: {'data2D.txt': -0.3372365740740731}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      total_spin = sum(J[k][site][j] for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0)
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
        priority_total[i*N+j][1] = -total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    interaction_sum = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    magnetism_sum = h[int(i/N)][i%N]
    priority_total[i][0] += interaction_sum + magnetism_sum
    priority_total[i][1] -= interaction_sum - magnetism_sum
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N2
  priority_total = [[float('inf'), float('-inf')] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::2*N+1], 0) + h).flatten()
  sum_2 = (-np.prod(J_new[1::2*N+1], 0)).flatten()
  priority = np.column_stack((sum_1, -sum_1))
  return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [[-h[i][j] if h[i][j] > 0 else -h[i][j], h[i][j]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.001486882716049383}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
      
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[i][0], total_spin[i][1]])
    else:
      priority_total.append([-total_spin[i][0], -total_spin[i][1]])
      
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001486882716049383}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[i][0], total_spin[i][1]])
    else:
      priority_total.append([-total_spin[i][0], -total_spin[i][1]])
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001486882716049383}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[i][0], total_spin[i][1]])
    else:
      priority_total.append([-total_spin[i][0], -total_spin[i][1]])
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.06811466049382718}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_neighbors = []
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - N//2)) % N, (i + ((j+1)%N - N//2)) % N, (i + ((j-1)%N - 2*N//2)) % N, (i + ((j+1)%N - 2*N//2)) % N]
      total_spin = sum(1 if h[site][j] > 0 else -1 for site in site_nbrs)
      
      if h[i][j] > 0:
        priority_total = [total_spin, -total_spin]
      else:
        priority_total = [-total_spin, total_spin]
      
      site_neighbors.append(priority_total)
  
  return site_neighbors




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - (N//2 if j%2 else 0))) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - (N//2 if i%2 else 0))) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total=np.zeros((N*N,2))
  total_spin=np.zeros((N,N), dtype=int)
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  for j in range(N):
    if h[j][j] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]
  return priority_total.flatten().reshape(-1,2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.00026959876543209847}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = np.zeros((N,N))
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return np.array([[(j+1)/2 for j in range(2)] if h[i//N][i%N] > 0 else [-(j+1)/2 for j in range(2)] for i in range(N**2)]).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3424816358024681}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N,2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      for k in range(4):
        if abs(k-j) <= 1 and (k-i) == 0:
          site = (i + ((k-1)%2 - 1)) % N
          total_spin[i*N+j][0] += J[site][i][j]*h[int(site/N)][site%N]
          total_spin[i*N+j][1] -= J[site][i][j]*(1 - 2*h[int(site/N)][site%N])
  return total_spin.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]

  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]

  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]

  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0017581790123456793}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin[i*N+j] = [sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))]), -sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])]
  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      priority_total[i][j] = [-total_spin + state[i][j], -total_spin]
  
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = {}
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        state.setdefault(site, [0, 0])[1] += 1
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        state.setdefault(site, [0, 0])[1] -= 1
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr1 = (i + ((j-1)%N - N//2)) % N
        site_nbr2 = (i + ((j+1)%N - N//2)) % N
        total_spin = [[h[x][y], 0] for x in range(N) for y in range(N)]
        state=[[[[0,0]] for _ in range(4)] for _ in range(N) for _ in range(N)]
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          total_spin[i*N+j] += [h[site_nbr][j],0]
        return [[x[0], x[1]] for x in total_spin]
      else:
        site_nbr1 = (i + ((j-1)%N - N//2)) % N
        site_nbr2 = (i + ((j+1)%N - N//2)) % N
        total_spin = [[h[x][y], 0] for x in range(N) for y in range(N)]
        state=[[[[0,0]] for _ in range(4)] for _ in range(N) for _ in range(N)]
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          total_spin[i*N+j] += [h[site_nbr][j],0]
        return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][site_nbr] > 0:
        total_spin[i*N+site_nbr][0] += 1
        total_spin[i*N+site_nbr][1] -= 1
        priority_total[i*N+site_nbr][0] += 1
        priority_total[i*N+site_nbr][1] -= 1
      else:
        total_spin[i*N+site_nbr][0] -= 1
        total_spin[i*N+site_nbr][1] += 1
        priority_total[i*N+site_nbr][0] -= 1
        priority_total[i*N+site_nbr][1] += 1

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  for i in range(N):
    total_spin = [sum(1 for k in range(N) if h[k][i] > 0), - sum(1 for k in range(N) if h[k][i] < 0)]
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[0]
      else:
        priority_total[i*N+j][1] = -total_spin[0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2))
  for i in range(N**2):
    site = (i % N + ((i // N) - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += J[site*N:site*N+N,N*i:i*N*N+i].sum()
      priority_total[i][1] -= J[site*N:site*N+N,N*i:i*N*N+i].sum()
    else:
      priority_total[i][0] -= J[site*N:site*N+N,N*i:i*N*N+i].sum()
  return priority_total.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(np.flipud(J_new[1::4]), 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': 0.004909413580246914}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1), (i+(j+1)%N-N//2)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  priority_total = [[0,0] for _ in range(N**2)]
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': 0.006164043209876543}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N, (i+(j+1)%N-N//2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    if h[0][i] > 0:
      site = (0 + ((i-1)%N - N//2)) % N
      total_spin[i*N+i][0] += 1
      total_spin[i*N+i][1] -= 1
    else:
      site = (0 + ((i-1)%N - N//2)) % N
      total_spin[i*N+i][0] -= 1
      total_spin[i*N+i][1] += 1
  
  for j in range(N):
    if h[0][j] > 0:
      site = (0 + ((j-1)%N - N//2)) % N
      total_spin[j][0] += 1
      total_spin[j][1] -= 1
    else:
      site = (0 + ((j-1)%N - N//2)) % N
      total_spin[j][0] -= 1
      total_spin[j][1] += 1
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] = total_spin[site*N+site][0]
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][1] = -total_spin[site*N+site][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.14787854938271625}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [3,1,0,2]]
    total_spin = sum([1 if h[site_nbrs[(k-1)%4]][i%N] > 0 else -1 for k in range(4)])
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin + 1
      priority_total[i][1] = -total_spin
    else:
      priority_total[i][0] = -total_spin
      priority_total[i][1] = total_spin+1
  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i // N + ((k-1)%2 - 1)) % N for k in range(4)]
    for j in range(N):
      if h[i//N][j] > 0:
        total_spin[i][1] += 1
        total_spin[i][0] -= 1
      else:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  return [[total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.052452006172839544}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      if h[i][j] > 0:
        priority_total[i*N+j] = [total_spin + 1, -total_spin]
      else:
        priority_total[i*N+j] = [-total_spin, total_spin+1]
  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
        
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
          
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N2)]

  for i in range(N):
    site_nbrs = [(i + ((j-1)%N - 1)) % N for j in range(N)]
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][site_nbr] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      total_spin = sum(h[site][j] for site in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[i][j][0] += total_spin
        priority_total[i][j][1] -= total_spin
      else:
        priority_total[i][j][0] -= total_spin
        priority_total[i][j][1] += total_spin
  
  return [[x[0], x[1]] for x in [y for sublist in priority_total for y in sublist]]




#score: {'data2D.txt': -0.0010788580246913577}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    for j in range(N):
      total_spin = [sum(1 for k in range(N) if ((k-j)%N in (i-1,i+1)) and state[k][j] == 1), 
             sum(1 for k in range(N) if ((k-j)%N in (i-1,i+1)) and state[k][j] == -1)]
      priorities.append([-x if h[i][j] > 0 else x for x in total_spin])
  return [[x, y] for [x, y], _ in sorted(zip(priorities, [(i, j) for i in range(N**2)]))]




#score: {'data2D.txt': 0.12731959876543222}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j] = [total_spin + state[site][j], -total_spin]
      else:
        priority_total[i][j] = [-total_spin, total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12731959876543222}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j] = [total_spin + state[site][j], -total_spin]
      else:
        priority_total[i][j] = [-total_spin, total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0017581790123456793}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N*N, 2), dtype=float)
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin[i*N+j][0] += np.sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      total_spin[i*N+j][1] -= np.sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
  
  return [[int(x) for x in lst] for lst in [item.tolist() for item in total_spin]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site = (i % N + ((i//N)-N//2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[site_nbr*N+j][0] += 1
        priority_total[site_nbr*N+j][1] -= 1
      else:
        priority_total[site_nbr*N+j][0] -= 1
        priority_total[site_nbr*N+j][1] += 1
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
      
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': 0.00011620370370370403}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N,N,4))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i>0 else None,(i,j+1) if j<N-1 else None,(i+1,j) if i<N-1 else None,(i,(j+1)%N) if (j+1)%N==i and i>0 else None]
      for site_nbr in site_nbrs:
        total_spin = h[site_nbr[0]][site_nbr[1]] if site_nbr is not None else 0
        priority_total[i][j][0 if total_spin > 0 else 1] += 1
  return [(x[0], x[1]) for i in range(N) for j in range(N) for x in [priority_total[i][j]]]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0007776234567901233}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs_i = [site_nbrs[site] for site in range(N2) if abs(site % N - i) + abs((site//N)%N-j) == 1]
      
      if h[i][j] > 0:
        for spin in [0, 1]:
          priority_total[i*N+j][spin] += sum(spin == s for s in site_nbrs_i)
      else:
        for spin in [0, 1]:
          priority_total[i*N+j][spin] -= sum(spin == s for s in site_nbrs_i)
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      total_spin = sum([h[site[0]][site[1]] for site in site_nbrs])
      site = (i + ((j-1)%2 - 1)) % N

      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= len(site_nbrs)
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += len(site_nbrs)

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0013683641975308644}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin = sum([h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs])
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin + len(site_nbrs)
        priority_total[i*N+j][1] -= total_spin - len(site_nbrs)
      else:
        priority_total[i*N+j][0] -= total_spin - len(site_nbrs)
        priority_total[i*N+j][1] += total_spin + len(site_nbrs)
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for k in range(3):
    site_nbr = (k-1)%2 - 1
    for i in range(N):
      j = ((i+site_nbr)%N)
      priority_total[i*N+j][0 if h[i][j] > 0 else 1] += 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.14724675925925948}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
      
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < priority_total[i*N+j][1]:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
          else:
            priority_total[i*N+j][0] -= 1
            priority_total[i*N+j][1] += 1
        else:
          if priority_total[i*N+j][0] < priority_total[i*N+j][1]:
            priority_total[i*N+j][0] -= 1
            priority_total[i*N+j][1] += 1
          else:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0014662037037037042}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[site][0] = total_spin[site][0]
      else:
        priority_total[site][1] = -1*total_spin[site][0]
  return [[x,y] for [x,_],y in sorted(zip(priority_total,[i for i in range(N**2)]))]




#score: {'data2D.txt': -0.0010788580246913577}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    for j in range(N):
      total_spin = [sum(1 for k in range(N) if ((k-j)%N in (i-1,i+1)) and state[k][j] == 1), 
             sum(1 for k in range(N) if ((k-j)%N in (i-1,i+1)) and state[k][j] == -1)]
      priorities.append([-x if h[i][j] > 0 else x for x in total_spin])
  return [[x, y] for [x, y], _ in sorted(zip(priorities, [(i, j) for i in range(N**2)]))]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([state[s][site_nbr] for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      if h[i][j] > 0:
        priority_total[i*N+j] = [-total_spin + 2*state[i][j], -total_spin]
      else:
        priority_total[i*N+j] = [total_spin, total_spin+2]

  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.18542546296296317}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin[i*N+j][0] += sum([state[s][site_nbr] for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1

  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': -0.15063533950617305}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      site_nbr = (i + ((j+1)%N - N//2)) % N
      if h[i][site_nbr] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      site_nbr = (i + ((j+N-1)%N - N//2)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      site_nbr = (i + ((j+N)%N - N//2)) % N
      if h[site_nbr][site_nbr] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.17144336419753115}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N), (i+(j+1)%N) % N, (i-1+N)%N if i else 0, (i+1)%N if i<N-1 else 0] if (i+j) % 2 == 0 else [(i+(j-1)%N), (i+(j+1)%N) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin = site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        if h[i][j] > 0:
          priority_total[i*N+j][0] = max(priority_total[i*N+j][0], total_spin)
          priority_total[i*N+j][1] = min(priority_total[i*N+j][1], -total_spin)
        else:
          priority_total[i*N+j][1] = max(priority_total[i*N+j][1], total_spin)
          priority_total[i*N+j][0] = min(priority_total[i*N+j][0], -total_spin)
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.257437808641975}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.1909066358024694}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
      priority_total[i*N+j][0] += site_spin * (1 + site_nbr_spin)
      priority_total[i*N+j][1] -= site_spin * (1 + site_nbr_spin)
      
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -priority_total[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -priority_total[i*N+j][0]
      
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1394739197530866}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2), (i + ((j+1)%N) - N//2)]

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1

      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      if h[i][j] > 0:
        priority_total[i][j] = [total_spin + state[i][j], total_spin]
      else:
        priority_total[i][j] = [-total_spin - state[i][j], -total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      if h[i][j] > 0:
        priority_total[i][j] = [total_spin + state[i][j], total_spin]
      else:
        priority_total[i][j] = [-total_spin - state[i][j], -total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_weights = [[float('-inf'),float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[site*N+j][0] += 1
        total_spin[site*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[site*N+j][0] -= 1
        total_spin[site*N+j][1] += 1

  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_weights[i][0] = total_spin[i][0]
      site_weights[i][1] = -total_spin[i][1]
    else:
      site_weights[i][0] = -total_spin[i][0]
      site_weights[i][1] = total_spin[i][1]

  return [list(x) for x in site_weights]




#score: {'data2D.txt': -0.00026959876543209847}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_weights = np.zeros((N, N))

  for i in range(N**2):
    site_nbrs = [(i//N + ((j-1)%2 - 1)) % N for j in range(4)]
    if h[i//N][i%N] > 0:
      for site_nbr in site_nbrs:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
    else:
      for site_nbr in site_nbrs:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1

  return np.array([[(j+1)/2 for j in range(2)] if h[i//N][i%N] > 0 else [-(j+1)/2 for j in range(2)] for i in range(N**2)]).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.15269768518518537}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site = (i // N + ((i % N - 1) % N - N//2)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += state[site][1]
      priority_total[i][1] -= state[site][0]
    else:
      priority_total[i][0] -= state[site][1]
      priority_total[i][1] += state[site][0]
  
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_weights = [[float('-inf'),float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[site*N+j][0] += 1
        total_spin[site*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[site*N+j][0] -= 1
        total_spin[site*N+j][1] += 1
      
      for k in range(N):
        if i == k and j < N:
          continue
        
        if h[i][j] > 0:
          site_weights[site*N+j][0] = max(site_weights[site*N+j][0], total_spin[k*N+(j+1)%N][0])
          site_weights[site*N+j][1] = -max(site_weights[site*N+j][1], total_spin[k*N+(j+1)%N][1])
        else:
          site_weights[site*N+j][0] = -min(-site_weights[site*N+j][0], -total_spin[k*N+(j+1)%N][0])
          site_weights[site*N+j][1] = min(site_weights[site*N+j][1], total_spin[k*N+(j+1)%N][1])
  
  return [list(x) for x in site_weights]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_weights = [[float('-inf'),float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[site*N+j][0] += 1
        total_spin[site*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[site*N+j][0] -= 1
        total_spin[site*N+j][1] += 1

  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_weights[i][0] = -total_spin[i][0]
      site_weights[i][1] = total_spin[i][1]
    else:
      site_weights[i][0] = total_spin[i][0]
      site_weights[i][1] = -total_spin[i][1]

  return [list(x) for x in site_weights]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1)) % N
    total_spin[i][0 if h[site_nbr][i % N] > 0 else 1] += 1
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1)) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -total_spin[i][1]
  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.19207145061728403}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      if h[i][j] > 0:
        priority_total[i][j] = [(total_spin + state[i][j]), -(total_spin)]
      else:
        priority_total[i][j] = [-(total_spin), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.013359413580246912}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site_nbrs_site = [site_nbrs.index((i + ((k-1)%N - 1)) % N) for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
      priority_total[i*N+j][1] = -sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
    else:
      site_nbrs_site = [site_nbrs.index((i + ((k-1)%N - 1)) % N) for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = -sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
      priority_total[i*N+j][1] = sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.24088842592592583}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr]:
            priority_total[i*N+j][0] = total_spin[site_nbr]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr]:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1

      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
        total_spin[i*N+j][1] -= (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin

      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1

  return [[x[0],-x[1]] for x in total_spin]




#score: {'data2D.txt': 0.17048287037037063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
        total_spin[i*N+j][1] -= (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.17048287037037063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
        total_spin[i*N+j][1] -= (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -1*total_spin[i*N+j][0]
        priority_total[i*N+j][1] = float('-inf')
      else:
        priority_total[i*N+j][0] = float('-inf')
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0015754629629629625}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,1))
    else:
      site_order.append((i,-1))
  
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]
    site_nbrs = [(site//N + ((j-1)%N - N//2)) % N for j in range(3)]
    for j in site_nbrs:
      if h[j//N][j%N] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1
      if spin == 1:
        priority_total[site][0] += 1
        priority_total[site][1] -= 1
      else:
        priority_total[site][0] -= 1
    return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.11591250000000014}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      site_nbr2 = (i + ((j+1)%N - N//2)) % N
      if h[i][site_nbr2] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      site_nbr3 = (i + ((j-1)%N - N//2)) % N
      if h[site_nbr3][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0007174382716049384}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin = sum(h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs)
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0 if h[i][j] > 0 else float('-inf') for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      total_spin[i][j] += sum(h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs)
  return [[-total_spin[i][j] if h[i][j] > 0 else total_spin[i][j], -total_spin[i][j]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < priority_total[i*N+j][1]:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
          else:
            priority_total[i*N+j][0] -= 1
            priority_total[i*N+j][1] += 1
        else:
          if priority_total[i*N+j][0] < priority_total[i*N+j][1]:
            priority_total[i*N+j][0] -= 1
            priority_total[i*N+j][1] += 1
          else:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0007776234567901233}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1

  priority_total = [[0,0] for _ in range(N2)]

  for i in range(N):
    for j in range(N):
      site_nbrs_i = [site_nbrs[site] for site in range(N2) if abs(site % N - i) + abs((site//N)%N-j) == 1]
      
      if h[i][j] > 0:
        for spin in [0, 1]:
          priority_total[i*N+j][spin] += sum(spin == s for s in site_nbrs_i)
      else:
        for spin in [0, 1]:
          priority_total[i*N+j][spin] -= sum(spin == s for s in site_nbrs_i)

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N * N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum_3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum_4 = (np.prod(J_new[3::4], 0) + h).flatten()
  
  priority_total = np.column_stack((sum_1, -sum_2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      priority_total[N2-1-site][spin==1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      if h[i][j] > 0:
        priority_total[i][j] = [total_spin + state[i][j], total_spin]
      else:
        priority_total[i][j] = [-total_spin, -total_spin]
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for site_nbrs in [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]:
    site_nbr = site_nbrs
    if h[site_nbr][0] > 0:
      priority_total[site_nbr][0] += 1
      priority_total[site_nbr][1] -= 1
    else:
      priority_total[site_nbr][0] -= 1

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -1*total_spin[i*N+j][0]
        priority_total[i*N+j][1] = float('-inf')
      else:
        priority_total[i*N+j][0] = float('-inf')
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -1*total_spin[i*N+j][0]
        priority_total[i*N+j][1] = float('-inf')
      else:
        priority_total[i*N+j][0] = float('-inf')
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = np.sum(np.prod(J_new[::4], -1), axis=0) + h.flatten()
  sum_2 = np.sum(np.prod(J_new[1::4], -1), axis=0) - h.flatten()
  return [[x, -y] for x, y in zip(sum_1.tolist(), sum_2.tolist())]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1

  for i in range(N**2):
    if total_spin[i][1] < total_spin[i][0]:
      priority_total[i][0] = total_spin[i][1]
      priority_total[i][1] = float('-inf')
    elif total_spin[i][1] > total_spin[i][0]:
      priority_total[i][0] = float('-inf')
      priority_total[i][1] = total_spin[i][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for site_nbrs in [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]:
    site_nbr = site_nbrs
    if h[site_nbr][0] > 0:
      priority_total[site_nbr][0] += 1
      priority_total[site_nbr][1] -= 1
    else:
      priority_total[site_nbr][0] -= 1

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4],0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4],0) + h).flatten()
  priority = np.column_stack((sum_1,-sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.00017114197530864207}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        total_spin[i*N+j][0] += sum(J[site][i][j] for site in site_nbrs)
        total_spin[i*N+j][1] = -sum(J[site][i][j] for site in site_nbrs)
      else:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        total_spin[i*N+j][0] -= sum(J[site][i][j] for site in site_nbrs)
        total_spin[i*N+j][1] = -sum(J[site][i][j] for site in site_nbrs)

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for site in itertools.product(range(N), range(N)):
    if h[site[0]][site[1]] > 0:
      site_val = (site[0] + ((site[1]-1)%N - N//2)) % N
      priority_total[site_val*N+site[1]][0] += 1
      priority_total[site_val*N+site[1]][1] -= 1
    else:
      site_val = (site[0] + ((site[1]-1)%N - N//2)) % N
      priority_total[site_val*N+site[1]][0] -= 1
      priority_total[site_val*N+site[1]][1] += 1
  
  return [list(x) for x in sorted([list(x) for x in priority_total])]




#score: {'data2D.txt': -0.33131620370370274}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,1))
    else:
      site_order.append((i,-1))
  
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]
    site_nbrs = [(site//N + ((j-1)%N - N//2)) % N for j in range(4)]
    for j in site_nbrs:
      if h[j//N][j%N] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1
      if spin == 1:
        priority_total[site][0] += 1
        priority_total[site][1] -= 1
      else:
        priority_total[site][0] -= 1
    for i in range(N**2):
      if h[i//N][i%N] > 0:
        priority_total[i][0] = total_spin[i][0]
      else:
        priority_total[i][1] = -1*total_spin[i][0]
  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.13117330246913594}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,1))
    else:
      site_order.append((i,-1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(3):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site//N][i%N] > 0:
        priority_total[i][0] += total_spin[i][0]
        priority_total[i][1] -= total_spin[i][1]
      else:
        priority_total[i][0] -= total_spin[i][0]

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum(1 for k in range(N) if h[k][i] > 0) - sum(1 for k in range(N) if h[k][i] < 0) for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][site] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in (j+1, j-1, i+N, i-N) if 0 <= k < N]
      total_spin = [sum(1 for _ in site_nbrs), -sum(1 for _ in site_nbrs)]
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin[0]
        priority_total[i][j][1] = -total_spin[1]
      else:
        priority_total[i][j][1] = -total_spin[0]
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum(1 for k in range(N) if h[k][i] > 0) - sum(1 for k in range(N) if h[k][i] < 0) for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for k in [(i+((j-1)%N)-1)%N,(i+((j+1)%N-2))%N,(i+(j-1)//N-1)%N,(i+N+(j+1)//N-1)%N]:
        site_nbr_spin = -1 if h[k//N][k%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
      
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+N+(j-1)//N-1)%N,(i+N+(j+1)//N-1)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = [0, 0]
      for k in site_neighbors(i,j):
        site_nbr_spin = -1 if h[k//N][k%N] > 0 else 1
        total_spin[0] += site_spin * site_nbr_spin
        total_spin[1] -= site_spin * site_nbr_spin
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -total_spin[0]
        priority_total[i*N+j][1] = total_spin[1]
      else:
        priority_total[i*N+j][0] = total_spin[0]
        priority_total[i*N+j][1] = -total_spin[1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for site_nbrs in [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]:
    site_nbr = site_nbrs
    if h[site_nbr][0] > 0:
      priority_total[site_nbr][0] += 1
      priority_total[site_nbr][1] -= 1
    else:
      priority_total[site_nbr][0] -= 1

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.000185648148148148}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0,0.0] for _ in range(N**2)]
  site_weights = [[0.0,0.0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site_nbr*N+j][spin==1] += 1
      
      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          site_weights[site*N+j][0] += total_spin[site*N+j][0]
        else:
          site_weights[site*N+j][1] -= total_spin[site*N+j][0]

  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * (site_spin + site_nbr_spin)
        priority_total[i*N+j][1] -= site_spin * (site_spin + site_nbr_spin)
      return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0072421296296296305}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1)%N if i > 0 else N-1, (j-1)%N if j > 0 else N-1]
      total_spin[i*N+j][0] += sum([h[site_nbrs[0]][min(j+1,N-1)] for _ in range(2)])
      total_spin[i*N+j][1] -= sum([h[site_nbrs[1]][j] for _ in range(2)])
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.257437808641975}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[0,0] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.24088842592592583}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr]:
            priority_total[i*N+j][0] = total_spin[site_nbr]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr]:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0007776234567901233}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs_i = [site_nbrs[site] for site in range(N2) if abs(site % N - i) + abs((site//N)%N-j) == 1]
      
      if h[i][j] > 0:
        for spin in [0, 1]:
          priority_total[i*N+j][spin] += sum(spin == s for s in site_nbrs_i)
      else:
        for spin in [0, 1]:
          priority_total[i*N+j][spin] -= sum(spin == s for s in site_nbrs_i)
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0007776234567901233}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
        
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    site_nbrs_i = [site_nbrs[site] for site in range(N2) if abs(site % N - i) + abs((site//N)%N-j) == 1]
    
    if h[i][j] > 0:
      for spin in [0, 1]:
        priority_total[i*N+j][spin] = sum(spin == s for s in site_nbrs_i)
    else:
      for spin in [0, 1]:
        priority_total[i*N+j][spin] = -sum(spin == s for s in site_nbrs_i)
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  priority_total = [[0,0] for _ in range(N2)]
  for i, j in itertools.product(range(N), range(N)):
    site_nbrs_i = [(site % N + ((j-1)%N - 1)) % N for site in range(N2) if abs((site//N)%N-i) + abs(site % N-j) <= 1]
    if h[i][j] > 0:
      priority_total[i*N+j][0] += sum(1 for s in site_nbrs_i)
      priority_total[i*N+j][1] -= len(set(site_nbrs_i))
    else:
      priority_total[i*N+j][0] -= sum(1 for s in site_nbrs_i)
      priority_total[i*N+j][1] += len(set(site_nbrs_i))
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.12646342592592608}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[(h[i][j] > 0) * 2 - 1 for j in range(N)] for i in range(N)]

  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      for s,k in zip(site_nbrs,range(4)):
        if h[s][site_nbrs[k-1]] > 0:
          total_spin[i][j] += 1
        else:
          total_spin[i][j] -= 1

      priority_total[i][j] = [(total_spin[i][j] + state[i][j]), -(total_spin[i][j])]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.24088842592592583}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr]:
            priority_total[i*N+j][0] = total_spin[site_nbr]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr]:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.24088842592592583}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr]:
            priority_total[i*N+j][0] = total_spin[site_nbr]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr]:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.24088842592592583}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr]:
            priority_total[i*N+j][0] = total_spin[site_nbr]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr]:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  total_energy = np.zeros((N*N, 2))
  for i in range(4):
    site_energy = (np.prod(J_new[i::4], 0) + h).flatten()
    site_energy[site_energy < 0] *= -1
    total_energy += np.column_stack((site_energy, -site_energy))
  return total_energy




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [[np.prod(J[(i*N+j)%N::N]).sum(), -np.prod(J[3+(i*N+j)%N::N]).sum()] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.04805169753086423}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-N//2)] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for k in site_neighbors(i,j):
        site_nbr_spin = -1 if h[k//N][k%N] > 0 else 1
        total_spin += site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.22964737654320985}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0454538580246914}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for k in site_neighbors(i,j):
        site_nbr_spin = -1 if h[k//N][k%N] > 0 else 1
        total_spin += site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2,2))
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - sum_1).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority.tolist())




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i//N)-N//2)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.10857731481481486}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = np.array([[j if i % 2 == 0 else (N - 1 - j) for j in range(N)] for i in range(N)])
  total_spin = h.flatten()
  for i in range(4):
    site_nbr = (site_nbr + 1) % N
    total_spin += J[i].flatten() * (-1)**((i-2)//2)
  priority_total = np.column_stack((-total_spin, total_spin))
  return(priority_total.tolist())




#score: {'data2D.txt': 0.1909066358024694}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
      total_spin[i*N+j][0] += site_spin * (1 + site_nbr_spin)
      total_spin[i*N+j][1] -= site_spin * (1 + site_nbr_spin)
      
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j][0] = -total_spin[i*N+j][1]
      else:
        total_spin[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0011257716049382718}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-N//2)) % N
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for k in range(3):
        site_nbr = site_neighbors(i,k)
        total_spin[i*N+j][site_spin] += (1 if site_nbr == j else -1) * (-1 if h[site_nbr][k] > 0 else 1)
      
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0013702160493827159}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = np.array([[j if i % 2 == 0 else (N - 1 - j) for j in range(N)] for i in range(N)])
  total_spin = h.flatten()
  for i in range(4):
    site_nbr = (site_nbr + 1) % N
    total_spin += J[i].flatten() * (-1)**((i-2)//2)
  priority_total = np.column_stack([-np.abs(total_spin), np.abs(total_spin)])
  return(priority_total.tolist())




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(4):
    site_nbr = np.array([[j if (i+j)%2==0 else N-1-j for j in range(N)] for k in range(N)])
    for j in range(N):
      total_spin[j][0] += J[i].flatten()[site_nbr[:,j]][0]
      total_spin[j][1] += J[i].flatten()[site_nbr[:,j]][1]
  return(total_spin.tolist())




#score: {'data2D.txt': 0.22824861111111092}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = np.array([[j if i % 2 == 0 else N - 1 - j for j in range(N)] for i in range(N)])
  total_spin = np.zeros((N*N, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr_val][j]
  priority_total = np.column_stack((-total_spin[:,0], total_spin[:,0]))
  return(priority_total.tolist())




#score: {'data2D.txt': -0.0018307098765432102}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
      
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[i][0], -total_spin[i][1]])
    else:
      priority_total.append([-total_spin[i][0], total_spin[i][1]])
  
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[0, float('-inf')] for _ in range(N**2)]

  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[site][0] += 1
        priority_total[site][1] -= 1
      else:
        priority_total[site][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.20312978395061748}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j] += h[site_nbr][j]
      priority_total[i*N+j][0] = total_spin[i*N+j]
      priority_total[i*N+j][1] = -total_spin[i*N+j]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if total_spin[i*N+j] < total_spin[site_nbr]:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
          else:
            priority_total[i*N+j][0] -= 1
            priority_total[i*N+j][1] += 1
        else:
          if total_spin[i*N+j] < -total_spin[site_nbr]:
            priority_total[i*N+j][0] -= 1
            priority_total[i*N+j][1] += 1
          else:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
    
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.24088842592592583}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += total_spin[site]
        priority_total[i*N+j][1] -= total_spin[site]
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          if h[site_nbr][j] > 0:
            if priority_total[i*N+j][0] < total_spin[site_nbr]:
              priority_total[i*N+j][0] = total_spin[site_nbr]
            else:
              priority_total[i*N+j][1] = -total_spin[site_nbr]
          else:
            if priority_total[i*N+j][1] > -total_spin[site_nbr]:
              priority_total[i*N+j][1] = -total_spin[site_nbr]
            else:
              priority_total[i*N+j][0] = total_spin[site_nbr]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.24088842592592583}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr]:
            priority_total[i*N+j][0] = total_spin[site_nbr]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr]:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += total_spin[site_nbr]
          priority_total[i*N+j][1] -= total_spin[site_nbr]
        else:
          priority_total[i*N+j][0] -= total_spin[site_nbr]
          priority_total[i*N+j][1] = -total_spin[site_nbr]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.013366820987654321}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
      priority_total[i*N+j][1] = -sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
    else:
      site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = -sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
      priority_total[i*N+j][1] = sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.013359413580246912}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site_nbrs_site = [site_nbrs.index((i + ((k-1)%N - 1)) % N) for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s][0] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
      priority_total[i*N+j][1] = -sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
    else:
      site_nbrs_site = [site_nbrs.index((i + ((k-1)%N - 1)) % N) for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s][0] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = -sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
      priority_total[i*N+j][1] = sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.10857731481481486}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = np.array([[j if i % 2 == 0 else (N - 1 - j) for j in range(N)] for i in range(N)])
  total_spin = h.flatten()
  for i in range(4):
    site_nbr = (site_nbr + 1) % N
    total_spin += J[i].flatten() * (-1)**((i-2)//2)
  priority_total = np.column_stack((-total_spin, total_spin))
  return(priority_total.tolist())




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[total_spin[j][0], -total_spin[j][1]] for j in range(N*N)]
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = np.zeros((N, N))
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[i][0], -total_spin[i][1]])
    else:
      priority_total.append([-total_spin[i][0], total_spin[i][1]])
  
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0018307098765432102}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
      
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[i][0], -total_spin[i][1]])
    else:
      priority_total.append([-total_spin[i][0], total_spin[i][1]])
  
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j]>0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i, 1 if h[i//N][i%N] > 0 else -1) for i in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for site, spin in site_order:
    for k in range(4):
      site_nbr = (site // N + ((k - 1) % 2 - 1)) % N
      if h[site_nbr][site % N] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1

    for k in range(4):
      site = (site + ((k - 1) % 2 - 1)) % N
      if h[site // N][site % N] > 0:
        priority_total[site][0] += total_spin[site][0]
        priority_total[site][1] -= total_spin[site][1]
      else:
        priority_total[site][0] -= total_spin[site][0]

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i, -1 if h[i//N][i%N] > 0 else 1) for i in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for site, spin in site_order:
    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][site%N] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1
    for k in range(4):
      site = (site + ((k-1)%2 - 1)) % N
      if h[site//N][site%N] > 0:
        priority_total[site][0] += total_spin[site][0]
        priority_total[site][1] -= total_spin[site][1]
      else:
        priority_total[site][0] -= total_spin[site][0]

  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i//N*N+i%N, -1 if h[i//N][i%N] > 0 else 1) for i in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(len(site_order)):
    site = site_order[i][0]
    spin = site_order[i][1]
    
    for k in range(4):
      if k == 0:
        site_nbr = (site//N, (site%N + N - 1) % N)
      elif k == 1:
        site_nbr = ((site//N + 1)%N, site%N)
      elif k == 2:
        site_nbr = (site//N, (site%N + 1) % N)
      else:
        site_nbr = ((site//N - 1)%N if site//N > 0 else N-1, site%N)
      
      if h[site_nbr[0]][site_nbr[1]] > 0:
        total_spin[i][spin == -1] -= 1
        priority_total[i][spin == -1] += 1
      else:
        total_spin[i][spin == 1] += 1
        priority_total[i][spin == 1] -= 1
        
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0022912037037037037}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbrs = []
  for i in range(N**2):
    site_nbrs.append([(i//N + ((j-1)%N - N//2)) % N for j in range(3)])
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site = i
    spin = -1 if h[i//N][i%N] > 0 else 1
    total_spin[site][spin==1] += 1
    for k in range(3):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      priority_total[site][spin==1] += h[site_nbr][i%N]
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.1911029320987654}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i-1)%N if i > 0 else N-1 for i in range(N)]
  site_nbrs = [(j-1)%N if j > 0 else N-1 for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin[i*N+j][0] += sum([h[(i+((k-1)%2-1))%N][j] for k in range(4)])
      total_spin[i*N+j][1] -= sum([h[site_nbrs[j]][j] for _ in range(2)])
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [[x[0], x[1]] for x in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0.0 for _ in range(2)] for _ in range(N)] for _ in range(N)]
  total_spin = [[0.0, 0.0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin[i*N+j][0] += sum(h[site_nbr[0]][site_nbr[1]] if h[site_nbr[0]][site_nbr[1]] > 0 else -h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs)
      total_spin[i*N+j][1] -= total_spin[i*N+j][0]
      
  return [[x[0], x[1]] for x in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for site in itertools.product(range(N), range(N)):
    if h[site[0]][site[1]] > 0:
      site_val = (site[0] + ((site[1]-1)%N - N//2)) % N
      total_spin[site_val*N+site[1]][0] += 1
      total_spin[site_val*N+site[1]][1] -= 1
    else:
      site_val = (site[0] + ((site[1]-1)%N - N//2)) % N
      total_spin[site_val*N+site[1]][0] -= 1
      total_spin[site_val*N+site[1]][1] += 1
  
  return [list(x) for x in sorted([list(x) for x in total_spin])]




#score: {'data2D.txt': 0.013916512345679012}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N, N, 2), dtype=int)
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][site][0] += 1
        total_spin[i][site][1] -= 1
      else:
        total_spin[i][site][0] -= 1
        
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i][site][0]
        priority_total[i*N+j][1] -= total_spin[i][site][1]
      else:
        priority_total[i*N+j][0] -= total_spin[i][site][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N, N, 2))
  
  # Add your logic here to compute priorities
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
        
  return priority_total.reshape(N**2, 2).tolist()




#score: {'data2D.txt': -0.0014004629629629623}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0,0.0] for _ in range(N**2)]
  site_weights = [[0.0,0.0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
      
      site_nbrs = [(i, (j-1)%N), (i, (j+1)%N), ((i-1)%N, j), ((i+1)%N, j)]
      for k, site in enumerate(site_nbrs):
        if site[0] < N and site[1] < N:
          if h[site[0]][site[1]] > 0:
            site_weights[i*N+j][0] += total_spin[site[0]*N+site[1]][0]
          else:
            site_weights[i*N+j][1] -= total_spin[site[0]*N+site[1]][0]

  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.000185648148148148}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0,0.0] for _ in range(N**2)]
  site_weights = [[0.0,0.0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site_nbr*N+j][spin==1] += 1

      for k in range(2):
        site = (i + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          site_weights[site*N+j][0] += total_spin[site*N+j][0]
        else:
          site_weights[site*N+j][1] -= total_spin[site*N+j][0]

  for i in range(N):
    for j in range(N):
      for k in range(2):
        if h[i][j] > 0:
          priority_total = [total_spin[(i + ((j-1)%N - 1)) % N*N+(k-1)%N][0], total_spin[(i + ((j-1)%N - 1)) % N*N+(k-1)%N][1]]
        else:
          priority_total = [-total_spin[(i + ((j-1)%N - 1)) % N*N+(k-1)%N][0], -total_spin[(i + ((j-1)%N - 1)) % N*N+(k-1)%N][1]]

  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.00026959876543209847}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = np.zeros((N,N))
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return np.array([[(j+1)/2 for j in range(2)] if h[i//N][i%N] > 0 else [-(j+1)/2 for j in range(2)] for i in range(N**2)]).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.00026959876543209847}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = np.zeros((N,N))
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return np.array([[(j+1)/2 for j in range(2)] if h[i//N][i%N] > 0 else [-(j+1)/2 for j in range(2)] for i in range(N**2)]).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site = (i // N + ((i % N - 1) % N) - N//2) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= total_spin[site][1]
      else:
        priority_total[i*N+j][0] -= total_spin[site][0]
        priority_total[i*N+j][1] += total_spin[site][1]
  return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    interaction_sum = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    magnetism_sum = h[int(i/N)][i%N]
    if state[int(i/N)][i%N] > 0:
      priority_total[i][0] += interaction_sum + magnetism_sum
      priority_total[i][1] -= interaction_sum - magnetism_sum
    else:
      priority_total[i][0] -= interaction_sum + magnetism_sum
      priority_total[i][1] += interaction_sum - magnetism_sum
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    interaction_sum = sum(J[site][int(i/N)][i%N] * (-1)**((site_nbrs.index(site)%2-1)*2) for site in site_nbrs)
    magnetism_sum = h[int(i/N)][i%N]
    priority_total[i][0] += interaction_sum + magnetism_sum
    priority_total[i][1] -= interaction_sum - magnetism_sum
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0003646604938271601}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    interaction_sum = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    magnetism_sum = h[int(i/N)][i%N]
    priority_total[i][0] += interaction_sum + magnetism_sum
    priority_total[i][1] -= interaction_sum - magnetism_sum
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.17048287037037063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
        total_spin[i*N+j][1] -= (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.17048287037037063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
        total_spin[i*N+j][1] -= (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j][0] += h[site][j]
      if h[i][j] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      priority_total[i*N+j][0] += total_spin[site_nbr][1]
      priority_total[i*N+j][1] -= total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.009120216049382717}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,-1))
    else:
      site_order.append((i,1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(3):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

    for k in range(N**2):
      site = (k + ((i-1)%2 - 1)) % N
      if h[site//N][k%N] > 0:
        priority_total[k][0] += total_spin[i][0]
        priority_total[k][1] -= total_spin[i][1]
      else:
        priority_total[k][0] -= total_spin[i][0]

  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.13117330246913594}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,1))
    else:
      site_order.append((i,-1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(3):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site//N][i%N] > 0:
        priority_total[i][0] += total_spin[i][0]
        priority_total[i][1] -= total_spin[i][1]
      else:
        priority_total[i][0] -= total_spin[i][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.0004782407407407405}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin[i*N+j] = [sum([1 if state[s][site_nbrs[(k-1)%4]] == 1 else -1 for s,k in zip(site_nbrs,range(4))]), 
                 sum([-1 if state[s][site_nbrs[(k-1)%4]] == 1 else 1 for s,k in zip(site_nbrs,range(4))])]
      
  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': -0.00131496913580247}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[sum([1 if (i + ((k-1)%N - N//2)) % N == s and state[s][(j+N*s%N)//N] == -1 else -1 for k,s in zip(range(4),[(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]])]) for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    spin_sum = total_spin[i//N][i%N]
    priority_total = [spin_sum, -spin_sum]
    priorities.append(priority_total)
  return priorities




#score: {'data2D.txt': -0.013366820987654321}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      if h[i][j] > 0:
        site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
        site_nbrs_spin = [(total_spin[s] > 0) for s in site_nbrs_site]
        priority_total[i*N+j][0] = sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
        priority_total[i*N+j][1] = -sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
      else:
        site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
        site_nbrs_spin = [(total_spin[s] > 0) for s in site_nbrs_site]
        priority_total[i*N+j][0] = -sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
        priority_total[i*N+j][1] = sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.013366820987654321}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  
  # Calculate total spin at each site
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  # Calculate priority for each site
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
      priority_total[i*N+j][1] = -sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
    else:
      site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = -sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
      priority_total[i*N+j][1] = sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.1992572530864199}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i, 1) if h[i//N][i%N] > 0 else (i, -1) for i in range(N**2)]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(3):
      if k % 2 == 0:
        site_nbr = (site // N + ((k-1) % 2 - 1)) % N
        if h[site_nbr][i % N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1
      elif k % 2 == 1:
        site = (i + ((k-1) % 2 - 1)) % N
        if h[site//N][i%N] > 0:
          priority_total[i][0] += 1
          priority_total[i][1] -= 1
        else:
          priority_total[i][0] -= 1

  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.257437808641975}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+N+(j-1)//N-1)%N,(i+N+(j+1)//N-1)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.15721157407407427}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N if j%2==0 else (i+(j+1)%N-1) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.15721157407407427}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N if j%2==0 else (i+(j+1)%N-1) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.257437808641975}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+N+(j-1)//N-1)%N,(i+N+(j+1)//N-1)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.04705817901234572}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = np.full((N*N,2),np.inf)
  
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = np.sum(total_spin[i*N+j]) - total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = np.sum(total_spin[i*N+j])
      else:
        priority_total[i*N+j][1] = -np.sum(total_spin[i*N+j])
  
  return priority_total.tolist()




#score: {'data2D.txt': 0.0624899691358025}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0624899691358025}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0004066358024691351}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, j+1))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      for site_nbr in site_nbrs:
        total_spin = h[site_nbr[0]][site_nbr[1]]
        priority_total[i*N+j][0 if total_spin > 0 else 1] += 1
  
  return priority_total.tolist()




#score: {'data2D.txt': 0.0005973765432098772}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0 for _ in range(4)] for _ in range(N)] for _ in range(N)]
  total_spin = [0 for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, j+1))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      for site_nbr in site_nbrs:
        total_spin[i*N+j] += h[site_nbr[0]][site_nbr[1]]
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin[i*N+j]
      else:
        priority_total[i][j][1] = -total_spin[i*N+j]
  return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [priority_total[i][j]]]




#score: {'data2D.txt': -0.0020424382716049388}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  priority_total = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[site_nbr*N+i%N][0], total_spin[site_nbr*N+i%N][1]])
    else:
      priority_total.append([-total_spin[site_nbr*N+i%N][0], -total_spin[site_nbr*N+i%N][1]])
  
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  total_spin_ones = [0]*N**2
  total_spin_minus_ones = [0]*N**2
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin_ones[site] += 1
      total_spin_minus_ones[site] += -spin
  
  for i in range(N**2):
    priority = (total_spin_ones[i], -total_spin_minus_ones[i])
    priorities.append(priority)
  
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[total_spin[j][0],-total_spin[j][1]] for j in range(N*N)]
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1

  priority_total = np.zeros((N*N, 2), dtype=int)
  for j in range(N):
    if h[j//N][j%N] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]

  return priority_total.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N), dtype=int)
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  
  priority_total = np.zeros((N,N,2), dtype=int)
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[site][0] = total_spin[site][0]
      else:
        priority_total[site][1] = -1*total_spin[site][0]
  
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.15269768518518537}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        spin = -1 if h[i][j] > 0 else 1
        total_spin[i*N+j][spin==1] += 1

  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.15269768518518537}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.15269768518518537}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N + j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j]>0 else 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][site_spin==1] += 1
        
  for i in range(N**2):
    priority_total[i][0] = total_spin[i][0]
    priority_total[i][1] = -1*total_spin[i][1]
    
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  site_weights = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site_nbr*N+j][spin==1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          site_weights[site*N+j][0] += total_spin[site*N+j][0]
        else:
          site_weights[site*N+j][1] -= total_spin[site*N+j][0]

  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += sum([state[site_nbr][k] for k in range(N)])
        priority_total[i*N+j][1] -= sum([state[k][j] for k in range(N) if (k-j)%N==1])
      else:
        priority_total[i*N+j][0] -= sum([state[site_nbr][k] for k in range(N)])
        priority_total[i*N+j][1] += sum([state[k][j] for k in range(N) if (k-j)%N==1])
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -6.990740740740753e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[0.0,0.0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin += h[site_nbr][j]
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
      
      if h[i][j] > 0:
        site_weights[i*N+j][0] -= total_spin
        site_weights[i*N+j][1] += total_spin
      else:
        site_weights[i*N+j][0] += total_spin
        site_weights[i*N+j][1] -= total_spin
  
  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,1))
    else:
      site_order.append((i,-1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf'),float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -1*total_spin[j][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.0006575617283950613}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for j in range(N):
    if h[i][j] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for site in itertools.product(range(N), range(N)):
    if h[site[0]][site[1]] > 0:
      site_val = (site[0] + ((site[1]-1)%N - N//2)) % N
      total_spin[site_val*N+site[1]][0] += 1
      total_spin[site_val*N+site[1]][1] -= 1
    else:
      site_val = (site[0] + ((site[1]-1)%N - N//2)) % N
      total_spin[site_val*N+site[1]][0] -= 1
      total_spin[site_val*N+site[1]][1] += 1
  
  return [list(x) for x in sorted([list(x) for x in total_spin], key=lambda x: (sum(x), -min(x)))]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[site][0] += 1
        priority_total[site][1] -= 1
      else:
        priority_total[site][0] -= 1
        priority_total[site][1] += 1
  
  return [list(x) for x in sorted([list(x) for x in priority_total])]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      for site_nbr in site_nbrs:
        total_spin[i*N+j][0] += J[site_nbr][i][j]
        total_spin[i*N+j][1] -= J[site_nbr][i][j]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.0005038580246913587}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]

  for i in range(N**2):
    site = (i // N, i % N)
    spin = -state[site[0]][site[1]]
    total_spin[i][0] += h[site[0]][site[1]] * spin
    total_spin[i][1] -= h[site[0]][site[1]] * spin

  for i in range(N**2):
    site = (i // N, i % N)
    site_nbr = site_nbrs[i]
    total_spin[i][0] += J[site_nbr//N][((site_nbr%N)-N//2)%N][0] * state[site[0]][site[1]]
    total_spin[i][1] -= J[site_nbr//N][((site_nbr%N)-N//2)%N][0] * state[site[0]][site[1]]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_squared = N*N
  state = np.zeros((N_squared, 2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = h[i][site] if h[i][j] > 0 else -h[i][j]
      state[i*N+j][0] += 1 if total_spin > 0 else -1
      state[i*N+j][1] -= 1
      
  return state.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.05660570987654324}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  def get_priority(i, j, total_spin):
    if h[i][j] > 0:
      return [total_spin[(i + ((j-1)%N - N//2)) % N][0], -total_spin[(i + ((j-1)%N - N//2)) % N][1]]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          return [total_spin[site_nbr][0], -total_spin[site_nbr][1]]
        else:
          return [-total_spin[site_nbr][0], total_spin[site_nbr][1]]

  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    for j in range(N):
      priorities.append(get_priority(i, j, state))
  return priorities




#score: {'data2D.txt': 0.0007106481481481484}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [1,3]]
      total_spin = [0, 0]
      for k in site_nbrs:
        if h[k][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      if h[i][j] > 0:
        priorities.append([-total_spin[1], -total_spin[0]])
      else:
        priorities.append([total_spin[0], total_spin[1]])
  return priorities




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1
        total_spin[site][1] += 1
      
  return [[x,y] for [x,_],y in sorted(zip([list(x) for x in total_spin],range(N**2)))]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      state[site][j] += spin
      total_spin[i*N+j][0] += 1 if h[i][j] > 0 else -1
      total_spin[i*N+j][1] -= 1 if h[i][j] > 0 else 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[site][0] += total_spin[i*N+j][0]
      else:
        priority_total[site][1] -= total_spin[i*N+j][0]
  
  return [[x, y] for [x, _], y in sorted(zip(priority_total, [i for i in range(N**2)]))]




#score: {'data2D.txt': -0.0006723765432098765}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for site in itertools.product(range(N), range(N)):
    site_val = (site[0] + ((site[1]-1)%N - N//2)) % N
    if h[site[0]][site[1]] > 0:
      total_spin[site_val*N+site[1]][0] += sum(1 for k in range(N) if ((k-site[1])%N in (site[0]-1,site[0]+1)) and state[k][site[1]] == 1)
      total_spin[site_val*N+site[1]][1] -= sum(1 for k in range(N) if ((k-site[1])%N in (site[0]-1,site[0]+1)) and state[k][site[1]] == -1)
    else:
      total_spin[site_val*N+site[1]][0] -= sum(1 for k in range(N) if ((k-site[1])%N in (site[0]-1,site[0]+1)) and state[k][site[1]] == 1)
      total_spin[site_val*N+site[1]][1] += sum(1 for k in range(N) if ((k-site[1])%N in (site[0]-1,site[0]+1)) and state[k][site[1]] == -1)
  
  return sorted([list(x) for x in total_spin])




#score: {'data2D.txt': -0.0010643518518518515}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return priority_total.flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0010643518518518515}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return np.array([list(t) for t in total_spin]).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.008439043209876542}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - N//2)) % N for _ in range(3)]
      site_nbrs.sort()
      total_spin[i*N+j][0] += sum(h[site_nbrs[k]][j] for k in range(3))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -1*total_spin[i][0]
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[site_nbr][0]
      else:
        priority_total[j][1] = -1*total_spin[site_nbr][0]
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.006533179012345679}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, (j+1)%N))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      total_spin = sum([h[site[0]][site[1]] for site in site_nbrs])
      
      if h[i][j] > 0:
        priority_total[j*N+i][0] = total_spin + 1
        priority_total[j*N+i][1] = -total_spin - 1
      else:
        priority_total[j*N+i][0] = -total_spin - 1
        priority_total[j*N+i][1] = total_spin + 1
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.010204166666666667}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = sum([state[i][j]*x for i,x in enumerate(h[:,j])])
    else:
      priority_total[j][1] = -1*sum([state[i][j]*x for i,x in enumerate(h[:,j])])
  return(priority_total)




#score: {'data2D.txt': 0.17020941358024638}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = np.array([[j if i % 2 == 0 else N - 1 - j for j in range(N)] for i in range(N)])
  total_spin = np.zeros((N*N, 2))
  for k in range(4):
    for i in range(N):
      site_nbr_val = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr_val][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  priority_total = np.column_stack((-total_spin[:,0], -total_spin[:,0]))
  return(priority_total.tolist())




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= total_spin

  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= total_spin

  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.20622577160493835}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+N+(j-1)//N-1)%N,(i+N+(j+1)//N-1)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.052452006172839544}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      if h[i][j] > 0:
        priority_total[i*N+j] = [total_spin + 1, -total_spin]
      else:
        priority_total[i*N+j] = [-total_spin, total_spin+1]
  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': -0.0015754629629629625}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      if h[i][j] > 0:
        priority_total = sum([1 if state[s][site_nbrs[(k-1)%4]] == 1 else -1 for s,k in zip(site_nbrs,range(4))])
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        priority_total = sum([-1 if state[s][site_nbrs[(k-1)%4]] == -1 else 1 for s,k in zip(site_nbrs,range(4))])
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
      return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': -0.1968615740740742}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      spin_sum = sum([state[s][site_nbrs[(k-1)%4]] for s,k in zip(site_nbrs,range(4))])
      if h[i][j] > 0:
        total_spin[i*N+j] = [spin_sum + 1, -spin_sum]
      else:
        total_spin[i*N+j] = [-spin_sum, spin_sum+1]

  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': 5.3549382716049477e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    
    for k in range(3):
      site = (i//N + ((k-1)%2 - 1)) % N
      total_spin[i][0] += h[site][i%N]
    
  return np.array([list(t) for t in total_spin]).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -6.990740740740753e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[0.0,0.0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin += h[site_nbr][j]
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
      
      if h[i][j] > 0:
        site_weights[i*N+j][0] -= total_spin
        site_weights[i*N+j][1] += total_spin
      else:
        site_weights[i*N+j][0] += total_spin
        site_weights[i*N+j][1] -= total_spin
      
  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -6.990740740740753e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[0.0,0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin += h[site_nbr][j]
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site][j]
      
      if h[i][j] > 0:
        site_weights[i*N+j][0] -= total_spin
        site_weights[i*N+j][1] += total_spin
      else:
        site_weights[i*N+j][0] += total_spin
        site_weights[i*N+j][1] -= total_spin
  
  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.013359413580246912}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site_nbrs_site = [site_nbrs.index((i + ((k-1)%N - 1)) % N) for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
      priority_total[i*N+j][1] = -sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
    else:
      site_nbrs_site = [site_nbrs.index((i + ((k-1)%N - 1)) % N) for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = -sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
      priority_total[i*N+j][1] = sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [total_spin[s][0] if total_spin[s][0] > 0 else -total_spin[s][1] for s in site_nbrs_site]
      priority_total[i*N+j][0] = sum(site_nbrs_spin)
    else:
      site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [total_spin[s][0] if total_spin[s][0] > 0 else -total_spin[s][1] for s in site_nbrs_site]
      priority_total[i*N+j][1] = -sum(site_nbrs_spin)
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.013366820987654321}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s][0] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
      priority_total[i*N+j][1] = -sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
    else:
      site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s][0] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = -sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
      priority_total[i*N+j][1] = sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  priorities = []
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - 1)) % N for k in range(4)]
      total_spin = [0, 0]
      for k in site_nbrs:
        if h[k][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          total_spin[1] += 1
      priority_total = [float('-inf'), float('inf')]
      for k in site_nbrs:
        if h[k][j] > 0:
          if priority_total[0] < total_spin[0]:
            priority_total[0] = total_spin[0]
          else:
            priority_total[1] = -total_spin[1]
        else:
          if priority_total[1] > -total_spin[1]:
            priority_total[1] = -total_spin[1]
          else:
            priority_total[0] = total_spin[0]
      priorities.append([priority_total[0], priority_total[1]])
  
  return priorities




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.22964737654320985}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
      
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.22964737654320985}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.22964737654320985}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
      
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.22964737654320985}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
      
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.22964737654320985}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
      
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1957257716049384}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N - 1)) % N,
                  (i + (j + 1) % N), ((i + (j + 1) % N) + (N - 1)) % N]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.22964737654320985}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin

  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.257437808641975}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N - 1) % N, (i + (j + 1) % N - 2) % N] if (i + j) % 2 == 0 else [(i + (j - 1) % N - 1) % N, (i + (j + 1) % N - 2) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i, j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.257437808641975}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[0,0] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.257437808641975}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[0,0] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.257437808641975}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.010939660493827158}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.19460354938271635}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = np.array([[j if i % 2 == 0 else N - 1 - j for j in range(N)] for i in range(N)])
  total_spin = np.zeros((N*N, 2))
  for k in range(4):
    for i in range(N):
      site_nbr_val = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr_val][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': 0.16055169753086374}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2))
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2) - 1) % N
    total_spin[i][0] += h[site_nbr][i % N]
    total_spin[i][1] -= h[(N-1)-site_nbr][i % N]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1

  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.001921141975308642}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0, 0] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      for site_nbr in site_nbrs:
        priority_total[i][j][0] += J[site_nbr][i][j] * h[i][j]
        priority_total[i][j][1] -= J[site_nbr][i][j] * (1 - 2*h[i][j])
  return [[x, -x] for x in [item[0] + item[1] for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.19460354938271635}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = [[j if i % 2 == 0 else N - 1 - j for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    for i in range(N):
      site_nbr_val = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr_val][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      priority_total[i*N+j][0] = total_spin[site_nbr][0]
      priority_total[i*N+j][1] = -1*total_spin[site_nbr][1]
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for k in range(N):
    site_nbr = (k + ((k-1)%2 - 1)) % N
    for j in range(N):
      total_spin = state[site_nbr][j]
      if h[k][j] > 0:
        priority_total[k*N+j][0] += total_spin
        priority_total[k*N+j][1] -= total_spin
      else:
        priority_total[k*N+j][0] -= total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum([J[site][int(i/N)][i%N] for site in site_nbrs]) + h[int(i/N)][i%N], 
            -sum([J[site][int(i/N)][i%N] for site in site_nbrs]) - h[int(i/N)][i%N]]
    priority_total[i][0] = min(priority_total[i][0], total_spin[0])
    priority_total[i][1] = max(priority_total[i][1], total_spin[1])
    
  return [[priority_total[i][0], priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.0003646604938271601}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = []
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    interaction_sum = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    magnetism_sum = h[int(i/N)][i%N]
    site_interactions.append([interaction_sum + magnetism_sum, -interaction_sum + magnetism_sum])
  return site_interactions




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [0]*N*N
  for site in range(N*N):
    site_nbrs = [(site//N + ((k-1)%N - N//2)) % N for k in [(site%N-1),(site%N+1),((site//N)-1)*(N)+(site%N),(site//N+1)*N+(site%N)]]
    total_spin[site] = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k,i in zip(site_nbrs,map(lambda x: int(x//N), site_nbrs))])])
  return [[int(-x) if total_spin[site] < 0 else int(x) for x in [total_spin[site]+1,-total_spin[site]-1]] for site in range(N*N)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      if h[i][j] > 0:
        priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]
      else:
        priority_total[i][j] = [(-total_spin - state[i][j]), (-total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin[i*N+j] = [sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])]), sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])]
      priority_total[i][j] = [total_spin[i*N+j][0] + state[i][j], total_spin[i*N+j][1]]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.1957257716049384}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N - 1)) % N,
                  (i + (j + 1) % N), ((i + (j + 1) % N) + (N - 1)) % N]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1957257716049384}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N - 1)) % N,
                  (i + (j + 1) % N), ((i + (j + 1) % N) + (N - 1)) % N]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0008785493827160492}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(spin * (h[k][l] > 0) for k, l in [(i, (j-1)%N), (i, (j+1)%N), ((i-1)%N, j), ((i+1)%N, j)] if (k >= 0 and k < N and l >= 0 and l < N))
      site_weights[i*N+j][spin==1] = total_spin
  
  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.009458487654320988}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  spin = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': 0.19460354938271635}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = np.array([[j if i % 2 == 0 else N - 1 - j for j in range(N)] for i in range(N)])
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr_val = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr_val][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return(priority_total)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -8.101851851851838e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = sum(h[k][j] for k in range(N) if ((k-i)%N != 1 and (k-i)%N != -1) or (i+j)%2 == 0)
      site_weights[i*N+j] = [total_spin, -total_spin]
  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.0006871913580246918}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[0.0,0.0] for _ in range(N*N)]
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin += h[site_nbr][j]
      
      for k in range(3):
        if k == 0:
          site = (i + ((k-1)%2 - 1)) % N
        else:
          site = (i + ((N+j-1)%2 - 1)) % N
        total_spin += h[site][j]
      
      if h[i][j] > 0:
        site_weights[i*N+j][0] -= total_spin
        site_weights[i*N+j][1] += total_spin
      else:
        site_weights[i*N+j][0] += total_spin
        site_weights[i*N+j][1] -= total_spin
  
  return np.array(site_weights).flatten().reshape((N*N,2), order='F')




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::2], 0) + h).flatten()
  sum_2 = (-np.prod(J_new[1::2], 0)).flatten()
  priority = np.column_stack((sum_1, -sum_1))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      interaction_sum = sum(J[site][int(i/N)][j] * (-1)**((site_nbrs.index(site)%2-1)*2) for site in site_nbrs)
      magnetism_sum = h[i][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += interaction_sum + magnetism_sum
        priority_total[i*N+j][1] -= interaction_sum - magnetism_sum
      else:
        priority_total[i*N+j][0] -= interaction_sum - magnetism_sum
        priority_total[i*N+j][1] += interaction_sum + magnetism_sum
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.24088842592592583}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr]:
            priority_total[i*N+j][0] = total_spin[site_nbr]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr]:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.24088842592592583}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
        
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr]:
            priority_total[i*N+j][0] = total_spin[site_nbr]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr]:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [0,1,2]]
      
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          for k in range(3):
            site = (i + ((k-1)%2 - 1)) % N
            if h[site][j] > 0:
              priority_total[i*N+j][0] += 1
              priority_total[i*N+j][1] -= 1
            else:
              priority_total[i*N+j][1] = -priority_total[i*N+j][0]
          
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19972577160493854}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site*N+j][0] += 1
        total_spin[site*N+j][1] -= 1
      else:
        total_spin[site*N+j][0] -= 1
        total_spin[site*N+j][1] += 1
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= total_spin[site][1]
      else:
        priority_total[i*N+j][0] -= total_spin[site][0]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0014260802469135798}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        state = (site_nbr*N+j) % 4
      else:
        state = 3
      total_spin[site_nbr*N+j] += np.array([1, -1]) if state == i else np.array([-1, 1])
  return total_spin.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.004397067901234568}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[site*N+site_nbr][0] += 1
        priority_total[site*N+site_nbr][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[site*N+site_nbr][0] -= 1
        priority_total[site*N+site_nbr][1] += 1
        
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.0018307098765432102}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
      
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[i][0], -total_spin[i][1]])
    else:
      priority_total.append([-total_spin[i][0], total_spin[i][1]])
      
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
        
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
          
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.24088842592592583}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
        
  for i, j in itertools.product(range(N), range(N)):
    site = (i + ((j-1)%2 - 1)) % N
    if h[i][j] > 0:
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr]:
            priority_total[i*N+j][0] = total_spin[site_nbr]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr]:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00973935185185185}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - (k-1)%2)) % N
        spin = -1 if h[i][j] > 0 else 1
        total_spin[site*N+j][spin==1] += 1

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.14724675925925948}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]

  priority_total = [[0,0] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < priority_total[i*N+j][1]:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
          else:
            priority_total[i*N+j][0] -= 1
            priority_total[i*N+j][1] += 1
        else:
          if priority_total[i*N+j][0] < priority_total[i*N+j][1]:
            priority_total[i*N+j][0] -= 1
            priority_total[i*N+j][1] += 1
          else:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.24088842592592583}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr]:
            priority_total[i*N+j][0] = total_spin[site_nbr]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr]:
            priority_total[i*N+j][1] = -total_spin[site_nbr]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1951344135802471}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  total_spin = [[0 for _ in range(2)] for _ in range(N2)]
  
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr][0]
        priority_total[i*N+j][1] -= total_spin[site_nbr][1]
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          if h[site_nbr][j] > 0:
            if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
            else:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
            else:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [-total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      if h[i][j] > 0:
        priority_total[i][j] = [total_spin + state[i][j], total_spin]
      else:
        priority_total[i][j] = [-total_spin - state[i][j], -total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.19460354938271635}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      for k in range(4):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.1969847222222225}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = [(i + (k-1)%2) % N for k in range(4)]
      for k in range(4):
        if h[site_nbr[k]][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0003646604938271601}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    site = (int(i/N), i%N)
    total_spin[i][0] += sum(J[site_nbr][site[0]][site[1]] * h[site[0]][site[1]] for site_nbr in site_nbrs)
    total_spin[i][1] -= sum(J[site_nbr][site[0]][site[1]] * (1 - 2*h[site[0]][site[1]]) for site_nbr in site_nbrs)
  return total_spin




#score: {'data2D.txt': 0.11083132716049394}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 6.55864197530861e-05}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = sum([1 if (i-neighbor)//2 < 0 else (-1)**((i-neighbor)//2) for neighbor in site_neighbors(i,j)])
      
      priority_total[i*N+j][0] = -total_spin
      priority_total[i*N+j][1] = total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.045858179012345714}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N)%N, (i+(j+1)%N)%N] if ((i+j) % 2 == 0) else [(i+(j-1)%N)%N,(i+(j+1)%N)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -total_spin
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][0] = total_spin
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00980354938271605}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site*N+j][0] += 1
        total_spin[site*N+j][1] -= 1
      else:
        total_spin[site*N+j][0] -= 1
        total_spin[site*N+j][1] += 1
  return [list(x) for x in sorted([list(x) for x in total_spin], key=lambda x: (sum(x), -min(x)))]




#score: {'data2D.txt': -0.00980354938271605}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_val = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_val*N+j][0] += 1
        total_spin[site_val*N+j][1] -= 1
      else:
        total_spin[site_val*N+j][0] -= 1
        total_spin[site_val*N+j][1] += 1
  return [list(x) for x in sorted(total_spin, key=lambda x: (sum(x), -min(x)))]




#score: {'data2D.txt': -0.00980354938271605}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_val = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_val*N+j][0] += 1
        total_spin[site_val*N+j][1] -= 1
      else:
        total_spin[site_val*N+j][0] -= 1
        total_spin[site_val*N+j][1] += 1
  return [list(x) for x in sorted([list(x) for x in total_spin], key=lambda x: (sum(x), -min(x)))]




#score: {'data2D.txt': -0.00980354938271605}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_val = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_val*N+j][0] += 1
        total_spin[site_val*N+j][1] -= 1
      else:
        total_spin[site_val*N+j][0] -= 1
        total_spin[site_val*N+j][1] += 1
  
  return [list(x) for x in sorted([list(x) for x in total_spin], key=lambda x: (sum(x), -min(x)))]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N**2):
    site = (i % N, int(i / N))
    if h[site[1]][site[0]] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  return [[x,y] for [x,_],y in sorted(zip([list(x) for x in total_spin],range(N**2)), reverse=True)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
  return [[x,y] for [x,_],y in sorted(zip(total_spin,[i for i in range(N**2)]), reverse=True)]




#score: {'data2D.txt': 0.19941342592592592}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[0,i*N+j]
        priority_total[i*N+j][1] -= J[1,i*N+j]
      else:
        priority_total[i*N+j][0] -= J[2,i*N+j]
        priority_total[i*N+j][1] += J[3,i*N+j]
  
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.19972577160493854}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site*N+j][0] += 1
        total_spin[site*N+j][1] -= 1
      else:
        total_spin[site*N+j][0] -= 1
        total_spin[site*N+j][1] += 1
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin = 0
        for k in range(4):
          state = np.random.randint(0,2,(N4,N))
          state[site][0] += 1
          total_spin = sum(state.flatten())
          priority_total[i*N+j][0] = -total_spin
          break
      else:
        total_spin = 0
        for k in range(4):
          state = np.random.randint(0,2,(N4,N))
          site = (i + ((j-1)%N - N//2)) % N
          state[site][0] += 1
          total_spin = sum(state.flatten())
          priority_total[i*N+j][1] = -total_spin
          break

  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.19941342592592592}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[0,i*N+j]
        priority_total[i*N+j][1] -= J[1,i*N+j]
      else:
        priority_total[i*N+j][0] -= J[2,i*N+j]
        priority_total[i*N+j][1] += J[3,i*N+j]
  
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.09521682098765433}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += J[0,i*N+j]
      else:
        total_spin -= J[2,i*N+j]

      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin

  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.09521682098765433}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin = J[0,i*N+j]
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        total_spin = J[2,i*N+j]
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
  
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': -0.0003646604938271601}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2), dtype=int)
  
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      priority_total[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    else:
      priority_total[i][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-N_half) <= 1]
  
  priority_total = np.zeros((N**2, 2))
  for i in range(N**2):
    total_spin = [0, 0]
    for site in site_nbrs:
      total_spin[0] += J[i][int(i/N)][i%N]
      total_spin[1] -= J[i][int(i/N)][i%N]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0, 0] for _ in range(4)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
            -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0][0] += total_spin[0]
      priority_total[i][0][1] -= total_spin[1]
      priority_total[i][1][0] -= total_spin[0]
      priority_total[i][1][1] += total_spin[1]
    else:
      priority_total[i][2][0] -= total_spin[0]
      priority_total[i][2][1] += total_spin[1]
  return [[x[0], x[1]] for x in [max(row, key=lambda x: (x[0]+x[1], -x[0]*x[1])) for row in priority_total]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = sum(J[site][int(i/N)][i%N] * h[int(i/N)][i%N] for site in site_nbrs)
    
    priority_total[i][0] += total_spin
    priority_total[i][1] -= total_spin
    
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N if j%2==0 else (i+(j+1)%N-1) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = sum(1 if h[k//N][k%N]>0 == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][1] = -priority_total[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.17048287037037063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
        total_spin[i*N+j][1] -= (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
      priority_total = [[x[0],x[1]] for x in total_spin]
  
  return priority_total




#score: {'data2D.txt': 0.17048287037037063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
        total_spin[i*N+j][1] -= (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.17048287037037063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
        total_spin[i*N+j][1] -= (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N - 1) % N, (i + (j + 1) % N - 2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i, j):
        total_spin[i * N + j][0] += (1 + (-1) ** ((i - neighbor) // 2) * (-1) ** ((j - neighbor) % N // 2)) * site_spin
        total_spin[i * N + j][1] -= (1 + (-1) ** ((i - neighbor) // 2) * (-1) ** ((j - neighbor) % N // 2)) * site_spin
      
      if h[i][j] > 0:
        priority_total = [[-x[0], x[1]] for x in total_spin]
      else:
        priority_total = [[x[0], -x[1]] for x in total_spin]
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, -0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1
        total_spin[site][1] += 1
        
  priority_list = sorted(((total_spin[i][0], -total_spin[i][1]) for i in range(N**2)), key=lambda x: (x[0], -x[1]))
  return [[x[1]%N, int(x[1]/N)] for x in priority_list]




#score: {'data2D.txt': 0.1394739197530866}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2), (i + ((j+1)%N) - N//2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.1394739197530866}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2), (i + ((j+1)%N) - N//2)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1

      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.1394739197530866}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2), (i + ((j+1)%N) - N//2)]

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1

      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin += h[site_nbr][j]
      
      for k in range(3):
        if k == 0:
          site = (i + ((k-1)%2 - 1)) % N
        else:
          site = (i + ((N+j-1)%2 - 1)) % N
        total_spin += h[site][j]
      
      site_weights[i*N+j][1] -= total_spin if total_spin > 0 else total_spin
      site_weights[i*N+j][0] -= total_spin
      
  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0010643518518518515}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return total_spin.flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[0 for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      if h[i][j] > 0:
        priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]
      else:
        priority_total[i][j] = [(-total_spin - state[i][j]), (-total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      if h[i][j] > 0:
        priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]
      else:
        priority_total[i][j] = [(-total_spin - state[i][j]), (-total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i, j in itertools.product(range(N), range(N)):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [0, 1, 3]]
    for k, site_nbr in enumerate(site_nbrs):
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += state[site_nbr][j]
        priority_total[i*N+j][1] -= state[site_nbr][j]
      else:
        priority_total[i*N+j][0] -= state[site_nbr][j]
        priority_total[i*N+j][1] += state[site_nbr][j]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.13117330246913594}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,1))
    else:
      site_order.append((i,-1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(3):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site//N][i%N] > 0:
        priority_total[i][0] += total_spin[i][0]
        priority_total[i][1] -= total_spin[i][1]
      else:
        priority_total[i][0] -= total_spin[i][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': 0.22964737654320985}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin

  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0018859567901234567}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N), ((i+N//2)%N if j == N//2 else (i+(j+1)%N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for k in range(4):
    site_nbr = lambda i,j: [(i + (k-1) % N) % N]
    for i in range(N):
      for j in range(N):
        if h[i][j] > 0:
          total_spin[i*N+j][0] += sum(-1 if (h[site_nbr(i,j)[0]//N][site_nbr(i,j)[0]%N]>0) == -h[i][j] else 1 for _ in range(N))
          total_spin[i*N+j][1] -= sum(1 if (h[site_nbr(i,j)[0]//N][site_nbr(i,j)[0]%N]>0) != h[i][j] else -1 for _ in range(N))
        else:
          total_spin[i*N+j][0] += sum(-1 if (h[site_nbr(i,j)[0]//N][site_nbr(i,j)[0]%N]>0) == h[i][j] else 1 for _ in range(N))
          total_spin[i*N+j][1] -= sum(1 if (h[site_nbr(i,j)[0]//N][site_nbr(i,j)[0]%N]>0) != -h[i][j] else -1 for _ in range(N))
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.2783979938271597}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[::N**2+1],0) + h).flatten()
  sum2 = (-np.prod(J_new[1::N**2+1],0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i, 1 if h[i//N][i%N] > 0 else -1) for i in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for site, spin in site_order:
    if h[site//N][site%N] > 0:
      for k in range(3):
        neighbor_site = (site//N + ((k-1)%2 - 1)) % N
        if h[neighbor_site][site%N] > 0:
          total_spin[site][0] += 1
          total_spin[site][1] -= 1
        else:
          total_spin[site][0] -= 1

      for k in range(3):
        site_nbr = (site + ((k-1)%2 - 1)) % N**2
        if h[site//N][site%N] > 0:
          priority_total[site][0] += total_spin[site][0]
          priority_total[site][1] -= total_spin[site][1]
        else:
          priority_total[site][0] -= total_spin[site][0]

  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i, 1 if h[i//N][i%N] > 0 else -1) for i in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(4):
      if k % 2 == 0:
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        if h[site_nbr][i%N] > 0:
          total_spin[i][0] += 1
          total_spin[i][1] -= 1
        else:
          total_spin[i][0] -= 1
      else:
        site = (i + ((k-1)%2 - 1)) % N
        if h[site//N][i%N] > 0:
          priority_total[i][0] += total_spin[i][0]
          priority_total[i][1] -= total_spin[i][1]
        else:
          priority_total[i][0] -= total_spin[i][0]

  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i, 1 if h[i//N][i%N] > 0 else -1) for i in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N**2):
    site, spin = site_order[i]
    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site//N][i%N] > 0:
        priority_total[i][0] += total_spin[i][0]
        priority_total[i][1] -= total_spin[i][1]
      else:
        priority_total[i][0] -= total_spin[i][0]

  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0.0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.00973935185185185}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]

  priority_total = [[[0,0] for _ in range(N)] for _ in range(N)]

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - (k-1)%2)) % N
        spin = -1 if h[i][j] > 0 else 1
        total_spin[site*N+j][spin==1] += 1

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.00980354938271605}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[site*N+j][0] += 1
          total_spin[site*N+j][1] -= 1
        else:
          total_spin[site*N+j][0] -= 1
          total_spin[site*N+j][1] += 1

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((2,N**2))
  site_nbrs = []
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[0,i*N+j] += h[i][j]
      if h[i][j] > 0:
        total_spin[0,i*N+j] += 1
      else:
        total_spin[0,i*N+j] -= 1
        
      site_nbrs.append((i,N-1-i,N-1-j))
      
  priority_total = np.zeros((N**2,2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = np.zeros((N**2, 2))
  
  for site in range(N**2):
    i, j = divmod(site, N)
    site_nbr = (i + ((j-1)%N - N//2)) % N
    if h[i][j] > 0:
      priority_total[site][0] += 1
      priority_total[site][1] -= 1
    else:
      priority_total[site][0] -= 1
      priority_total[site][1] += 1
    
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1119510802469137}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [0]*N2
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009061882716049382}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - (k-1)%2)) % N
        spin = -1 if h[i][j] > 0 else 1
        total_spin[site*N+j][spin==1] += 1
  
  for i in range(N**2):
    site_nbrs_i = [x for x in site_nbrs if x == i]
    for j in range(2):
      site_nbrs_j = [(i + ((j-1)%N - (k-1)%2)) % N for k in range(3)]
      total_spin[i][0] += sum([1 if x==i else 0 for x in site_nbrs_i])
      total_spin[i][1] -= sum([1 if x==i else 0 for x in site_nbrs_j])

  return total_spin




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - (k-1)%2)) % N
        spin = -1 if h[i][j] > 0 else 1
        total_spin[site*N+j][spin==1] += 1

  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      priority_total[i*N+j][spin==1] += 1

  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]
  
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.20693256172839508}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N**2):
    if J[0, i//N, i%N] > 0:
      priority_total[i][0] += J[0, i//N, i%N]
      priority_total[i][1] -= J[0, i//N, i%N]
    else:
      priority_total[i][0] -= J[0, i//N, i%N]
  return [[-x, -y] for x, y in priority_total]




#score: {'data2D.txt': 0.22824861111111092}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k%2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + site_nbr) % N
        total_spin[i*N+j][0] += h[site_nbr_val][j]
        if h[site_nbr_val][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      
  return priority_total




#score: {'data2D.txt': -0.0017337962962962966}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]
      
      total_spin[i*N+j][0] += h[site[0]][site[1]] * state[site[0]][site[1]]
      total_spin[i*N+j][1] -= h[site[0]][site[1]] * state[site[0]][site[1]]
      
      for k in range(2):
        if J[site_nbr//N][((site_nbr%N)-N//2)%N][k] != 0:
          total_spin[i*N+j][1-k] += J[site_nbr//N][((site_nbr%N)-N//2)%N][k] * state[site[0]][site[1]]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.0005038580246913587}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]

  for i in range(N**2):
    site = (i // N, i % N)
    spin = -state[site[0]][site[1]]
    total_spin[i][0] += h[site[0]][site[1]] * spin
    total_spin[i][1] -= h[site[0]][site[1]] * spin

  for i in range(N**2):
    site = (i // N, i % N)
    site_nbr = site_nbrs[i]
    total_spin[i][0] += J[site_nbr//N][((site_nbr%N)-N//2)%N][0] * state[site[0]][site[1]]
    total_spin[i][1] -= J[site_nbr//N][((site_nbr%N)-N//2)%N][0] * state[site[0]][site[1]]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.07582854938271583}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.sum(np.sign(J_new[::N*N+1]), axis=0) + h).flatten()
  sum2 = (-np.sum(np.sign(J_new[1::N*N+1]), axis=0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,-1))
    else:
      site_order.append((i,1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(3):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

    for k in range(N**2):
      site = (k + ((i-1)%2 - 1)) % N
      if h[site//N][k%N] > 0:
        priority_total[k][0] += total_spin[i][0]
        priority_total[k][1] -= total_spin[i][1]
      else:
        priority_total[k][0] -= total_spin[i][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.065533487654321}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N))
  spin_priority = np.zeros((N,N,2))

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]

      total_spin[i][j] = sum(1 if h[site_nbr[0]][site_nbr[1]] > 0 else -1 for site_nbr in site_nbrs)

      if h[i][j] > 0:
        spin_priority[i][j][0] = total_spin[i][j] + 1
        spin_priority[i][j][1] = -total_spin[i][j] - 1
      else:
        spin_priority[i][j][0] = -total_spin[i][j] - 1
        spin_priority[i][j][1] = total_spin[i][j] + 1

  return np.array([x for x in [spin_priority[i][j] for i in range(N) for j in range(N)]]).tolist()




#score: {'data2D.txt': -0.0009254629629629627}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
        -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
          -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
           -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3429927469135792}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = sum(J[site][int(i/N)][i%N] * state[site][j] for site,j in zip(site_nbrs,range(len(site_nbrs))))
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin
      priority_total[i][1] = -total_spin
    else:
      priority_total[i][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 6.55864197530861e-05}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = sum([1 if (i-neighbor)//2 < 0 else (-1)**((i-neighbor)//2) for neighbor in site_neighbors(i,j)])
      
      priority_total[i*N+j][0] = -total_spin
      priority_total[i*N+j][1] = total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001032253086419753}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]

  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = sum([1 if (i-neighbor)//2 < 0 else (-1)**((i-neighbor)//2) * (h[(i-neighbor)//2][(neighbor)%N] > 0) for neighbor in site_neighbors(i,j)])
      
      priority_total[i*N+j][0] = -total_spin
      priority_total[i*N+j][1] = total_spin
      
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 6.55864197530861e-05}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = sum([1 if (i-neighbor)//2 < 0 else (-1)**((i-neighbor)//2) for neighbor in site_neighbors(i,j)])
      
      priority_total[i*N+j][0] = -total_spin
      priority_total[i*N+j][1] = total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009458487654320988}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf'), float('inf')] for _ in range(N)] for _ in range(N)]
  
  site_nbrs = [(i//N + ((j-1)%2 - 1)) % N for (i, j) in itertools.product(range(N), range(N))]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  
  for i in range(N**2):
    site = (i // N + ((i % N-1)%2 - 1)) % N
    for k in range(4):
      site_nbr = (site + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        priority_total[i//N][i%N][0] += 1
        priority_total[i//N][i%N][1] -= 1
      else:
        priority_total[i//N][i%N][0] -= 1
  
  return [[x, y] for x, y in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.16898070987654346}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      for k in [(i + ((site-1)%2 - 1)) % N, (i + ((site+1)%N - N//2)) % N]:
        if h[k//N][k%N] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0454538580246914}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for k in site_neighbors(i,j):
        site_nbr_spin = -1 if h[k//N][k%N] > 0 else 1
        total_spin += site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0009375000000000002}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]

  state = np.array([[1 if h[i][j] > 0 else -1 for j in range(N)] for i in range(N)])

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[(i*N+j)]
      total_spin[i*N+j][state[site_nbr//N][(site_nbr%N)-N//2]%N == 1] += h[site_nbr//N][site_nbr%N]
      if state[site_nbr//N][(site_nbr%N)-N//2]%N > 0:
        total_spin[i*N+j][0] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
      else:
        total_spin[i*N+j][0] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.00973935185185185}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0.0 for _ in range(3)] for _ in range(N)] for _ in range(N)]
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0.0, 0.0] for _ in range(N**2)]

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - (k-1)%2)) % N
        if h[i][j] > 0:
          total_spin[site*N+j][0] += 1
          total_spin[site*N+j][1] -= 1
        else:
          total_spin[site*N+j][0] -= 1
          total_spin[site*N+j][1] += 1

  for i in range(N**2):
    site = (i // N, i % N)
    if h[i//N][i%N] > 0:
      priority_total[site[0]][site[1]][0] += 1
      priority_total[site[0]][site[1]][1] -= 1
    else:
      priority_total[site[0]][site[1]][0] -= 1
      priority_total[site[0]][site[1]][1] += 1

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.0005038580246913587}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]

  for i in range(N**2):
    site = (i // N, i % N)
    spin = -state[site[0]][site[1]]
    total_spin[i][0] += h[site[0]][site[1]] * spin
    total_spin[i][1] -= h[site[0]][site[1]] * spin

  for i in range(N**2):
    site = (i // N, i % N)
    site_nbr = site_nbrs[i]
    total_spin[i][0] += J[site_nbr//N][((site_nbr%N)-N//2)%N][0] * state[site[0]][site[1]]
    total_spin[i][1] -= J[site_nbr//N][((site_nbr%N)-N//2)%N][0] * state[site[0]][site[1]]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.0005038580246913587}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]

  for i in range(N**2):
    site = (i // N, i % N)
    spin = -state[site[0]][site[1]]
    total_spin[i][0] += h[site[0]][site[1]] * spin
    total_spin[i][1] -= h[site[0]][site[1]] * spin

  for i in range(N**2):
    site = (i // N, i % N)
    site_nbr = site_nbrs[i]
    total_spin[i][0] += J[site_nbr//N][((site_nbr%N)-N//2)%N][0] * state[site[0]][site[1]]
    total_spin[i][1] -= J[site_nbr//N][((site_nbr%N)-N//2)%N][0] * state[site[0]][site[1]]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.22824861111111092}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N*N, 2))
  site_nbr = np.array([[j if i % 2 == 0 else N - 1 - j for j in range(N)] for i in range(N)])
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr_val][j]
        if h[site_nbr_val][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  priority_total = np.column_stack((-total_spin[:,0], -total_spin[:,1]))
  return(priority_total.tolist())




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.19344182098765436}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site] > 0 else -1 for s,site in zip(site_nbrs,state[i])])
      
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin + state[i][j]
        priority_total[i][j][1] = -total_spin
      else:
        priority_total[i][j][0] = -total_spin
        priority_total[i][j][1] = total_spin

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.19207145061728403}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin + state[i][j]
        priority_total[i][j][1] = -total_spin
      else:
        priority_total[i][j][0] = -total_spin
        priority_total[i][j][1] = total_spin

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin[i][j] = [-sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))]) + state[i][j], -sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])]
  return [[int(x) for x in lst] for lst in [item for sublist in total_spin for item in sublist]]




#score: {'data2D.txt': -0.07582854938271583}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.sum(np.sign(J_new[::N*N+1]), axis=0) + h).flatten()
  sum2 = (-np.sum(np.sign(J_new[1::N*N+1]), axis=0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.07582854938271583}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.sum(np.sign(J_new[::N*N+1]), axis=0) + h).flatten()
  sum2 = (-np.sum(np.sign(J_new[1::N*N+1]), axis=0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.00973935185185185}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0.0, 0.0] for _ in range(N**2)]

  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]

  for i in range(N**2):
    site = (i // N, i % N)
    total_spin[i][0] += h[site[0]][site[1]]
    total_spin[i][1] -= h[site[0]][site[1]]

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - (k-1)%2)) % N
        if h[i][j] > 0:
          total_spin[site*N+j][0] += 1
          total_spin[site*N+j][1] -= 1
        else:
          total_spin[site*N+j][0] -= 1
          total_spin[site*N+j][1] += 1

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.19420231481481512}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = np.zeros((N**2, 2))
  
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          priority_total[site*N+j][0] += 1
          priority_total[site*N+j][1] -= 1
        else:
          priority_total[site*N+j][0] -= 1
          priority_total[site*N+j][1] += 1
  
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.07061435185185193}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  total_spin = np.zeros((N, N, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      for k, site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs]):
        if h[k][site_nbr] > 0:
          total_spin[i][j][0] += state[i][j]
          total_spin[i][j][1] -= state[i][j]
        else:
          total_spin[i][j][0] -= state[i][j]
          total_spin[i][j][1] += state[i][j]
          
  return [[int(x) for x in lst] for lst in [item for sublist in total_spin for item in sublist]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
      -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.09483996913580253}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
      -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  for j in range(N):
    if h[j][0] > 0:
      total_spin = [sum(1 for k in range(N) if h[k][j] > 0), 
        - sum(1 for k in range(N) if h[k][j] < 0)]
    else:
      total_spin = [-sum(1 for k in range(N) if h[k][j] > 0), 
        sum(1 for k in range(N) if h[k][j] < 0)]
    for i in range(N):
      if h[i][j] > 0:
        priority_total[j*N+i][0] = total_spin[0]
      else:
        priority_total[j*N+i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
      -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.009299228395061728}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+((j-1)%N - N//2)) % N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      site_nbr = site_neighbors(i,j)[0]
      total_spin[i*N+j][site_spin] += (1 if site_nbr == j else -1) * (-1 if h[site_nbr][j] > 0 else 1)
      
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0007402777777777779}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-N//2)) % N
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for k in range(4):
        site_nbr = site_neighbors(i,k%N)
        total_spin[i*N+j][site_spin] += (1 if site_nbr == j else -1) * (-1 if h[site_nbr][k%N] > 0 else 1)
      
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.22824861111111092}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + site_nbr) % N
        total_spin[i*N+j][0] += h[site_nbr_val][j]
        if h[site_nbr_val][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,1))
    else:
      site_order.append((i,-1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1

  for i in range(N**2):
    priority_total[i][0] = total_spin[i][0]
    priority_total[i][1] = -1*total_spin[i][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i, 1 if h[i//N][i%N] > 0 else -1) for i in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = 1 if h[i][j] > 0 else -1
      total_spin[site][spin==1] += 1

  for i in range(N**2):
    priority_total[i][0 if h[i//N][i%N] > 0 else 1] -= total_spin[i][0]

  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.00028132716049382743}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      total_spin[i*N+j][0 if sum(h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs) > 0 else 1] += len(site_nbrs)
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[-priority_total[i][0], -priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.19460354938271635}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for k in range(4):
    for i in range(N):
      site_nbr_val = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[site_nbr_val][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return [[-x, -y] for x, y in priority_total]




#score: {'data2D.txt': 0.22824861111111092}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k%2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + site_nbr) % N
        total_spin[i*N+j][0] += h[site_nbr_val][j]
        if h[site_nbr_val][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return(priority_total)




#score: {'data2D.txt': -0.001658796296296296}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      for site_nbr in site_nbrs:
        total_spin[i][site_nbr][0] += J[site_nbr][i][j] * h[i][j]
        total_spin[i][site_nbr][1] -= J[site_nbr][i][j] * (1 - 2*h[i][j])
  priority_total = []
  for i in range(N):
    row = []
    for j in range(N):
      if h[i][j] > 0:
        row.append([total_spin[i][j][0], total_spin[i][j][1]])
      else:
        row.append([-total_spin[i][j][0], -total_spin[i][j][1]])
    priority_total.extend(row)
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2), dtype=int)
  total_spin = np.zeros((N*N, 2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      for site_nbr in site_nbrs:
        total_spin[i*N+j][0] += J[site_nbr][i][j] * h[i][j]
        total_spin[i*N+j][1] -= J[site_nbr][i][j] * (1 - 2*h[i][j])
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][1]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0029313271604938266}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1

      for k in range(4):
        site_nbr = (site + ((k-1)%2 - 1)) % N
        if h[site_nbr//N][site_nbr%N] > 0:
          priority_total[i*N+j][0] += total_spin[i*N+site_nbr][0]
          priority_total[i*N+j][1] -= total_spin[i*N+site_nbr][1]
        else:
          priority_total[i*N+j][0] -= total_spin[i*N+site_nbr][0]

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1

      for k in range(4):
        site_nbr = (site + ((k-1)%2 - 1)) % N
        if h[site_nbr//N][site_nbr%N] > 0:
          priority_total[i*N+j][0] += total_spin[site_nbr][0]
          priority_total[i*N+j][1] -= total_spin[site_nbr][1]
        else:
          priority_total[i*N+j][0] -= total_spin[site_nbr][0]

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0017791666666666665}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i,j) if h[i][j] > 0 else (i,-1*j) for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for site, spin in site_order:
    if spin > 0:
      for k in range(4):
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        if h[site_nbr][site%N] > 0:
          total_spin[site*N+site%N][0] += 1
          total_spin[site*N+site%N][1] -= 1
        else:
          total_spin[site*N+site%N][0] -= 1
    else:
      for k in range(4):
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        if h[site_nbr][site%N] > 0:
          total_spin[site*N+site%N][0] += 1
          total_spin[site*N+site%N][1] -= 1
        else:
          total_spin[site*N+site%N][0] -= 1

    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][site%N] > 0:
        priority_total[site*N+site%N][0] += total_spin[site*N+site%N][0]
        priority_total[site*N+site%N][1] -= total_spin[site*N+site%N][1]
      else:
        priority_total[site*N+site%N][0] -= total_spin[site*N+site%N][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.00973935185185185}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]

  priority_total = [[0,0] for _ in range(N**2)]

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - (k-1)%2)) % N
        spin = -1 if h[i][j] > 0 else 1
        total_spin[site*N+j][spin==1] += 1

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for k in range(3)]
      
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site_nbrs[0]*N+j][spin==1] += 1
      
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      total_spin[i][0] = -total_spin[i][1]
    else:
      total_spin[i][1] = -total_spin[i][0]

  return [[-x[1], x[0]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]

  for k in range(3):
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%N - (k-1)%2)) % N
        spin = -1 if h[i][j] > 0 else 1
        total_spin[site*N+j][spin==1] += 1

  priority_total = [[0,0] for _ in range(N**2)]

  for j in range(N):
    for i in range(N**2//N):
      site = i*N + j
      if h[i][j] > 0:
        priority_total[site][0] = total_spin[site][0]
      else:
        priority_total[site][1] = -1*total_spin[site][0]

  return priority_total




#score: {'data2D.txt': -0.02596466049382716}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0,0] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      
      total_spin = [sum(J[site][i][j] for site in site_nbrs), 
              -sum(J[site][i][j] for site in site_nbrs)]
      
      if h[i][j] > 0:
        priority_total[i][j][0] += sum(total_spin)
        priority_total[i][j][1] -= total_spin[1]
      else:
        priority_total[i][j][0] -= total_spin[0]
  
  return [[x[0], x[1]] for sublist in priority_total for x in sublist]




#score: {'data2D.txt': 0.009399845679012343}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + (k-1)%2 - 1) % N for k in range(4) if abs(k-int(i/N)) <= 1 and ((k-i)%N) == 0]
      
      total_spin = [sum(J[site][i][j] for site in site_nbrs), 
              -sum(J[site][i][j] for site in site_nbrs)]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
      else:
        priority_total[i*N+j][1] -= total_spin[0]
        
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.0009254629629629627}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
           -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [(total_spin + state[i][j]), -(total_spin)]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [(total_spin + state[i][j]), -(total_spin)]
  
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.257437808641975}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.17132700617283977}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.10985910493827171}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        if h[neighbor//N][neighbor%N] > 0:
          spin = 1
        else:
          spin = -1
        
        total_spin += site_spin * spin
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
      
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[-x[1],x[0]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  site = lambda i,j: (i + ((j-1)%2 - 1)) % N
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site(i,j)][0]
        priority_total[i*N+j][1] -= total_spin[site(i,j)][1]
      else:
        priority_total[i*N+j][0] -= total_spin[site(i,j)][0]
        priority_total[i*N+j][1] = -total_spin[site(i,j)][1]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_neighbors_list = list(set(site_neighbors(i,j)))
      site_neighbors_set = set(site_neighbors(i,j))
      
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors_list:
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
      
      priority_total[i*N+j][0] = -total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0010507716049382716}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        if (k % 2) == 0:
          site = (i + ((j-1)%2 - 1)) % N
          total_spin = np.sum(J[k, i*N+j:i*N+j+2])
          priority_total[i*N+j][0] += total_spin
          priority_total[i*N+j][1] -= total_spin
        else:
          site = (i + ((j-1)%2 - 1)) % N
          total_spin = np.sum(J[k, i*N+j:i*N+j+2])
          priority_total[site*N+j][0] -= total_spin
          priority_total[site*N+j][1] += total_spin
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': -0.0011939814814814814}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      total_spin[i*N+j][0] += h[site_nbr][j]
      total_spin[i*N+j][1] -= -h[site_nbr][j]
      
  priority_total = [[0, 0] for _ in range(N**2)]
  for j in range(N):
    if h[i][j] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]
      
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': 0.0009375000000000002}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]

  state = np.array([[1 if h[i][j] > 0 else -1 for j in range(N)] for i in range(N)])

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[(i*N+j)]
      total_spin[i*N+j][state[site_nbr//N][(site_nbr%N)-N//2]%N == 1] += h[site_nbr//N][site_nbr%N]
      if state[site_nbr//N][(site_nbr%N)-N//2]%N > 0:
        total_spin[i*N+j][0] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
      else:
        total_spin[i*N+j][0] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.0009375000000000002}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]

  state = np.array([[1 if h[i][j] > 0 else -1 for j in range(N)] for i in range(N)])

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[(i*N+j)]
      total_spin[i*N+j][state[site_nbr//N][(site_nbr%N)-N//2]%N == 1] += h[site_nbr//N][site_nbr%N]
      if state[site_nbr//N][(site_nbr%N)-N//2]%N > 0:
        total_spin[i*N+j][0] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
      else:
        total_spin[i*N+j][0] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.13117330246913594}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if sum(J[:,i//N,i%N]) > 0:
      site_order.append((i,1))
    else:
      site_order.append((i,-1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(3):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site//N][i%N] > 0:
        priority_total[i][0] += total_spin[i][0]
        priority_total[i][1] -= total_spin[i][1]
      else:
        priority_total[i][0] -= total_spin[i][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.009458487654320988}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': 0.1951344135802471}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  total_spin = [[0 for _ in range(2)] for _ in range(N2)]
  
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= total_spin[site][1]
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          if h[site_nbr][j] > 0:
            if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
            else:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
            else:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1951344135802471}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  total_spin = [[0 for _ in range(2)] for _ in range(N2)]
  
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= total_spin[site][1]
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          if h[site_nbr][j] > 0:
            if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
            else:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
            else:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.06731435185185188}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = []
    for k in [(i // N - 1) % N, (i // N + 1) % N, (j := i % N) - 1, j + 1]:
      if k == i // N and j == i % N:
        continue
      site_nbrs.append((k + ((j-1)%2 - 1)) % N)
    for nbr in site_nbrs:
      total_spin[i][0] += h[nbr][i % N]
      total_spin[i][1] -= h[(N-1)-nbr][i % N]
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.009922067901234566}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    for j in (i % N, (i // N) % N):
      total_spin[i][0] += state[j][0]
      total_spin[i][1] -= state[j][1]
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.10083225308641983}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2) - 1) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.0009862654320987655}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for k in range(3):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin = [0, 0]
      
      for j in range(N):
        if h[site_nbr][j] > 0:
          total_spin[0] += 1
          total_spin[1] -= 1
        else:
          total_spin[0] -= 1
          
      priority_total[i*N+j][0] = -total_spin[0]
      priority_total[i*N+j][1] = -total_spin[1]
  
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [priority_total[i][:] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1

  J_new = J.flatten()
  sum_1 = np.prod(J_new[0::4], 0) + h.flatten()
  sum_2 = np.prod(J_new[1::4], 0) + h.flatten()

  priority = []
  for i in range(N**2):
    if total_spin[i][1] > total_spin[i][0]:
      priority.append([1,-sum_1[i]])
    elif total_spin[i][0] > total_spin[i][1]:
      priority.append([-sum_2[i], -1])
    else:
      priority.append([1,sum_1[i]])

  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * (site_spin + site_nbr_spin)
        priority_total[i*N+j][1] -= site_spin * (site_spin + site_nbr_spin)
      return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * (site_spin + site_nbr_spin)
        priority_total[i*N+j][1] -= site_spin * (site_spin + site_nbr_spin)
      return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.17048287037037063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
        total_spin[i*N+j][1] -= (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('inf'), float('-inf')] for _ in range(N**2)]

  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]

  for i in range(N**2):
    site = (i // N, i % N)
    spin = state[site[0]][site[1]]
    total_spin[i][0] += h[site[0]][site[1]] * spin
    if h[site[0]][site[1]] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 2
    else:
      total_spin[i][0] -= 1

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][0] += sum(site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)])
      total_spin[i*N+j][1] -= sum(site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)])
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flatten = J.flatten()
  sum_1 = (np.prod(J_flatten[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_flatten[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.15721157407407427}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N if j%2==0 else (i+(j+1)%N-1) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.15721157407407427}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N if j%2==0 else (i+(j+1)%N-1) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        total_spin[i*N+j][0] += site_spin * site_nbr_spin
        total_spin[i*N+j][1] -= site_spin * site_nbr_spin
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1) % N, (i+(j+1)%N-2) % N if j%2==0 else (i+(j+1)%N-1) % N, (i+N+(j-1)//N-1) % N, (i+N+(j+1)//N-1) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
 
  total_spin = [[0, 0] for _ in range(N**2)]
 
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
 
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
 
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    total_spin = [0,0]
    for k in range(4):
      site_nbr = (i//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
    site_order.append((i, min(total_spin)))
  return [[x,y] for x,y in sorted(site_order)]




#score: {'data2D.txt': -0.0004729938271604934}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  priorities = np.zeros((N**2, 2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      
      for k, nbr in enumerate(site_nbrs):
        if h[i][j] > 0:
          spin = state[nbr][j]
          priorities[i*N+j][0] += np.count_nonzero([spin == 1])
          priorities[i*N+j][1] -= np.count_nonzero([spin == -1])
        else:
          spin = state[nbr][j]
          priorities[i*N+j][0] -= np.count_nonzero([spin == 1])
          priorities[i*N+j][1] += np.count_nonzero([spin == -1])
  
  return priorities.flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.19941342592592592}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[0,i*N+j]
        priority_total[i*N+j][1] -= J[1,i*N+j]
      else:
        priority_total[i*N+j][0] -= J[2,i*N+j]
        priority_total[i*N+j][1] += J[3,i*N+j]
  
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.19941342592592592}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[0,i*N+j]
        total_spin[i*N+j][1] -= J[1,i*N+j]
      else:
        total_spin[i*N+j][0] -= J[2,i*N+j]
        total_spin[i*N+j][1] += J[3,i*N+j]
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    site_nbrs_i = [(i + ((k-1)%2 - 1)) % N for k in [0,1]]
    if h[i][j] > 0:
      for site in site_nbrs_i:
        priority_total[i*N+j][0] += total_spin[site*N+j][0]
        priority_total[i*N+j][1] -= total_spin[site*N+j][1]
    else:
      for site in site_nbrs_i:
        if h[site][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site*N+j][0]:
            priority_total[i*N+j][0] = total_spin[site*N+j][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site*N+j][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site*N+j][1]:
            priority_total[i*N+j][1] = -total_spin[site*N+j][1]
          else:
            priority_total[i*N+j][0] = total_spin[site*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0017337962962962966}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]
      
      total_spin[i*N+j][0] += h[site[0]][site[1]] * state[site[0]][site[1]]
      total_spin[i*N+j][1] -= h[site[0]][site[1]] * state[site[0]][site[1]]
      
      for k in range(2):
        if J[site_nbr//N][((site_nbr%N)-N//2)%N][k] != 0:
          total_spin[i*N+j][1-k] += J[site_nbr//N][((site_nbr%N)-N//2)%N][k] * state[site[0]][site[1]]
          
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.0017337962962962966}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]
      
      total_spin[i*N+j][0] += h[site[0]][site[1]] * state[site[0]][site[1]]
      total_spin[i*N+j][1] -= h[site[0]][site[1]] * state[site[0]][site[1]]
      
      for k in range(2):
        if J[site_nbr//N][((site_nbr%N)-N//2)%N][k] != 0:
          total_spin[i*N+j][1-k] += J[site_nbr//N][((site_nbr%N)-N//2)%N][k] * state[site[0]][site[1]]
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = np.sum(J_new[0::4], axis=0)*np.prod(J_new[0::2].T, axis=0) + h.flatten()
  sum_2 = -np.sum(J_new[1::4], axis=0)*np.prod(J_new[1::2].T, axis=0) - h.flatten()
  priority = np.column_stack((sum_1, sum_2))
  return(priority)




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      interaction_sum = sum(J[site][int(i/N)][j] * (-1)**((site_nbrs.index(site)%2-1)*2) for site in site_nbrs)
      magnetism_sum = h[i][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += interaction_sum + magnetism_sum
        priority_total[i*N+j][1] -= interaction_sum - magnetism_sum
      else:
        priority_total[i*N+j][0] -= interaction_sum - magnetism_sum
        priority_total[i*N+j][1] += interaction_sum + magnetism_sum
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin = sum(J[site][int(i/N)][j] * (-1)**((site_nbrs.index(site)%2-1)*2) for site in site_nbrs)
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= -total_spin
      else:
        priority_total[i*N+j][0] -= -total_spin
        priority_total[i*N+j][1] += total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = np.zeros((N, N, 2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
        site_nbrs_spin = [(total_spin[s, j][0] > 0) for s in site_nbrs_site]
        total_spin[i, j, 0] += np.sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
        total_spin[i, j, 1] -= np.sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
      else:
        site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
        site_nbrs_spin = [(total_spin[s, j][0] > 0) for s in site_nbrs_site]
        total_spin[i, j, 0] -= np.sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
        total_spin[i, j, 1] += np.sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
  
  priority_total = [[-np.inf, np.inf] for _ in range(N2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
        site_nbrs_spin = [(total_spin[s, j][0] > 0) for s in site_nbrs_site]
        priority_total[i*N+j][0] += np.sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
        priority_total[i*N+j][1] -= np.sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
      else:
        site_nbrs_site = [(i + ((k-1)%N - 1)) % N for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
        site_nbrs_spin = [(total_spin[s, j][0] > 0) for s in site_nbrs_site]
        priority_total[i*N+j][0] -= np.sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
        priority_total[i*N+j][1] += np.sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
  
  return [[p[0], p[1]] for p in priority_total]




#score: {'data2D.txt': -0.0015658950617283946}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = {}
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        site_interactions[(i, j)] = sum(J[site_nbr][i][j] for site_nbr in site_nbrs)
      else:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        site_interactions[(i, j)] = -sum(J[site_nbr][i][j] for site_nbr in site_nbrs)
  return [[x, -x] for x in site_interactions.values()]




#score: {'data2D.txt': -0.2423087962962962}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site_nbrs[i*N+j]
      total_spin[i*N+j][0]
      priority_total[i*N+j][0] = total_spin[site_nbrs[i*N+j]][0]
      priority_total[i*N+j][1] = -total_spin[site_nbrs[i*N+j]][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] = total_spin[site_nbr][0]
          priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          priority_total[i*N+j][1] = -total_spin[site_nbr][1]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [[0, 0] for _ in range(N2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= total_spin[site][1]
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          if h[site_nbr][j] > 0:
            if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
            else:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
            else:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0009375000000000002}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]

  state = np.array([[1 if h[i][j] > 0 else -1 for j in range(N)] for i in range(N)])

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[(i*N+j)]
      total_spin[i*N+j][state[site_nbr//N][(site_nbr%N)-N//2]%N == 1] += h[site_nbr//N][site_nbr%N]
      if state[site_nbr//N][(site_nbr%N)-N//2]%N > 0:
        total_spin[i*N+j][0] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
      else:
        total_spin[i*N+j][0] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009503549382716048}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]

  state = [[1 if h[i][j] > 0 else -1 for j in range(N)] for i in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[(i*N+j)]
      total_spin[i*N+j][state[site_nbr//N][(site_nbr%N)-N//2]%N == 1] += h[site_nbr//N][site_nbr%N]
      if state[site_nbr//N][(site_nbr%N)-N//2]%N > 0:
        total_spin[i*N+j][0] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
      else:
        total_spin[i*N+j][0] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[site*N+j][0] += h[i][j]
      if h[i][j] > 0:
        total_spin[site*N+j][0] += 1
      else:
        total_spin[site*N+j][0] -= 1
      priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][0]]

  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site = (i % N, ((i // N) - (i // (N**2)) * N) % N)
    if h[site[0]][site[1]] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.01271311728395062}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = ((i + site_nbr) % N + (j-1)%N - N//2) % N
        total_spin[i*N+j][0] += h[site_nbr_val][j]
        if h[site_nbr_val][j] > 0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
  return [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin = J[0,i*N+j]
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin = -J[3,i*N+j]
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.30662145061728324}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site*N+j][0] += J[0,i*N+j]
        total_spin[site*N+j][1] -= J[1,i*N+j]
      else:
        total_spin[site*N+j][0] -= J[2,i*N+j]
        total_spin[site*N+j][1] += J[3,i*N+j]
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1957257716049384}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N - 1)) % N,
                  (i + (j + 1) % N), ((i + (j + 1) % N) + (N - 1)) % N]

  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.14599336419753106}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][0] += sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      total_spin[i*N+j][1] -= sum(1 if (h[k//N][k%N]>0) != site_spin else 1 for k in site_neighbors(i, j))

      for k in range(N**2):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)

      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + (k-1)%2 - 1) % N for k in range(4) if abs(k-int(i/N)) <= 1 and ((k-i)%N) == 0]
      total_spin = [sum(J[site][i][j] for site in site_nbrs), 
             -sum(J[site][i][j] for site in site_nbrs)]
      priority_total[i*N+j][0] += sum(1 for k in range(N) if h[k][i] > 0)
      priority_total[i*N+j][1] -= sum(1 for k in range(N) if h[k][i] < 0)
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.00881466049382716}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -1*total_spin[i][0]
  
  return [list(x) for x in np.argsort(-np.array(priority_total))]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for k in range(3):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[site_nbr*N+j][0] -= 1
          priority_total[site_nbr*N+j][1] += 1
  
  return [list(x) for x in np.argsort(-np.array(priority_total))]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return priority_total




#score: {'data2D.txt': 0.009399845679012343}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2), dtype=int)
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + (k-1)%2 - 1) % N for k in range(4) if abs(k-int(i/N)) <= 1 and ((k-i)%N) == 0]
      
      total_spin = [sum(J[site][i][j] for site in site_nbrs), 
             -sum(J[site][i][j] for site in site_nbrs)]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
      else:
        priority_total[i*N+j][1] -= total_spin[0]
        
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.009399845679012343}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2,2),dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + (k-1)%2 - 1) % N for k in range(4) if abs(k-int(i/N)) <= 1 and ((k-i)%N) == 0]
      total_spin = [sum(J[site][i][j] for site in site_nbrs), 
              -sum(J[site][i][j] for site in site_nbrs)]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
      else:
        priority_total[i*N+j][1] -= total_spin[0]
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site = (i + ((i//N)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1

    for j in range(N**2):
      site_nbr = (j + ((j//N)%2 - 1)) % N
      if h[j//N][j%N] > 0:
        priority_total[i][0] += total_spin[j][0]
        priority_total[i][1] -= total_spin[j][1]
      else:
        priority_total[i][0] -= total_spin[j][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.0005288580246913579}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i,1) if h[i//N][i%N] > 0 else (i,-1) for i in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for site, spin in sorted(site_order):
    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][site%N] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1

    for k in range(4):
      site = (k + ((site-1)%2 - 1)) % N
      if h[site//N][site%N] > 0:
        priority_total[site][0] += total_spin[site][0]
        priority_total[site][1] -= total_spin[site][1]
      else:
        priority_total[site][0] -= total_spin[site][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.19671311728395088}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i,j) if h[i][j]>0 else ((N-1)-i,N-1-(j%N)) for i in range(N) for j in range(N)]
  
  priority_total = [[[0,0] for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site = site_order[i]
    if h[site[0]][site[1]]>0:
      priority_total[i][0][0] += 1
      priority_total[i][1][0] -= 1
    else:
      priority_total[i][0][0] -= 1
      priority_total[i][1][0] += 1
    
    for j in range(N**2):
      if h[(site[0]+((j-1)%N - N//2))%N][min(site[1],(j+1)%N)]>0:
        priority_total[i][0][1] += priority_total[j][0][0]
        priority_total[i][1][1] -= priority_total[j][1][0]
      else:
        priority_total[i][0][1] -= priority_total[j][0][0]
        priority_total[i][1][1] += priority_total[j][1][0]
  
  return [[x[0],y[0]] for x,y in priority_total]




#score: {'data2D.txt': 0.0007106481481481484}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [1, 3]]
      
      for k in [1, 3]:
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
      
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  total_spin = [[0, 0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      for site_nbr in site_nbrs:
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(3)]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += sum([total_spin[site_nbr][0] for site_nbr in site_nbrs])
        priority_total[i*N+j][1] -= sum([total_spin[site_nbr][1] for site_nbr in site_nbrs])
      else:
        priority_total[i*N+j][0] -= sum([total_spin[site_nbr][0] for site_nbr in site_nbrs])
        priority_total[i*N+j][1] += sum([total_spin[site_nbr][1] for site_nbr in site_nbrs])
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00041311728395061775}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [1,3]]
      total_spin = sum(h[site_nbr][j] for site_nbr in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.06915972222222229}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbrs = [(i//N + ((k-1)%N - N//2)) % N for k in [i%N-1,i%N+1,(i//N)-1,(i//N)+1]]
    
    if h[i//N][i%N] > 0:
      total_spin[i][0] += sum([1 if state[site_nbr//N][site_nbr%N] == 1 else -1 for site_nbr in site_nbrs])
      total_spin[i][1] -= sum([-1 if state[site_nbr//N][site_nbr%N] == -1 else 1 for site_nbr in site_nbrs])
    else:
      total_spin[i][0] -= sum([1 if state[site_nbr//N][site_nbr%N] == 1 else -1 for site_nbr in site_nbrs])
      total_spin[i][1] += sum([-1 if state[site_nbr//N][site_nbr%N] == -1 else 1 for site_nbr in site_nbrs])
  
  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': -0.07061435185185193}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i // N + ((k-1)%N - N//2)) % N for k in [i%N-1,i%N+1,(i//N)-1,(i//N)+1]]
    total_spin = sum([1 if state[s][site_nbr] == 1 else -1 for s,site_nbr in zip(site_nbrs,[state[i//N][k] for k in site_nbrs])])
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin
      priority_total[i][1] = -1*total_spin
    else:
      priority_total[i][0] = -1*total_spin
      priority_total[i][1] = total_spin

  return [[int(x) for x in lst] for lst in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2) - 1) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[-priority_total[i][0], -priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      
      total_spin = [sum(J[site][i][j] for site in site_nbrs), 
             -sum(J[site][i][j] for site in site_nbrs)]
      
      if h[i][j] > 0:
        priority_total[i][j][0] += sum(total_spin)
        priority_total[i][j][1] -= total_spin[1]
      else:
        priority_total[i][j][0] -= total_spin[0]
  
  return [[x[0], x[1]] for sublist in priority_total for x in sublist]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin = J[0,i*N+j]
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin = -J[3,i*N+j]
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1

  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.0008924382716049379}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  sum_1 = np.prod(J_flat[::4], 0) + h.flatten()
  sum_2 = np.prod(np.flipud(J_flat)[1::4], 0) - h.flatten()
  site_weights = (sum_1 + sum_2).reshape((N, N), order='F')
  priority_total = np.zeros((N, N, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_weights[i][j] += 1
        priority_total[i][j][0] -= 1
      else:
        site_weights[i][j] -= 1
        priority_total[i][j][1] += 1
  return priority_total.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': 0.0010998456790123458}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = np.zeros((N, N))
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        site_weights[i][j] += 1
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        site_weights[i][j] -= 1
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
  return total_spin.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': 0.0728597222222223}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for j in range(3)]
    for j in site_nbrs:
      if h[j//N][j%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  priority_total = [[-x[0],-x[1]] if h[i//N][i%N] > 0 else [x[0],x[1]] for i,x in enumerate(total_spin)]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      total_spin = sum(1 if h[site_nbr[0]][site_nbr[1]] > 0 else -1 for site_nbr in site_nbrs)
      priority_total[i*N+j][0] = max(total_spin, priority_total[i*N+j][0])
      priority_total[i*N+j][1] = min(-total_spin, priority_total[i*N+j][1])
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.27843873456790036}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.reshape(-1,4).T.reshape(-1,N*N).flatten()
  sum_1 = (np.prod(J_new[::N*N],0)+h).flatten()
  sum_2 = (np.prod(np.flipud(J_new)[::N*N],0)-h).flatten()
  priority = np.column_stack((sum_1,sum_2))
  return(priority)




#score: {'data2D.txt': 0.0003054012345679017}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin = sum(1 if h[site_nbr[0]][site_nbr[1]] > 0 else -1 for site_nbr in site_nbrs)
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00045015432098765386}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -1*total_spin[j][0]
  return [[-priority_total[j][0], -priority_total[j][1]] for j in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.19671311728395088}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i,j) if h[i][j]>0 else ((N-1)-i,N-1-(j%N)) for i in range(N) for j in range(N)]
  
  priority_total = [[[0,0] for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site = site_order[i]
    if h[site[0]][site[1]]>0:
      priority_total[i][0][0] += 1
      priority_total[i][1][0] -= 1
    else:
      priority_total[i][0][0] -= 1
      priority_total[i][1][0] += 1
    
    for j in range(N**2):
      if h[(site[0]+((j-1)%N - N//2))%N][min(site[1],(j+1)%N)]>0:
        priority_total[i][0][1] += priority_total[j][0][0]
        priority_total[i][1][1] -= priority_total[j][1][0]
      else:
        priority_total[i][0][1] -= priority_total[j][0][0]
        priority_total[i][1][1] += priority_total[j][1][0]
  
  return [[x[0],y[0]] for x,y in priority_total]




#score: {'data2D.txt': -0.001616512345679015}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        site_moved = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += J[3,site_moved]
        total_spin[i*N+j][1] -= J[0,site_moved]
      else:
        site_moved = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= J[2,site_moved]
        total_spin[i*N+j][1] += J[1,site_moved]

  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': 0.05683780864197532}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        for k in range(4):
          if k == 0: total_spin[i*N+j][0] += J[k,i*N+j]
          else: total_spin[i*N+j][k%2] -= J[(3-k)%2,i*N+j]
      else:
        site = (i + ((j-1)%N - N//2)) % N
        for k in range(4):
          if k == 0: total_spin[i*N+j][0] += h[site][j]
          elif k == 1: total_spin[i*N+j][k%2] -= J[(3-k)%2,i*N+j]
          else: total_spin[i*N+j][k%2] += J[k-1,i*N+j]

  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': 0.19941342592592592}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[0,i*N+j]
        total_spin[i*N+j][1] -= J[1,i*N+j]
      else:
        total_spin[i*N+j][0] -= J[2,i*N+j]
        total_spin[i*N+j][1] += J[3,i*N+j]
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': -0.009503549382716048}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]

  state = [[1 if h[i][j] > 0 else -1 for j in range(N)] for i in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[(i*N+j)]
      total_spin[i*N+j][state[site_nbr//N][(site_nbr%N)-N//2]%N == 1] += h[site_nbr//N][site_nbr%N]
      if state[site_nbr//N][(site_nbr%N)-N//2]%N > 0:
        total_spin[i*N+j][0] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
      else:
        total_spin[i*N+j][0] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[site*N+j][0] += h[i][j]
      if h[i][j] > 0:
        total_spin[site*N+j][0] += 1
      else:
        total_spin[site*N+j][0] -= 1
      priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][0]]

  return priority_total




#score: {'data2D.txt': 0.000721450617283951}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[1 if h[i][j] > 0 else -1 for j in range(N)] for i in range(N)]

  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]
      
      total_spin[i*N+j][0] += h[site[0]][site[1]] * state[site[0]][site[1]]
      total_spin[i*N+j][1] -= h[site[0]][site[1]] * state[site[0]][site[1]]
      
      for k in range(2):
        if J[site_nbr//N][((site_nbr%N)-N//2)%N][k] != 0:
          total_spin[i*N+j][1-k] += J[site_nbr//N][((site_nbr%N)-N//2)%N][k] * state[site[0]][site[1]]
          
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      priority_total[i*N+j][spin==1] += 1
  for i in range(N**2):
    if h[(i//N)%N][(i%N)] > 0:
      priority_total[i][0] = -priority_total[i][0]
    else:
      priority_total[i][1] = -priority_total[i][1]
  return [[-x, -y] for x, y in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  total_spin = [0,0]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[0] += 1 if spin == spin else -1
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[0]
    else:
      priority_total[i][0] = -total_spin[0]
      priority_total[i][1] = total_spin[0]
  return priority_total




#score: {'data2D.txt': 0.0007174382716049384}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin = sum(h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs)
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbrs = [(i + ((j-1)%N - 1)) % N for _ in range(N) for _ in range(N)]
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += total_spin[site_nbr][0]
          priority_total[i*N+j][1] -= total_spin[site_nbr][1]
        else:
          priority_total[i*N+j][1] = -total_spin[site_nbr][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for site in itertools.product(range(N), range(N)):
    site_nbr = (site[0] + ((site[1]-1)%2 - 1)) % N
    if h[site[0]][site[1]] > 0:
      priority_total[site[0]*N+site[1]][0] += 1
      priority_total[site[0]*N+site[1]][1] -= 1
    else:
      priority_total[site[0]*N+site[1]][0] -= 1
  
  for i in range(N**2):
    if J[0, i//N, i%N] > 0:
      priority_total[i][0] += J[0, i//N, i%N]
      priority_total[i][1] -= J[0, i//N, i%N]
    else:
      priority_total[i][0] -= J[0, i//N, i%N]
  
  return [[-x, -y] for x, y in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]

  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = np.where(h > 0, 1, -1)
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = state[i][j]
      total_spin[i*N+j][0] += np.sum((site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2))) for site_nbr in [site_neighbors(i,j)])
      total_spin[i*N+j][1] -= np.sum((site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2))) for site_nbr in [site_neighbors(i,j)])

      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)

      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum([h[i][j]*state[i][j] for j in range(N)]) for i in range(N)]
  site_priors = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        site_priors[site][j][0] += 1
        site_priors[site][j][1] -= 1
      else:
        site_priors[site][j][0] -= 1
  return [[x[0], -x[1]] for x in [site_priors[i//N][i%N] for i in range(N**2)]]




#score: {'data2D.txt': -0.0014069444444444444}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = {}
  total_spin = [[0.0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        total_spin[i*N+j][0] += sum(J[site_nbr][i][j] for site_nbr in site_nbrs)
        total_spin[i*N+j][1] -= sum(J[site_nbr][i][j] for site_nbr in site_nbrs)
      else:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        total_spin[i*N+j][0] -= sum(J[site_nbr][i][j] for site_nbr in site_nbrs)
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total = [1.0, -1.0]
      else:
        priority_total = [-1.0, 1.0]
      return [[x[0], x[1]] for x in [(total_spin[i*N+j][0]+priority_total[0], total_spin[i*N+j][1]-priority_total[1]) for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.0015658950617283946}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = {}
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        site_interactions[(i, j)] = sum(J[site_nbr][i][j] for site_nbr in site_nbrs)
      else:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        site_interactions[(i, j)] = -sum(J[site_nbr][i][j] for site_nbr in site_nbrs)
  return [[x, -x] for x in site_interactions.values()]




#score: {'data2D.txt': -0.00312608024691358}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N,N,2), dtype=int)
  priority_total = []
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      total_spin[i][j][0] += sum(J[site_nbr][i][j]*h[i][j] for site_nbr in site_nbrs)
      total_spin[i][j][1] -= sum(J[site_nbr][i][j]*(1-2*h[i][j]) for site_nbr in site_nbrs)
      
  for i in range(N**2):
    if h[int(i/N)][i%N] > 0:
      priority_total.append([total_spin[int(i/N)][i%N][0], total_spin[int(i/N)][i%N][1]])
    else:
      priority_total.append([-total_spin[int(i/N)][i%N][0], -total_spin[int(i/N)][i%N][1]])
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N - 1)) % N,
                   (i + (j + 1) % N), ((i + (j + 1) % N) + (N - 1)) % N]

  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  total_spin = [0, 0]
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      neighbor_spin_sum = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      total_spin[0] += neighbor_spin_sum
      total_spin[1] -= neighbor_spin_sum

  for i in range(N**2):
    priority_total[i][0] = total_spin[0]
    priority_total[i][1] = -total_spin[1]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N - 1)) % N,
                 (i + (j + 1) % N), ((i + (j + 1) % N) + (N - 1)) % N]
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]

  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      for k in site_neighbors(i, j):
        total_spin[k][0] += 1 if (h[k//N][k%N]>0) == site_spin else -1
        total_spin[k][1] -= 1 if (h[k//N][k%N]>0) != site_spin else 1

      priority_total[i*N+j][0] = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][1] = -sum(1 if (h[k//N][k%N]>0) != site_spin else 1 for k in site_neighbors(i, j))

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00039490740740740773}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = []
    for k in [(i//N-1)%N,(i//N+1)%N,(j:=i%N)-1,j+1]:
      if k==i//N and j==i%N:
        continue
      site_nbrs.append((k+((j-1)%2-1))%N)
    for nbr in site_nbrs:
      total_spin[i][0] += h[nbr%(N)][(nbr)//N]
      if h[nbr%(N)][(nbr)//N]>0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
  priority_total = [[-total_spin[i][0],-total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 6.55864197530861e-05}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = sum([1 if (i-neighbor)//2 < 0 else (-1)**((i-neighbor)//2) for neighbor in site_neighbors(i,j)])
      
      priority_total[i*N+j][0] = -total_spin
      priority_total[i*N+j][1] = total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      total_spin[i*N+j][1] -= sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  priority_total = [[[float('-inf'), float('inf')] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2))
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i][j][0] = total_spin[i*N+j][0]
      priority_total[i][j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [priority_total[i][j]]]




#score: {'data2D.txt': -0.0018498456790123454}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]

  for i in range(N):
    for j in range(N):
      site = (i, j)
      spin = -state[site[0]][site[1]]
      total_spin[i*N+j][0] += h[site[0]][site[1]] * spin
      total_spin[i*N+j][1] -= h[site[0]][site[1]] * spin

  for i in range(N**2):
    site = (i // N, i % N)
    site_nbr = site_nbrs[i]
    if J[site_nbr//N][((site_nbr%N)-N//2)%N][0] > 0:
      total_spin[i][1] += J[site_nbr//N][((site_nbr%N)-N//2)%N][0] * state[site[0]][site[1]]
    else:
      total_spin[i][0] -= J[site_nbr//N][((site_nbr%N)-N//2)%N][0] * state[site[0]][site[1]]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  total_spin = np.zeros((N,N,2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      for site_nbr in site_nbrs:
        total_spin[i][site_nbr][0] += J[site_nbr][i][j] * h[i][j]
        total_spin[i][site_nbr][1] -= J[site_nbr][i][j] * (1 - 2*h[i][j])
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += total_spin[i][site][0]
        priority_total[i*N+j][1] -= total_spin[i][site][1]
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= total_spin[i][site][0]
        priority_total[i*N+j][1] += total_spin[i][site][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012964506172839507}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      site_interactions[i*N+j][0] += np.sum([J[(i + ((site_nbr-1)%2 - 1)) % N][j][k-1] for k, site_nbr in enumerate(site_nbrs)])
      site_interactions[i*N+j][1] -= np.sum([J[(i + ((site_nbr-1)%2 - 1)) % N][j][k-1] * (1 - 2*h[i][site_nbr]) for k, site_nbr in enumerate(site_nbrs)])
  return [list(x) for x in site_interactions]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(4) if abs(k-j) <= 1 and (k-i) == 0]
      for site_nbr in site_nbrs:
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0028649691358024697}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%2 - 1)) % N for j in range(4)]
    site_nbr_magnetism = [h[site_nbr][i%N] > 0 for site_nbr in site_nbrs]
    
    for spin, (site_nbr, magnetized) in enumerate(zip(site_nbrs, site_nbr_magnetism)):
      if magnetized:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
    
    priority_total[i][0] = sum([total_spin[j][0] for j in site_nbrs])
    priority_total[i][1] = -sum([total_spin[j][1] for j in site_nbrs])

  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.00513966049382716}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1

      for k in range(4):
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += total_spin[i*N+site_nbr][0]
          priority_total[i*N+j][1] -= total_spin[i*N+site_nbr][1]
        else:
          priority_total[i*N+j][0] -= total_spin[i*N+site_nbr][0]

  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      if h[i][j] > 0:
        priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]
      else:
        priority_total[i][j] = [(-total_spin - state[i][j]), (-total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0005439814814814811}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      for s, site_nbr in zip(site_nbrs, [state[i][k] for k in site_nbrs]):
        if h[s][site_nbr] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1

  return [[-x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': 0.12453287037037053}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j][0] = total_spin + state[i][j]
      priority_total[i][j][1] = -total_spin
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.013359413580246912}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site_nbrs_site = [site_nbrs.index((i + ((k-1)%N - 1)) % N) for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s][0] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
      priority_total[i*N+j][1] = -sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
    else:
      site_nbrs_site = [site_nbrs.index((i + ((k-1)%N - 1)) % N) for k in range(4) if (i + ((k-1)%2 - 1)) % N == i]
      site_nbrs_spin = [(total_spin[s][0] > 0) for s in site_nbrs_site]
      priority_total[i*N+j][0] = -sum([x[0] for x in zip(site_nbrs_spin, itertools.cycle([-1]))])
      priority_total[i*N+j][1] = sum([x[1] for x in zip(site_nbrs_spin, itertools.cycle([1]))])
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.1476121913580249}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,1))
    else:
      site_order.append((i,-1))

  priority_total = [[0,0] for _ in range(N**2)]
  for i, spin in site_order:
    total_spin = [0, 0]
    for k in range(3):
      site_nbr = (i//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
    priority_total[i][0] = total_spin[0]
    priority_total[i][1] = -total_spin[1]

  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.0728597222222223}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for j in range(3)]
    for j in site_nbrs:
      if h[j//N][j%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  priority_total = [[-x[0],-x[1]] if h[i//N][i%N] > 0 else [x[0],x[1]] for i,x in enumerate(total_spin)]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 2.3611111111110917e-05}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[(1 if h[i][j] > 0 else -1) if i < N//2 else (1 if h[i][j] < 0 else -1) for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]
      
      total_spin[i*N+j][0] += h[site[0]][site[1]] * state[site[0]][site[1]]
      total_spin[i*N+j][1] -= h[site[0]][site[1]] * state[site[0]][site[1]]
      
      for k in range(2):
        if J[site_nbr//N][((site_nbr%N)-N//2)%N][k] != 0:
          total_spin[i*N+j][1-k] += J[site_nbr//N][((site_nbr%N)-N//2)%N][k] * state[site[0]][site[1]]
          
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.002270216049382716}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]

  for i in range(N**2):
    site = (i // N, i % N)
    total_spin[i][0] += h[site[0]][site[1]] * state[site[0]][site[1]]
    total_spin[i][1] -= h[site[0]][site[1]] * state[site[0]][site[1]]

  for i in range(N**2):
    site = (i // N, i % N)
    site_nbr = site_nbrs[i]
    if J[site_nbr//N][((site_nbr%N)-N//2)%N][0] != 0:
      total_spin[i][0] += J[site_nbr//N][((site_nbr%N)-N//2)%N][0] * state[site[0]][site[1]]
    if J[site_nbr//N][((site_nbr%N)-N//2)%N][1] != 0:
      total_spin[i][1] -= J[site_nbr//N][((site_nbr%N)-N//2)%N][1] * state[site[0]][site[1]]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.10746435185185198}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]
      
      if h[site[0]][site[1]] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += J[site//N][((site%N)-N//2)%N][0]
        total_spin[i*N+j][1] -= J[site//N][((site%N)-N//2)%N][1]
      
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009195833333333334}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site*N+j][spin==1] += 1

  for i in range(N**2):
    site_nbrs_i = [x for x in site_nbrs if x == i]
    for j in range(2):
      site_nbrs_j = [(i + ((j-1)%N - (k-1)%2)) % N for k in range(3)]
      total_spin[i][0] += sum([1 if x==i else 0 for x in site_nbrs_i])
      total_spin[i][1] -= sum([1 if x==i else 0 for x in site_nbrs_j])

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i,1) if h[i//N][i%N] > 0 else (i,-1) for i in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for site, spin in sorted(site_order):
    for k in range(4):
      if k%2 == 1:
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        total_spin[site][0] += int(h[site_nbr][site%N] > 0)
        total_spin[site][1] -= int(h[site_nbr][site%N] > 0)
      else:
        site = (k + ((site-1)%2 - 1)) % N
        priority_total[site][0] += total_spin[site][0]
        priority_total[site][1] -= total_spin[site][1]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.0017581790123456793}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin[i*N+j][0] += sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      total_spin[i*N+j][1] -= sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0010473765432098766}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs_i = [site for k, site in enumerate([(i + ((k-1)%N - 1)) % N for k in range(4)]) if abs(site % N - i) + abs((site//N)%N-j) == 1]
      
      if h[i][j] > 0:
        for spin in [0, 1]:
          priority_total[i*N+j][spin] += sum(spin == s for s in site_nbrs_i)
      else:
        for spin in [0, 1]:
          priority_total[i*N+j][spin] -= sum(spin == s for s in site_nbrs_i)
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0007776234567901233}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j] += 1
      else:
        total_spin[i*N+j] -= 1
  
  priority_total = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs_i = [site_nbrs[site] for site in range(N2) if abs(site % N - i) + abs((site//N)%N-j) == 1]
      
      if h[i][j] > 0:
        for spin in [0, 1]:
          priority_total[i*N+j][spin] += sum(spin == s for s in site_nbrs_i)
      else:
        for spin in [0, 1]:
          priority_total[i*N+j][spin] -= sum(spin == s for s in site_nbrs_i)
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0017791666666666665}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i,j) if h[i][j] > 0 else (i,-1*j) for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for site, spin in site_order:
    if h[site//N][site%N] > 0:
      for k in range(4):
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        if h[site_nbr][site%N] > 0:
          total_spin[site*N+site%N][0] += 1
          total_spin[site*N+site%N][1] -= 1
        else:
          total_spin[site*N+site%N][0] -= 1

    else:
      for k in range(4):
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        if h[site_nbr][site%N] > 0:
          total_spin[site*N+site%N][0] += 1
          total_spin[site*N+site%N][1] -= 1
        else:
          total_spin[site*N+site%N][0] -= 1

    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][site%N] > 0:
        priority_total[site*N+site%N][0] += total_spin[site*N+site%N][0]
        priority_total[site*N+site%N][1] -= total_spin[site*N+site%N][1]
      else:
        priority_total[site*N+site%N][0] -= total_spin[site*N+site%N][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': 0.0003992283950617288}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      if h[site_nbr//N][site_nbr%N] > 0:
        priority_total[i*N+j][0] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        priority_total[i*N+j][1] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
      else:
        priority_total[i*N+j][0] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        priority_total[i*N+j][1] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009503549382716048}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0,0] for _ in range(N**2)]

  state = [[1 if h[i][j] > 0 else -1 for j in range(N)] for i in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[(i*N+j)]
      total_spin[i*N+j][state[site_nbr//N][(site_nbr%N)-N//2]%N == 1] += h[site_nbr//N][site_nbr%N]
      if state[site_nbr//N][(site_nbr%N)-N//2]%N > 0:
        total_spin[i*N+j][0] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
      else:
        total_spin[i*N+j][0] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[site*N+j][0] += h[i][j]
      if h[i][j] > 0:
        total_spin[site*N+j][0] += 1
      else:
        total_spin[site*N+j][0] -= 1
      priority_total[i*N+j] = [total_spin[i*N+j][0], -total_spin[i*N+j][0]]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for k in range(3)]
      
      for neighbor in site_nbrs:
        if h[neighbor//N][(neighbor%N)-N//2]%N > 0:
          priority_total[i*N+j][0] += J[(neighbor//N)][((neighbor%N)-N//2)%N][0]
          priority_total[i*N+j][1] -= J[(neighbor//N)][((neighbor%N)-N//2)%N][0]
        else:
          priority_total[i*N+j][0] -= J[(neighbor//N)][((neighbor%N)-N//2)%N][0]
          priority_total[i*N+j][1] += J[(neighbor//N)][((neighbor%N)-N//2)%N][0]
      
      total_spin = h[i][j]
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      priority_total[i*N+j] = [total_spin, -total_spin]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[np.inf, -np.inf] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = h[site][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.09483996913580253}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
           -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  for j in range(N):
    if h[j][0] > 0:
      total_spin = [sum(1 for k in range(N) if h[k][j] > 0), 
             - sum(1 for k in range(N) if h[k][j] < 0)]
    else:
      total_spin = [-sum(1 for k in range(N) if h[k][j] > 0), 
             sum(1 for k in range(N) if h[k][j] < 0)]
    for i in range(N):
      if h[i][j] > 0:
        priority_total[j*N+i][0] = total_spin[0]
      else:
        priority_total[j*N+i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0011375000000000003}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum(1 for k in range(N) if h[k][i] > 0) - sum(1 for k in range(N) if h[k][i] < 0) for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin_site = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      priority_total[i][j][0] = -total_spin[i] + total_spin_site
      priority_total[i][j][1] = total_spin[i] - total_spin_site
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.002184722222222223}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j]>0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum(1 for k in range(N) if h[k][i]>0)-sum(1 for k in range(N) if h[k][i]<0) for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
             -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
      if h[int(i/N)][i%N]>0:
        priority_total[i*N+j][0]=total_spin[0]
        priority_total[i*N+j][1]=-total_spin[1]
      else:
        priority_total[i*N+j][1]=-total_spin[0]
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin[i*N+j][0] += h[i][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.16055169753086374}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2) - 1) % N
    total_spin[i][0] += h[site_nbr][i % N]
    total_spin[i][1] -= h[(N-1)-site_nbr][i % N]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.00016219135802469163}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[0.0,0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin += h[site_nbr][j]
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          site_weights[i*N+j][0] -= h[site][j]
          site_weights[i*N+j][1] += h[site][j]
        else:
          site_weights[i*N+j][0] += h[site][j]
          site_weights[i*N+j][1] -= h[site][j]
  
  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.000721450617283951}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  state = [[1 if h[i][j] > 0 else -1 for j in range(N)] for i in range(N)]

  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]
      
      total_spin[i*N+j][0] += h[site[0]][site[1]] * state[site[0]][site[1]]
      total_spin[i*N+j][1] -= h[site[0]][site[1]] * state[site[0]][site[1]]
      
      for k in range(2):
        if J[site_nbr//N][((site_nbr%N)-N//2)%N][k] != 0:
          total_spin[i*N+j][1-k] += J[site_nbr//N][((site_nbr%N)-N//2)%N][k] * state[site[0]][site[1]]
          
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[1 if h[i][j] > 0 else -1 for j in range(N)] for i in range(N)]
  
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]
      
      total_spin[i*N+j][0] += h[site[0]][site[1]] * state[site[0]][site[1]]
      total_spin[i*N+j][1] -= h[site[0]][site[1]] * state[site[0]][site[1]]
      
      for k in range(2):
        if J[site_nbr//N][((site_nbr%N)-N//2)%N][k] != 0:
          total_spin[i*N+j][1-k] += J[site_nbr//N][((site_nbr%N)-N//2)%N][k] * state[site[0]][site[1]]
          
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
        
  return priority_total




#score: {'data2D.txt': 0.000721450617283951}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  state = [[(1 if h[i][j] > 0 else -1) for j in range(N)] for i in range(N)]

  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]
      
      total_spin[i*N+j][0] += h[site[0]][site[1]] * state[site[0]][site[1]]
      total_spin[i*N+j][1] -= h[site[0]][site[1]] * state[site[0]][site[1]]

      for k in range(2):
        if J[site_nbr//N][((site_nbr%N)-N//2)%N][k] != 0:
          total_spin[i*N+j][1-k] += J[site_nbr//N][((site_nbr%N)-N//2)%N][k] * state[site[0]][site[1]]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = [[j if i % 2 == 0 else (N - 1 - j) for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = site_nbr[i][j]
      total_spin = h[site][j] * (N*N) + J[0].flatten()[i*N+j] - J[1].flatten()[min((i+1)%N,N-1-(i+1)//2)*N+j] - J[2].flatten()[max(0,(i-1))%N*(N)] + j + J[3].flatten()[min((j+1)%N,N-1-(j+1)//2)*(N)] - i
      priority_total[i*N+j][0 if total_spin > 0 else 1] = total_spin
  return [[-x, -y] for x, y in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i, j)
      if h[i][j] > 0:
        spin = -1
      else:
        spin = 1
      
      total_spin[i*N+j][spin==1] += 1
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0004538580246913577}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  priority_total = [[[0,0] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      if h[i][j] > 0:
        spin = 1
        total_spin[site_nbr][0] += 1
        total_spin[site_nbr][1] -= 1
        priority_total[i][j][0] += J[site_nbr//N][((site_nbr%N)-N//2)%N][0]
        priority_total[i][j][1] -= J[site_nbr//N][((site_nbr%N)-N//2)%N][1]
      else:
        spin = -1
        total_spin[site_nbr][0] -= 1
        total_spin[site_nbr][1] += 1
        priority_total[i][j][0] -= J[site_nbr//N][((site_nbr%N)-N//2)%N][0]
        priority_total[i][j][1] += J[site_nbr//N][((site_nbr%N)-N//2)%N][1]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return priority_total




#score: {'data2D.txt': -0.0012665123456790126}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin = 0
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin += h[site_nbr][j]
      
      if h[i][j] > 0:
        priority_total[j][0] = total_spin
        priority_total[j][1] = -1*total_spin
      else:
        priority_total[j][0] = -total_spin
        priority_total[j][1] = total_spin
  
  return [list(x) for x in np.argsort(-np.array(priority_total))]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin[i*N+j][0] += sum(site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2)) for k in range(2))
      total_spin[i*N+j][1] -= sum(site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2)) for k in range(2))
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.10985910493827171}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [0,0]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        if h[neighbor//N][neighbor%N] > 0:
          spin = 1
        else:
          spin = -1
        
        total_spin[0] += site_spin * spin
        total_spin[1] -= site_spin * spin
      
      priority_total[i*N+j][0] = -total_spin[0]
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin[0]
      else:
        priority_total[i*N+j][1] = -total_spin[0]
      
      total_spin = [0,0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site_nbr = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site_nbr][0]
      priority_total[i*N+j][1] -= total_spin[site_nbr][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0017581790123456793}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin_neighbors = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [total_spin_neighbors + h[i][j], -total_spin_neighbors]
  
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.1719140432098768}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin = sum([site_spin * (1 + (-1)**((i-neighbor[0])//2) * (-1)**((j-neighbor[1])%N//2)) for neighbor in [site_neighbors(i,j)]])
      
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      total_spin[i*N+j][1] -= sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0013723765432098768}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        if (i-neighbor)//2 == 0 and (j-neighbor)%N//2 == 0:
          total_spin += 1
        elif (i-neighbor)//2 != 0 and (j-neighbor)%N//2 != 0:
          total_spin -= 1
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin[i][j] = [(sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])+state[i][j]),(sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])-state[i][j])]
      
  return [[int(x) for x in lst] for lst in [item for sublist in total_spin for item in sublist]]




#score: {'data2D.txt': -0.0022581790123456765}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (j-1)%2)) % N for k in range(4)]
      total_spin = [0, 0]
      
      for k in range(4):
        if h[i][j] > 0:
          total_spin[0] += J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
          total_spin[1] -= J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
        else:
          total_spin[0] -= J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
          total_spin[1] += J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
      
      priority_total[i*N+j] = total_spin
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = []
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[i][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1
        
      site_nbrs.append((i,N-1-i,N-1-j))
      
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  return [list(x) for x in np.argsort(-np.array(priority_total))]




#score: {'data2D.txt': 0.09636774691358033}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if (k != j)]
      
      for neighbor in site_nbrs:
        if h[i][neighbor] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
      
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((2,N**2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        state[site_nbr][j] += 1
        total_spin[0, i*N+j] += h[i][j]
        total_spin[0, i*N+j] += 1
      else:
        state[site_nbr][j] -= 1
        total_spin[0, i*N+j] += h[i][j]
        total_spin[0, i*N+j] -= 1
      
  priority_total = np.zeros((N**2,2))
  
  for site in range(N**2):
    i, j = divmod(site, N)
    if h[i][j] > 0:
      site_nbr = (i + ((j-1)%N - N//2)) % N
      priority_total[site][0] = total_spin[0, i*N+j]
      priority_total[site][1] = -total_spin[0, i*N+j]
    else:
      priority_total[site][0] = -total_spin[0, i*N+j]
      priority_total[site][1] = total_spin[0, i*N+j]
    
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.0178875}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[0,i*N+j]
        total_spin[i*N+j][1] -= J[1,i*N+j]
      else:
        total_spin[i*N+j][0] -= J[2,i*N+j]
        total_spin[i*N+j][1] += J[3,i*N+j]
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site*N+j][0] -= sum(J[:, i*N+j])
        total_spin[site*N+j][1] += sum(J[:, i*N+j])
      else:
        total_spin[site*N+j][0] += sum(J[:, i*N+j])
        total_spin[site*N+j][1] -= sum(J[:, i*N+j])
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': -0.0008878086419753084}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for k in range(N):
    for i in range(N):
      site = (i + ((k-1)%2 - 1)) % N
      if h[i][k] > 0:
        priority_total[i][k][0] = sum(1 for j in range(N) if state[j][k] == 1)
        priority_total[i][k][1] = -sum(1 for j in range(N) if state[j][k] == -1)
      else:
        priority_total[i][k][0] = -sum(1 for j in range(N) if state[j][k] == 1)
        priority_total[i][k][1] = sum(1 for j in range(N) if state[j][k] == -1)

  return sorted([[x[0],-x[1]] for i in range(N) for x in priority_total[i]])




#score: {'data2D.txt': 0.0178875}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[0,i*N+j]
        total_spin[i*N+j][1] -= J[1,i*N+j]
      else:
        total_spin[i*N+j][0] -= J[2,i*N+j]
        total_spin[i*N+j][1] += J[3,i*N+j]
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site*N+j][0] -= sum(J[:, i*N+j])
        total_spin[site*N+j][1] += sum(J[:, i*N+j])
      else:
        total_spin[site*N+j][0] += sum(J[:, i*N+j])
        total_spin[site*N+j][1] -= sum(J[:, i*N+j])
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': -0.0072421296296296305}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1)%N if i > 0 else N-1, (j-1)%N if j > 0 else N-1]
      priority_total[i*N+j][0] += sum([h[site_nbrs[0]][min(j+1,N-1)] for _ in range(2)]) + J[0][i//N][j]
      priority_total[i*N+j][1] -= sum([h[site_nbrs[1]][j] for _ in range(2)]) - J[0][i//N][j]
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  total_energy = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_energy[i*N+j][0] += 1
        total_energy[i*N+j][1] -= 1
      else:
        site = i + ((j-1)%2 - 1) % N
        total_energy[i*N+j][0] -= 1
        total_energy[i*N+j][1] += 1
  for i in range(N**2):
    if h[state[i//N][i%N]//N][state[i//N][i%N]%N] > 0:
      priority_total[i][0] = -total_energy[i][0]
      priority_total[i][1] = total_energy[i][1]
    else:
      priority_total[i][0] = total_energy[i][0]
      priority_total[i][1] = -total_energy[i][1]
  return priority_total




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N*N, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0034436728395061656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flat = J.flatten()
  interaction_sum = np.sum(J_flat, axis=0)
  magnetism_sum = h.flatten()
  priority_total = np.column_stack((interaction_sum+magnetism_sum, -interaction_sum-magnetism_sum))
  return [[x[0], x[1]] for x in priority_total.reshape(N**2, 2)]




#score: {'data2D.txt': -0.1709594135802464}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin = h[site][j]
        priority_total[i*N+j][0] = total_spin
        priority_total[i*N+j][1] = -total_spin
      else:
        total_spin = -h[site][j]
        priority_total[i*N+j][0] = -total_spin
        priority_total[i*N+j][1] = total_spin
  
  return [[x[0], x[1]] for x in priority_total.reshape(N**2, 2)]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N, N, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
        
  return priority_total.reshape(N**2, 2).tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin = 0
      for site_nbr in site_nbrs:
        total_spin += h[site_nbr[0]][site_nbr[1]]
        
      priority_total[i*N+j][0] = -total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -7.79320987654319e-05}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0.0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      total_spin[i*N+j][0] += sum(J[site][i][j] for site in site_nbrs)
      total_spin[i*N+j][1] = -sum(J[site][i][j] for site in site_nbrs)
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-j) <= 1 and (k-i) == 0]
      
      if h[i][j] > 0:
        priority_total[i][j][0] += sum(J[site][i][j] for site in site_nbrs)
        priority_total[i][j][1] -= sum(J[site][i][j] for site in site_nbrs)
      else:
        priority_total[i][j][0] -= sum(J[site][i][j] for site in site_nbrs)
        priority_total[i][j][1] += sum(J[site][i][j] for site in site_nbrs)
  
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i>0 else None,(i,j+1) if j<N-1 else None,(i+1,j) if i<N-1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin = sum(1 if h[site_nbr[0]][site_nbr[1]] > 0 else -1 for site_nbr in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin + 1
        priority_total[i*N+j][1] -= total_spin + 1
      else:
        priority_total[i*N+j][0] -= total_spin + 1
        priority_total[i*N+j][1] += total_spin + 1
  
  return [x for x in priority_total]




#score: {'data2D.txt': 0.06331774691358026}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[0 for _ in range(3)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None,(N-i-1,N-j-1) if i+j > N else None]
      site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
      
      total_spin = sum(1 if h[site_nbr[0]][site_nbr[1]] > 0 else -1 for site_nbr in site_nbrs)
      
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin + 1
        priority_total[i][j][1] = -total_spin - 1
      else:
        priority_total[i][j][0] = -total_spin - 1
        priority_total[i][j][1] = total_spin + 1
      
  return [[x[1], x[2]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
            -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = total_spin[0]
      priority_total[i][1] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (k//2)*N - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
              -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin[0]
        priority_total[i][j][1] = -total_spin[1]
      else:
        priority_total[i][j][1] = -total_spin[0]
  return [[x[0], x[1]] for x in [y for sublist in priority_total for y in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = [h[i][j], -h[i][j]]
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = [-h[i][j], h[i][j]]
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,1))
    else:
      site_order.append((i,-1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr//N][site_nbr%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site//N][site%N] > 0:
        priority_total[i][0] += total_spin[i][0]
        priority_total[i][1] -= total_spin[i][1]
      else:
        priority_total[i][0] -= total_spin[i][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i+j*N, -1 if h[i][j] > 0 else 1) for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr//N][site_nbr%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

    for k in range(4):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site//N][site%N] > 0:
        priority_total[i][0] += total_spin[i][0]
        priority_total[i][1] -= total_spin[i][1]
      else:
        priority_total[i][0] -= total_spin[i][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N_half)) % N
      if h[i][j] > 0:
        total_spin = 1
      else:
        total_spin = -1
      
      for k in range(4):
        neighbor_site = (site + ((k-2)%2 - 1)) % N
        if h[neighbor_site//N][neighbor_site%N] > 0:
          if k == 1: total_spin += 1
          elif k == 3: total_spin -= 1
        else:
          if k == 1: total_spin -= 1
          elif k == 3: total_spin += 1
      
      priority_total[i*N+j][total_spin==1] = -priority_total[i*N+j][0]
      priority_total[i*N+j][total_spin==-1] = -priority_total[i*N+j][1]
  
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(4)]
      
      total_spin = [0, 0]
      
      for k in range(4):
        if h[i][j] > 0:
          total_spin[0] += J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
          total_spin[1] -= J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
        else:
          total_spin[0] -= J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
          total_spin[1] += J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
      
      for k in range(2):
        if total_spin[k] > 0:
          priority_total[i*N+j][k] = -total_spin[k]
        elif total_spin[k] < 0:
          priority_total[i*N+j][1-k] = -total_spin[k]
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  state = [[(-1 if h[i][j] > 0 else 1) for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]
      
      priority_total[i*N+j][0] += h[site[0]][site[1]] * state[site[0]][site[1]]
      priority_total[i*N+j][1] -= h[site[0]][site[1]] * state[site[0]][site[1]]
      
      for k in range(2):
        if J[site_nbr//N][((site_nbr%N)-N//2)%N][k] != 0:
          priority_total[i*N+j][1-k] += J[site_nbr//N][((site_nbr%N)-N//2)%N][k] * state[site[0]][site[1]]
          
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(4)]
      site_nbrs += [(i + ((k+1)%N - N//2)) % N for k in range(4)]
      
      for k in range(len(site_nbrs)):
        if h[i][j] > 0:
          priority_total[i*N+j][0] += J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
          priority_total[i*N+j][1] -= J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
        else:
          priority_total[i*N+j][0] -= J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
          priority_total[i*N+j][1] += J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0013442901234567894}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('inf') for _ in range(2)] for _ in range(N**2)]

  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbrs = [(i + ((k-1)%2 - 1)) % N]
        total_spin = [h[i][j]]
        if h[i][j] > 0:
          total_spin.append(1)
        else:
          total_spin.append(-1)

        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          total_spin.append(h[site_nbr][j])
          if h[site_nbr][j] > 0:
            total_spin[-1] += 1
          else:
            total_spin[-1] -= 1

        priority_total[i*N+j][0] = sum(x**2 for x in total_spin)
        priority_total[i*N+j][1] = -sum(x for x in total_spin)

  return [list(x) for x in np.argsort(np.array(priority_total))][::-1]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = []
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[i][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
      else:
        total_spin[i*N+j][0] -= 1
      
      site_nbrs.append((i, N-1-i, N-1-j))
      
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
    
  return [list(x) for x in np.argsort(-np.array(priority_total))]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin = J[0,i*N+j]
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin = -J[3,i*N+j]
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': -0.001284413580246914}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.reshape((4,N**2))
  total_spin = [[0 for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[0,i*N+j]
        total_spin[i*N+j][1] -= J[3,i*N+j]
      else:
        total_spin[i*N+j][0] -= J[3,i*N+j]
        total_spin[i*N+j][1] += J[0,i*N+j]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[1,i*N+j]
        total_spin[i*N+j][1] -= J[2,i*N+j]
      else:
        total_spin[i*N+j][0] -= J[2,i*N+j]
        total_spin[i*N+j][1] += J[1,i*N+j]
  return [[x,y] for [x,_],y in sorted(zip(total_spin,[i for i in range(N**2)]), reverse=True)]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and ((k-i)%N) == 0]
    total_spin = [sum(J[site][int((i/N))][i%N] for site in site_nbrs), 
           -sum(J[site][int((i/N))][i%N] for site in site_nbrs)]
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] += total_spin[0]
      priority_total[i][1] -= total_spin[1]
    else:
      priority_total[i][1] -= total_spin[0]
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for site in range(N**2):
    i, j = divmod(site, N)
    site_nbrs = [(i + (k-1)%2 - 1) % N for k in range(4) if abs(k-int(i/N)) <= 1 and ((k-i)%N) == 0]
    total_spin = [sum(J[site][i][j] for site in site_nbrs), 
          -sum(J[site][i][j] for site in site_nbrs)]
    
    if h[i][j] > 0:
      priority_total[site][0] += total_spin[0]
      priority_total[site][1] -= total_spin[1]
    else:
      priority_total[site][1] -= total_spin[0]
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and ((k-i)%N) == 0]
      total_spin = [sum(1 if h[s][j] > 0 else -1 for s in site_nbrs), 
              -sum(1 if h[s][j] < 0 else 1 for s in site_nbrs)]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
      else:
        priority_total[i*N+j][1] -= total_spin[0]
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.00039490740740740773}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = []
    for k in [(i//N-1)%N,(i//N+1)%N,(j:=i%N)-1,j+1]:
      if k==i//N and j==i%N:
        continue
      site_nbrs.append((k+((j-1)%2-1))%N)
    for nbr in site_nbrs:
      total_spin[i][0] += h[nbr%(N)][(nbr)//N]
      if h[nbr%(N)][(nbr)//N]>0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
  priority_total = [[-total_spin[i][0],-total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.00039490740740740773}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = []
    for k in [(i//N-1)%N,(i//N+1)%N,(j:=i%N)-1,j+1]:
      if k==i//N and j==i%N:
        continue
      site_nbrs.append((k+((j-1)%2-1))%N)
    for nbr in site_nbrs:
      total_spin[i][0] += h[nbr%(N)][(nbr)//N]
      if h[nbr%(N)][(nbr)//N]>0:
        total_spin[i][1] -= 1
      else:
        total_spin[i][1] += 1
  priority_total = [[-total_spin[i][0],-total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum_3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum_4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum_1+sum_3, -sum_2-sum_4))
  return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0,0] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [1,3]]
      total_spin[i*N+j][0] += sum(h[site_nbr][j] for site_nbr in site_nbrs)
      total_spin[i*N+j][1] -= sum(h[site_nbr][j] for site_nbr in site_nbrs)
      
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [[0,0] for _ in range(N2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::2], axis=0) + h).flatten()
  sum2 = (-np.prod(J_new[1::2], axis=0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.13420972222222238}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (j-1)%2)) % N for k in range(4)]
      
      for k in range(4):
        if J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0] != 0:
          priority_total[i*N+j][0] += (h[site_nbrs[k]//N][site_nbrs[k]%N] - J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][1]) * J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
          priority_total[i*N+j][1] -= (h[site_nbrs[k]//N][site_nbrs[k]%N] - J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][1]) * J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
        
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.1829393518518521}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = [1, -1]
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = [-1, 1]
      
      for k in range(4):
        if J[k][site][0] != 0:
          total_spin[0] += J[k][site][0]
        if J[k][site][1] != 0:
          total_spin[1] -= J[k][site][1]
      
      priority_total[i*N+j] = total_spin
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + (j - 1) % N - 1) % N, (i + (j + 1) % N - 2) % N] if (i + j) % 2 == 0 else [(i + (j - 1) % N - 1) % N, (i + (j + 1) % N - 2) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [0,0]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i, j):
        total_spin[0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = -total_spin[1]
    else:
      priority_total[i][1] = -total_spin[0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-N)%N] if (i+j)%2==0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-N)%N]
  priority_total = [[float('-inf'),float('inf')] for _ in range(N**2)]

  total_spin = [0,0]

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1

      for neighbor in site_neighbors(i,j):
        site = (i+(neighbor-j)%N-N//2)%N if (i+j+neighbor-j)//2%2==0 else (i+(neighbor-j)%N-N//2)%N
        total_spin[0] += site_spin * (-1)**((i-site)//2) * (-1)**((j-neighbor)%N//2)
        total_spin[1] -= site_spin * (-1)**((i-site)//2) * (-1)**((j-neighbor)%N//2)

      if h[i][j] > 0:
        priority_total[i*N+j][0] = -total_spin[1]
      else:
        priority_total[i*N+j][1] = -total_spin[0]

  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0014439814814814814}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      spin_sum = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      priority_total[i][j][0] = -spin_sum
      priority_total[i][j][1] = spin_sum
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': -0.0011189814814814812}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  state = [[-1 if h[i][j]>0 else 1 for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin[i*N+j][0] += sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      total_spin[i*N+j][1] -= sum(J[site][int(i/N)][i%N] for site in site_nbrs)
  priority_total = [[x[0], x[1]] for x in total_spin]
  return priority_total




#score: {'data2D.txt': -0.00045848765432098795}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum(1 for k in range(N) if h[k][i] > 0) - sum(1 for k in range(N) if h[k][i] < 0) for i in range(N)]
  priority_total = [[-1000000, -1000000] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin_site = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      priority_total[i*N+j][0] = -total_spin[i] + total_spin_site
      if h[int(i/N)][i%N]>0:
        priority_total[i*N+j][1]=-total_spin[i] - total_spin_site
      else:
        priority_total[i*N+j][1]=total_spin[i] + total_spin_site
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0011375000000000003}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum(1 for k in range(N) if h[k][i] > 0) - sum(1 for k in range(N) if h[k][i] < 0) for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin_site = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      priority_total[i][j][0] = -total_spin[i] + total_spin_site
      priority_total[i][j][1] = total_spin[i] - total_spin_site
  return [[x[0], x[1]] for x in [priority_total[i][j] for i in range(N) for j in range(N)]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N2)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.14724675925925948}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [0]*N2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]

  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]

  priority_total = [[0,0] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site]
      priority_total[i*N+j][1] -= total_spin[site]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < priority_total[i*N+j][1]:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1
          else:
            priority_total[i*N+j][0] -= 1
            priority_total[i*N+j][1] += 1
        else:
          if priority_total[i*N+j][0] < priority_total[i*N+j][1]:
            priority_total[i*N+j][0] -= 1
            priority_total[i*N+j][1] += 1
          else:
            priority_total[i*N+j][0] += 1
            priority_total[i*N+j][1] -= 1

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0,0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0012347222222222226}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, (j+1)%N))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      for site_nbr in site_nbrs:
        total_spin = h[site_nbr[0]][site_nbr[1]]
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 2*total_spin
          priority_total[i*N+j][1] -= 2*total_spin
        else:
          priority_total[i*N+j][0] -= 2*total_spin
          priority_total[i*N+j][1] += 2*total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for j in range(4)]
    
    for j in set(site_nbrs):
      if h[j//N][j%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
    
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = total_spin[i][1]
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.0015186728395061733}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,-1))
    else:
      site_order.append((i,1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(3):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr//N][site_nbr%N] > 0:
        total_spin[site_nbr*N+site_nbr%N][0] += 1
        total_spin[site_nbr*N+site_nbr%N][1] -= 1
      else:
        total_spin[site_nbr*N+site_nbr%N][0] -= 1

    site = (i + ((i-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[site][0]
      priority_total[i][1] -= total_spin[site][1]
    else:
      priority_total[i][0] -= total_spin[site][0]

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0016020061728395057}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,-1))
    else:
      site_order.append((i,1))

  for i, spin in enumerate(site_order):
    site = site_order[i][0]
    total_spin[site][0] += spin[1]
    total_spin[site][1] -= spin[1]

    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr//N][site_nbr%N] > 0:
        priority_total[site][0] += total_spin[site_nbr][0]
        priority_total[site][1] -= total_spin[site_nbr][1]
      else:
        priority_total[site][0] -= total_spin[site_nbr][0]

  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.11083132716049394}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.11083132716049394}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N,(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.11083132716049394}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        site_nbr_spin = -1 if h[neighbor//N][neighbor%N] > 0 else 1
        priority_total[i*N+j][0] += site_spin * site_nbr_spin
        priority_total[i*N+j][1] -= site_spin * site_nbr_spin
        total_spin += site_nbr_spin
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -total_spin
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][0] = -total_spin
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    for j in site_nbrs:
      priority_total[i][0] += J[j][int(i/N)][i%N] * h[int(j/N)][j%N]
      priority_total[i][1] -= J[j][int(i/N)][i%N] * (1 - 2*h[int(j/N)][j%N])
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(4):
    site_nbr = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site_nbr_val = (i + ((j-1)%N - N//2)) % N
        if h[i][j] > 0:
          state[site_nbr][j] += state[i][j]
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          state[site_nbr][j] += -state[i][j]
          total_spin[i*N+j][0] -= 1
  return [[-x, -y] for x, y in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_priority[i*N+j][0] += 1
        total_priority[i*N+j][1] -= 1
      else:
        total_priority[i*N+j][0] -= 1
  for i in range(N**2):
    total_spin = [0, 0]
    for k in range(4):
      site_nbr_val = (i // N + ((k-1)%N - N//2)) % N
      if h[site_nbr_val][i % N] > 0:
        total_spin[0] += J[k][i//N][i%N]
        total_spin[1] -= J[k][i//N][i%N]
      else:
        total_spin[0] -= J[k][i//N][i%N]
    priority_total = [x for x in total_spin]
    return [[-x, -y] for x, y in total_priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  for k in range(4):
    site_nbr_val = (k % 2 - 1)
    for i in range(N):
      for j in range(N):
        site = (i + ((j-1)%2 - 1)) % N
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += J[0, i//N, i%N]
      priority_total[i][1] -= J[0, i//N, i%N]
    else:
      priority_total[i][0] -= J[0, i//N, i%N]
  return [[-x, -y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [h[i][j] if h[i][j] > 0 else -h[i][j] for i in range(N) for j in range(N)]
  for k, val in enumerate(J[0]):
    site_nbr[k//N], _ = (site_nbr[k//N], (k%N + ((k-1)%4 - 2)) % N)
    total_spin[k] += J[0][k] * (-1)**((k-2)//2)
  for k, val in enumerate(J[1]):
    site_nbr[k//N], _ = (site_nbr[k//N], (k%N + ((k-1)%4 - 3)) % N)
    total_spin[k] += J[1][k] * (-1)**((k-2)//2)
  for k, val in enumerate(J[2]):
    site_nbr[k//N], _ = (site_nbr[k//N], (k%N + ((k-1)%4 - 1)) % N)
    total_spin[k] += J[2][k] * (-1)**((k-2)//2)
  for k, val in enumerate(J[3]):
    site_nbr[k//N], _ = (site_nbr[k//N], (k%N + ((k-1)%4 - 0)) % N)
    total_spin[k] += J[3][k] * (-1)**((k-2)//2)
  return [[float('-inf') if i == 0 else float('inf') for _ in range(2)] for i in range(N**2)]




#score: {'data2D.txt': -0.00312608024691358}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2), dtype=int)
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
      total_spin[i][j][0] += np.sum([J[site_nbr][i][j] * h[i][j] for site_nbr in site_nbrs])
      total_spin[i][j][1] -= np.sum([J[site_nbr][i][j] * (1 - 2*h[i][j]) for site_nbr in site_nbrs])
  priority_total = []
  for i in range(N):
    row = []
    for j in range(N):
      if h[i][j] > 0:
        priority_total.append([total_spin[i][j][0], total_spin[i][j][1]])
      else:
        priority_total.append([-total_spin[i][j][0], -total_spin[i][j][1]])
  return priority_total




#score: {'data2D.txt': -0.001446141975308642}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = []
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    interaction_sum = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
    magnetism_sum = h[int(i/N)][i%N]
    if magnetism_sum > 0:
      priority_total.append([interaction_sum + magnetism_sum, -interaction_sum - magnetism_sum])
    else:
      priority_total.append([-interaction_sum - magnetism_sum, interaction_sum + magnetism_sum])
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        interaction_sum = sum(J[site][i][j] for site in site_nbrs)
        magnetism_sum = h[i][j]
        priority_total[i*N+j][0] += interaction_sum + magnetism_sum
        priority_total[i*N+j][1] -= interaction_sum - magnetism_sum
      else:
        site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3) if abs(k-j) <= 1 and (k-i) == 0]
        interaction_sum = sum(J[site][i][j] for site in site_nbrs)
        magnetism_sum = -h[i][j]
        priority_total[i*N+j][0] -= interaction_sum + magnetism_sum
        priority_total[i*N+j][1] += interaction_sum - magnetism_sum
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
    interaction_sum = sum(J[site][int(i/N)][i%N] * h[int(site%N)][site//N] for site in site_nbrs)
    priority_total[i][0] += interaction_sum
    priority_total[i][1] -= interaction_sum
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_flattened = J.flatten()
  sum_1 = (np.prod(J_flattened[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_flattened[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  site_total = np.zeros((N, N))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        site_total[site][j] += 1
      else:
        site_total[site][j] -= 1
  
  priority_total = np.zeros((N, N, 2))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin[i*N+j][0]
        priority_total[i][j][1] = -total_spin[i*N+j][1]
      else:
        priority_total[i][j][0] = -total_spin[i*N+j][0]
        priority_total[i][j][1] = total_spin[i*N+j][1]
  
  return [list(x) for x in np.argsort(-priority_total.reshape((N**2, 2)))[:, ::-1]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priorities = np.zeros((N2, 2))
  
  for i in range(N2):
    site_nbrs = [(i // N + ((i % N - 1) % N) - 1) % N for _ in range(4)]
    h_site = [h[i//N][i%N] for _ in range(4)]
    
    for k, (site_nbr, h_val) in enumerate(zip(site_nbrs, h_site)):
      if h_val > 0:
        priorities[i][0] += 1
        priorities[i][1] -= 1 * ((k % 2) == 0)
      else:
        priorities[i][0] -= 1
        priorities[i][1] += 1 * ((k % 2) == 0)
  
  return priorities




#score: {'data2D.txt': -0.001048302469135802}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+((j-1)%N - 1)) % N,(i+(j-1)%N - (i+N//2)) % N]
      if h[i][j] > 0:
        total_spin[site_nbrs[0]*N+j%N][0] += 1
        total_spin[site_nbrs[0]*N+j%N][1] -= 1
        total_spin[site_nbrs[1]*N+j%N][0] -= 1
        total_spin[site_nbrs[1]*N+j%N][1] += 1
      else:
        total_spin[site_nbrs[0]*N+j%N][0] -= 1
        total_spin[site_nbrs[0]*N+j%N][1] += 1
        total_spin[site_nbrs[1]*N+j%N][0] += 1
        total_spin[site_nbrs[1]*N+j%N][1] -= 1

  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+((j-1)%N - 1)) % N,(i+(j-1)%N - (i+N//2)) % N]
      if h[i][j] > 0:
        priority_total[site_nbrs[0]*N+j%N][0] = total_spin[site_nbrs[0]*N+j%N][0]
        priority_total[site_nbrs[1]*N+j%N][1] = -total_spin[site_nbrs[1]*N+j%N][1]
      else:
        priority_total[site_nbrs[0]*N+j%N][0] = -total_spin[site_nbrs[0]*N+j%N][0]
        priority_total[site_nbrs[1]*N+j%N][1] = total_spin[site_nbrs[1]*N+j%N][1]

  return priority_total.flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.0008513888888888892}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  priority_total = []
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total.append([total_spin[site_nbr*N+j][0], total_spin[site_nbr*N+j][1]])
      else:
        priority_total.append([-total_spin[site_nbr*N+j][0], -total_spin[site_nbr*N+j][1]])

  return np.array(priority_total).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site = (i % N + ((i // N) - 1)) % N
    for k in range(2):
      if h[i//N][i%N] > 0:
        priority_total[i][k] += J[site*N:site*N+N,N*i:i*N*N+i].sum()
      else:
        priority_total[i][k] -= J[site*N:site*N+N,N*i:i*N*N+i].sum()
  return priority_total




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [-total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.17048287037037063}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
        total_spin[i*N+j][1] -= (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)) * site_spin
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.15092145061728415}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-N//2)%N]
  total_spin = np.zeros((N,N,2))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i][neighbor][0] += site_spin * (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)
          total_spin[i][neighbor][1] -= site_spin * (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2)
      
      if h[i][j] > 0:
        total_spin[i][j][0] += 1
        total_spin[i][j][1] -= 1
      else:
        total_spin[i][j][0] -= 1
  
  return np.array([[x[0],x[1]] for x in total_spin.reshape(N*N,2)]).tolist()




#score: {'data2D.txt': 0.144902314814815}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = sum((h[neighbor//N][neighbor%N] * site_spin) for neighbor in site_neighbors(i,j))
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.10985910493827171}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        if h[neighbor//N][neighbor%N] > 0:
          spin = 1
        else:
          spin = -1
        
        total_spin += site_spin * spin
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.10985910493827171}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = 0
      for neighbor in site_neighbors(i,j):
        if h[neighbor//N][neighbor%N] > 0:
          spin = 1
        else:
          spin = -1
        
        total_spin += site_spin * spin
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0017791666666666665}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i,j) if h[i//N][j] > 0 else (i,-1*j) for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for site, spin in site_order:
    if h[site//N][site%N] > 0:
      for k in range(4):
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        if h[site_nbr][site%N] > 0:
          total_spin[site*N+site%N][0] += 1
          total_spin[site*N+site%N][1] -= 1
        else:
          total_spin[site*N+site%N][0] -= 1

    else:
      for k in range(4):
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        if h[site_nbr][site%N] > 0:
          total_spin[site*N+site%N][0] += 1
          total_spin[site*N+site%N][1] -= 1
        else:
          total_spin[site*N+site%N][0] -= 1

    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][site%N] > 0:
        priority_total[site*N+site%N][0] += total_spin[site*N+site%N][0]
        priority_total[site*N+site%N][1] -= total_spin[site*N+site%N][1]
      else:
        priority_total[site*N+site%N][0] -= total_spin[site*N+site%N][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.0017791666666666665}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i,j) if h[i][j] > 0 else (i,-1*j) for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for site, spin in site_order:
    if h[site//N][site%N] > 0:
      for k in range(4):
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        if h[site_nbr][site%N] > 0:
          total_spin[site*N+site%N][0] += 1
          total_spin[site*N+site%N][1] -= 1
        else:
          total_spin[site*N+site%N][0] -= 1
    else:
      for k in range(4):
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        if h[site_nbr][site%N] > 0:
          total_spin[site*N+site%N][0] += 1
          total_spin[site*N+site%N][1] -= 1
        else:
          total_spin[site*N+site%N][0] -= 1

    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][site%N] > 0:
        priority_total[site*N+site%N][0] += total_spin[site*N+site%N][0]
        priority_total[site*N+site%N][1] -= total_spin[site*N+site%N][1]
      else:
        priority_total[site*N+site%N][0] -= total_spin[site*N+site%N][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': 0.257437808641975}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.1711850308641978}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N if (i+j) % 2 == 0 else ((i+j+1)//2)%N] + [((i-j)%N+N//2)%N if (i+j) % 2 == 1 else ((i+j-1)//2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
 
  total_spin = [[0,0] for _ in range(N**2)]
 
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        if 0 <= neighbor < N:
          total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
          total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
 
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin_neighbors = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [total_spin_neighbors + state[i][j], total_spin_neighbors]
  
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.3400445987654311}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      for site_nbr in site_nbrs:
        total_spin[i*N+j][0] += J[site_nbr][int(i/N)][i%N] * h[site_nbr][i%N]
        total_spin[i*N+j][1] -= J[site_nbr][int(i/N)][i%N] * (1 - 2*h[site_nbr][i%N])
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.002184722222222223}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j]>0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum(1 for k in range(N) if h[k][i]>0)-sum(1 for k in range(N) if h[k][i]<0) for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin = [sum(J[site][int(i/N)][i%N] for site in site_nbrs), 
                     -sum(J[site][int(i/N)][i%N] for site in site_nbrs)]
      if h[int(i/N)][i%N]>0:
        priority_total[i*N+j][0]=total_spin[0]
        priority_total[i*N+j][1]=-total_spin[1]
      else:
        priority_total[i*N+j][1]=-total_spin[0]
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00047762345679012254}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = []
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4) if abs(k-int(i/N)) <= 1 and (k-i) == 0]
      total_spin = sum(J[site][int(i/N)][i%N] for site in site_nbrs)
      if h[i][j] > 0:
        priority_total.append([total_spin, -total_spin])
      else:
        priority_total.append([-total_spin, total_spin])
  return priority_total




#score: {'data2D.txt': -0.0016418209876543205}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,-1))
    else:
      site_order.append((i,1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in site_order:
    site = i[0]
    spin = i[1]

    for k in [(site//N + ((j-1)%2 - 1)) % N for j in range(3)]:
      if h[k//N][k%N] > 0:
        priority_total[site][0] += 1
        priority_total[site][1] -= 1
      else:
        priority_total[site][0] -= 1

  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.0728597222222223}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for j in range(3)]
    for j in site_nbrs:
      if h[j//N][j%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  priority_total = [[-x[0],-x[1]] if h[i//N][i%N] > 0 else [x[0],x[1]] for i,x in enumerate(total_spin)]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0728597222222223}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for j in range(3)]
    for j in site_nbrs:
      if h[j//N][j%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  priority_total = [[-x[0],-x[1]] if h[i//N][i%N] > 0 else [x[0],x[1]] for i,x in enumerate(total_spin)]
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        
  priority_total = [[-np.inf, -np.inf] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[site*N+((j-1)%N)][0]
      else:
        priority_total[i*N+j][1] = -total_spin[site*N+((j-1)%N)][0]
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.0003371913580246916}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_weights = [[0.0, 0.0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1
        total_spin[site][1] += 1

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        site_weights[site*N+j][0] += total_spin[site][0]
        site_weights[site*N+j][1] -= total_spin[site][0]
      else:
        site_weights[site*N+j][0] -= total_spin[site][0]
        site_weights[site*N+j][1] += total_spin[site][0]

  return np.array(site_weights).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.00162824074074074}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N//2
  total_spin = [[0.0 for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N_half)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N_half)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        
      for k in range(3):
        if i == (k-1)%N:
          site = (i + ((j-1)%2 - 1)) % N
          total_spin[i*N+j][0] += h[site][j]
          
  return np.array([list(t) for t in total_spin]).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = ((i + (j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0009245370370370374}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
    
    for k in range(3):
      site = (i//N + ((k-1)%2 - 1)) % N
      total_spin[i][0] += h[site][i%N]
    
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -total_spin[i][0]
  
  return np.array([list(t) for t in priority_total]).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.0005288580246913579}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i,1) if h[i//N][i%N] > 0 else (i,-1) for i in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for site, spin in sorted(site_order):
    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][site%N] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1

    for k in range(4):
      site = (k + ((site-1)%2 - 1)) % N
      if h[site//N][site%N] > 0:
        priority_total[site][0] += total_spin[site][0]
        priority_total[site][1] -= total_spin[site][1]
      else:
        priority_total[site][0] -= total_spin[site][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.07303564814814818}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbrs = [(i-1,j) if i > 0 else None,(i,j+1) if j < N - 1 else None,(i+1,j) if i < N - 1 else None]
        site_nbrs = [site_nbr for site_nbr in site_nbrs if site_nbr]
        total_spin = sum([h[site_nbr[0]][site_nbr[1]] for site_nbr in site_nbrs])
        priority_total[i*N+j][0] += total_spin + len(site_nbrs)
        priority_total[i*N+j][1] -= total_spin - len(site_nbrs)
      else:
        site = (i + ((j-1)%2 - 1)) % N
        if h[site][j] > 0:
          total_spin = sum([h[k][j] for k in range(N) if (k == i or abs((k-i)%N) == 1)])
          priority_total[i*N+j][0] = total_spin
        else:
          total_spin = -sum([h[k][j] for k in range(N) if (k == i or abs((k-i)%N) == 1)])
          priority_total[i*N+j][1] = -total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.10083225308641983}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2) - 1) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.010183179012345679}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % 2) - 1) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[-total_spin[i][0], -total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.00017793209876543225}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[0.0,0.0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        site_weights[site*N+j][0] += 1
        site_weights[site*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        site_weights[site*N+j][0] -= 1
        site_weights[site*N+j][1] += 1
  
  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.00026959876543209847}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site_nbr*N+j][spin==1] += 1
      
  priority_total = []
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total.append([total_spin[site_nbr*N+j][0], total_spin[site_nbr*N+j][1]])
      else:
        priority_total.append([-total_spin[site_nbr*N+j][0], -total_spin[site_nbr*N+j][1]])
  
  return np.array(priority_total).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.1951344135802471}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= total_spin[site][1]
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          if h[site_nbr][j] > 0:
            if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
            else:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
            else:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1951344135802471}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  total_spin = [[0 for _ in range(2)] for _ in range(N2)]
  
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= total_spin[site][1]
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          if h[site_nbr][j] > 0:
            if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
            else:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
            else:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  total_spin = [[0, 0] for _ in range(N2)]
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= total_spin[site][1]
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          if h[site_nbr][j] > 0:
            if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
            else:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
            else:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1951344135802471}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N ** 2
  total_spin = [[0 for _ in range(2)] for _ in range(N2)]
  
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        if h[site_nbr][j] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
          total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += total_spin[site][0]
        priority_total[i*N+j][1] -= total_spin[site][1]
      else:
        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          if h[site_nbr][j] > 0:
            if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
            else:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
              priority_total[i*N+j][1] = -total_spin[site_nbr][1]
            else:
              priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0011476851851851854}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[0.0,0.0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      total_spin = 0
      if h[i][j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      
      site_nbrs = [(i+((j-1)%N - 1)) % N,(i+(j-1)%N - (i+N//2)) % N]
      for k in range(2):
        site = site_nbrs[k]
        if h[site][j] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      
      if h[i][j] > 0:
        site_weights[i*N+j][0] -= total_spin
        site_weights[i*N+j][1] += total_spin
      else:
        site_weights[i*N+j][0] += total_spin
        site_weights[i*N+j][1] -= total_spin
      
  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001048302469135802}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+((j-1)%N - 1)) % N,(i+(j-1)%N - (i+N//2)) % N]
      if h[i][j] > 0:
        total_spin[site_nbrs[0]*N+j%N][0] += 1
        total_spin[site_nbrs[0]*N+j%N][1] -= 1
        total_spin[site_nbrs[1]*N+j%N][0] -= 1
        total_spin[site_nbrs[1]*N+j%N][1] += 1
      else:
        total_spin[site_nbrs[0]*N+j%N][0] -= 1
        total_spin[site_nbrs[0]*N+j%N][1] += 1
        total_spin[site_nbrs[1]*N+j%N][0] += 1
        total_spin[site_nbrs[1]*N+j%N][1] -= 1

  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+((j-1)%N - 1)) % N,(i+(j-1)%N - (i+N//2)) % N]
      if h[i][j] > 0:
        priority_total[site_nbrs[0]*N+j%N][0] = total_spin[site_nbrs[0]*N+j%N][0]
        priority_total[site_nbrs[1]*N+j%N][1] = -total_spin[site_nbrs[1]*N+j%N][1]
      else:
        priority_total[site_nbrs[0]*N+j%N][0] = -total_spin[site_nbrs[0]*N+j%N][0]
        priority_total[site_nbrs[1]*N+j%N][1] = total_spin[site_nbrs[1]*N+j%N][1]

  return priority_total.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N*N, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = np.zeros((N*N, 2), dtype=int)
  for j in range(N):
    if h[j//N][j%N] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]
  return priority_total.flatten().reshape((N*N, 2)).tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0004532407407407407}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [sum(spin) for spin in zip(*state)]
  priorities = [[total_spin[0], -total_spin[1]] for _ in range(N**2)]
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site_nbrs = []
      if i > 0:
        site_nbrs.append((i-1, j))
      if j < N - 1:
        site_nbrs.append((i, j+1))
      if i < N - 1:
        site_nbrs.append((i+1, j))
      if (j+1) % N == i and i > 0:
        site_nbrs.append((i-1, (j+1)%N))
      
      for site_nbr in site_nbrs:
        total_spin[site_nbr[0]][site_nbr[1]] += h[site_nbr[0]][site_nbr[1]]
        
  return [[total_spin[i][j][0] if total_spin[i][j][1] > 0 else -total_spin[i][j][0], total_spin[i][j][1]] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
        priority_total[i][j][1] += 1
      
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      priorities.append([priority_total[i//N][i%N][0], priority_total[i//N][i%N][1]])
    else:
      priorities.append([-x for x in priority_total[i//N][i%N]])
  
  return priorities




#score: {'data2D.txt': -0.00030941358024691337}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0,0.0] for _ in range(N**2)]
  state = [[-1 if h[i][j]>0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j]>0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site][j]
        if h[i][j]>0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
      
  return np.array(total_spin).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0004538580246913577}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  priority_total = [[[0,0] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      if h[i][j] > 0:
        spin = 1
        total_spin[site_nbr][0] += 1
        total_spin[site_nbr][1] -= 1
        priority_total[i][j][0] += J[site_nbr//N][((site_nbr%N)-N//2)%N][0]
        priority_total[i][j][1] -= J[site_nbr//N][((site_nbr%N)-N//2)%N][1]
      else:
        spin = -1
        total_spin[site_nbr][0] -= 1
        total_spin[site_nbr][1] += 1
        priority_total[i][j][0] -= J[site_nbr//N][((site_nbr%N)-N//2)%N][0]
        priority_total[i][j][1] += J[site_nbr//N][((site_nbr%N)-N//2)%N][1]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0017337962962962966}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]

      state = -1 if h[site[0]][site[1]] > 0 else 1
      total_spin[i*N+j][0] += h[site[0]][site[1]] * state
      total_spin[i*N+j][1] -= h[site[0]][site[1]] * state

      for k in range(2):
        if J[site_nbr//N][((site_nbr%N)-N//2)%N][k] != 0:
          total_spin[i*N+j][1-k] += J[site_nbr//N][((site_nbr%N)-N//2)%N][k] * state

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.038140586419753104}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - (k-1)%2)) % N for i in range(N) for j in range(N) for k in range(3)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]

      if h[site[0]][site[1]] > 0:
        total_spin[i*N+j][0] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
      else:
        total_spin[i*N+j][0] -= J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]
        total_spin[i*N+j][1] += J[(site_nbr//N)][((site_nbr%N)-N//2)%N][0]

      for k in range(2):
        if J[site_nbr//N][((site_nbr%N)-N//2)%N][k] != 0:
          total_spin[i*N+j][1-k] += J[site_nbr//N][((site_nbr%N)-N//2)%N][k]

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0017337962962962966}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  
  total_spin = [[0, 0] for _ in range(N**2)]

  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]

  for i in range(N):
    for j in range(N):
      site = (i, j)
      site_nbr = site_nbrs[i*N+j]
      
      total_spin[i*N+j][0] += h[site[0]][site[1]] * state[site[0]][site[1]]
      total_spin[i*N+j][1] -= h[site[0]][site[1]] * state[site[0]][site[1]]
      
      for k in range(2):
        if J[site_nbr//N][((site_nbr%N)-N//2)%N][k] != 0:
          total_spin[i*N+j][1-k] += J[site_nbr//N][((site_nbr%N)-N//2)%N][k] * state[site[0]][site[1]]
          
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site_nbr = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site_nbr][0]
      priority_total[i*N+j][1] -= total_spin[site_nbr][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site_nbr = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site_nbr][0]
      priority_total[i*N+j][1] -= total_spin[site_nbr][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  site_nbrs = [(i + ((j-1)%N - 1)) % N for i in range(N) for j in range(N)]
  
  total_spin = [[0, 0] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      if h[site_nbr][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.00026959876543209847}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_weights = np.zeros((N, N))
  
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_nbrs = [(i//N + ((j-1)%2 - 1)) % N for j in range(4)]
      for site_nbr in site_nbrs:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
    else:
      site_nbrs = [(i//N + ((j+1)%2 - 1)) % N for j in range(4)]
      for site_nbr in site_nbrs:
        total_spin[i][0] -= 1
        total_spin[i][1] += 1
  
  return np.array([[(j+1)/2 for j in range(2)] if h[i//N][i%N] > 0 else [-(j+1)/2 for j in range(2)] for i in range(N**2)]).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.00026959876543209847}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    total_spin = [0,0]
    site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for j in range(4)]
    if h[i//N][i%N] > 0:
      for site_nbr in site_nbrs:
        total_spin[0] += 1
        total_spin[1] -= 1
    else:
      for site_nbr in site_nbrs:
        total_spin[0] -= 1
        total_spin[1] += 1
    site_weights[i] = [(j+1)/2 for j in range(2)] if h[i//N][i%N] > 0 else [-(j+1)/2 for j in range(2)]
  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.02236311728395062}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = sum(J[k,i*N+j] if k == 0 or k == 3 else J[1-(k%4),i*N+j] for k in range(4))
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin

  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.010276388888888889}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N, N))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][site] += J[0,i*N+j]
      else:
        total_spin[i][site] -= J[3,i*N+j]

  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i][site]
        priority_total[i*N+j][1] = -total_spin[i][site]
      else:
        priority_total[i*N+j][0] = -total_spin[i][site]
        priority_total[i*N+j][1] = total_spin[i][site]

  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.257437808641975}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  return [[x[0],x[1]] for x in total_spin]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [((i+(j-1)%N-1)) % N, ((i+(j+1)%N-2)) % N] if (i+j) % 2 == 0 else [((i+(j-1)%N-1)) % N, ((i+(j+1)%N-2)) % N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      for neighbor in site_neighbors(i,j):
        total_spin[i*N+j][0] += site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
        total_spin[i*N+j][1] -= site_spin * (1 + (-1)**((i-neighbor)//2) * (-1)**((j-neighbor)%N//2))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -priority_total[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -priority_total[i*N+j][0]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_neighbors = lambda i, j: ((i+(j-1)%N-1)) % N

  for i in range(N):
    for j in range(N):
      site = site_neighbors(i, j)
      if h[i][j] > 0:
        spin = -1
      else:
        spin = 1
      total_spin[site][spin==1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[j][0] = -total_spin[j][0]
      else:
        priority_total[j][1] = -total_spin[j][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.1909066358024694}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: ((i+(j-1)%N-1)) % N
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      site_nbr_spin = -1 if h[site_neighbors(i,j)][j] > 0 else 1
      total_spin[i*N+j][0] += site_spin * (1 + site_nbr_spin)
      total_spin[i*N+j][1] -= site_spin * (1 + site_nbr_spin)
      
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -total_spin[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      if state[i][j] == 1:
        priority_total[i][j] = [total_spin + 2, total_spin]
      else:
        priority_total[i][j] = [-total_spin - 2, -total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12453287037037053}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.05470972222222227}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      if h[i][j] > 0:
        priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      else:
        priority_total[i][j] = [total_spin, -total_spin]
        
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12453287037037053}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.17574953703703725}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (j-1)%2)) % N for k in range(4)]
      
      for k in range(4):
        if J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0] != 0:
          if h[site_nbrs[k]//N][site_nbrs[k]%N] > 0:
            priority_total[i*N+j][1] -= (J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0] - J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][1])
          else:
            priority_total[i*N+j][0] += (J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0] - J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][1])
      
      if h[i][j] > 0:
        priority_total[i*N+j][1] += 1
        priority_total[i*N+j][0] -= 1
      else:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
        
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.13420972222222238}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - (j-1)%2)) % N for k in range(4)]
      
      for k in range(4):
        if J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0] != 0:
          priority_total[i*N+j][0] += (h[site_nbrs[k]//N][site_nbrs[k]%N] - J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][1]) * J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
          priority_total[i*N+j][1] -= (h[site_nbrs[k]//N][site_nbrs[k]%N] - J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][1]) * J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
        
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.17199645061728414}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - (j-1)%N)) % N for k in range(4)]
      
      for k in range(4):
        if J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0] != 0:
          priority_total[i*N+j][0] += (h[site_nbrs[k]//N][site_nbrs[k]%N] - J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][1]) * J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
          priority_total[i*N+j][1] -= (h[site_nbrs[k]//N][site_nbrs[k]%N] - J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][1]) * J[(site_nbrs[k]//N)][((site_nbrs[k]%N)-N//2)%N][0]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
      
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  spin_values = [-1, 1]
  neighbor_interactions = [(0, 1), (1, 0), (N-2, N-1), (N-1, N-2)]
  total_magnetism = np.sum(h, axis=0)
  
  priority_list = []
  for i in range(N):
    row = []
    for j in range(N):
      spin_magnetism = h[i][j]
      neighbor_spin_magnetisms = [total_magnetism[neighbor] if neighbor >= 0 and neighbor < N else 0 for _, neighbor in neighbor_interactions if (i == _ // 4 % N and j == neighbor % 4) or (j == _ % 4 and i == neighbor // 4)]
      total_neighbor_spin_magnetism = sum(neighbor_spin_magnetisms)
      priority_row = [spin_magnetism + spin_values[0] * total_neighbor_spin_magnetism, -spin_magnetism - spin_values[1] * total_neighbor_spin_magnetism]
      row.append(priority_row)
    priority_list.append(row)
  
  return np.array(priority_list).flatten().reshape(-1, 2)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N*N)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1

  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()

  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.19419861111111122}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N // 2)) % N,
                  (i + (j + 1) % N), ((i + (j + 1) % N) + (N - 1)) % N]
  priority_total = [[0, 0] for _ in range(N ** 2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k // N][k % N] > 0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i * N + j][0] += total_spin
      priority_total[i * N + j][1] -= total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.23044027777777773}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N)%N,(i+N//2)%N if j==N//2 else ((i+(j+1)%N))%N]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j]>0 else 1
      total_spin = sum(1 if (h[site_neighbors(i,j)[k]%N][site_neighbors(i,j)[k]//N]>0) == site_spin else -1 for k in range(len(site_neighbors(i,j))))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [0, 1, (j-1)%N, (j+1)%N]]
      for k in range(4):
        if h[site_nbrs[k]][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]
  
  for k in range(4):
    for i, j in itertools.product(range(N), range(N)):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin = h[site_nbr][j] if h[site_nbr][j] > 0 else -h[site_nbr][j]
      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  total_spin = [[0,0] for _ in range(N2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N2)]

  for i, j in itertools.product(range(N), range(N)):
    site_nbrs = [(i + ((j-1)%N - 1)) % N for _ in range(N) for _ in range(N)]
    site_nbr = (i + ((0)%2 - 1)) % N
    if h[site_nbr][j] > 0:
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
    else:
      total_spin[i*N+j][0] -= 1
      total_spin[i*N+j][1] += 1

  for i, j in itertools.product(range(N), range(N)):
    if h[i][j] > 0:
      site = (i + ((j-1)%N - N//2)) % N
      priority_total[i*N+j][0] += total_spin[site][0]
      priority_total[i*N+j][1] -= total_spin[site][1]
    else:
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        if h[site_nbr][j] > 0:
          if priority_total[i*N+j][0] < total_spin[site_nbr][0]:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]
          else:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
        else:
          if priority_total[i*N+j][1] > -total_spin[site_nbr][1]:
            priority_total[i*N+j][1] = -total_spin[site_nbr][1]
          else:
            priority_total[i*N+j][0] = total_spin[site_nbr][0]

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001138734567901235}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%N - N//2)) % N for j in range(4)]
    for site_nbr, magnetized in zip(site_nbrs, [h[site_nbr//N][site_nbr%N] > 0 for site_nbr in site_nbrs]):
      if magnetized:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

    priority_total[i][0] = sum([total_spin[j][0] for j in site_nbrs])
    priority_total[i][1] = -sum([total_spin[j][1] for j in site_nbrs])

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i + ((j-1)%N - N//2)) % N if h[i][j] > 0 else (i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = site_order[i*N+j]
      spin = 1 if h[i][j] > 0 else -1
      total_spin[site][0] += 1
      total_spin[site][1] -= 1

  for i in range(N**2):
    priority_total[i][0] = sum([total_spin[(i + ((k-1)%N - N//2)) % N][0] for k in range(4)])
    priority_total[i][1] = -sum([total_spin[(i + ((k-1)%N - N//2)) % N][1] for k in range(4)])

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001138734567901235}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i + ((j-1)%N - N//2)) % N for j in range(4)]
    site_nbr_magnetism = [h[site_nbr//N][site_nbr%N] > 0 for site_nbr in site_nbrs]
    
    for spin, (site_nbr, magnetized) in enumerate(zip(site_nbrs, site_nbr_magnetism)):
      if magnetized:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
    
    priority_total[i][0] = sum([total_spin[j][0] for j in site_nbrs])
    priority_total[i][1] = -sum([total_spin[j][1] for j in site_nbrs])

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = -total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.2003418209876546}
#island_id: 6
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][1] += 1
        total_spin[site_nbr*N+int(j%N)][0] -= 1
      else:
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+int(j%N)][1] -= 1
        
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][1]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][1]
      else:
        priority_total[i*N+j][0] = -1*total_spin[i*N+j][0]
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site = (i // N + ((i % N - 1) % N)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
      
  return [[priority_total[i][0], priority_total[i][1]] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for k in range(3):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin = [0,0]
      for j in range(N):
        state[site_nbr][j] += (-1 if h[i][j] > 0 else 1)
        total_spin[0] += (-1 if h[i][j] > 0 else 1) * (-1 if h[site_nbr][j] > 0 else 1)
      for j in range(N):
        priority_total[i*N+j][0] = total_spin[0]
        priority_total[i*N+j][1] = -total_spin[0]
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
  
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
      priority_total[i][1] += 1
      
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': -0.009458487654320988}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': -0.009458487654320988}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i,j) in itertools.product(range(N),range(N))]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site][i%N]>0:
      total_spin[i][0]+=1
      total_spin[i][1]-=1
    else:
      total_spin[i][0]-=1
  
  return [[x,y] for x,y in total_spin]




#score: {'data2D.txt': -0.33486342592592494}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for site_nbrs in [(i//N + ((j-1)%N - N//2)) % N for (i,j) in itertools.product(range(N),range(N))]:
    site_nbr = (site_nbrs)
    total_spin[site_nbr][0] += h[site_nbr][0]
    total_spin[site_nbr][1] -= -h[site_nbr][0]
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  for i in range(N**2):
    priority_total[i][0] = total_spin[i][0]
    priority_total[i][1] = -1*total_spin[i][0]
  
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = -total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = -total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.18940972222222252}
#island_id: 9
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site_nbr = (i + ((j+1)%N - N//2)) % N
        if i > 0 and j < N-1:
          for k in range(3):
            site_nbr_k = (i + ((k-1)%2 - 1)) % N
            if h[site_nbr_k][j] > 0:
              priority_total[i*N+j][0] += 1
              priority_total[i*N+j][1] -= 1
            else:
              priority_total[i*N+j][0] -= 1
        elif i < N-1 and j < N-1:
          for k in range(3):
            site_nbr_k = (i + ((k-1)%2 - 1)) % N
            if h[site_nbr_k][j+1] > 0:
              priority_total[i*N+j][0] += 1
              priority_total[i*N+j][1] -= 1
            else:
              priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = -total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0]for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j]>0:
        spin=1
      else:
        spin=-1
      total_spin[i*N+j][spin==1]+=1
  priority_total = [[float('-inf')for _ in range(2)]for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j]>0:
        total_spin[i*N+j][0]+=1
        total_spin[i*N+j][1]-=1
      else:
        total_spin[i*N+j][0]-=1
  for i in range(N**2):
    priority_total[i][0]=-total_spin[i][0]
    priority_total[i][1]=-total_spin[i][1]
  return [[x[0],x[1]]for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.0005714506172839499}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = np.zeros((N, N))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        site_weights[i][j] += 1
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr*N+site_nbr][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        site_weights[i][j] -= 1
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr*N+site_nbr][1] += 1
  
  return total_spin.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + (i // N - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  for i in range(N**2):
    site_nbr = (i % N + (i // N - 1)) % N
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total = [[total_spin[i][0], total_spin[i][1]] if i==j else [0,0] for j in range(N**2)]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr][0]
        priority_total[i*N+j][1] -= total_spin[site_nbr][1]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j+1)%N - N//2)) % N
      if h[i][site_nbr] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr][0]
        priority_total[i*N+j][1] -= total_spin[site_nbr][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0003668209876543207}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
    if h[site_nbr][i % N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      site_nbr = (i // N + ((i % N + 1) % N) - 1) % N
      if h[site_nbr][i % N] > 0:
        total_spin[i][0] += 1
      else:
        total_spin[i][1] -= 1

  return total_spin.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.06135910493827168}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if state[s][site_nbr] == 1 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + 2*h[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  spin_map = {}
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
      if i*N+j in spin_map:
        spin_map[i*N+j].append(spin)
      else:
        spin_map[i*N+j]=[spin]
  priority_total = [[0,0] for _ in range(N**2)]
  for site in spin_map:
    spins = [x for x in set(spin_map[site])]
    for s in spins:
      for i in range(N):
        for j in range(N):
          if (i*N+j) in spin_map and s in spin_map[i*N+j]:
            priority_total[site][s==1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[-2**31 for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      if h[i][j] > 0:
        priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]
      else:
        priority_total[i][j] = [(-total_spin), (-total_spin - state[i][j])]
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  for i in range(N**2):
    site = (i // N + ((i % N - 1) % N)) % N
    if state[site][j] == -1:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return total_spin




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [float('-inf') for _ in range(N**2 * 2)]
  for i,j in itertools.product(range(N),range(N)):
    site = (i + ((j-1)%N - N//2)) % N
    if h[i][j] > 0:
      total_spin[(i*N+j)*2] += 1
      total_spin[(i*N+j)*2+1] -= 1
    else:
      total_spin[(i*N+j)*2] -= 1
  return [[total_spin[i*2],total_spin[i*2+1]] for i in range(N**2)]




#score: {'data2D.txt': -0.0017581790123456793}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_half = N // 2
  site_priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N_half)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      site_priority_total[i*N+j] = [total_spin + (h[i][j]>0), -total_spin]
  
  return site_priority_total.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + (i // N - 1)) % N
    spin = state[site_nbr//N][site_nbr%N]
    total_spin[i][spin==1] += 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[site_nbr][j] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr][0]
        priority_total[i*N+j][1] -= total_spin[site_nbr][1]
      site_nbr = (i + ((j+1)%N - N//2)) % N
      if h[i][site_nbr] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr][0]
        priority_total[i*N+j][1] -= total_spin[site_nbr][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      total_spin[i*N+j][1] -= sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      total_spin[i*N+j][1] -= sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      total_spin[i*N+j][1] -= sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[j][0] = state[site_nbr][0]
      else:
        priority_total[j][1] = -1*state[site_nbr][0]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j+1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[j][0] += state[site_nbr][0]
        priority_total[j][1] -= state[site_nbr][1]
  for i in range(N**2):
    priority_total[i] = [max(priority_total[i][0], priority_total[i][1]), min(priority_total[i][0], priority_total[i][1])]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = -total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
    
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
    
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = -total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
    
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
    
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = -total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site_nbr][spin==1] += 1
  
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[site_nbr][0] = total_spin[site_nbr][0]
      else:
        priority_total[site_nbr][1] = -total_spin[site_nbr][0]
  
  for i in range(N**2):
    return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  state = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
        state[site_nbr][1] += -1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        state[site_nbr][0] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      priority_total[i*N+j][spin] += total_spin[i*N+j][spin]
  
  return priority_total.tolist()




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.17167638888888836}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[site*N+j][0] += 1
        priority_total[site*N+j][1] -= 1
      else:
        priority_total[site*N+j][0] -= 1
        priority_total[site*N+j][1] += 1
  
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': -0.0013263888888888893}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  site_interactions = np.sum(J, axis=0).reshape(N,N)
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_interactions[i][j] += 1
      else:
        site_interactions[i][j] -= 1
        
  priority_total = np.zeros((N*N,2))
  
  for i in range(N):
    for j in range(N):
      total_spin[i][j][0] = np.sum(J[i:(i+1)][j:(j+1)], axis=(0,1)).flatten()[0]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i][j][0]
        priority_total[i*N+j][1] -= total_spin[i][j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i][j][0]
        priority_total[i*N+j][1] += total_spin[i][j][0]
        
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2,2))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': 0.0015186728395061733}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,-1))
    else:
      site_order.append((i,1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr//N][site_nbr%N] > 0:
        total_spin[site_nbr*N+site_nbr%N][0] += 1
        total_spin[site_nbr*N+site_nbr%N][1] -= 1
      else:
        total_spin[site_nbr*N+site_nbr%N][0] -= 1

    site = (i + ((i-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[site][0]
      priority_total[i][1] -= total_spin[site][1]
    else:
      priority_total[i][0] -= total_spin[site][0]

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0016418209876543205}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((j-1)%2 - 1)) % N for j in range(4)]
    for j in range(4):
      if h[site_nbrs[j]//N][site_nbrs[j]%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0007004629629629632}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N, N, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][site][0] += J[0,i*N+j]
        total_spin[i][site][1] -= J[1,i*N+j]
      else:
        total_spin[i][site][0] -= J[2,i*N+j]
        total_spin[i][site][1] += J[3,i*N+j]

  return [list(x) for x in np.argsort(-total_spin.reshape(N**2, 2), axis=1)]




#score: {'data2D.txt': -0.002529475308641976}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N, N, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][site][0] += J[0,i*N+j]
        total_spin[i][site][1] -= J[3,i*N+j]
      else:
        total_spin[i][site][0] -= J[2,i*N+j]
        total_spin[i][site][1] += J[1,i*N+j]

  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i][site][0]
        priority_total[i*N+j][1] = -total_spin[i][site][1]
      else:
        priority_total[i*N+j][0] = -total_spin[i][site][0]
        priority_total[i*N+j][1] = total_spin[i][site][1]

  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': -0.020897685185185186}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += J[0,i*N+j]
        priority_total[i*N+j][1] -= J[3,i*N+j]
      else:
        priority_total[i*N+j][0] -= J[2,i*N+j]
        priority_total[i*N+j][1] += J[1,i*N+j]
  
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.010276388888888889}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N, N))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i][site] += J[0,i*N+j]
      else:
        total_spin[i][site] -= J[3,i*N+j]

  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i][site]
        priority_total[i*N+j][1] = -total_spin[i][site]
      else:
        priority_total[i*N+j][0] = -total_spin[i][site]
        priority_total[i*N+j][1] = total_spin[i][site]

  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.023665277777777795}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin = [0,0]
      for k in range(3):
        site_nbr_neighbor = (site_nbr + ((k-1)%2 - 1)) % N
        total_spin[0] += state[i][j]*state[state[i][site_nbr_neighbor]][j]
        total_spin[1] += -state[i][j]*state[state[i][site_nbr_neighbor]][j]
      for k in range(3):
        site_nbr_neighbor = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
        total_spin[1] -= h[site_nbr][j]
      priority_total[i*N+j] = [total_spin[0], total_spin[1]]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      priority_total[i*N+j][spin==1] += 1
  return [[val[0], val[1]] for val in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N)
    for j in range(4):
      if j == 0: site_nbr = (site_nbr - 1) % N
      elif j == 1: site_nbr = (site_nbr + 1) % N
      elif j == 2: site_nbr = (site_nbr - N) % N
      else: site_nbr = (site_nbr + N) % N
      if h[site_nbr][i % N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_spin_map = {}
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
      
      if i*N+j in site_spin_map:
        site_spin_map[i*N+j].append(spin)
      else:
        site_spin_map[i*N+j]=[spin]
  
  priority_total = [[0,0] for _ in range(N**2)]
  for site in site_spin_map:
    spins = [x for x in set(site_spin_map[site])]
    for s in spins:
      for i in range(N):
        for j in range(N):
          if (i*N+j) in site_spin_map and s in site_spin_map[i*N+j]:
            priority_total[site][s==1] += 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  return [[val[0], val[1]] for val in total_spin]




#score: {'data2D.txt': 0.023665277777777795}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin = [0,0]
      for k in range(3):
        site_nbr_neighbor = (site_nbr + ((k-1)%2 - 1)) % N
        total_spin[0] += state[i][j]*state[state[i][site_nbr_neighbor]][j]
        total_spin[1] += -state[i][j]*state[state[i][site_nbr_neighbor]][j]
      for k in range(3):
        site_nbr_neighbor = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
        total_spin[1] -= h[site_nbr][j]
      priority_total[i*N+j] = [total_spin[0], total_spin[1]]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      priority_total[i*N+j][spin==1] += 1
  return [[val[0], val[1]] for val in priority_total]




#score: {'data2D.txt': -0.02502854938271605}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin = sum(J[k,i*N+j] if k == 0 or k == 3 else J[1-(k%4),i*N+j] for k in range(4))
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin = sum(J[1-(k%4),i*N+j] for k in range(4))
        if h[i][j] > 0:
          priority_total[i*N+j][0] += total_spin
          priority_total[i*N+j][1] -= total_spin
        else:
          priority_total[i*N+j][0] -= total_spin
          priority_total[i*N+j][1] += total_spin

  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.05683780864197532}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        for k in range(4):
          if k == 0: total_spin[i*N+j][0] += J[k,i*N+j]
          else: total_spin[i*N+j][k%2] -= J[(3-k)%2,i*N+j]
      else:
        site = (i + ((j-1)%N - N//2)) % N
        for k in range(4):
          if k == 0: total_spin[i*N+j][0] += h[site][j]
          elif k == 1: total_spin[i*N+j][k%2] -= J[(3-k)%2,i*N+j]
          else: total_spin[i*N+j][k%2] += J[k-1,i*N+j]

  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': 0.269609413580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        state = [0]*8
        for k in range(4):
          state[k] += J[k,i*N+j]
        total_spin[i*N+j][0] = max(state)
        total_spin[i*N+j][1] = -min(state)
      else:
        site = (i + ((j-1)%N - N//2)) % N
        for k in range(4):
          if k == 0: total_spin[i*N+j][0] += h[site][j]
          elif k == 1: total_spin[i*N+j][k%2] -= J[(3-k)%2,i*N+j]
          else: total_spin[i*N+j][k%2] += J[k-1,i*N+j]
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': 0.11702546296296296}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        state = sum(1 if k == 0 else -1 if k == 3 else J[k%4,i*N+j] for k in range(4))
        total_spin[i*N+j][0] += state
        total_spin[i*N+j][1] -= state
      else:
        site = (i + ((j-1)%N - N//2)) % N
        state = sum(h[site][j] if k == 0 else J[k%4,i*N+j] for k in range(4))
        total_spin[i*N+j][0] += state
        total_spin[i*N+j][1] -= state
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.20015447530864225}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0016899691358024697}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [0, 1, 2]]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += sum(1 for _ in site_nbrs)
        total_spin[i*N+j][1] -= len(site_nbrs)
      else:
        total_spin[i*N+j][0] -= len(site_nbrs)
        total_spin[i*N+j][1] += sum(1 for _ in site_nbrs)
  return [list(x) for x in np.argsort(np.array(total_spin))][::-1]




#score: {'data2D.txt': 0.2696915123456789}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [0,1,2]]
      total_spin = [h[i][j], sum(h[site_nbr][j] for site_nbr in site_nbrs)]
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += sum(1 for x in total_spin)
        priority_total[i*N+j][1] -= sum(x for x in total_spin)
      else:
        priority_total[i*N+j][0] -= sum(1 for x in total_spin)
        priority_total[i*N+j][1] += sum(x for x in total_spin)
  
  return [list(x) for x in np.argsort(-np.array(priority_total))]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = np.zeros((N**2, 2))
  
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site_nbrs = [(i + ((k-1)%2 - 1)) % N]
        total_spin = [h[i][j]]
        if h[i][j] > 0:
          total_spin.append(1)
        else:
          total_spin.append(-1)

        for k in range(3):
          site_nbr = (i + ((k-1)%2 - 1)) % N
          total_spin.append(h[site_nbr][j])
          if h[site_nbr][j] > 0:
            total_spin[-1] += 1
          else:
            total_spin[-1] -= 1

        priority_total[i*N+j][0] = sum(x**2 for x in total_spin)
        priority_total[i*N+j][1] = -sum(x for x in total_spin)

  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      total_spin[i*N+j][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.0012208333333333327}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1
      priority_total[site][0] = total_spin[site][0]
      priority_total[site][1] = -total_spin[site][0]
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[i][j]
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
        
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[site][0] += 1
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        total_spin[site][0] -= 1
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
        
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.reshape(-1,4).T.flatten()
  sum_1 = (np.prod(J_new[::2],0) + h).flatten()
  sum_2 = (-np.prod(J_new[1::2],0)).flatten()
  priority = np.column_stack((sum_1,-sum_1))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j]>0:
        spin=1
      else:
        spin=-1
      total_spin[i*N+j][spin==1]+=1
  priority_total = [[float('-inf')for _ in range(2)]for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j]>0:
        total_spin[i*N+j][0]+=1
        total_spin[i*N+j][1]-=1
      else:
        total_spin[i*N+j][0]-=1
  for i in range(N**2):
    priority_total[i][0]=-total_spin[i][0]
    priority_total[i][1]=-total_spin[i][1]
  return [[x[0],x[1]]for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N)) % N
    if h[i//N][i%N] > 0:
      state[i//N][i%N] += 1
      total_spin = [0,0]
      for j in range(N**2):
        if state[j//N][j%N] == state[i//N][i%N]:
          if h[j//N][j%N] > 0:
            total_spin[0] += 1
          else:
            total_spin[1] += 1
      priority_total[i][0] = -total_spin[0]
      priority_total[i][1] = -total_spin[1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.13117330246913594}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,1))
    else:
      site_order.append((i,-1))

  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    for k in range(3):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

    for k in range(3):
      site = (i + ((k-1)%2 - 1)) % N
      if h[site//N][i%N] > 0:
        priority_total[i][0] += total_spin[i][0]
        priority_total[i][1] -= total_spin[i][1]
      else:
        priority_total[i][0] -= total_spin[i][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.009458487654320988}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': -0.009458487654320988}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_squared = N**2
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return([list(x) for x in priority])




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.009458487654320988}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
    
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': -0.0017791666666666665}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i,j) if h[i][j] > 0 else (i,-1*j) for i in range(N) for j in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for site, spin in site_order:
    if spin > 0:
      for k in range(4):
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        if h[site_nbr][site%N] > 0:
          total_spin[site*N+site%N][0] += 1
          total_spin[site*N+site%N][1] -= 1
        else:
          total_spin[site*N+site%N][0] -= 1
    else:
      for k in range(4):
        site_nbr = (site//N + ((k-1)%2 - 1)) % N
        if h[site_nbr][site%N] > 0:
          total_spin[site*N+site%N][0] += 1
          total_spin[site*N+site%N][1] -= 1
        else:
          total_spin[site*N+site%N][0] -= 1

    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][site%N] > 0:
        priority_total[site*N+site%N][0] += total_spin[site*N+site%N][0]
        priority_total[site*N+site%N][1] -= total_spin[site*N+site%N][1]
      else:
        priority_total[site*N+site%N][0] -= total_spin[site*N+site%N][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += sum(site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2)) for k in range(2))
      total_spin[i*N+j][1] -= sum(site_spin * (1 + (-1)**((i-site_neighbors(i,j)[0])//2) * (-1)**((j-site_neighbors(i,j)[1])%N//2)) for k in range(2))
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority.tolist())




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - 1) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][0]
    else:
      priority_total[i][0] -= total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  
  for i in range(N**2):
    site_nbr = (i//N + ((i%N-1)%N - 1)) % N
    if h[site_nbr][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][0]
    else:
      priority_total[i][0] -= total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      total_spin[i*N+j][1] -= sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.1727646604938274}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin = sum([site_spin * (1 + (-1)**((i-neighbor[0])//2) * (-1)**((j-neighbor[1])%N//2)) for neighbor in [site_neighbors(i,j)]])
      
      total_magnetism = h[i][j]
      
      if site_spin == -1:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1 + total_spin + total_magnetism
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] = -total_spin - total_magnetism
      
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.1671214506172842}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  site = lambda i,j: (i + ((j-1)%2 - 1)) % N
  
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin = sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
      
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[site*N+j][0] += 1
        priority_total[site*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[site*N+j][0] -= 1
        priority_total[site*N+j][1] += 1
      
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.22964737654320985}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.22964737654320985}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin

  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.22964737654320985}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-1)%N,(i+(j+1)%N-2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N),(i+(j+1)%N-N//2)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i,j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin

  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0016418209876543205}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_order = [(i,1) if h[i//N][i%N] > 0 else (i,-1) for i in range(N**2)]

  for i in range(N**2):
    site = site_order[i][0]
    spin = site_order[i][1]

    site_nbrs = [(site//N + ((j-1)%2 - 1)) % N for j in range(3)]
    for k in site_nbrs:
      if h[k//N][k%N] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1

  return [[x,y] for x,y in total_spin]




#score: {'data2D.txt': 0.023665277777777795}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin = [0,0]
      for k in range(3):
        site_nbr_neighbor = (site_nbr + ((k-1)%2 - 1)) % N
        total_spin[0] += state[i][j]*state[state[i][site_nbr_neighbor]][j]
        total_spin[1] += -state[i][j]*state[state[i][site_nbr_neighbor]][j]
      for k in range(3):
        site_nbr_neighbor = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
        total_spin[1] -= h[site_nbr][j]
      priority_total[i*N+j] = [total_spin[0], total_spin[1]]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      priority_total[i*N+j][spin==1] += 1
  return [[val[0], val[1]] for val in priority_total]




#score: {'data2D.txt': 0.04706095679012349}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin = [0, 0]
      for k in range(3):
        site_nbr_neighbor = (site_nbr + ((k-1)%2 - 1)) % N
        total_spin[0] += state[i][j]*state[state[i][site_nbr_neighbor]][j]
        total_spin[1] -= state[i][j]*state[state[i][site_nbr_neighbor]][j]
      for k in range(3):
        site_nbr_neighbor = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
        total_spin[1] -= h[site_nbr][j]
      priority_total[i*N+j] = [total_spin[0], total_spin[1]]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = -1*priority_total[i*N+j][1]
      else:
        priority_total[i*N+j][1] = -1*priority_total[i*N+j][0]
  return [[val[0], val[1]] for val in priority_total]




#score: {'data2D.txt': 0.18979768518518536}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin = [0,0]
      for k in range(3):
        site_nbr_neighbor = (site_nbr + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          total_spin[0] += state[i][j]*state[state[i][site_nbr_neighbor]][j]
          total_spin[1] -= state[i][j]*state[state[i][site_nbr_neighbor]][j]
        else:
          total_spin[0] -= state[i][j]*state[state[i][site_nbr_neighbor]][j]
          total_spin[1] += state[i][j]*state[state[i][site_nbr_neighbor]][j]
      for k in range(3):
        site_nbr_neighbor = (i + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          total_spin[0] += h[site_nbr][j]
          total_spin[1] -= h[site_nbr][j]
        else:
          total_spin[0] -= h[site_nbr][j]
          total_spin[1] += h[site_nbr][j]
      priority_total[i*N+j] = [total_spin[0], total_spin[1]]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][1] = -1*priority_total[i][0]
    else:
      priority_total[i][0] = -1*priority_total[i][0]
  return [[val[0], val[1]] for val in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = np.sum(np.prod(J_new[::4], -1), axis=0) + h.flatten()
  sum_2 = np.sum(np.prod(J_new[1::4], -1), axis=0) - h.flatten()
  
  priority_list = [[x, y] for x, y in zip(sum_1.tolist(), sum_2.tolist())]
  
  return priority_list




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]
  
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12291435185185198}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12291435185185198}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0005665123456790122}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_weights = np.zeros((N, N))
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr1 = (i + ((j-1)%N - N//2)) % N
        site_nbr2 = (i + ((j+1)%N - N//2)) % N
        site_weights[i][j] += 1
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr1*N+site_nbr1][0] -= 1
        total_spin[site_nbr2*N+site_nbr2][0] -= 1
      else:
        site_nbr1 = (i + ((j-1)%N - N//2)) % N
        site_nbr2 = (i + ((j+1)%N - N//2)) % N
        site_weights[i][j] -= 1
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr1*N+site_nbr1][0] += 1
        total_spin[site_nbr2*N+site_nbr2][0] += 1
  
  return np.array([list(t) for t in total_spin]).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.009710030864197531}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N,N,2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
        priority_total[i][j][1] += 1
  
  return priority_total.reshape((N*N,2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin = state[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - 1) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][0]
    else:
      priority_total[i][0] -= total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - 1) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][0]
    else:
      priority_total[i][0] -= total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]

  return [[i//N + (j-1)%2 % N, j%N - 1 if h[i//N][j] > 0 else 0] for i in range(N**2) for j in range(N)]




#score: {'data2D.txt': -0.0009927469135802465}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(spin * (h[k][l] > 0) for k, l in [(i, (j-1)%N), (i, (j+1)%N), ((i-1)%N, j), ((i+1)%N, j)] if (k >= 0 and k < N and l >= 0 and l < N))
      site_weights[i*N+j][spin==1] = total_spin
      site_weights[i*N+j][spin!=1] = -total_spin
  
  return np.array(site_weights).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0010643518518518515}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N, N, 2))
  site_weights = np.zeros((N, N))

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
        site_weights[i][j] += 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i][j][0] -= 1
        priority_total[i][j][1] += 1
        site_weights[i][j] -= 1

  return priority_total.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': 2.916666666666623e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N,2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[site][j][0] += 1
        total_spin[site][j][1] -= 1
      else:
        total_spin[site][j][0] -= 1
        total_spin[site][j][1] += 1
  return np.array([list(t) for t in total_spin.reshape(N*N,2)]).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': 6.8364197530864e-05}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin = 0
        for k in range(3):
          site_nbr = (site + ((k-1)%2 - 1)) % N
          total_spin += h[site_nbr][j]
        priority_total[i*N+j][0] = total_spin
      else:
        total_spin = 0
        for k in range(3):
          site_nbr = (site + ((k-1)%2 - 1)) % N
          total_spin -= h[site_nbr][j]
        priority_total[i*N+j][1] = -total_spin
  
  return np.array([list(t) for t in priority_total]).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 2
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 2
      
      for k in range(N):
        site_nbr3 = (i + ((k-1)%N - 1)) % N
        if h[i][k] > 0:
          priority_total[i*N+k][0] += 1
          priority_total[i*N+k][1] -= 1
        else:
          priority_total[i*N+k][0] -= 1
          priority_total[i*N+k][1] += 1
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
        
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][0]
    else:
      priority_total[i][0] -= total_spin[i][0]
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin_val = total_spin[i*N+j][0] if h[i][j] > 0 else total_spin[i*N+j][1]
      priority_total[i*N+j][0] += total_spin_val
      priority_total[i*N+j][1] -= total_spin_val
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N - 1)) % N, 
                  (i + (j + 1) % N), ((i + (j + 1) % N) + (N - 1)) % N]
  priority_total = [[0.0 for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum([J[k // N][k % N][site_neighbors(i, j).index(k)] * (h[k // N][k % N] > 0) == site_spin for k in site_neighbors(i, j)])
      priority_total[i * N + j][0] = total_spin
      priority_total[i * N + j][1] = -total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19723070987654331}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N // 2)) % N,
                 (i + (j + 1) % N), ((i + (j + 1) % N) + (N // 2)) % N]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N),(i+((j-1)%N)+N//2)%N,(i+(j+1)%N),((i+(j+1)%N)+(N-1))%N]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf'),float('-inf')] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j]>0 else 1
      total_spin[i*N+j] = [x+1 for x in total_spin[i*N+j]]+[x-1 for x in total_spin[i*N+j]][::-1]
      priority_total[i*N+j] = [-total_spin[i*N+j][1],total_spin[i*N+j][0]]

  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin = [h[i][j], -h[i][j]]
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
      else:
        total_spin = [-h[i][j], h[i][j]]
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
  
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin = [h[i][j], -h[i][j]]
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
      else:
        total_spin = [-h[i][j], h[i][j]]
        priority_total[i*N+j][0] += total_spin[0]
        priority_total[i*N+j][1] -= total_spin[1]
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.0010689814814814815}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  site_weights = [[0.0, 0.0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site*N+j][spin==1] += 1

  for k in range(2):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          site_weights[site*N+j][0] += total_spin[site][0]
        else:
          site_weights[site*N+j][1] -= total_spin[site][0]

  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[i][0], -total_spin[i][1]])
    else:
      priority_total.append([-total_spin[i][0], total_spin[i][1]])

  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0006183641975308641}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_weights = [[0.0,0.0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1

      site = (i + ((j-1)%2 - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      site_weights[site*N+j][spin==1] += 1

  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([site_weights[i][0], -site_weights[i][1]])
    else:
      priority_total.append([-site_weights[i][0], site_weights[i][1]])

  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0014708333333333335}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1)) % N
    total_spin = [state[site_nbr][0], state[site_nbr][1]]
    if h[i // N][i % N] > 0:
      priorities.append([total_spin[0], total_spin[1]])
    else:
      priorities.append([-x for x in total_spin])
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
    total_spin = [0, 0]
    for k in range(4):
      site_nbr = site_nbrs[k]
      if h[site_nbr][i%N] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
    priorities.append([total_spin[0], -total_spin[0]])
  return [[x, y] for x, y in priorities]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    total_spin = [0, 0]
    for k in range(4):
      site_nbr = (i // N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i % N] > 0:
        total_spin[0] += state[site_nbr][i % N]
        total_spin[1] -= state[site_nbr][i % N]
      else:
        total_spin[0] -= state[site_nbr][i % N]
    priorities.append([total_spin[0], total_spin[1]])
  return priorities




#score: {'data2D.txt': -0.0008516975308641978}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      total_spin[i*N+j][0] += h[site_nbr//N][j%N]
      if h[site_nbr//N][j%N] > 0:
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      if h[site_nbr//N][j%N] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+site_nbr][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+site_nbr][0]

  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.0008516975308641978}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = site_nbrs[i*N+j]
      total_spin[i*N+j][0] += h[site_nbr//N][site_nbr%N]
      total_spin[i*N+j][1] -= -h[site_nbr//N][site_nbr%N]
      
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
        
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i//N + ((k-1)%N - N//2)) % N for k in range(4)]
      total_spin[i*N+j][0] += sum([h[site_nbr][j] if h[site_nbr][j] > 0 else -h[site_nbr][j] for site_nbr in site_nbrs])
      total_spin[i*N+j][1] -= sum([h[site_nbr][j] if h[site_nbr][j] > 0 else -h[site_nbr][j] for site_nbr in site_nbrs])
  
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for j in range(N):
    for i in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001421759259259259}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(4)]
      
      site_nbr_magnetism = [h[site_nbr][j] > 0 for site_nbr in site_nbrs]
      
      total_spin[i*N+j][0] += sum([1 if magnetized else -1 for magnetized in site_nbr_magnetism])
  
  priority_total = [[-total_spin[i][0], total_spin[i][0]] for i in range(N**2)]
  
  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.0008992283950617286}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i // N + ((j - 1) % N - N // 2)) % N for j in range(4)]
    site_nbr_magnetism = [h[site_nbr][i % N] > 0 for site_nbr in site_nbrs]

    for spin, (site_nbr, magnetized) in enumerate(zip(site_nbrs, site_nbr_magnetism)):
      if magnetized:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

    priority_total[i][0] = sum([total_spin[j][0] for j in site_nbrs])
    priority_total[i][1] = -sum([total_spin[j][1] for j in site_nbrs])

  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.30662145061728324}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += J[0,i*N+j]
        total_spin[site_nbr*N+j][1] -= J[1,i*N+j]
      else:
        total_spin[site_nbr*N+j][0] -= J[2,i*N+j]
        total_spin[site_nbr*N+j][1] += J[3,i*N+j]
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': 0.30662145061728324}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site*N+j][0] += J[0,i*N+j]
        total_spin[site*N+j][1] -= J[1,i*N+j]
      else:
        total_spin[site*N+j][0] -= J[2,i*N+j]
        total_spin[site*N+j][1] += J[3,i*N+j]
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': -0.05414922839506174}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_magnetism = [sum(h[i][j] for j in range(N)) for i in range(N)]
  for i in range(N**2):
    site_nbr = (i % N + (i // N - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  priority_total = [[site_magnetism[i//N], -site_magnetism[i//N]] for i in range(N**2)]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + (i // N - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  for i in range(N**2):
    site_nbr = (i % N + (i // N - 1)) % N
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total = [[total_spin[i][0], total_spin[i][1]] if i==j else [0,0] for j in range(N**2)]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + (i // N - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
  for i in range(N**2):
    site_nbr = (i % N + (i // N - 1)) % N
    if h[site_nbr//N][site_nbr%N] > 0:
      priority_total = [[total_spin[i][0], total_spin[i][1]] if i==j else [0,0] for j in range(N**2)]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf'), float('-inf')], [float('-inf'), float('-inf')]] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0][0] += state[i][site_nbr]
        priority_total[i*N+j][0][1] -= state[i][site_nbr]
      else:
        priority_total[i*N+j][1][0] -= state[i][site_nbr]
        priority_total[i*N+j][1][1] += state[i][site_nbr]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][1] = [-x for x in priority_total[i][0]]
    else:
      priority_total[i][0] = [-x for x in priority_total[i][0]]
  return [[val[0][0], val[0][1]] for val in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [float('-inf') for _ in range(N**2*2)]
  for i, j in itertools.product(range(N), range(N)):
    site = (i + ((j-1)%N - N//2)) % N
    if h[i][j] > 0:
      total_spin[(i*N+j)*2] += 1
      total_spin[(i*N+j)*2+1] -= 1
    else:
      total_spin[(i*N+j)*2] -= 1
  return [[total_spin[i*2], total_spin[i*2+1]] for i in range(N**2)]




#score: {'data2D.txt': -0.0018757716049382718}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [0,0]
  for i,j in itertools.product(range(N),range(N)):
    site_nbr = (i + ((j-1)%N - 1)) % N
    if h[i][j] > 0:
      total_spin[0] += state[i][j]*state[state[i][site_nbr]][j]
      total_spin[1] -= state[i][j]*state[state[i][site_nbr]][j]
    else:
      total_spin[0] -= state[i][j]*state[state[i][site_nbr]][j]
      total_spin[1] += state[i][j]*state[state[i][site_nbr]][j]
  return [[total_spin[0],total_spin[1]] for _ in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin[i*N+j][0] += sum([1 if state[s][site_nbr] == 1 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      total_spin[i*N+j][1] -= sum([1 if state[s][site_nbr] == -1 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])

  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': -0.09231466049382725}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin[i*N+j] = [sum([1 if state[s][site_nbr] == 1 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])]), sum([1 if state[s][site_nbr] == -1 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])]
      total_spin[i*N+j][0] += 2*h[i][j]
      total_spin[i*N+j][1] -= 2*h[i][j]

  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': -0.0017770061728395066}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0.0 for _ in range(2)] for _ in range(N**2)]
  total_spin = [[0.0, 0.0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    site = (i // N + ((i % N - 1) % N) - 1) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[site*N+i%N][0]
      priority_total[i][1] -= total_spin[site*N+i%N][1]
    else:
      priority_total[i][0] -= total_spin[site*N+i%N][0]
      priority_total[i][1] = -total_spin[site*N+i%N][1]

  return np.array([list(t) for t in priority_total]).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.002087808641975308}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N_sq = N * N
  priority_total = np.zeros((N_sq, 2))
  
  for i in range(N_sq):
    site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in [1, 3]]
    
    for j in [0, 1]:
      total_spin = sum(h[site_nbr][i%N] for site_nbr in site_nbrs)
      
      if h[i//N][i%N] > 0:
        priority_total[i][j] += total_spin
      else:
        priority_total[i][j] -= total_spin
  
  return priority_total.flatten().reshape((N_sq, 2), order='F')




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4],0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4],0) + h).flatten()
  priority = np.column_stack((sum_1,-sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N**2
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return [[val[0], val[1]] for val in priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority.tolist())




#score: {'data2D.txt': -0.14398287037037052}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N // 2)) % N,
                 (i + (j + 1) % N), ((i + (j + 1) % N) + (N // 2)) % N]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][0] += site_spin * total_spin
      priority_total[i*N+j][1] -= site_spin * total_spin
      
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.14398287037037052}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N // 2)) % N,
                  (i + (j + 1) % N), ((i + (j + 1) % N) + (N // 2)) % N]

  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][0] = site_spin * total_spin
      priority_total[i*N+j][1] = -site_spin * total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.2329069444444444}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [((i+(j-1)%N+N//2)%N),((i+(j+1)%N-N//2)%N)]
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19723070987654331}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N // 2)) % N,
         (i + (j + 1) % N), ((i + (j + 1) % N) + (N // 2)) % N]
  priority_total = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j] += [total_spin, -total_spin]

  return priority_total.tolist()




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N = int(N)
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.reshape(N**2, 2)




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = {}
  
  for i in range(N):
    for j in range(N):
      if (i,j) not in site_interactions:
        site_interactions[(i,j)] = [0, 0]
      
      for k in range(4):
        neighbor = ((i+((j+k)%N-N//2)) % N, (k-1)%2)
        if neighbor[1] == j and abs(neighbor[0]-i) + abs(neighbor[1]) == 1:
          site_interactions[(i,j)][J[tuple(neighbor), i*N+j][0]>0][1] += 1
  
  total_priority = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      if (i,j) not in site_interactions:
        continue
      
      if h[i][j] > 0:
        total_priority[i*N+j][0] = -1
        total_priority[i*N+j][1] += site_interactions[(i,j)][1]
      else:
        total_priority[i*N+j][1] = -1
        total_priority[i*N+j][0] += site_interactions[(i,j)][1]
  
  return total_priority.tolist()




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  site_spin_map = {}
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
      
      site_nbr = (i + ((j-1)%N - 1)) % N
      site_spin_map[i*N+j] = [spin]
  
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
      
  for i in range(N**2):
    if h[site][j] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009274228395061727}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf'),float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  for i in range(N**2):
    site = (i + ((i//N-1)%2 - 1)) % N
    if h[site][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
    else:
      priority_total[i][1] = -total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_list = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N)
    
    for j in [0, 1]:
      if j == 0: site_nbr = (site_nbr - 1) % N
      elif j == 1: site_nbr = (site_nbr + 1) % N
      
      if h[site_nbr][i % N] > 0:
        priority_list[i][0] += J[j*N**2:(j+1)*N**2].sum() - 1
        priority_list[i][1] -= J[j*N**2:(j+1)*N**2].sum() + 1
      else:
        priority_list[i][0] -= J[j*N**2:(j+1)*N**2].sum() + 1
        priority_list[i][1] += J[j*N**2:(j+1)*N**2].sum() - 1
  
  return [[x[0], x[1]] for x in priority_list]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
      
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -1*total_spin[i][0]
    else:
      priority_total[i][0] = -1*total_spin[i][0]
      priority_total[i][1] = total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_list = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N)
    
    for j in [0, 1]:
      if j == 0: site_nbr = (site_nbr - 1) % N
      elif j == 1: site_nbr = (site_nbr + 1) % N
      
      if h[site_nbr][i % N] > 0:
        priority_list[i][0] += J[j*N**2:(j+1)*N**2].sum() - 1
        priority_list[i][1] -= J[j*N**2:(j+1)*N**2].sum() + 1
      else:
        priority_list[i][0] -= J[j*N**2:(j+1)*N**2].sum() + 1
        priority_list[i][1] += J[j*N**2:(j+1)*N**2].sum() - 1
  
  return [[x[0], x[1]] for x in priority_list]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for k in range(3):
    site_nbr = (k%N - 1) % N
    for i in range(N):
      for j in range(N):
        if h[site_nbr][j] > 0:
          priority_total[i*N+j][0] += 1
        else:
          priority_total[i*N+j][1] -= 1
  
  for i in range(N**2):
    if h[int(i/N)][i%N] > 0:
      priority_total[i][0] = -priority_total[i][0]
    else:
      priority_total[i][1] = -priority_total[i][1]
  
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0006575617283950613}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0]for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j]>0:
        spin=1
      else:
        spin=-1
      total_spin[i*N+j][spin==1]+=1
  priority_total = [[float('-inf')for _ in range(2)]for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j]>0:
        priority_total[j][0] = total_spin[j][0]
        priority_total[j][1] = -total_spin[j][1]
      else:
        priority_total[j][0] = -total_spin[j][0]
        priority_total[j][1] = total_spin[j][1]
  return [[x[0],x[1]]for x in priority_total]




#score: {'data2D.txt': 0.0027057098765432097}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

      for k in range(4):
        if J[k,i*N+j] > 0:
          site = (i + ((k-1)%2 - 1)) % N
          total_spin[site*N+j][0] += J[k,i*N+j]
          total_spin[site*N+j][1] -= J[k,i*N+j]
        else:
          site = (i + ((k-1)%2 - 1)) % N
          total_spin[site*N+j][0] -= J[k,i*N+j]
          total_spin[site*N+j][1] += J[k,i*N+j]

  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': 0.009443981481481482}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site*N+j][0] += 1
        total_spin[site*N+j][1] -= 1
      else:
        total_spin[site*N+j][0] -= 1
        total_spin[site*N+j][1] += 1
        
  return [list(x) for x in np.argsort(-np.array(total_spin))]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': 0.15602052469135821}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N // 2)) % N,
                  (i + (j + 1) % N), ((i + (j + 1) % N) + (N - 1)) % N]

  priority_total = [[0, 0] for _ in range(N ** 2)]

  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1

      total_spin = sum((h[neighbor // N][neighbor % N] * site_spin) for neighbor in site_neighbors(i, j))

      priority_total[i * N + j][0] += -total_spin
      if h[i][j] > 0:
        priority_total[i * N + j][1] = total_spin
      else:
        priority_total[i * N + j][1] = -total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.144902314814815}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_spin = -1
      else:
        site_spin = 1
      
      total_spin = sum((h[neighbor//N][neighbor%N] * site_spin) for neighbor in site_neighbors(i,j))
      
      priority_total[i*N+j][0] = -total_spin
      if h[i][j] > 0:
        priority_total[i*N+j][1] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
    
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N] if (i+j) % 2 == 0 else [(i+(j-1)%N-N//2)%N,(i+(j+1)%N-N//2)%N]
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum((h[neighbor//N][neighbor%N] * site_spin) for neighbor in site_neighbors(i,j))
      
      for spin in [-1, 1]:
        priority = -total_spin + (spin == site_spin)
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
        
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
        
  return [x.tolist() for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum((1 if (h[k // N][k % N] > 0) == site_spin else -1) * (-1)**(((i+k//N)%2)+(j+k%N)//2) for k in range(N*N))
      priority_total[i * N + j][0] += total_spin
      priority_total[i * N + j][1] -= total_spin
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_list = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N)
    
    for j in [0, 1]:
      if J[j*N**2:(j+1)*N**2].sum() > 0:
        priority_list[i][0] += J[j*N**2:(j+1)*N**2].sum() + h[site_nbr % N][i % N]
        priority_list[i][1] -= J[j*N**2:(j+1)*N**2].sum() - h[site_nbr % N][i % N]
      else:
        priority_list[i][0] -= J[j*N**2:(j+1)*N**2].sum() - h[site_nbr % N][i % N]
        priority_list[i][1] += J[j*N**2:(j+1)*N**2].sum() + h[site_nbr % N][i % N]
  
  return [[x[0], x[1]] for x in priority_list]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_list = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N)
    
    for j in [0, 1]:
      if j == 0: 
        site_nbr = (site_nbr - 1) % N
      elif j == 1:
        site_nbr = (site_nbr + 1) % N
      
      if h[site_nbr][i % N] > 0:
        priority_list[i][0] += J[j*N**2:(j+1)*N**2].sum() - 1
        priority_list[i][1] -= J[j*N**2:(j+1)*N**2].sum() + 1
      else:
        priority_list[i][0] -= J[j*N**2:(j+1)*N**2].sum() + 1
        priority_list[i][1] += J[j*N**2:(j+1)*N**2].sum() - 1
    
  return [[x[0], x[1]] for x in priority_list]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][site_nbr][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin = sum([h[site][k] for k in range(N)])
        priority_total[i][j][0] = total_spin
      else:
        total_spin = -sum([h[site][k] for k in range(N)])
        priority_total[i][j][1] = -total_spin
  
  return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [priority_total[i][j]]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1

  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for k in range(3):
    site_nbr = (i + ((k-1)%2 - 1)) % N
    total_spin[i*N+j] += h[site_nbr][j]
    
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = {}
  
  for i in range(N):
    for j in range(N):
      if (i,j) not in site_interactions:
        site_interactions[(i,j)] = [0, 0]
      
      for k in range(4):
        neighbor = ((i+((j+k)%N-N//2)) % N, (k-1)%2)
        if neighbor[1] == j and abs(neighbor[0]-i) + abs(neighbor[1]) == 1:
          site_interactions[(i,j)][J[tuple(neighbor), i*N+j][0]>0][1] += 1
  
  total_priority = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      if (i,j) not in site_interactions:
        continue
      
      if h[i][j] > 0:
        total_priority[i*N+j][0] = -1
        total_priority[i*N+j][1] += site_interactions[(i,j)][1]
      else:
        total_priority[i*N+j][1] = -1
        total_priority[i*N+j][0] += site_interactions[(i,j)][1]
  
  return total_priority.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = {}
  
  for i in range(N):
    for j in range(N):
      if (i,j) not in site_interactions:
        site_interactions[(i,j)] = [0, 0]
      
      for k in range(4):
        neighbor = ((i+((j+k)%N-N//2)) % N, (k-1)%2)
        if neighbor[1] == j and abs(neighbor[0]-i) + abs(neighbor[1]) == 1:
          site_interactions[(i,j)][J[tuple(neighbor), i*N+j][0]>0][1] += 1
  
  total_priority = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      if (i,j) not in site_interactions:
        continue
      
      if h[i][j] > 0:
        total_priority[i*N+j][0] = -1
        total_priority[i*N+j][1] += site_interactions[(i,j)][1]
      else:
        total_priority[i*N+j][1] = -1
        total_priority[i*N+j][0] += site_interactions[(i,j)][1]
  
  return np.array(total_priority).tolist()




#score: {'data2D.txt': -0.0009776234567901235}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1)) % N
    total_spin = [state[site_nbr][i % N], state[site_nbr][(i+1)%N]]
    if h[i//N][i%N] > 0:
      priorities.append([-x for x in total_spin])
    else:
      priorities.append(total_spin)
  return priorities




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
  return [[float('-inf') for _ in range(2)] for i in range(N**2)]




#score: {'data2D.txt': -0.0991279320987655}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin = sum(h[k][min((k+1)%N, j)] for k in range(max(0, i-1), min(N, i+2)))
        priority_total[i*N+j][0] = total_spin
      else:
        total_spin = -sum(h[k][min((k+1)%N, j)] for k in range(max(0, i-1), min(N, i+2)))
        priority_total[i*N+j][1] = total_spin
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': 0.005295216049382717}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_order = [(i+N//2)%N if (h[i//N][i%N] > 0) else i for i in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for site in site_order:
    for k in range(4):
      if (k%2==1):
        site_nbr = ((site//N + k)%N + N//2)%N
      else:
        site_nbr = ((site//N + k-1)%N + N//2)%N
      if h[site_nbr//N][site_nbr%N] > 0:
        total_spin[site][0] += 1
        total_spin[site][1] -= 1
      else:
        total_spin[site][0] -= 1

    for k in range(4):
      site = ((site + k-1)%N + N//2)%N
      if h[site//N][site%N] > 0:
        priority_total[site][0] += total_spin[site][0]
        priority_total[site][1] -= total_spin[site][1]
      else:
        priority_total[site][0] -= total_spin[site][0]

  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.19207145061728403}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      if h[i][j] > 0:
        priority_total[i][j] = [(total_spin + state[i][j]), -(total_spin)]
      else:
        priority_total[i][j] = [-(total_spin), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.19207145061728403}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      if h[i][j] > 0:
        priority_total[i][j] = [(total_spin + state[i][j]), -(total_spin)]
      else:
        priority_total[i][j] = [-(total_spin), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.19207145061728403}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      if h[i][j] > 0:
        priority_total[i][j] = [(total_spin + state[i][j]), -(total_spin)]
      else:
        priority_total[i][j] = [-(total_spin), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12291435185185198}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0007597222222222216}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [total_spin, -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_weights = [[0.0, 0.0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in range(4)]
      
      for k, site in enumerate(site_nbrs):
        if h[i][j] > 0:
          total_spin[site][0] += 1
          total_spin[site][1] -= 1
        else:
          total_spin[site][0] -= 1
          total_spin[site][1] += 1

      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        site_weights[site*N+j][0] += sum(1 for spin in total_spin[site] if spin == [1])
        site_weights[site*N+j][1] -= sum(1 for spin in total_spin[site] if spin == [-1])
      else:
        site_weights[site*N+j][0] -= sum(1 for spin in total_spin[site] if spin == [1])
        site_weights[site*N+j][1] += sum(1 for spin in total_spin[site] if spin == [-1])

  return np.array(site_weights).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': 0.0007699074074074074}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = [[0.0, 0.0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin = sum([1 if (k == i and l <= j) or ((i + (l-1)%N - N//2)) % N == (j-1)%N else -1 for k in range(N) for l in range(N)])
        site_weights[i*N+j][0] += total_spin
        site_weights[i*N+j][1] -= total_spin
      else:
        total_spin = sum([1 if (k == i and l <= j) or ((i + (l-1)%N - N//2)) % N == (j-1)%N else -1 for k in range(N) for l in range(N)])
        site_weights[i*N+j][0] -= total_spin
        site_weights[i*N+j][1] += total_spin
  
  return np.array(site_weights).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j]>0:
        spin=1
      else:
        spin=-1
      total_spin[i*N+j][spin==1]+=1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j]>0:
        total_spin[i*N+j][0]+=1
        total_spin[i*N+j][1]-=1
      else:
        total_spin[i*N+j][0]-=1
  for i in range(N**2):
    priority_total[i][0]=-total_spin[i][0]
    if h[(i//N)%N][i%N]>0:
      priority_total[i][1]=-total_spin[i][1]
    else:
      priority_total[i][1]=float('-inf')
  return [[x[0],x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N) % N
    if h[i // N][i % N] > 0:
      spin = 1
    else:
      spin = -1
    total_spin[i][spin == 1] += 1
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    if h[i // N][i % N] > 0:
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = total_spin[i][1]
    else:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0]for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j]>0:
        spin=1
      else:
        spin=-1
      total_spin[i*N+j][spin==1]+=1
  priority_total = [[float('-inf')for _ in range(2)]for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j]>0:
        total_spin[i*N+j][0]+=1
        total_spin[i*N+j][1]-=1
      else:
        total_spin[i*N+j][0]-=1
  for i in range(N**2):
    priority_total[i][0]=-total_spin[i][0]
    priority_total[i][1]=-total_spin[i][1]
  return [[x[0],x[1]]for x in priority_total]




#score: {'data2D.txt': 0.269609413580247}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        state = [0]*8
        for k in range(4):
          state[k] += J[k,i*N+j]
        total_spin[i*N+j][0] = max(state)
        total_spin[i*N+j][1] = -min(state)
      else:
        site = (i + ((j-1)%N - N//2)) % N
        for k in range(4):
          if k == 0: total_spin[i*N+j][0] += h[site][j]
          elif k == 1: total_spin[i*N+j][k%2] -= J[(3-k)%2,i*N+j]
          else: total_spin[i*N+j][k%2] += J[k-1,i*N+j]
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': -0.14842978395061726}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      state = [0]*8
      for k in range(4):
        if h[i][j] > 0: state[k] += J[k,i*N+j]
        else: state[k] -= J[(3-k)%2,i*N+j]
      total_spin = sum(state)
      if h[i][j] > 0: priority_total[i*N+j][0] = total_spin + 1
      else: priority_total[i*N+j][1] = -total_spin - 1
  
  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': 0.1539427469135804}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        state = [0]*8
        for k in range(4):
          state[k] += J[k,i*N+j]
        total_spin[i*N+j][0] = max(state)
        total_spin[i*N+j][1] = -min(state)
      else:
        site = (i + ((j-1)%2 - 1)) % N
        for k in range(4):
          if k == 0: total_spin[i*N+j][0] += h[site][j]
          elif k == 1: total_spin[i*N+j][0] -= J[(3-k)%2,i*N+j]
          else: total_spin[i*N+j][1] -= J[k-1,i*N+j]
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = -total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001419598765432099}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin = h[site_nbr][j]
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= total_spin
      else:
        total_spin = -h[site_nbr][j]
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += total_spin
  
  return priority_total.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.0012452160493827162}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      total_spin = J[0,i*N+j] + J[3,i*N+j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin
        priority_total[i*N+j][1] -= total_spin
      else:
        priority_total[i*N+j][0] -= total_spin
        priority_total[i*N+j][1] += total_spin
      
      return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += sum(state[i][k]*state[state[i][site_nbr]][k] for k in range(N))
        priority_total[i][j][1] -= sum(state[i][k]*state[state[i][site_nbr]][k] for k in range(N))
      else:
        priority_total[i][j][0] -= sum(state[i][k]*state[state[i][site_nbr]][k] for k in range(N))
        priority_total[i][j][1] += sum(state[i][k]*state[state[i][site_nbr]][k] for k in range(N))
  
  return [[val[0], val[1]] for sublist in priority_total for val in sublist]




#score: {'data2D.txt': 0.18979768518518536}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin = [0,0]
      for k in range(3):
        site_nbr_neighbor = (site_nbr + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          total_spin[0] += state[i][j]*state[state[i][site_nbr_neighbor]][j]
          total_spin[1] -= state[i][j]*state[state[i][site_nbr_neighbor]][j]
        else:
          total_spin[0] -= state[i][j]*state[state[i][site_nbr_neighbor]][j]
          total_spin[1] += state[i][j]*state[state[i][site_nbr_neighbor]][j]
      for k in range(3):
        site_nbr_neighbor = (i + ((k-1)%2 - 1)) % N
        if h[i][j] > 0:
          total_spin[0] += h[site_nbr][j]
          total_spin[1] -= h[site_nbr][j]
        else:
          total_spin[0] -= h[site_nbr][j]
          total_spin[1] += h[site_nbr][j]
      priority_total[i*N+j] = [total_spin[0], total_spin[1]]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][1] = -1*priority_total[i][0]
    else:
      priority_total[i][0] = -1*priority_total[i][0]
  return [[val[0], val[1]] for val in priority_total]




#score: {'data2D.txt': -0.0003415123456790126}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += sum(h[site_nbr][j] for site_nbr in [(site+1)%N, (site+2)%N])
        priority_total[i*N+j][1] -= sum(h[site_nbr][j] for site_nbr in [(site-1)%N, (site+2)%N])
      else:
        priority_total[i*N+j][0] -= sum(h[site_nbr][j] for site_nbr in [(site-1)%N, (site+2)%N])
        priority_total[i*N+j][1] += sum(h[site_nbr][j] for site_nbr in [(site+1)%N, (site-2)%N])
  return np.array([list(t) for t in priority_total]).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.0009547839506172834}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin = sum([h[k][j] if (k + ((l-1)%2 - 1)) % N == site else -h[k][j] for k, l in itertools.product(range(N), range(3))])
        priority_total[i*N+j][0] = total_spin
      else:
        total_spin = sum([-h[k][j] if (k + ((l-1)%2 - 1)) % N == site else h[k][j] for k, l in itertools.product(range(N), range(3))])
        priority_total[i*N+j][1] = -total_spin
  
  return np.array([list(t) for t in priority_total]).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      total_spin[i*N+j][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = -total_spin[i][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[site_nbr*N+j][0] += state[i][j]*(state[state[i][site_nbr]][j]-state[state[i][site_nbr]][(j+1)%N])
      total_spin[site_nbr*N+j][1] -= state[i][j]*(state[state[i][site_nbr]][j]+state[state[i][site_nbr]][(j+1)%N])
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site*N+j][spin==1] += 1
  return [[val[0], val[1]] for val in total_spin]




#score: {'data2D.txt': 0.002286882716049383}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j] = [0,0]
      for k in range(3):
        site_nbr_neighbor = (site_nbr + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += state[site_nbr][j]*state[state[site_nbr][site_nbr_neighbor]][j]
        total_spin[i*N+j][1] += -state[site_nbr][j]*state[state[site_nbr][site_nbr_neighbor]][j]
      for k in range(3):
        site_nbr_neighbor = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        total_spin[i*N+j][1] -= h[site_nbr][j]
  return [[val[0], val[1]] for val in total_spin]




#score: {'data2D.txt': -0.001807253086419753}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      for k, nbr in enumerate(site_nbrs):
        if h[i][j] > 0:
          total_spin[i*N+j][0] += state[nbr][j]
          total_spin[i*N+j][1] -= state[nbr][j]
        else:
          total_spin[i*N+j][0] -= state[nbr][j]
          total_spin[i*N+j][1] += state[nbr][j]
  return total_spin.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(3)]
      for k, nbr in enumerate(site_nbrs):
        if h[i][j] > 0:
          priority_total[i][j][0] += 1
          priority_total[i][j][1] -= 1
        else:
          priority_total[i][j][0] -= 1
          priority_total[i][j][1] += 1
  return [priority_total[i][j] for i in range(N) for j in range(N)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  total_spin = [[0,0] for _ in range(N2)]
  priority_total = [[0,0] for _ in range(N2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1

      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][site_nbr] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+site_nbr][0]
        priority_total[i*N+j][1] -= total_spin[i*N+site_nbr][1]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+site_nbr][0]

  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.048125771604938306}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N**2):
    site = (i // N + ((i % N - 1) % 2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1

  for i in range(N**2):
    site = (i // N + ((i % N - 1) % 2 - 1)) % N
    if h[site//N][site%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][1]
    else:
      priority_total[i][0] -= total_spin[i][0]

  return [list(x) for x in priority_total]




#score: {'data2D.txt': 0.0014498456790123448}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1

  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -1*total_spin[i][0]
    else:
      priority_total[i][0] = -1*total_spin[i][0]
      priority_total[i][1] = total_spin[i][0]

  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1) % N)
    for j in [0, 1]:
      if j == 0: site_nbr = (site_nbr - 1) % N
      elif j == 1: site_nbr = (site_nbr + 1) % N

      if h[site_nbr][i % N] > 0:
        priority_total[i][0] += J[j*N**2:(j+1)*N**2].sum() - 1
        priority_total[i][1] -= J[j*N**2:(j+1)*N**2].sum() + 1
      else:
        priority_total[i][0] -= J[j*N**2:(j+1)*N**2].sum() + 1
        priority_total[i][1] += J[j*N**2:(j+1)*N**2].sum() - 1

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.00041311728395061775}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_list = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbrs = [(i // N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum(h[site_nbr][i % N] for site_nbr in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priority_list[i][0] = total_spin
      priority_list[i][1] = -total_spin
    else:
      priority_list[i][0] = -total_spin
      priority_list[i][1] = total_spin
  
  return [[x[0], x[1]] for x in priority_list]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i+((k-1)%2 - 1)) % N for k in [j-1,j+1]]
      for p,site_n in enumerate(site_nbrs):
        if h[site_n//N][site_n%N] > 0:
          priority_total[i*N+j][0] += J[p*N**2:(p+1)*N**2].sum() - 1
          priority_total[i*N+j][1] -= J[p*N**2:(p+1)*N**2].sum() + 1
        else:
          priority_total[i*N+j][0] -= J[p*N**2:(p+1)*N**2].sum() + 1
          priority_total[i*N+j][1] += J[p*N**2:(p+1)*N**2].sum() - 1
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.12291435185185198}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  sum_3 = (np.prod(J_new[2::4], 0) + h).flatten()
  sum_4 = (np.prod(J_new[3::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2)) + np.column_stack((-sum_3, sum_4))
  return(priority)




#score: {'data2D.txt': -0.0009776234567901235}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1)) % N
    total_spin = [state[site_nbr][i % N], state[site_nbr][(i+1)%N]]
    if h[i//N][i%N] > 0:
      priorities.append([-x for x in total_spin])
    else:
      priorities.append(total_spin)
  return priorities




#score: {'data2D.txt': -0.13347885802469153}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N) - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += state[site_nbr][i % N]
      total_spin[i][1] -= state[site_nbr][(i+1)%N]
    else:
      total_spin[i][0] -= state[site_nbr][i % N]
  return [list(x) for x in total_spin]




#score: {'data2D.txt': -0.20015447530864225}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
        
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][0]
    else:
      priority_total[i][0] -= total_spin[i][0]
      
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N) % N
    if h[i//N][i%N] > 0:
      priority_total[i][1] += total_spin[i][0]
      priority_total[i][0] -= total_spin[i][0]
    else:
      priority_total[i][1] -= total_spin[i][0]
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
        
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][0]
    else:
      priority_total[i][0] -= total_spin[i][0]
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0014526234567901234}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for j in range(3)]
    for j in site_nbrs:
      if h[j//N][j%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    for k in range(3):
      site_nbr = (i//N + ((k-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for j in range(3)]
    for j in site_nbrs:
      if h[j//N][j%N] > 0:
        priority_total[i][0] += 1
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= 1
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': 0.05219212962962968}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for j in range(4)]
    for j in site_nbrs:
      if h[j//N][j%N] > 0:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1
  priority_total = [[-x[0],-x[1]] if h[i//N][i%N] > 0 else [x[0],x[1]] for i,x in enumerate(total_spin)]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.030659413580246913}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  priority_total = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [0,1,2]]
      total_spin = h[i][j]
      if J[0,i*N+j] > 0:
        total_spin += 1
      else:
        total_spin -= 1
      for site_nbr in site_nbrs:
        total_spin += h[site_nbr,(j-1)%N]
        if J[0,site_nbr*N+(j-1)%N] > 0:
          total_spin += 1
        else:
          total_spin -= 1
      priority_total[i*N+j][0] = total_spin**2
      priority_total[i*N+j][1] = -total_spin

  return [list(x) for x in np.argsort(-priority_total)]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N2 = N*N
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return [[val[0], val[1]] for val in priority.reshape(N2, 2)]




#score: {'data2D.txt': -0.20108688271604963}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [[sum([1 if ((i+((j-1)%N - N//2)) % N == k and h[k][j%N] > 0) else -1 for k in range(N)]) + (1 if h[i][j] > 0 else -1), 
      sum([1 if ((i+((j-1)%N - N//2)) % N == k and h[k][j%N] < 0) else -1 for k in range(N)]) - (1 if h[i][j] > 0 else -1)] 
      for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.19344182098765436}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site] > 0 else -1 for s,site in zip(site_nbrs,state[i])])
      
      if h[i][j] > 0:
        priority_total[i][j][0] = total_spin + state[i][j]
        priority_total[i][j][1] = -total_spin
      else:
        priority_total[i][j][0] = -total_spin
        priority_total[i][j][1] = total_spin

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i // N + ((j-1)%2 - 1)) % N for j in [1,3]]
    for j in range(4):
      if j == 0: site_nbrs = [(site_nbrs[k] - 1) % N for k in range(len(site_nbrs))]
      elif j == 1: site_nbrs = [(site_nbrs[k] + 1) % N for k in range(len(site_nbrs))]
      elif j == 2: site_nbrs = [(site_nbrs[k] - N) % N for k in range(len(site_nbrs))]
      else: site_nbrs = [(site_nbrs[k] + N) % N for k in range(len(site_nbrs))]
    for j in range(2):
      total_spin[i][0 if h[site_nbrs[j]][i % N] > 0 else 1] += 1
  priority_total = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    if h[i // N][i % N] > 0:
      priority_total[i][0] = total_spin[i][0]
    else:
      priority_total[i][1] = -total_spin[i][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        
  priority_total = [[-x[0], -x[1]] for x in total_spin]
  
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_priority[i*N+j][0] += 1
        total_priority[i*N+j][1] -= 1
      else:
        total_priority[i*N+j][0] -= 1
        total_priority[i*N+j][1] += 1
  
  return total_priority.tolist()




#score: {'data2D.txt': 0.00033719135802469185}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin=1
      else:
        spin=-1
      
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j]>0:
        priority_total[j][0] = -total_spin[j][0]
        priority_total[j][1] = -total_spin[j][1]
      else:
        priority_total[j][0] = total_spin[j][0]
        priority_total[j][1] = total_spin[j][1]
  
  return [[x[0],x[1]]for x in priority_total]




#score: {'data2D.txt': -0.0006575617283950613}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0]for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j]>0:
        spin=1
      else:
        spin=-1
      total_spin[i*N+j][spin==1]+=1
  priority_total = [[float('-inf')for _ in range(2)]for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j]>0:
        priority_total[j][0] = total_spin[j][0]
        priority_total[j][1] = -total_spin[j][1]
      else:
        priority_total[j][0] = -total_spin[j][0]
        priority_total[j][1] = total_spin[j][1]
  return [[x[0],x[1]]for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.07133225308641983}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      if h[i][j] > 0:
        total_spin = sum([1 if state[s][site_nbrs[(k-1)%4]] == 1 else -1 for s,k in zip(site_nbrs,range(4))])
        priority_total[i][j] = [total_spin, -total_spin]
      else:
        total_spin = sum([-1 if state[s][site_nbrs[(k-1)%4]] == -1 else 1 for s,k in zip(site_nbrs,range(4))])
        priority_total[i][j] = [-total_spin, total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.00026959876543209847}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = np.zeros((N,N))
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i // N + ((i % N - 1) % N) - 1) % N
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      site = (i // N + ((i % N - 1) % N) - 1) % N
      total_spin[i][0] -= 1
      total_spin[i][1] += 1
  
  return np.array([[(j+1)/2 for j in range(2)] if h[i//N][i%N] > 0 else [-(j+1)/2 for j in range(2)] for i in range(N**2)]).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.009874537037037036}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  n = N * N
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((n, 2))
  
  for i in range(n):
    site = (i // N + ((i % N - 1) % N) - N//2) % N
    total_spin[i][0] += state[site][i % N]
    total_spin[i][1] -= state[site][i % N]

  return total_spin




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  site = lambda i, j: (i + ((j-1)%N - N//2)) % N
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
        priority_total[i*N+j][1] += 1
  return [[p[0], -p[1]] for p in priority_total]




#score: {'data2D.txt': 0.04706095679012349}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      for k in range(3):
        site_nbr_neighbor = (site_nbr + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += state[i][j]*state[state[i][site_nbr_neighbor]][j]
        total_spin[i*N+j][1] -= state[i][j]*state[state[i][site_nbr_neighbor]][j]
      for k in range(3):
        site_nbr_neighbor = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += h[site_nbr][j]
        total_spin[i*N+j][1] -= h[site_nbr][j]
  priority_total = [[total_spin[i][0], total_spin[i][1]] for i in range(N**2)]
  return priority_total




#score: {'data2D.txt': 0.0178875}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[0,i*N+j]
        total_spin[i*N+j][1] -= J[1,i*N+j]
      else:
        total_spin[i*N+j][0] -= J[2,i*N+j]
        total_spin[i*N+j][1] += J[3,i*N+j]
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site*N+j][0] -= sum(J[:, i*N+j])
        total_spin[site*N+j][1] += sum(J[:, i*N+j])
      else:
        total_spin[site*N+j][0] += sum(J[:, i*N+j])
        total_spin[site*N+j][1] -= sum(J[:, i*N+j])
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': 0.0178875}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  N4 = int(np.ceil(np.sqrt(N**2)))
  J = J.reshape((4,N**2))
  total_spin = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += J[0,i*N+j]
        total_spin[i*N+j][1] -= J[1,i*N+j]
      else:
        total_spin[i*N+j][0] -= J[2,i*N+j]
        total_spin[i*N+j][1] += J[3,i*N+j]
      
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site*N+j][0] -= sum(J[:, i*N+j])
        total_spin[site*N+j][1] += sum(J[:, i*N+j])
      else:
        total_spin[site*N+j][0] += sum(J[:, i*N+j])
        total_spin[site*N+j][1] -= sum(J[:, i*N+j])
  
  return [list(x) for x in np.argsort(-total_spin)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += sum(site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)])
      total_spin[i*N+j][1] -= sum(site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)])
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = max(total_spin[i*N+j])
      priority_total[i*N+j][1] = min(total_spin[i*N+j])
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.12291435185185198}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [-total_spin + state[i][j], total_spin]
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr1][0]
        priority_total[i*N+j][1] -= total_spin[site_nbr2][0]
      else:
        priority_total[i*N+j][0] -= total_spin[site_nbr1][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - 1) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][0]
    else:
      priority_total[i][0] -= total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2), dtype=int)
  priority_total = np.full((N**2, 2), -np.inf)

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1

  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - 1) % N
    priority_total[i][0] = total_spin[i][0]
    priority_total[i][1] = -total_spin[i][0]

  return priority_total.tolist()




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i % N + ((i // N - 1) % N) - 1) % N
    if h[state[site_nbr][i // N]][i % N] > 0:
      spin = 1
    else:
      spin = -1
    total_spin[i][spin == 1] += 1
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = -total_spin[i][1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for site_nbr in itertools.product(range(N), range(N)):
    if h[site_nbr[0]][site_nbr[1]] > 0:
      spin = 1
    else:
      spin = -1
    
    state[site_nbr[0]][site_nbr[1]] += spin
    total_spin[site_nbr[0]*N+site_nbr[1]][spin==1] += 1
  
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = -total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
    else:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[i*N+j][0] -= 1
      
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      total_spin[i*N+j][1] -= sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      
      for k in range(3):
        site_nbr = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      total_spin[i*N+j][1] -= sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      
      for k in range(3):
        site_nbr = ((i + (k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for k in range(3):
    for i in range(N):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      for j in range(N):
        if h[i][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
          priority_total[i*N+j][1] += 1
  
  return [list(t) for t in priority_total]




#score: {'data2D.txt': -0.0007572530864197526}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbrs = [(i // N + ((j-1)%N - 1)) % N for j in range(N)]
    total_spin = [0, 0]
    for k in range(4):
      for j in range(N):
        if abs((site_nbrs[k]-i) + (j-N//2)) == 1:
          total_spin[1 if h[site_nbrs[k]][j] > 0 else 0] += 1
    
    priority_total[i][0] = -total_spin[0]
    priority_total[i][1] = -total_spin[1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin=1
      else:
        spin=-1
      priority_total[i*N+j][spin==1]+=1
      
  for i in range(N**2):
    priority_total[i][0]=-priority_total[i][0]
    priority_total[i][1]=-priority_total[i][1]
  
  return [[x[0],x[1]]for x in priority_total]




#score: {'data2D.txt': -0.20026496913580275}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j]>0:
        spin = 1
      else:
        spin = -1
      total_spin[i*N+j][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j]>0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.20026496913580275}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.0018733024691358034}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin = [0,0]
      for k in range(3):
        site_nbr_neighbor = (site_nbr + ((k-1)%2 - 1)) % N
        total_spin[0] += state[i][site_nbr]*state[state[i][site_nbr_neighbor]][j]
        total_spin[1] += -state[i][site_nbr]*state[state[i][site_nbr_neighbor]][j]
      for k in range(3):
        site_nbr_neighbor = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
        total_spin[1] -= h[site_nbr][j]
      priority_total[i*N+j] = [total_spin[0], total_spin[1]]
  for i in range(N**2):
    site = (i // N + ((i % N - 1) % N)) % N
    spin = -1 if state[site//N][site%N] > 0 else 1
    priority_total[i][spin==1] += 1
  return [[val[0], val[1]] for val in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  for i in range(N**2):
    site = (i // N + ((i % N - 1) % N)) % N
    if state[site][j] == -1:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  return [[val[0], val[1]] for val in total_spin]




#score: {'data2D.txt': 0.046424228395061766}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin = [0,0]
      for k in range(3):
        site_nbr_neighbor = (site_nbr + ((k-1)%2 - 1)) % N
        total_spin[0] += state[i][j]*state[state[i][site_nbr_neighbor]][j]
        total_spin[1] += -state[i][j]*state[state[i][site_nbr_neighbor]][j]
      for k in range(3):
        site_nbr_neighbor = (i + ((k-1)%2 - 1)) % N
        total_spin[0] += h[site_nbr][j]
        total_spin[1] -= h[site_nbr][j]
      priority_total[i*N+j] = [total_spin[0], total_spin[1]]
  
  for i in range(N**2):
    site = (i // N + ((i % N - 1) % N)) % N
    spin = -1 if h[site//N][site%N] > 0 else 1
    priority_total[i][spin==1] += 1
  
  return [[val[0], val[1]] for val in priority_total]




#score: {'data2D.txt': 0.0001279320987654317}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  return [[sum(h[(i + ((k-1)%2 - 1)) % N][j] for k in [1,3]), 
       sum(-h[(i + ((k-1)%2 - 1)) % N][j] for k in [1,3])] 
      for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.0012473765432098763}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_list = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbrs = [(i // N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum(h[site_nbr][i % N] for site_nbr in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priority_list[i][0] += total_spin
      priority_list[i][1] -= total_spin
    else:
      priority_list[i][0] -= total_spin
      priority_list[i][1] += total_spin
    
    for j in [0, 1]:
      if j == 0: site_nbr = (site_nbrs[0] - 1) % N
      elif j == 1: site_nbr = (site_nbrs[1] + 1) % N
      
      if h[site_nbr][i % N] > 0:
        priority_list[i][0] += J[j*N**2:(j+1)*N**2].sum() - 1
        priority_list[i][1] -= J[j*N**2:(j+1)*N**2].sum() + 1
      else:
        priority_list[i][0] -= J[j*N**2:(j+1)*N**2].sum() + 1
        priority_list[i][1] += J[j*N**2:(j+1)*N**2].sum() - 1
  
  return [[x[0], x[1]] for x in priority_list]




#score: {'data2D.txt': -0.0006162037037037038}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in [j-1, j+1]]
      site_nbrs += [(i + (k-1)%N - N//2) % N for k in [max(0, j-1), min(N-1, j+1)]]
      site_nbrs = list(set(site_nbrs))
      for k in site_nbrs:
        if h[k//N][k%N] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  return [[x[0], -x[1]] for x in total_spin]




#score: {'data2D.txt': -0.009799228395061728}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  total_spin = [sum([h[i][j]*1 if (i+j)%2 == 0 else -h[i][j]*1 for j in range(N)]) for i in range(N)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i//N + ((k-1)%2 - 1)) % N for k in range(3)]
      for k in site_nbrs:
        if h[k][j] > 0:
          priority_total[i*N+j][0] += 1
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][0] -= 1
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0010418209876543211}
#island_id: 7
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x, -y] for [x, y] in sorted(priority_total)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      
      if h[i][j] > 0:
        spin1 = 1
        spin2 = -1
      else:
        spin1 = -1
        spin2 = 1
      
      total_spin[i*N+j][spin1==1] += 1
      total_spin[i*N+j][spin2==1] -= 1
      
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.0012513888888888891}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_weights = np.zeros((N,N))
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    k = (i // N) % 2
    j = i % N
    if h[j][k] > 0:
      site_weights[j][k] += 1
      total_spin[i][1] -= 1
    else:
      site_weights[j][k] -= 1
      total_spin[i][0] += 1
  return [[total_spin[i][1],total_spin[i][0]] for i in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return priority.astype(int)




#score: {'data2D.txt': 0.12129737654321002}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], -total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - 1)) % N
      site_nbr2 = (i + ((j+1)%N - 1)) % N
      priority_total[i*N+j][0] += state[i][site_nbr1]*state[i][j]
      priority_total[i*N+j][1] -= state[i][site_nbr1]*state[i][j]
      priority_total[i*N+j][0] += state[i][site_nbr2]*state[i][j]
      priority_total[i*N+j][1] -= state[i][site_nbr2]*state[i][j]
  return [[val[0], val[1]] for val in priority_total]




#score: {'data2D.txt': -0.009458487654320988}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': -0.009458487654320988}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for (i, j) in itertools.product(range(N), range(N))]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N**2):
    site = site_nbrs[i]
    if h[site][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  
  return [[x, y] for x, y in total_spin]




#score: {'data2D.txt': -0.0004782407407407405}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_interactions = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      site_interactions[i*N+j] = [-total_spin,total_spin]
  return [[int(x) for x in lst] for lst in site_interactions]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      total_spin[i*N+j][1] -= sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      
      for k in range(3):
        site_nbr = ((i + (k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  
  priority_total = [[float('-inf'), float('inf')] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      
      total_spin[i*N+j][0] += sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      total_spin[i*N+j][1] -= sum([site_spin * (1 + (-1)**((i-site_nbr[0])//2) * (-1)**((j-site_nbr[1])%N//2)) for site_nbr in [site_neighbors(i,j)]])
      
      for k in range(3):
        site_nbr = ((i + (k-1)%2 - 1)) % N
        total_spin[i*N+j][0] += site_spin * (1 if state[site_nbr][j] == site_spin else -1)
        total_spin[i*N+j][1] -= site_spin * (1 if state[site_nbr][j] == site_spin else -1)
      
      priority_total[i*N+j][0] = total_spin[i*N+j][0]
      priority_total[i*N+j][1] = total_spin[i*N+j][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += sum(state[i][k]*state[state[i][site_nbr]][k] for k in range(N))
        priority_total[i][j][1] -= sum(state[i][k]*state[state[i][site_nbr]][k] for k in range(N))
      else:
        priority_total[i][j][0] -= sum(state[i][k]*state[state[i][site_nbr]][k] for k in range(N))
        priority_total[i][j][1] += sum(state[i][k]*state[state[i][site_nbr]][k] for k in range(N))

  return [[val[0], val[1]] for sublist in priority_total for val in sublist]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin = [0,0]
      for k in range(N):
        if abs(state[i][k] - state[state[i][site_nbr]][k]) == 1:
          total_spin[0] += J[k][i*N+j][0]
          total_spin[1] -= J[k][i*N+j][1]
      priority_total[i][j] = [total_spin[0], total_spin[1]]
  
  return [[val[0], val[1]] for sublist in priority_total for val in sublist]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  site_nbr = [(i + ((j-1)%N - N//2)) % N for i in range(N) for j in range(N)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        total_spin[i*N+j][0] -= 1
  
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = sum(state[i][j]*h[i][j] for i in range(N) for j in range(N))
  priority_total = [[total_spin, -total_spin] if state[i][j] == -1 else [-x for x in [total_spin, -total_spin]] for i in range(N) for j in range(N)]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      total_spin[i*N+j][spin==1] += 1

  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - 1) % N
    state[site_nbr][i%N] += state[i//N][i%N]
    
  priority_total = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] = -1*total_spin[i*N+j][0]
        priority_total[i*N+j][1] = total_spin[i*N+j][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[i*N+j][0]
        priority_total[i*N+j][1] -= total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][0] -= total_spin[i*N+j][0]
  
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - 1) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[i][0]
      priority_total[i][1] -= total_spin[i][0]
    else:
      priority_total[i][0] -= total_spin[i][0]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.001437808641975308}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i,j in itertools.product(range(N),range(N)):
    site_nbr = (i + ((j-1)%N - 1)) % N
    if h[i][j] > 0:
      priority_total[i*N+j][0] += 1
      priority_total[i*N+j][1] -= 1
    else:
      priority_total[i*N+j][0] -= 1
  for i in range(N):
    site = (i + ((N-1)%2 - 1)) % N
    if h[i][site] > 0:
      priority_total[i*N+site][0] += 1
      priority_total[i*N+site][1] -= 1
  for i,j in itertools.product(range(N),range(N)):
    site = (i + ((j-1)%N - 1)) % N
    total_spin = [0,0]
    for k in range(2):
      total_spin[0] += state[i][j]*state[state[i][site]][k]
      total_spin[1] -= state[i][j]*state[state[i][site]][k]
    return [[total_spin[0],total_spin[1]] for _ in range(N**2)]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i, j in itertools.product(range(N), range(N)):
    site_nbr = (i + ((j-1)%N - 1)) % N
    total_spin = [0, 0]
    for k in [-1, 1]:
      if h[i][j] > 0:
        total_spin[0] += state[i][j]*k
        total_spin[1] -= state[i][j]*k
      else:
        total_spin[0] -= state[i][j]*k
        total_spin[1] += state[i][j]*k
    priority_total[i*N+j] = [-x for x in total_spin]
  return [[-x for x in row] for row in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = 1 if h[i][j] > 0 else -1
      total_spin = [0, 0]
      
      for neighbor in [site_neighbors(i,j)]:
        total_spin[0] += site_spin * (1 + (-1)**((neighbor[0]-i)//2) * (-1)**((neighbor[1]-j)%N//2))
        total_spin[1] -= site_spin * (1 + (-1)**((neighbor[0]-i)//2) * (-1)**((neighbor[1]-j)%N//2))
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[0]
      else:
        priority_total[i*N+j][1] = -total_spin[0]
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.15503595679012364}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_neighbors = [(i + ((j-1)%N - N//2)) % N]
      
      total_spin = sum([state[site_neighbors[0]][k] * (1 + (-1)**((i-site_neighbors[0])//2) * (-1)**((j-k)%N//2)) for k in range(N)])
      
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
        priority_total[i*N+j][1] = -total_spin
      else:
        priority_total[i*N+j][0] = -total_spin
        priority_total[i*N+j][1] = total_spin
  
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': 0.1719140432098768}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + ((j-1)%N) - N//2) % N, (i + ((j+1)%N) - N//2) % N]

  priority_total = np.zeros((N**2, 2))

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1

      total_spin = sum([site_spin * (1 + (-1)**((i-neighbor[0])//2) * (-1)**((j-neighbor[1])%N//2)) for neighbor in [site_neighbors(i,j)]])

      priority_total[i*N+j][0] += total_spin
      priority_total[i*N+j][1] -= total_spin

  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        priority_total[i][j][0] -= 1
        priority_total[i][j][1] += 1
  
  return [priority_total[i][j] for i in range(N) for j in range(N)]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.0010557098765432101}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin[i*N+j][0] += sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      total_spin[i*N+j][1] -= sum([1 if h[s][site_nbrs[(k-1)%4]] < 0 else -1 for s,k in zip(site_nbrs,range(4))])
  
  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [0, 0]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[0] += state[i][j]*state[state[i][site_nbr]][j]
      total_spin[1] -= state[i][j]*state[state[i][site_nbr]][j]
  
  for j in range(N):
    if h[j//N][j%N] > 0:
      priority_total[j][0] = -1*total_spin[0]
      priority_total[j][1] = total_spin[1]
    else:
      priority_total[j][0] = total_spin[0]
      priority_total[j][1] = -1*total_spin[1]
  
  return [[val[0], val[1]] for val in priority_total]




#score: {'data2D.txt': -0.008282253086419753}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = []
  for i in range(N**2):
    site_nbr = (i // N + ((i % N - 1) % N - 1)) % N
    total_spin = [0, 0]
    for k in range(3):
      site_nbr_neighbor = (site_nbr + ((k-1)%2 - 1)) % N
      if h[i//N][i%N] > 0:
        total_spin[0] += state[i//N][i%N]*state[state[i//N][site_nbr_neighbor]][i%N]
        total_spin[1] -= state[i//N][i%N]*state[state[i//N][site_nbr_neighbor]][i%N]
      else:
        total_spin[0] -= state[i//N][i%N]*state[state[i//N][site_nbr_neighbor]][i%N]
        total_spin[1] += state[i//N][i%N]*state[state[i//N][site_nbr_neighbor]][i%N]
    priority_total.append([total_spin[0], total_spin[1]])
  return [[val[0], val[1]] for val in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001486882716049383}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
      
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total.append([total_spin[i][0], total_spin[i][1]])
    else:
      priority_total.append([-total_spin[i][0], -total_spin[i][1]])
      
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.0008680555555555554}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
      
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i + ((i % N - 1) % N) - N//2) % N
      priority_total.append([total_spin[site*N+i%N][0], total_spin[site*N+i%N][1]])
    else:
      site = (i + ((i % N - 1) % N) - N//2) % N
      priority_total.append([-total_spin[site*N+i%N][0], -total_spin[site*N+i%N][1]])
      
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_priorities = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      total_spin = [0,0]
      for k in range(4):
        neighbor_i = (i + ((j+k)%N - N//2)) % N
        neighbor_j = (k-1)%2
        if abs(i-neighbor_i) + abs(j-neighbor_j) == 1:
          total_spin[J[tuple((neighbor_i,neighbor_j)), i*N+j].argsort()[0]] += 1
      site_priorities[i*N+j] = [-total_spin[1], -total_spin[0]]
  return [x for x in site_priorities]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return [[val[0], val[1]] for val in priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority.reshape(N**2, 2)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[::2].reshape(-1,4)[:,0], 0) + h).flatten()
  sum2 = (-np.prod(J_new[::2].reshape(-1,4)[:,1], 0)).flatten()
  priority = np.column_stack((sum1, -sum1))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  for i in range(N**2):
    site_nbrs = [(i // N + ((j - 1) % N - N // 2)) % N for j in range(4)]
    site_nbr_magnetism = [h[site_nbr//N][site_nbr%N] > 0 for site_nbr in site_nbrs]

    for spin, magnetized in enumerate(zip(site_nbrs, site_nbr_magnetism)):
      if magnetized:
        total_spin[i][0] += 1
        total_spin[i][1] -= 1
      else:
        total_spin[i][0] -= 1

      priority_total[i][0] = sum([total_spin[j][0] for j in site_nbrs])
      priority_total[i][1] = -sum([total_spin[j][1] for j in site_nbrs])

  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.0016020061728395057}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  priority_total = [[0,0] for _ in range(N**2)]

  site_order = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_order.append((i,-1))
    else:
      site_order.append((i,1))

  for i, spin in enumerate(site_order):
    site = site_order[i][0]
    total_spin[site][0] += spin[1]
    total_spin[site][1] -= spin[1]

    for k in range(4):
      site_nbr = (site//N + ((k-1)%2 - 1)) % N
      if h[site_nbr//N][site_nbr%N] > 0:
        priority_total[site][0] += total_spin[site_nbr][0]
        priority_total[site][1] -= total_spin[site_nbr][1]
      else:
        priority_total[site][0] -= total_spin[site_nbr][0]

  return [list(x) for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.22836435185185164}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%2 - 1)) % N for k in range(4)]
      total_spin = sum(h[site_nbr][j] for site_nbr in site_nbrs)
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin
      else:
        priority_total[i*N+j][1] = -total_spin
  return [[x, y] for x, y in priority_total]




#score: {'data2D.txt': -0.008439043209876542}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0] for _ in range(N**2)]
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((j-1)%N - N//2)) % N for _ in range(3)]
      site_nbrs.sort()
      total_spin[i*N+j][0] += sum(h[site_nbr][j] for site_nbr in site_nbrs)
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][1] = -total_spin[i][0]
    else:
      priority_total[i][0] = total_spin[i][0]
  return [[x,y] for x,y in priority_total]




#score: {'data2D.txt': -0.0008680555555555554}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[site_nbr*N+j][0] += 1
        total_spin[site_nbr*N+j][1] -= 1
      else:
        site_nbr = (i + ((j-1)%N - N//2)) % N
        total_spin[site_nbr*N+j][0] -= 1
        total_spin[site_nbr*N+j][1] += 1
      
  priority_total = []
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i + ((i % N - 1) % N) - N//2) % N
      priority_total.append([total_spin[site*N+i%N][0], total_spin[site*N+i%N][1]])
    else:
      site = (i + ((i % N - 1) % N) - N//2) % N
      priority_total.append([-total_spin[site*N+i%N][0], -total_spin[site*N+i%N][1]])
      
  return np.array(priority_total).flatten().reshape((N**2,2), order='F')




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [(total_spin + state[i][j]), (total_spin)]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      if h[i][j] > 0:
        priority_total[i][j] = [total_spin + state[i][j], total_spin]
      else:
        priority_total[i][j] = [-total_spin, -total_spin]

  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[[float('-inf') for _ in range(2)] for _ in range(N)] for _ in range(N)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      total_spin = sum([1 if h[s][site_nbr] > 0 else -1 for s,site_nbr in zip(site_nbrs,[state[i][k] for k in site_nbrs])])
      priority_total[i][j] = [total_spin + state[i][j], total_spin]
      
  return [[int(x) for x in lst] for lst in [item for sublist in priority_total for item in sublist]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      spin_sum = sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))])
      
      total_spin[i*N+j][0] = max(spin_sum + state[i][j], total_spin[i*N+j][0])
      total_spin[i*N+j][1] = min(-spin_sum, total_spin[i*N+j][1])

  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': 0.12275601851851867}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[[float('-inf'), float('inf')] for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_nbrs = [(i + ((k-1)%N - N//2)) % N for k in [j-1,j+1,i-1,i+1]]
      
      total_spin[i*N+j] = [sum([1 if h[s][site_nbrs[(k-1)%4]] > 0 else -1 for s,k in zip(site_nbrs,range(4))]) + state[i][j], 
                 sum([-1 if h[s][site_nbrs[(k-1)%4]] > 0 else 1 for s,k in zip(site_nbrs,range(4))]) - state[i][j]]
      
  return [[int(x) for x in lst] for lst in total_spin]




#score: {'data2D.txt': -0.004397067901234568}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[0,0]for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[site*N+site_nbr][0] += 1
        priority_total[site*N+site_nbr][1] -= 1
      else:
        site = (i + ((j-1)%2 - 1)) % N
        priority_total[site*N+site_nbr][0] -= 1
        priority_total[site*N+site_nbr][1] += 1
      
  return [priority_total[i] for i in range(N**2)]




#score: {'data2D.txt': 0.19723070987654331}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + (j-1)%N), ((i+(j-1)%N)-N//2)%N, (i+(j+1)%N), ((i+(j+1)%N)-N//2)%N]
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return priority_total.tolist()




#score: {'data2D.txt': 0.19723070987654331}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N // 2)) % N,
                   (i + (j + 1) % N), ((i + (j + 1) % N) + (N // 2)) % N]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19723070987654331}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i,j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N // 2)) % N,
                  (i + (j + 1) % N), ((i + (j + 1) % N) + (N // 2)) % N]
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.19723070987654331}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_neighbors = lambda i, j: [(i + (j - 1) % N), ((i + (j - 1) % N) + (N // 2)) % N,
                   (i + (j + 1) % N), ((i + (j + 1) % N) + (N // 2)) % N]
  priority_total = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site_spin = -1 if h[i][j] > 0 else 1
      total_spin = sum(1 if (h[k//N][k%N]>0) == site_spin else -1 for k in site_neighbors(i, j))
      priority_total[i*N+j][0] = total_spin
      priority_total[i*N+j][1] = -total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i//N + ((j-1)%N - 1)) % N for k in range(4)]
      for jn in site_nbrs:
        if h[jn//N][jn%N] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    priority_total[i][0] = total_spin[i][0]
    priority_total[i][1] = -total_spin[i][0]
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbrs = [(i//N + ((j-1)%N - N//2)) % N for _ in range(4)]
      for k in site_nbrs:
        if h[k//N][k%N] > 0:
          total_spin[i*N+j][0] += 1
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][0] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      priority_total[i][0] = total_spin[i][0]
      priority_total[i][1] = -total_spin[i][0]
    else:
      priority_total[i][1] = total_spin[i][0]
  return [[x[0],-x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j]>0:
        spin=1
      else:
        spin=-1
      total_spin[i*N+j][spin==1]+=1
  priority_total = [[float('-inf')for _ in range(2)]for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j]>0:
        total_spin[i*N+j][0]+=1
        total_spin[i*N+j][1]-=1
      else:
        total_spin[i*N+j][0]-=1
  for i in range(N**2):
    priority_total[i][0]=-total_spin[i][0]
    priority_total[i][1]=-total_spin[i][1]
  return [[x[0],x[1]]for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum1, -sum2))
  return priority.astype(int)




#score: {'data2D.txt': -0.00011003086419753077}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_list = []
  for i in range(N**2):
    site_nbrs = [(i // N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum(h[site_nbr][i % N] for site_nbr in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priority_list.append([total_spin, -total_spin])
    else:
      priority_list.append([-total_spin, total_spin])
      
    for j in [0, 1]:
      site_nbr = (site_nbrs[j-1] + ((j+1)%2 - 1)) % N
      if h[site_nbr][i % N] > 0:
        priority_list[i][0] += J[j*N**2:(j+1)*N**2].sum() - 1
        priority_list[i][1] -= J[j*N**2:(j+1)*N**2].sum() + 1
      else:
        priority_list[i][0] -= J[j*N**2:(j+1)*N**2].sum() + 1
        priority_list[i][1] += J[j*N**2:(j+1)*N**2].sum() - 1
        
  return priority_list




#score: {'data2D.txt': 0.00784151234567901}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_priority = [[float('-inf'), float('-inf')] for _ in range(N**2)]
  for i in range(N**2):
    site_nbrs = [(i // N + ((k-1)%2 - 1)) % N for k in [1,3]]
    total_spin = sum(h[site_nbr][i % N] for site_nbr in site_nbrs)
    
    if h[i//N][i%N] > 0:
      priority_total = total_spin
    else:
      priority_total = -total_spin
    
    for j in [0, 1]:
      if j == 0: site_nbr = (site_nbrs[0] - 1) % N
      elif j == 1: site_nbr = (site_nbrs[1] + 1) % N
      
      if h[site_nbr][i % N] > 0:
        priority_total += J[j*N**2:(j+1)*N**2].sum() - 1
      else:
        priority_total -= J[j*N**2:(j+1)*N**2].sum() + 1
    
    if h[i//N][i%N] > 0:
      total_priority[i][0] = priority_total
      total_priority[i][1] = -priority_total
    else:
      total_priority[i][0] = -priority_total
      total_priority[i][1] = priority_total
  
  return [[x[0], x[1]] for x in total_priority]




#score: {'data2D.txt': -0.0017368827160493794}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  
  for i in range(N**2):
    site_nbrs = [(i // N + ((k-1)%2 - 1)) % N for k in [1,3]]
    
    total_spin = sum(h[site_nbr][i % N] for site_nbr in site_nbrs)
    spin = state[i//N][i%N]
    
    if spin > 0:
      priority_list = [total_spin + J[0*N**2:(0+1)*N**2].sum(), -1*(total_spin + J[1*N**2:(1+1)*N**2].sum())]
    else:
      priority_list = [-1*total_spin - J[0*N**2:(0+1)*N**2].sum(), total_spin + J[1*N**2:(1+1)*N**2].sum()]
    
    priorities.append(priority_list)
  
  return priorities




#score: {'data2D.txt': 0.0008489197530864106}
#island_id: 8
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priorities = []
  for i in range(N**2):
    total_spin = sum(h[(i//N + ((k-1)%2 - 1)) % N][i%N] for k in [1,3])
    if h[i//N][i%N] > 0:
      priorities.append([total_spin, -total_spin])
    else:
      priorities.append([-total_spin, total_spin])
    for j in range(2):
      site_nbr = (i // N + ((j-1)%2 - 1)) % N
      if h[site_nbr][i%N] > 0:
        if j == 0: priorities[i][0] += J[j*N**2:(j+1)*N**2].sum() - 1
        else: priorities[i][1] -= J[j*N**2:(j+1)*N**2].sum() + 1
      else:
        if j == 0: priorities[i][0] -= J[j*N**2:(j+1)*N**2].sum() + 1
        else: priorities[i][1] += J[j*N**2:(j+1)*N**2].sum() - 1
  return priorities




#score: {'data2D.txt': -0.0010643518518518515}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
        total_spin[i*N+j][1] += 1
  
  return total_spin.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.00044027777777777755}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      site_nbr = (i // N + ((i % N - 1) % N) - 1) % N
      total_spin[i][0] -= 1
      total_spin[i][1] += 1

  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i//N + ((i%N-1)%N - N//2)) % N
      total_spin[i][0] += total_spin[site*N+site][0]
      total_spin[i][1] -= total_spin[site*N+site][1]
    else:
      site = (i//N + ((i%N-1)%N - N//2)) % N
      total_spin[i][0] -= total_spin[site*N+site][1]
      total_spin[i][1] += total_spin[site*N+site][0]

  return np.array([list(t) for t in total_spin]).flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': -0.000868981481481482}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = np.zeros((N**2, 2))
  for k in range(4):
    for i in range(N):
      for j in range(N):
        site = (i + ((k-1)%2 - 1)) % N
        spin = -1 if h[i][j] > 0 else 1
        priority_total[i*N+j][spin==1] += total_spin[site][spin==1]
  
  return priority_total.flatten().reshape((N**2, 2), order='F')




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0,0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = -total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 6
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        spin = 1
      else:
        spin = -1
      
      total_spin[i*N+j][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
      
  for i in range(N**2):
    priority_total[i][0] = -total_spin[i][0]
    priority_total[i][1] = -total_spin[i][1]
  
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4],0)+h).flatten()
  sum_2 = (np.prod(J_new[1::4],0)+h).flatten()
  return(np.column_stack((sum_1,-sum_2)))




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 9
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0008893518518518512}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0.0, 0.0] for _ in range(N**2)]
  state = [[-1 if h[i][j]>0 else 1 for j in range(N)] for i in range(N)]
  site_weights = np.zeros((N, N))
  
  for i in range(N):
    for j in range(N):
      site_nbr1 = (i + ((j-1)%N - N//2)) % N
      site_nbr2 = (i + ((j+1)%N - N//2)) % N
      if h[i][j] > 0:
        site_weights[i][j] += 1
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr1*N+site_nbr1][0] -= 1
        total_spin[site_nbr2*N+site_nbr2][0] -= 1
      else:
        site_weights[i][j] -= 1
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr1*N+site_nbr1][0] += 1
        total_spin[site_nbr2*N+site_nbr2][0] += 1
      
      for k in range(3):
        site = (i + ((k-1)%2 - 1)) % N
        total_spin[i*N+j][0] -= h[site][j]
        if h[i][j]>0:
          total_spin[i*N+j][1] -= 1
        else:
          total_spin[i*N+j][1] += 1
        
      state[site][0] += state[site][1]
      
  return np.array([list(t) for t in total_spin]).flatten().reshape((N**2, 2), order='F')




