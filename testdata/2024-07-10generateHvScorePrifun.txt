#score: {'data2D.txt': -0.27106867283950575}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - N//2) % N
    if h[i // N][site_nbr] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - N//2) % N
    if h[i // N][site_nbr] > 0:
      total_spin = 0
      site_nbr = (i // N + ((i % N)-1)%N - N//2) % N
      for k in range(3):
        site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N
        total_spin += h[i // N][site_nbr_k]
      priority_total[i][0] -= total_spin * 0.5
    else:
      total_spin = 0
      site_nbr = (i // N + ((i % N)-1)%N - N//2) % N
      for k in range(3):
        site_nbr_k = (site_nbr + ((k-1)%2 - 1)) % N
        total_spin += h[i // N][site_nbr_k]
      priority_total[i][0] -= total_spin * 0.5
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::2], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::2], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1

  for i in range(N**2):
    for k in range(3):
      site_nbr = (i + ((k-1)%2 - 1)) % N
      total_spin = state[site_nbr][i%N]
      if h[site_nbr][i%N] > 0:
        priority_total[i][0] += total_spin
        priority_total[i][1] -= 1
      else:
        priority_total[i][0] -= total_spin

  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.009791203703703705}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - N//2) % N
    if h[i // N][site_nbr] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - N//2) % N
    if h[i // N][site_nbr] > 0:
      for j in range(3):
        site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
        total_spin[i][0] -= h[i // N][site_nbr_j]
    else:
      for j in range(3):
        site_nbr_j = (site_nbr + ((j-1)%2 - 1)) % N
        total_spin[i][0] += h[i // N][site_nbr_j]
  return total_spin




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbr = [0]*N
  total_spin = [[float('inf'),float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr[j] = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr[j] = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.010204166666666667}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for j in range(N):
    if h[0][j] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -1*total_spin[j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbr = [0]*N
  total_spin = [[float('inf'),float('-inf')] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr[j] = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr[j] = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += 1
      total_spin[i*N+j][1] -= 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]

  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        state[site][0] += J * sum([state[(site+i)%N][j] for i in range(N)])
        total_spin[i*N+j][0] += 1
      else:
        state[site][1] += J * sum([state[(site+i)%N][j] for i in range(N)])
        total_spin[i*N+j][1] -= 1

  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += 1 if h[i][j] > 0 else -1
      total_spin[i*N+j][1] -= 1 if h[i][j] > 0 else 1
  priority = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  return priority




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  sites = list(itertools.product(range(N), range(N)))
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.27106867283950575}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbr = lambda i, j: (i + ((j-1)%2 - 1)) % N
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(3):
    site_nbr = lambda i, j: (i + ((k-1)%2 - 1)) % N
    for i in range(N):
      for j in range(N):
        total_spin[i*N+j][0] += h[site_nbr(i,j)][j]
        if h[i][j] > 0:
          site = site_nbr(i, j)
          total_spin[i*N+j][1] -= 1
        else:
          site = site_nbr(i, j)
          total_spin[i*N+j][1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i // N + ((i % N-1)%2 - 1)) % N
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      site = (i // N + ((i % N-1)%2 - 1)) % N
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  for i in range(N**2):
    site_nbr = (i // N + ((i % N)-1)%N - N//2) % N
    total_spin = [[-1 if h[k][site_nbr] > 0 else 1 for k in range(N)]]
    for j in range(N):
      total_spin[0][j] += h[i//N][j]
    if h[i//N][site_nbr] > 0:
      priority_total[i][0] += sum(total_spin[0])
      priority_total[i][1] -= len([x for x in total_spin[0] if x == -1])
    else:
      priority_total[i][0] -= sum(total_spin[0])
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i, j: (i + ((j-1)%N - N//2)) % N
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(3):
    site_nbr = lambda i, j: (i + ((k-1)%2 - 1)) % N
    for i in range(N):
      for j in range(N):
        total_spin[i*N+j][0] += h[site_nbr(i, j)][j]
        total_spin[i*N+j][1] -= 1 if h[i][j] > 0 else 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': 0.34290787037036935}
#island_id: 0
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbr = []
  total_spin = np.zeros((N,N))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin[i][j] += h[site_nbr][j]
      else:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin[i][j] -= h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N**2):
    if state[int(i/N)][int(i%N)] == 1:
      priority_total[i][0] += total_spin[int(i/N)][int(i%N)]
      priority_total[i][1] -= 1
    else:
      priority_total[i][0] -= total_spin[int(i/N)][int(i%N)]
      priority_total[i][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.10562854938271615}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i, j: (i + ((j-1)%N - N//2)) % N
  
  # Initialize state with random spins
  state = [[-1 if np.random.rand() < 0.5 else 1 for _ in range(N)] for _ in range(N)]
  
  priority_total = np.zeros((N**2, 2))
  
  for i in range(N):
    for j in range(N):
      site = site_nbr(i, j)
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  
  for i in range(N**2):
    site_nbr = lambda k: (i // N + ((k-1)%N - N//2)) % N
    total_spin = [h[site_nbr(k)][(i%N)] 
           for k in range(N)]
    if sum(total_spin) > 0:
      priority_total[i][0] += sum(total_spin)
      priority_total[i][1] -= len([x for x in total_spin if x == -1])
    else:
      priority_total[i][0] -= sum(total_spin)
  
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority_total = [[[float('-inf') for _ in range(2)] for j in range(N)] for i in range(N)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i][j][0] += 1
        priority_total[i][j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i][j][0] -= 1
  return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [priority_total[i][j]]]




#score: {'data2D.txt': -0.0004538580246913577}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [total_spin[i*N+j]]]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3340748456790114}
#island_id: 3
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = lambda i, j: (i + ((j-1)%N - N//2)) % N
  total_spin = np.zeros((N*N, 2), dtype=int)
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr_val = site_nbr(i, j)
        total_spin[i*N+j][0] += 1
        total_spin[site_nbr_val*N+site_nbr_val][1] -= 1
      else:
        site_nbr_val = site_nbr(i, j)
        total_spin[i*N+j][0] -= 1
        total_spin[site_nbr_val*N+site_nbr_val][1] += 1
  return [[x[0], x[1]] for x in total_spin]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbr = lambda i, j: (i + ((j-1)%2 - 1)) % N
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(3):
    site_nbr = lambda i, j: (i + ((k-1)%2 - 1)) % N
    for i in range(N):
      for j in range(N):
        total_spin[i*N+j][0] += h[site_nbr(i,j)][j]
        if h[i][j] > 0:
          site = site_nbr(i, j)
          total_spin[i*N+j][1] -= 1
        else:
          site = site_nbr(i, j)
          total_spin[i*N+j][1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i // N + ((i % N-1)%2 - 1)) % N
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      site = (i // N + ((i % N-1)%2 - 1)) % N
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbr = lambda i, j: (i + ((j-1)%N - 1)) % N
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = site_nbr(i, j)
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = lambda k: (i + ((k-1)%2 - 1)) % N
      for k in range(3):
        site = site_nbr(k)
        priority_total[i*N+j][0] += h[site][j]
        if h[i][j] > 0:
          priority_total[i*N+j][1] -= 1
        else:
          priority_total[i*N+j][1] += 1
  
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  site_nbr = lambda i, j: (i + ((j-1)%2 - 1)) % N
  for i in range(N):
    for j in range(N):
      total_spin = [0, 0]
      for k in range(3):
        site_nbr_k = site_nbr(i, j)
        total_spin[0] += h[site_nbr_k][j]
        if h[i][j] > 0:
          priority_total[j + i*N][0] += 1
          priority_total[j + i*N][1] -= 1
        else:
          priority_total[j + i*N][0] -= 1
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        total_spin[0] += 1
        total_spin[1] -= 1
      else:
        total_spin[0] -= 1
      priority_total[j + i*N] = sorted(total_spin)[::-1]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 2
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [0 for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 3
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  site_nbr = [[(i + ((j-1)%N - 1)) % N for j in range(N)] for i in range(N)]
  
  for i in range(N):
    for j in range(N):
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site_nbr[i][j]][spin==1] += 1
      
  priority_total = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      total_spin[i*N+j][0] = total_spin[site_nbr][0]
      if h[i][j] > 0:
        priority_total[i*N+j][0] = total_spin[i*N+j][0]
      else:
        priority_total[i*N+j][1] = -1*total_spin[i*N+j][0]
        
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) - h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = np.zeros((N,N))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        state[site_nbr][j] += 1
        total_spin[i][j] -= 1
      else:
        state[site_nbr][j] -= 1
        total_spin[i][j] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += state[site][j]
        priority_total[i*N+j][1] -= state[site][j]
      else:
        priority_total[i*N+j][0] -= state[site][j]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [0 for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      total_spin[i*N+j] += h[site_nbr][j]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        site = (i + ((j-1)%N - N//2)) % N
        priority_total[i*N+j][0] -= 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 2
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  site_nbr = lambda i, j: (i + ((j-1)%N - N//2)) % N
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[i*N+j][0] += 1
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= 1
  total_spin = [[0, 0] for _ in range(N**2)]
  site_nbr = lambda i, j: (i + ((j-1)%N - N//2)) % N
  for k in range(3):
    site_nbr = lambda i, j: (i + ((k-1)%2 - 1)) % N
    for i in range(N):
      for j in range(N):
        total_spin[i*N+j][0] += h[site_nbr(i, j)][j]
        total_spin[i*N+j][1] -= 1 if h[i][j] > 0 else 1
  priority = [[x[0], x[1]] for x in priority_total]
  return [[x[0], x[1]] for x in priority]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = np.zeros((N,N))
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = np.zeros((N**2, 2))
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[i*N+j][0] += total_spin[site_nbr][0]
        priority_total[i*N+j][1] -= 1
      else:
        priority_total[i*N+j][0] -= total_spin[site_nbr][0]
        priority_total[i*N+j][1] += 1
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.0024933641975308633}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priorities = []
  for site in [(i + ((j-1)%2 - 1)) % N for i in range(N) for j in range(N)]:
    if h[site//N][site%N] > 0:
      priorities.append([1, -1])
    else:
      priorities.append([-1, 1])
  return np.array(priorities)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      total_spin[i*N+j][1] -= 1 if h[i][j] > 0 else 1
  return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [total_spin[i*N+j]]]




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_interactions = []
  for i in range(N**2):
    total_spin = [0, 0]
    site = (i + ((i//N - N//2) % N)) % N
    if h[i//N][i%N] > 0:
      total_spin[1] -= 1
    else:
      total_spin[0] += 1
    for j in range(N):
      if (j-1)%2 == site:
        if h[i//N][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[0] += 1
    site_interactions.append(total_spin)
  return np.array(site_interactions)




#score: {'data2D.txt': -0.0026165123456790124}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[j][0] = state[site_nbr][0]
      else:
        priority_total[j][1] = -1 * state[site_nbr][0]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_nbr = (i // N + ((i % N-1)%N - 1)) % N
      priority_total[i][0] += state[site_nbr][0]
      priority_total[i][1] -= state[site_nbr][0]
    else:
      site_nbr = (i // N + ((i % N-1)%N - 1)) % N
      priority_total[i][0] -= state[site_nbr][0]
  return priority_total




#score: {'data2D.txt': -0.3431871913580236}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - N//2)) % N
      if h[i][j] > 0:
        total_spin[i*N+j][0] += 1
        total_spin[i*N+j][1] -= 1
      else:
        total_spin[i*N+j][0] -= 1
  return np.array(total_spin)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += 1
      total_spin[i][1] -= 1
    else:
      total_spin[i][0] -= 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    if total_spin[i][0] > total_spin[i][1]:
      priority_total[i][0] += 1
    elif total_spin[i][0] < total_spin[i][1]:
      priority_total[i][1] -= 1
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      priority_total[i*N+j][spin] += total_spin[site_nbr][spin]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbr = lambda i, j: (i + ((j-1)%N - 1)) % N
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = site_nbr(i, j)
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -1*total_spin[j][0]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbr = lambda i, j: (i + ((j-1)%2 - 1)) % N
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = site_nbr(i, j)
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[j][0]
      else:
        priority_total[j][1] = -1*total_spin[j][0]
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 4
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_interactions = []
  total_spin = [0, 0]
  for i in range(N**2):
    site_nbr = (i + ((i//N - N//2) % N)) % N
    if h[i//N][site_nbr] > 0:
      total_spin[1] -= 1
    else:
      total_spin[0] += 1
    for j in range(N):
      if site_nbr == (j-1)%N + ((j-1)//2 - N//2) % N:
        if h[i//N][j] > 0:
          total_spin[1] -= 1
        else:
          total_spin[0] += 1
    site_interactions.append(total_spin)
  return np.array(site_interactions)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    site_nbr = (i + ((N-1)%2 - 1)) % N
    if h[i][0] > 0:
      priority_total[0][0] += state[site_nbr][0]
      priority_total[0][1] -= state[site_nbr][0]
    else:
      priority_total[0][0] -= state[site_nbr][0]
  
  for i in range(N):
    for j in range(1, N):
      site = (i + ((j-1)%2 - 1)) % N
      if h[i][j] > 0:
        priority_total[j][0] += state[site][0]
        priority_total[j][1] -= state[site][0]
      else:
        priority_total[j][0] -= state[site][0]
  
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
      total_spin = state[site_nbr][0]
      priority_total[i][0] += total_spin
      priority_total[i][1] -= total_spin
    else:
      site_nbr = (i // N + ((i % N-1)%2 - 1)) % N
      total_spin = -state[site_nbr][0]
      priority_total[i][0] -= total_spin
  
  return priority_total




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[0::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  priority = np.column_stack((sum_1, -sum_2))
  return(priority)




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  site_nbr = []
  total_spin = np.zeros((N,N))
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin[i][j] += h[site_nbr][j]
      else:
        site_nbr = (i + ((j-1)%2 - 1)) % N
        total_spin[i][j] -= h[site_nbr][j]
  priority_total = [[0,0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  for j in range(N):
    if h[i][j] > 0:
      priority_total[j][0] = total_spin[j][0]
    else:
      priority_total[j][1] = -total_spin[j][0]
  return [[x[0], x[1]] for x in priority_total]




#score: {'data2D.txt': -0.045793981481481526}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(2):
    site_nbr = lambda i, j: (i + ((k)%2 - 1)) % N
    for i in range(N):
      for j in range(N):
        state[site_nbr(i,j)][j] += state[i][j]
        total_spin[i*N+j][0] += h[site_nbr(i,j)][j]
        if h[i][j] > 0:
          site = site_nbr(i, j)
          total_spin[i*N+j][1] -= 1
        else:
          site = site_nbr(i, j)
          total_spin[i*N+j][1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site_nbr = lambda i, j: (i + ((i % N-1)%2 - 1)) % N
      priority_total[i][0] = total_spin[site_nbr(i//N,i%N)][0]
      priority_total[i][1] = -1 * total_spin[site_nbr(i//N,i%N)][1]
    else:
      site_nbr = lambda i, j: (i + ((i % N-1)%2 - 1)) % N
      priority_total[i][0] = -1 * total_spin[site_nbr(i//N,i%N)][0]
      priority_total[i][1] = total_spin[site_nbr(i//N,i%N)][1]
  return priority_total




#score: {'data2D.txt': -0.05113070987654325}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += state[site_nbr][0]
      total_spin[i][1] -= state[site_nbr][0]
    else:
      total_spin[i][0] -= state[site_nbr][0]
  priority_total = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    if h[i][N-1] > 0:
      priority_total[i*N+N-1][0] = total_spin[i*N+N-1][0]
    else:
      priority_total[i*N+N-1][1] = -total_spin[i*N+N-1][0]
  return total_spin




#score: {'data2D.txt': -0.0007257716049382712}
#island_id: 1
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - N//2)) % N
      total_spin[i*N+j][0] += h[site_nbr][j]
      total_spin[i*N+j][1] -= 1 if h[i][j] > 0 else 1
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site][spin==1] += 1
  return [[x[0], x[1]] for i in range(N) for j in range(N) for x in [total_spin[i*N+j]]]




#score: {'data2D.txt': -0.001041512345679012}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    if h[i//N][i%N] > 0:
      total_spin[i][0] += state[site_nbr][0]
      total_spin[i][1] -= state[site_nbr][0]
    else:
      total_spin[i][0] -= state[site_nbr][0]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[j][0] = total_spin[site_nbr][0]
      else:
        priority_total[j][1] = -1 * total_spin[site_nbr][0]
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  total_spin = [[0, 0] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site_nbr = (i + ((j-1)%N - 1)) % N
      spin = -1 if h[i][j] > 0 else 1
      total_spin[site_nbr][spin==1] += 1
  
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  
  for i in range(N):
    for j in range(N):
      site = (i + ((j-1)%N - 1)) % N
      if h[i][j] > 0:
        priority_total[site][0] += state[site][0]
        priority_total[site][1] -= state[site][0]
      else:
        priority_total[site][0] -= state[site][0]
  
  return priority_total




#score: {'data2D.txt': -0.001367438271604938}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site_nbr = lambda i, j: (i + ((j-1)%2 - 1)) % N
  total_spin = [[0, 0] for _ in range(N**2)]
  for k in range(3):
    site_nbr = lambda i, j: (i + ((k-1)%2 - 1)) % N
    for i in range(N):
      for j in range(N):
        total_spin[i*N+j][0] += h[site_nbr(i,j)][j]
        if h[i][j] > 0:
          site = site_nbr(i, j)
          total_spin[i*N+j][1] -= 1
        else:
          site = site_nbr(i, j)
          total_spin[i*N+j][1] += 1
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N**2):
    if h[i//N][i%N] > 0:
      site = (i // N + ((i % N-1)%2 - 1)) % N
      priority_total[i][0] += 1
      priority_total[i][1] -= 1
    else:
      site = (i // N + ((i % N-1)%2 - 1)) % N
      priority_total[i][0] -= 1
  return priority_total




#score: {'data2D.txt': -0.001127623456790123}
#island_id: 5
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  state = [[-1 if h[i][j] > 0 else 1 for j in range(N)] for i in range(N)]
  site = lambda i, j: (i + ((j-1)%N - 1)) % N
  total_spin = [[0, 0] for _ in range(N**2)]
  priority_total = [[float('-inf') for _ in range(2)] for _ in range(N**2)]
  for i in range(N):
    for j in range(N):
      if h[i][j] > 0:
        total_spin[j][0] += state[site(i, j)][0]
        priority_total[j][1] -= state[site(i, j)][0]
      else:
        total_spin[j][0] -= state[site(i, j)][0]
  for i in range(N**2):
    site_nbr = (i // N + ((i % N-1)%N - 1)) % N
    if h[i//N][i%N] > 0:
      priority_total[i][0] += total_spin[site_nbr][0]
      priority_total[i][1] -= total_spin[site_nbr][0]
    else:
      priority_total[i][0] -= total_spin[site_nbr][0]
  return total_spin




#score: {'data2D.txt': -0.3420791666666656}
#island_id: 0
#version_generated: 3
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  J_new = J.flatten()
  sum_1 = (np.prod(J_new[::4], 0) + h).flatten()
  sum_2 = (np.prod(J_new[1::4], 0) + h).flatten()
  return np.column_stack((sum_1, -sum_2))




#score: {'data2D.txt': -0.27106867283950575}
#island_id: None
#version_generated: None
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(N, h, J):
  priority = []
  for i in range(N):
    for j in range(N):
      total_spin = 0
      site = (i + ((j-1)%2 - 1)) % N
      total_spin += h[site][j]
      if h[i][j] > 0:
        priority.append((total_spin, 0))
      else:
        priority.append((total_spin, 1))
  return [[x[0], x[1]] for x in priority]




